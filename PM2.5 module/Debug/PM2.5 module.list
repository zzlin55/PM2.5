
PM2.5 module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005978  08005978  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005978  08005978  00015978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005980  08005980  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005984  08005984  00015984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000006c  080059f4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  080059f4  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013272  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000270f  00000000  00000000  0003330e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001240  00000000  00000000  00035a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001128  00000000  00000000  00036c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019001  00000000  00000000  00037d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e181  00000000  00000000  00050d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095993  00000000  00000000  0005ef0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f489d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d8  00000000  00000000  000f4918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800582c 	.word	0x0800582c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800582c 	.word	0x0800582c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <PMchecksum>:
#include "PMmodule.h"

uint8_t PMchecksum(uint8_t *buf,uint8_t buflen)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
	//uint8_t buflen = strlen(buf);
	uint8_t rxerror = 1;
 800059c:	2301      	movs	r3, #1
 800059e:	733b      	strb	r3, [r7, #12]
	uint16_t checksum = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	for (i=0;i<buflen;i++){
 80005a4:	2300      	movs	r3, #0
 80005a6:	737b      	strb	r3, [r7, #13]
 80005a8:	e00a      	b.n	80005c0 <PMchecksum+0x30>
		checksum = checksum+buf[i];
 80005aa:	7b7b      	ldrb	r3, [r7, #13]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	89fb      	ldrh	r3, [r7, #14]
 80005b6:	4413      	add	r3, r2
 80005b8:	81fb      	strh	r3, [r7, #14]
	for (i=0;i<buflen;i++){
 80005ba:	7b7b      	ldrb	r3, [r7, #13]
 80005bc:	3301      	adds	r3, #1
 80005be:	737b      	strb	r3, [r7, #13]
 80005c0:	7b7a      	ldrb	r2, [r7, #13]
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d3f0      	bcc.n	80005aa <PMchecksum+0x1a>
	}
	if (buflen ==31){
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	2b1f      	cmp	r3, #31
 80005cc:	d102      	bne.n	80005d4 <PMchecksum+0x44>
		checksum = checksum+0x42; //uncomment if buf does not add 0x42
 80005ce:	89fb      	ldrh	r3, [r7, #14]
 80005d0:	3342      	adds	r3, #66	; 0x42
 80005d2:	81fb      	strh	r3, [r7, #14]
	}
	if (checksum==((buf[buflen-2]<<8)+buf[buflen-1]))
 80005d4:	89fa      	ldrh	r2, [r7, #14]
 80005d6:	78fb      	ldrb	r3, [r7, #3]
 80005d8:	3b02      	subs	r3, #2
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	440b      	add	r3, r1
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	78f9      	ldrb	r1, [r7, #3]
 80005e4:	3901      	subs	r1, #1
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	4401      	add	r1, r0
 80005ea:	7809      	ldrb	r1, [r1, #0]
 80005ec:	440b      	add	r3, r1
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d103      	bne.n	80005fa <PMchecksum+0x6a>
	{
		rxerror = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	733b      	strb	r3, [r7, #12]
		return rxerror;
 80005f6:	7b3b      	ldrb	r3, [r7, #12]
 80005f8:	e003      	b.n	8000602 <PMchecksum+0x72>
	}
	else
	{
		printf("PM serial reading Checksum Error\r\n");
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <PMchecksum+0x7c>)
 80005fc:	f003 ffba 	bl	8004574 <puts>
		return rxerror;
 8000600:	7b3b      	ldrb	r3, [r7, #12]
	}
	return rxerror;
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	08005844 	.word	0x08005844

08000610 <transmitPM2_5>:
	return PM01Val;
}

//transmit PM Value to PC
uint16_t transmitPM2_5(uint8_t *thebuf)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	uint16_t PM2_5Val;
    PM2_5Val=((thebuf[6]<<8) + thebuf[7]);//count PM2.5 value of the air detector module
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3306      	adds	r3, #6
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	b29b      	uxth	r3, r3
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	b29a      	uxth	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3307      	adds	r3, #7
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b29b      	uxth	r3, r3
 800062c:	4413      	add	r3, r2
 800062e:	81fb      	strh	r3, [r7, #14]
	return PM2_5Val;
 8000630:	89fb      	ldrh	r3, [r7, #14]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800063e:	b5b0      	push	{r4, r5, r7, lr}
 8000640:	b08a      	sub	sp, #40	; 0x28
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
 800064a:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800064c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000650:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000654:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000658:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800065a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800065c:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800065e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000660:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	613b      	str	r3, [r7, #16]

	Lcd_mode_select(&lcd);
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f80e 	bl	8000694 <Lcd_mode_select>

	return lcd;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	461d      	mov	r5, r3
 800067c:	f107 0410 	add.w	r4, r7, #16
 8000680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000684:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000688:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	3728      	adds	r7, #40	; 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bdb0      	pop	{r4, r5, r7, pc}

08000694 <Lcd_mode_select>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_mode_select(Lcd_HandleTypeDef * lcd)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7d9b      	ldrb	r3, [r3, #22]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d10c      	bne.n	80006be <Lcd_mode_select+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80006a4:	2133      	movs	r1, #51	; 0x33
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 f87a 	bl	80007a0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80006ac:	2132      	movs	r1, #50	; 0x32
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 f876 	bl	80007a0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80006b4:	2128      	movs	r1, #40	; 0x28
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f872 	bl	80007a0 <lcd_write_command>
 80006bc:	e003      	b.n	80006c6 <Lcd_mode_select+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80006be:	2138      	movs	r1, #56	; 0x38
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f86d 	bl	80007a0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80006c6:	2101      	movs	r1, #1
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 f869 	bl	80007a0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80006ce:	210c      	movs	r1, #12
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 f865 	bl	80007a0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80006d6:	2106      	movs	r1, #6
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 f861 	bl	80007a0 <lcd_write_command>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <Lcd_int>:

/**
 * Write a number on the current position
 */
 void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <Lcd_int+0x2c>)
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fff0 	bl	80046e0 <siprintf>

	Lcd_string(lcd, buffer);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	4619      	mov	r1, r3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f806 	bl	8000718 <Lcd_string>
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	08005868 	.word	0x08005868

08000718 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000722:	2300      	movs	r3, #0
 8000724:	73fb      	strb	r3, [r7, #15]
 8000726:	e00a      	b.n	800073e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f862 	bl	80007fc <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	3301      	adds	r3, #1
 800073c:	73fb      	strb	r3, [r7, #15]
 800073e:	7bfc      	ldrb	r4, [r7, #15]
 8000740:	6838      	ldr	r0, [r7, #0]
 8000742:	f7ff fd4d 	bl	80001e0 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	429c      	cmp	r4, r3
 800074a:	d3ed      	bcc.n	8000728 <Lcd_string+0x10>
	}
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bd90      	pop	{r4, r7, pc}

08000754 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
 8000760:	4613      	mov	r3, r2
 8000762:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <Lcd_cursor+0x30>)
 8000768:	5cd2      	ldrb	r2, [r2, r3]
 800076a:	78bb      	ldrb	r3, [r7, #2]
 800076c:	4413      	add	r3, r2
 800076e:	b2db      	uxtb	r3, r3
 8000770:	3b80      	subs	r3, #128	; 0x80
 8000772:	b2db      	uxtb	r3, r3
 8000774:	4619      	mov	r1, r3
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 f812 	bl	80007a0 <lcd_write_command>
	#endif
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	080058bc 	.word	0x080058bc

08000788 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000790:	2101      	movs	r1, #1
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 f804 	bl	80007a0 <lcd_write_command>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6898      	ldr	r0, [r3, #8]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	899b      	ldrh	r3, [r3, #12]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	f001 ffaa 	bl	8002710 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	7d9b      	ldrb	r3, [r3, #22]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d111      	bne.n	80007e8 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	091b      	lsrs	r3, r3, #4
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2204      	movs	r2, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 f842 	bl	8000858 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2204      	movs	r2, #4
 80007de:	4619      	mov	r1, r3
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 f839 	bl	8000858 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80007e6:	e005      	b.n	80007f4 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2208      	movs	r2, #8
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 f832 	bl	8000858 <lcd_write>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6898      	ldr	r0, [r3, #8]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	899b      	ldrh	r3, [r3, #12]
 8000810:	2201      	movs	r2, #1
 8000812:	4619      	mov	r1, r3
 8000814:	f001 ff7c 	bl	8002710 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7d9b      	ldrb	r3, [r3, #22]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d111      	bne.n	8000844 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	091b      	lsrs	r3, r3, #4
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2204      	movs	r2, #4
 8000828:	4619      	mov	r1, r3
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f000 f814 	bl	8000858 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2204      	movs	r2, #4
 800083a:	4619      	mov	r1, r3
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f80b 	bl	8000858 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000842:	e005      	b.n	8000850 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	2208      	movs	r2, #8
 8000848:	4619      	mov	r1, r3
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f000 f804 	bl	8000858 <lcd_write>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	70fb      	strb	r3, [r7, #3]
 8000864:	4613      	mov	r3, r2
 8000866:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000868:	2300      	movs	r3, #0
 800086a:	73fb      	strb	r3, [r7, #15]
 800086c:	e019      	b.n	80008a2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	4413      	add	r3, r2
 8000878:	6818      	ldr	r0, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	685a      	ldr	r2, [r3, #4]
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	8819      	ldrh	r1, [r3, #0]
 8000886:	78fa      	ldrb	r2, [r7, #3]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	fa42 f303 	asr.w	r3, r2, r3
 800088e:	b2db      	uxtb	r3, r3
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	f001 ff3a 	bl	8002710 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	3301      	adds	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	7bfa      	ldrb	r2, [r7, #15]
 80008a4:	78bb      	ldrb	r3, [r7, #2]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d3e1      	bcc.n	800086e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6918      	ldr	r0, [r3, #16]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	8a9b      	ldrh	r3, [r3, #20]
 80008b2:	2201      	movs	r2, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	f001 ff2b 	bl	8002710 <HAL_GPIO_WritePin>
	DELAY(1);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 ff36 	bl	800172c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6918      	ldr	r0, [r3, #16]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	8a9b      	ldrh	r3, [r3, #20]
 80008c8:	2200      	movs	r2, #0
 80008ca:	4619      	mov	r1, r3
 80008cc:	f001 ff20 	bl	8002710 <HAL_GPIO_WritePin>
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	b098      	sub	sp, #96	; 0x60
 80008dc:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008de:	f000 fee3 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e2:	f000 f8a7 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e6:	f000 fa45 	bl	8000d74 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008ea:	f000 f903 	bl	8000af4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80008ee:	f000 f953 	bl	8000b98 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80008f2:	f000 f9b5 	bl	8000c60 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80008f6:	f000 f9dd 	bl	8000cb4 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 80008fa:	f000 f97b 	bl	8000bf4 <MX_SPI3_Init>
  MX_DMA_Init();
 80008fe:	f000 fa03 	bl	8000d08 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000902:	4841      	ldr	r0, [pc, #260]	; (8000a08 <main+0x130>)
 8000904:	f000 fae8 	bl	8000ed8 <RetargetInit>
  Lcd_HandleTypeDef lcd;
  Lcd_PortType ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
 8000908:	4b40      	ldr	r3, [pc, #256]	; (8000a0c <main+0x134>)
 800090a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800090e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8000914:	4a3e      	ldr	r2, [pc, #248]	; (8000a10 <main+0x138>)
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091e:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2140      	movs	r1, #64	; 0x40
 8000926:	483b      	ldr	r0, [pc, #236]	; (8000a14 <main+0x13c>)
 8000928:	f001 fef2 	bl	8002710 <HAL_GPIO_WritePin>
  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 800092c:	4638      	mov	r0, r7
 800092e:	f107 021c 	add.w	r2, r7, #28
 8000932:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000936:	2300      	movs	r3, #0
 8000938:	9303      	str	r3, [sp, #12]
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	9302      	str	r3, [sp, #8]
 800093e:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <main+0x140>)
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <main+0x144>)
 800094a:	f7ff fe78 	bl	800063e <Lcd_create>
 800094e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000952:	463d      	mov	r5, r7
 8000954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000958:	e895 0003 	ldmia.w	r5, {r0, r1}
 800095c:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_string(&lcd, "Initialising");
 8000960:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000964:	492e      	ldr	r1, [pc, #184]	; (8000a20 <main+0x148>)
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fed6 	bl	8000718 <Lcd_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	uint16_t PM2_5 = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	if(HAL_UART_Receive_IT(&huart6, pmflag, 32)==HAL_OK){
 8000972:	2220      	movs	r2, #32
 8000974:	492b      	ldr	r1, [pc, #172]	; (8000a24 <main+0x14c>)
 8000976:	482c      	ldr	r0, [pc, #176]	; (8000a28 <main+0x150>)
 8000978:	f003 f870 	bl	8003a5c <HAL_UART_Receive_IT>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1f4      	bne.n	800096c <main+0x94>
	  //HAL_UART_Transmit_IT(&huart2, pmflag, 31);
	  if (pmflag[0]==0x42){
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <main+0x14c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b42      	cmp	r3, #66	; 0x42
 8000988:	d135      	bne.n	80009f6 <main+0x11e>
		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800098a:	2120      	movs	r1, #32
 800098c:	4823      	ldr	r0, [pc, #140]	; (8000a1c <main+0x144>)
 800098e:	f001 fed8 	bl	8002742 <HAL_GPIO_TogglePin>
		  if(PMchecksum(pmflag,32)==1){
 8000992:	2120      	movs	r1, #32
 8000994:	4823      	ldr	r0, [pc, #140]	; (8000a24 <main+0x14c>)
 8000996:	f7ff fdfb 	bl	8000590 <PMchecksum>
			  //printf("checksum error\r\n");
		  }
		  PM2_5 = transmitPM2_5(pmflag);
 800099a:	4822      	ldr	r0, [pc, #136]	; (8000a24 <main+0x14c>)
 800099c:	f7ff fe38 	bl	8000610 <transmitPM2_5>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		  printf("The Current PM2.5 is: %d\r\n",PM2_5);
 80009a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80009aa:	4619      	mov	r1, r3
 80009ac:	481f      	ldr	r0, [pc, #124]	; (8000a2c <main+0x154>)
 80009ae:	f003 fd6d 	bl	800448c <iprintf>
		  Lcd_clear(&lcd);
 80009b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fee6 	bl	8000788 <Lcd_clear>
		  //HAL_Delay(20);
		  //Lcd_cursor(&lcd,1,0);
		  //Lcd_string(&lcd, "PM2.5 Monitoring..");
		  Lcd_cursor(&lcd,0,0);
 80009bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fec5 	bl	8000754 <Lcd_cursor>
		  Lcd_string(&lcd, "PM2.5 is:");
 80009ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009ce:	4918      	ldr	r1, [pc, #96]	; (8000a30 <main+0x158>)
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fea1 	bl	8000718 <Lcd_string>
		  Lcd_cursor(&lcd,0,10);
 80009d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009da:	220a      	movs	r2, #10
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff feb8 	bl	8000754 <Lcd_cursor>
		  Lcd_int(&lcd,PM2_5);
 80009e4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80009e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fe7a 	bl	80006e8 <Lcd_int>
 80009f4:	e002      	b.n	80009fc <main+0x124>
	  }
	  else
	  {
		  HAL_Delay(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 fe98 	bl	800172c <HAL_Delay>
	  }
	  HAL_Delay(1000);
 80009fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a00:	f000 fe94 	bl	800172c <HAL_Delay>
  {
 8000a04:	e7b2      	b.n	800096c <main+0x94>
 8000a06:	bf00      	nop
 8000a08:	200002a8 	.word	0x200002a8
 8000a0c:	080058a4 	.word	0x080058a4
 8000a10:	080058b4 	.word	0x080058b4
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	0800586c 	.word	0x0800586c
 8000a24:	20000248 	.word	0x20000248
 8000a28:	20000268 	.word	0x20000268
 8000a2c:	0800587c 	.word	0x0800587c
 8000a30:	08005898 	.word	0x08005898

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b094      	sub	sp, #80	; 0x50
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	2230      	movs	r2, #48	; 0x30
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 fd1a 	bl	800447c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <SystemClock_Config+0xb8>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a22      	ldr	r2, [pc, #136]	; (8000aec <SystemClock_Config+0xb8>)
 8000a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b20      	ldr	r3, [pc, #128]	; (8000aec <SystemClock_Config+0xb8>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <SystemClock_Config+0xbc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <SystemClock_Config+0xbc>)
 8000a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <SystemClock_Config+0xbc>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 0320 	add.w	r3, r7, #32
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 ff8d 	bl	80029c8 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ab4:	f000 fa08 	bl	8000ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	230f      	movs	r3, #15
 8000aba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 f9ba 	bl	8002e4c <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ade:	f000 f9f3 	bl	8000ec8 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3750      	adds	r7, #80	; 0x50
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40007000 	.word	0x40007000

08000af4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	463b      	mov	r3, r7
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b08:	4a21      	ldr	r2, [pc, #132]	; (8000b90 <MX_ADC1_Init+0x9c>)
 8000b0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b12:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b34:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <MX_ADC1_Init+0xa0>)
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b52:	480e      	ldr	r0, [pc, #56]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b54:	f000 fe0c 	bl	8001770 <HAL_ADC_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b5e:	f000 f9b3 	bl	8000ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4619      	mov	r1, r3
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <MX_ADC1_Init+0x98>)
 8000b74:	f000 fe40 	bl	80017f8 <HAL_ADC_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b7e:	f000 f9a3 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001a0 	.word	0x200001a0
 8000b90:	40012000 	.word	0x40012000
 8000b94:	0f000001 	.word	0x0f000001

08000b98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000b9e:	4a13      	ldr	r2, [pc, #76]	; (8000bec <MX_I2C1_Init+0x54>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_I2C1_Init+0x58>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bd6:	f001 fdcf 	bl	8002778 <HAL_I2C_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be0:	f000 f972 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000f4 	.word	0x200000f4
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	000186a0 	.word	0x000186a0

08000bf4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_SPI3_Init+0x64>)
 8000bfa:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_SPI3_Init+0x64>)
 8000c00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_SPI3_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_SPI3_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_SPI3_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_SPI3_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_SPI3_Init+0x64>)
 8000c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c24:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_SPI3_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_SPI3_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_SPI3_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_SPI3_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_SPI3_Init+0x64>)
 8000c40:	220a      	movs	r2, #10
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_SPI3_Init+0x64>)
 8000c46:	f002 fafb 	bl	8003240 <HAL_SPI_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000c50:	f000 f93a 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000148 	.word	0x20000148
 8000c5c:	40003c00 	.word	0x40003c00

08000c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <MX_USART2_UART_Init+0x50>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c98:	f002 fd54 	bl	8003744 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ca2:	f000 f911 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200002a8 	.word	0x200002a8
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <MX_USART6_UART_Init+0x50>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cc4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_USART6_UART_Init+0x4c>)
 8000cec:	f002 fd2a 	bl	8003744 <HAL_UART_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000cf6:	f000 f8e7 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000268 	.word	0x20000268
 8000d04:	40011400 	.word	0x40011400

08000d08 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_DMA_Init+0x68>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <MX_DMA_Init+0x68>)
 8000d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_DMA_Init+0x68>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <MX_DMA_Init+0x68>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <MX_DMA_Init+0x68>)
 8000d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <MX_DMA_Init+0x68>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2011      	movs	r0, #17
 8000d4c:	f001 f82a 	bl	8001da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d50:	2011      	movs	r0, #17
 8000d52:	f001 f843 	bl	8001ddc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2039      	movs	r0, #57	; 0x39
 8000d5c:	f001 f822 	bl	8001da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d60:	2039      	movs	r0, #57	; 0x39
 8000d62:	f001 f83b 	bl	8001ddc <HAL_NVIC_EnableIRQ>

}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b41      	ldr	r3, [pc, #260]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a40      	ldr	r2, [pc, #256]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a39      	ldr	r2, [pc, #228]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b37      	ldr	r3, [pc, #220]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a32      	ldr	r2, [pc, #200]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a2b      	ldr	r2, [pc, #172]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|D7_LCD_Pin|D8_LCD_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000e00:	4825      	ldr	r0, [pc, #148]	; (8000e98 <MX_GPIO_Init+0x124>)
 8000e02:	f001 fc85 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|LED_Green_Pin|LED_Yellow_Pin|LED_Red_Pin 
 8000e06:	2200      	movs	r2, #0
 8000e08:	f24e 4170 	movw	r1, #58480	; 0xe470
 8000e0c:	4823      	ldr	r0, [pc, #140]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000e0e:	f001 fc7f 	bl	8002710 <HAL_GPIO_WritePin>
                          |D5_LCD_Pin|D4_LCD_Pin|D10_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_LCD_GPIO_Port, D9_LCD_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	4822      	ldr	r0, [pc, #136]	; (8000ea0 <MX_GPIO_Init+0x12c>)
 8000e18:	f001 fc7a 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A0_LCD_Pin */
  GPIO_InitStruct.Pin = A0_LCD_Pin;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e20:	2303      	movs	r3, #3
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_LCD_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481a      	ldr	r0, [pc, #104]	; (8000e98 <MX_GPIO_Init+0x124>)
 8000e30:	f001 faec 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 D7_LCD_Pin D8_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|D7_LCD_Pin|D8_LCD_Pin;
 8000e34:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4812      	ldr	r0, [pc, #72]	; (8000e98 <MX_GPIO_Init+0x124>)
 8000e4e:	f001 fadd 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin LED_Green_Pin LED_Yellow_Pin LED_Red_Pin 
                           D5_LCD_Pin D4_LCD_Pin D10_LCD_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|LED_Green_Pin|LED_Yellow_Pin|LED_Red_Pin 
 8000e52:	f24e 4370 	movw	r3, #58480	; 0xe470
 8000e56:	617b      	str	r3, [r7, #20]
                          |D5_LCD_Pin|D4_LCD_Pin|D10_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000e6c:	f001 face 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_LCD_Pin */
  GPIO_InitStruct.Pin = D9_LCD_Pin;
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D9_LCD_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <MX_GPIO_Init+0x12c>)
 8000e88:	f001 fac0 	bl	800240c <HAL_GPIO_Init>

}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40020800 	.word	0x40020800

08000ea4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eb6:	f000 fc19 	bl	80016ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40000400 	.word	0x40000400

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <RetargetInit+0x28>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <RetargetInit+0x2c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6898      	ldr	r0, [r3, #8]
 8000eec:	2300      	movs	r3, #0
 8000eee:	2202      	movs	r2, #2
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	f003 fb47 	bl	8004584 <setvbuf>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200002e8 	.word	0x200002e8
 8000f04:	20000008 	.word	0x20000008

08000f08 <_isatty>:

int _isatty(int fd) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db04      	blt.n	8000f20 <_isatty+0x18>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	dc01      	bgt.n	8000f20 <_isatty+0x18>
    return 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e005      	b.n	8000f2c <_isatty+0x24>

  errno = EBADF;
 8000f20:	f003 fa82 	bl	8004428 <__errno>
 8000f24:	4602      	mov	r2, r0
 8000f26:	2309      	movs	r3, #9
 8000f28:	6013      	str	r3, [r2, #0]
  return 0;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_write>:

int _write(int fd, char* ptr, int len) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d002      	beq.n	8000f4c <_write+0x18>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d111      	bne.n	8000f70 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <_write+0x54>)
 8000f4e:	6818      	ldr	r0, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	f002 fc40 	bl	80037de <HAL_UART_Transmit>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <_write+0x38>
      return len;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	e008      	b.n	8000f7e <_write+0x4a>
    else
      return EIO;
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	e006      	b.n	8000f7e <_write+0x4a>
  }
  errno = EBADF;
 8000f70:	f003 fa5a 	bl	8004428 <__errno>
 8000f74:	4602      	mov	r2, r0
 8000f76:	2309      	movs	r3, #9
 8000f78:	6013      	str	r3, [r2, #0]
  return -1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200002e8 	.word	0x200002e8

08000f8c <_close>:

int _close(int fd) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db04      	blt.n	8000fa4 <_close+0x18>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	dc01      	bgt.n	8000fa4 <_close+0x18>
    return 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e006      	b.n	8000fb2 <_close+0x26>

  errno = EBADF;
 8000fa4:	f003 fa40 	bl	8004428 <__errno>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	2309      	movs	r3, #9
 8000fac:	6013      	str	r3, [r2, #0]
  return -1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000fc6:	f003 fa2f 	bl	8004428 <__errno>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	2309      	movs	r3, #9
 8000fce:	6013      	str	r3, [r2, #0]
  return -1;
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_read>:

int _read(int fd, char* ptr, int len) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d110      	bne.n	8001010 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <_read+0x4c>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	f002 fc89 	bl	8003910 <HAL_UART_Receive>
 8000ffe:	4603      	mov	r3, r0
 8001000:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <_read+0x30>
      return 1;
 8001008:	2301      	movs	r3, #1
 800100a:	e008      	b.n	800101e <_read+0x42>
    else
      return EIO;
 800100c:	2305      	movs	r3, #5
 800100e:	e006      	b.n	800101e <_read+0x42>
  }
  errno = EBADF;
 8001010:	f003 fa0a 	bl	8004428 <__errno>
 8001014:	4602      	mov	r2, r0
 8001016:	2309      	movs	r3, #9
 8001018:	6013      	str	r3, [r2, #0]
  return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200002e8 	.word	0x200002e8

0800102c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db08      	blt.n	800104e <_fstat+0x22>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b02      	cmp	r3, #2
 8001040:	dc05      	bgt.n	800104e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001048:	605a      	str	r2, [r3, #4]
    return 0;
 800104a:	2300      	movs	r3, #0
 800104c:	e005      	b.n	800105a <_fstat+0x2e>
  }

  errno = EBADF;
 800104e:	f003 f9eb 	bl	8004428 <__errno>
 8001052:	4602      	mov	r2, r0
 8001054:	2309      	movs	r3, #9
 8001056:	6013      	str	r3, [r2, #0]
  return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <HAL_MspInit+0x4c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <HAL_MspInit+0x4c>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <HAL_MspInit+0x4c>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800

080010b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_ADC_MspInit+0x7c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d127      	bne.n	8001126 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_ADC_MspInit+0x80>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a15      	ldr	r2, [pc, #84]	; (8001134 <HAL_ADC_MspInit+0x80>)
 80010e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_ADC_MspInit+0x80>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_ADC_MspInit+0x80>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_ADC_MspInit+0x80>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_ADC_MspInit+0x80>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = A0_LCD_Pin;
 800110e:	2301      	movs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001112:	2303      	movs	r3, #3
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A0_LCD_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <HAL_ADC_MspInit+0x84>)
 8001122:	f001 f973 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40012000 	.word	0x40012000
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000

0800113c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_I2C_MspInit+0x84>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d12c      	bne.n	80011b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_I2C_MspInit+0x88>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <HAL_I2C_MspInit+0x88>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_I2C_MspInit+0x88>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = RTC_I2C_SCL_Pin|RTC_I2C_SDA_Pin;
 800117a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001180:	2312      	movs	r3, #18
 8001182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001184:	2301      	movs	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800118c:	2304      	movs	r3, #4
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <HAL_I2C_MspInit+0x8c>)
 8001198:	f001 f938 	bl	800240c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_I2C_MspInit+0x88>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_I2C_MspInit+0x88>)
 80011a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_I2C_MspInit+0x88>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40005400 	.word	0x40005400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020400 	.word	0x40020400

080011cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a19      	ldr	r2, [pc, #100]	; (8001250 <HAL_SPI_MspInit+0x84>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d12c      	bne.n	8001248 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_SPI_MspInit+0x88>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a17      	ldr	r2, [pc, #92]	; (8001254 <HAL_SPI_MspInit+0x88>)
 80011f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_SPI_MspInit+0x88>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_SPI_MspInit+0x88>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <HAL_SPI_MspInit+0x88>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_SPI_MspInit+0x88>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001226:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001238:	2306      	movs	r3, #6
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_SPI_MspInit+0x8c>)
 8001244:	f001 f8e2 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40003c00 	.word	0x40003c00
 8001254:	40023800 	.word	0x40023800
 8001258:	40020800 	.word	0x40020800

0800125c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a79      	ldr	r2, [pc, #484]	; (8001460 <HAL_UART_MspInit+0x204>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d163      	bne.n	8001346 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	4b78      	ldr	r3, [pc, #480]	; (8001464 <HAL_UART_MspInit+0x208>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a77      	ldr	r2, [pc, #476]	; (8001464 <HAL_UART_MspInit+0x208>)
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b75      	ldr	r3, [pc, #468]	; (8001464 <HAL_UART_MspInit+0x208>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	4b71      	ldr	r3, [pc, #452]	; (8001464 <HAL_UART_MspInit+0x208>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a70      	ldr	r2, [pc, #448]	; (8001464 <HAL_UART_MspInit+0x208>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b6e      	ldr	r3, [pc, #440]	; (8001464 <HAL_UART_MspInit+0x208>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012b6:	230c      	movs	r3, #12
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012be:	2301      	movs	r3, #1
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012c6:	2307      	movs	r3, #7
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	4865      	ldr	r0, [pc, #404]	; (8001468 <HAL_UART_MspInit+0x20c>)
 80012d2:	f001 f89b 	bl	800240c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80012d6:	4b65      	ldr	r3, [pc, #404]	; (800146c <HAL_UART_MspInit+0x210>)
 80012d8:	4a65      	ldr	r2, [pc, #404]	; (8001470 <HAL_UART_MspInit+0x214>)
 80012da:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80012dc:	4b63      	ldr	r3, [pc, #396]	; (800146c <HAL_UART_MspInit+0x210>)
 80012de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e4:	4b61      	ldr	r3, [pc, #388]	; (800146c <HAL_UART_MspInit+0x210>)
 80012e6:	2240      	movs	r2, #64	; 0x40
 80012e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ea:	4b60      	ldr	r3, [pc, #384]	; (800146c <HAL_UART_MspInit+0x210>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f0:	4b5e      	ldr	r3, [pc, #376]	; (800146c <HAL_UART_MspInit+0x210>)
 80012f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012f8:	4b5c      	ldr	r3, [pc, #368]	; (800146c <HAL_UART_MspInit+0x210>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012fe:	4b5b      	ldr	r3, [pc, #364]	; (800146c <HAL_UART_MspInit+0x210>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001304:	4b59      	ldr	r3, [pc, #356]	; (800146c <HAL_UART_MspInit+0x210>)
 8001306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800130c:	4b57      	ldr	r3, [pc, #348]	; (800146c <HAL_UART_MspInit+0x210>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001312:	4b56      	ldr	r3, [pc, #344]	; (800146c <HAL_UART_MspInit+0x210>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001318:	4854      	ldr	r0, [pc, #336]	; (800146c <HAL_UART_MspInit+0x210>)
 800131a:	f000 fd6d 	bl	8001df8 <HAL_DMA_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001324:	f7ff fdd0 	bl	8000ec8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a50      	ldr	r2, [pc, #320]	; (800146c <HAL_UART_MspInit+0x210>)
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
 800132e:	4a4f      	ldr	r2, [pc, #316]	; (800146c <HAL_UART_MspInit+0x210>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2026      	movs	r0, #38	; 0x26
 800133a:	f000 fd33 	bl	8001da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800133e:	2026      	movs	r0, #38	; 0x26
 8001340:	f000 fd4c 	bl	8001ddc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001344:	e087      	b.n	8001456 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART6)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <HAL_UART_MspInit+0x218>)
 800134c:	4293      	cmp	r3, r2
 800134e:	f040 8082 	bne.w	8001456 <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b43      	ldr	r3, [pc, #268]	; (8001464 <HAL_UART_MspInit+0x208>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a42      	ldr	r2, [pc, #264]	; (8001464 <HAL_UART_MspInit+0x208>)
 800135c:	f043 0320 	orr.w	r3, r3, #32
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b40      	ldr	r3, [pc, #256]	; (8001464 <HAL_UART_MspInit+0x208>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f003 0320 	and.w	r3, r3, #32
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <HAL_UART_MspInit+0x208>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a3b      	ldr	r2, [pc, #236]	; (8001464 <HAL_UART_MspInit+0x208>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b39      	ldr	r3, [pc, #228]	; (8001464 <HAL_UART_MspInit+0x208>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b35      	ldr	r3, [pc, #212]	; (8001464 <HAL_UART_MspInit+0x208>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a34      	ldr	r2, [pc, #208]	; (8001464 <HAL_UART_MspInit+0x208>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <HAL_UART_MspInit+0x208>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PM2_5_UART6_TX_Pin;
 80013a6:	2340      	movs	r3, #64	; 0x40
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013b6:	2308      	movs	r3, #8
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PM2_5_UART6_TX_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	482d      	ldr	r0, [pc, #180]	; (8001478 <HAL_UART_MspInit+0x21c>)
 80013c2:	f001 f823 	bl	800240c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PM2_5_UART6_RX_Pin;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013d8:	2308      	movs	r3, #8
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PM2_5_UART6_RX_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4821      	ldr	r0, [pc, #132]	; (8001468 <HAL_UART_MspInit+0x20c>)
 80013e4:	f001 f812 	bl	800240c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_UART_MspInit+0x220>)
 80013ea:	4a25      	ldr	r2, [pc, #148]	; (8001480 <HAL_UART_MspInit+0x224>)
 80013ec:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_UART_MspInit+0x220>)
 80013f0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80013f4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_UART_MspInit+0x220>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <HAL_UART_MspInit+0x220>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <HAL_UART_MspInit+0x220>)
 8001404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001408:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <HAL_UART_MspInit+0x220>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_UART_MspInit+0x220>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_UART_MspInit+0x220>)
 8001418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_UART_MspInit+0x220>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_UART_MspInit+0x220>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800142a:	4814      	ldr	r0, [pc, #80]	; (800147c <HAL_UART_MspInit+0x220>)
 800142c:	f000 fce4 	bl	8001df8 <HAL_DMA_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_UART_MspInit+0x1de>
      Error_Handler();
 8001436:	f7ff fd47 	bl	8000ec8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a0f      	ldr	r2, [pc, #60]	; (800147c <HAL_UART_MspInit+0x220>)
 800143e:	635a      	str	r2, [r3, #52]	; 0x34
 8001440:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_UART_MspInit+0x220>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2047      	movs	r0, #71	; 0x47
 800144c:	f000 fcaa 	bl	8001da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001450:	2047      	movs	r0, #71	; 0x47
 8001452:	f000 fcc3 	bl	8001ddc <HAL_NVIC_EnableIRQ>
}
 8001456:	bf00      	nop
 8001458:	3730      	adds	r7, #48	; 0x30
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40004400 	.word	0x40004400
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000
 800146c:	200001e8 	.word	0x200001e8
 8001470:	400260a0 	.word	0x400260a0
 8001474:	40011400 	.word	0x40011400
 8001478:	40020800 	.word	0x40020800
 800147c:	20000094 	.word	0x20000094
 8001480:	40026428 	.word	0x40026428

08001484 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	201d      	movs	r0, #29
 800149a:	f000 fc83 	bl	8001da4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 800149e:	201d      	movs	r0, #29
 80014a0:	f000 fc9c 	bl	8001ddc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <HAL_InitTick+0xa0>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_InitTick+0xa0>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_InitTick+0xa0>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014c0:	f107 0210 	add.w	r2, r7, #16
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 fe86 	bl	80031dc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014d0:	f001 fe5c 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80014d4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80014d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d8:	4a13      	ldr	r2, [pc, #76]	; (8001528 <HAL_InitTick+0xa4>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0c9b      	lsrs	r3, r3, #18
 80014e0:	3b01      	subs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_InitTick+0xa8>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <HAL_InitTick+0xac>)
 80014e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_InitTick+0xa8>)
 80014ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014f0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80014f2:	4a0e      	ldr	r2, [pc, #56]	; (800152c <HAL_InitTick+0xa8>)
 80014f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_InitTick+0xa8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_InitTick+0xa8>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001504:	4809      	ldr	r0, [pc, #36]	; (800152c <HAL_InitTick+0xa8>)
 8001506:	f001 feff 	bl	8003308 <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d104      	bne.n	800151a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001510:	4806      	ldr	r0, [pc, #24]	; (800152c <HAL_InitTick+0xa8>)
 8001512:	f001 ff2e 	bl	8003372 <HAL_TIM_Base_Start_IT>
 8001516:	4603      	mov	r3, r0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3730      	adds	r7, #48	; 0x30
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	431bde83 	.word	0x431bde83
 800152c:	200002ec 	.word	0x200002ec
 8001530:	40000400 	.word	0x40000400

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <DMA1_Stream6_IRQHandler+0x10>)
 800158a:	f000 fd05 	bl	8001f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200001e8 	.word	0x200001e8

08001598 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <TIM3_IRQHandler+0x10>)
 800159e:	f001 ff0c 	bl	80033ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200002ec 	.word	0x200002ec

080015ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <USART2_IRQHandler+0x10>)
 80015b2:	f002 faa9 	bl	8003b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200002a8 	.word	0x200002a8

080015c0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <DMA2_Stream1_IRQHandler+0x10>)
 80015c6:	f000 fce7 	bl	8001f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000094 	.word	0x20000094

080015d4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <USART6_IRQHandler+0x10>)
 80015da:	f002 fa95 	bl	8003b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000268 	.word	0x20000268

080015e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <SystemInit+0x60>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	4a15      	ldr	r2, [pc, #84]	; (8001648 <SystemInit+0x60>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <SystemInit+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <SystemInit+0x64>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <SystemInit+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <SystemInit+0x64>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <SystemInit+0x64>)
 8001614:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <SystemInit+0x64>)
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <SystemInit+0x68>)
 8001622:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <SystemInit+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a08      	ldr	r2, [pc, #32]	; (800164c <SystemInit+0x64>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <SystemInit+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SystemInit+0x60>)
 8001638:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800163c:	609a      	str	r2, [r3, #8]
#endif
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	40023800 	.word	0x40023800
 8001650:	24003010 	.word	0x24003010

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001658:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800165a:	e003      	b.n	8001664 <LoopCopyDataInit>

0800165c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800165e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001660:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001662:	3104      	adds	r1, #4

08001664 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001664:	480b      	ldr	r0, [pc, #44]	; (8001694 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001668:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800166a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800166c:	d3f6      	bcc.n	800165c <CopyDataInit>
  ldr  r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001670:	e002      	b.n	8001678 <LoopFillZerobss>

08001672 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001672:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001674:	f842 3b04 	str.w	r3, [r2], #4

08001678 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800167a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800167c:	d3f9      	bcc.n	8001672 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800167e:	f7ff ffb3 	bl	80015e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f002 fed7 	bl	8004434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff f927 	bl	80008d8 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800168c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001690:	08005988 	.word	0x08005988
  ldr  r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001698:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 800169c:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 80016a0:	20000334 	.word	0x20000334

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 fb5c 	bl	8001d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff fed4 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fcc2 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x20>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x24>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_IncTick+0x24>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000004 	.word	0x20000004
 8001710:	2000032c 	.word	0x2000032c

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_GetTick+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	2000032c 	.word	0x2000032c

0800172c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff ffee 	bl	8001714 <HAL_GetTick>
 8001738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001744:	d005      	beq.n	8001752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_Delay+0x40>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001752:	bf00      	nop
 8001754:	f7ff ffde 	bl	8001714 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	429a      	cmp	r2, r3
 8001762:	d8f7      	bhi.n	8001754 <HAL_Delay+0x28>
  {
  }
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000004 	.word	0x20000004

08001770 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e033      	b.n	80017ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fc90 	bl	80010b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d118      	bne.n	80017e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017b6:	f023 0302 	bic.w	r3, r3, #2
 80017ba:	f043 0202 	orr.w	r2, r3, #2
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f93a 	bl	8001a3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f023 0303 	bic.w	r3, r3, #3
 80017d6:	f043 0201 	orr.w	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	641a      	str	r2, [r3, #64]	; 0x40
 80017de:	e001      	b.n	80017e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x1c>
 8001810:	2302      	movs	r3, #2
 8001812:	e105      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x228>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b09      	cmp	r3, #9
 8001822:	d925      	bls.n	8001870 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68d9      	ldr	r1, [r3, #12]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	3b1e      	subs	r3, #30
 800183a:	2207      	movs	r2, #7
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43da      	mvns	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	400a      	ands	r2, r1
 8001848:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68d9      	ldr	r1, [r3, #12]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	b29b      	uxth	r3, r3
 800185a:	4618      	mov	r0, r3
 800185c:	4603      	mov	r3, r0
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4403      	add	r3, r0
 8001862:	3b1e      	subs	r3, #30
 8001864:	409a      	lsls	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	e022      	b.n	80018b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6919      	ldr	r1, [r3, #16]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	461a      	mov	r2, r3
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	2207      	movs	r2, #7
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	400a      	ands	r2, r1
 8001892:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6919      	ldr	r1, [r3, #16]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4618      	mov	r0, r3
 80018a6:	4603      	mov	r3, r0
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4403      	add	r3, r0
 80018ac:	409a      	lsls	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d824      	bhi.n	8001908 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3b05      	subs	r3, #5
 80018d0:	221f      	movs	r2, #31
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	400a      	ands	r2, r1
 80018de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	3b05      	subs	r3, #5
 80018fa:	fa00 f203 	lsl.w	r2, r0, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	635a      	str	r2, [r3, #52]	; 0x34
 8001906:	e04c      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b0c      	cmp	r3, #12
 800190e:	d824      	bhi.n	800195a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	3b23      	subs	r3, #35	; 0x23
 8001922:	221f      	movs	r2, #31
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43da      	mvns	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	400a      	ands	r2, r1
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	b29b      	uxth	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	3b23      	subs	r3, #35	; 0x23
 800194c:	fa00 f203 	lsl.w	r2, r0, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	631a      	str	r2, [r3, #48]	; 0x30
 8001958:	e023      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3b41      	subs	r3, #65	; 0x41
 800196c:	221f      	movs	r2, #31
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	400a      	ands	r2, r1
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	4618      	mov	r0, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	3b41      	subs	r3, #65	; 0x41
 8001996:	fa00 f203 	lsl.w	r2, r0, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <HAL_ADC_ConfigChannel+0x234>)
 80019a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <HAL_ADC_ConfigChannel+0x238>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d109      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1cc>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b12      	cmp	r3, #18
 80019b6:	d105      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <HAL_ADC_ConfigChannel+0x238>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d123      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x21e>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b10      	cmp	r3, #16
 80019d4:	d003      	beq.n	80019de <HAL_ADC_ConfigChannel+0x1e6>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b11      	cmp	r3, #17
 80019dc:	d11b      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b10      	cmp	r3, #16
 80019f0:	d111      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_ADC_ConfigChannel+0x23c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <HAL_ADC_ConfigChannel+0x240>)
 80019f8:	fba2 2303 	umull	r2, r3, r2, r3
 80019fc:	0c9a      	lsrs	r2, r3, #18
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a08:	e002      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f9      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40012300 	.word	0x40012300
 8001a30:	40012000 	.word	0x40012000
 8001a34:	20000000 	.word	0x20000000
 8001a38:	431bde83 	.word	0x431bde83

08001a3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a44:	4b79      	ldr	r3, [pc, #484]	; (8001c2c <ADC_Init+0x1f0>)
 8001a46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	021a      	lsls	r2, r3, #8
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ab6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6899      	ldr	r1, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	4a58      	ldr	r2, [pc, #352]	; (8001c30 <ADC_Init+0x1f4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d022      	beq.n	8001b1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ae2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6899      	ldr	r1, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6899      	ldr	r1, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	e00f      	b.n	8001b3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0202 	bic.w	r2, r2, #2
 8001b48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6899      	ldr	r1, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7e1b      	ldrb	r3, [r3, #24]
 8001b54:	005a      	lsls	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d01b      	beq.n	8001ba0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6859      	ldr	r1, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	3b01      	subs	r3, #1
 8001b94:	035a      	lsls	r2, r3, #13
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	e007      	b.n	8001bb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	051a      	lsls	r2, r3, #20
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001be4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6899      	ldr	r1, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bf2:	025a      	lsls	r2, r3, #9
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6899      	ldr	r1, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	029a      	lsls	r2, r3, #10
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	609a      	str	r2, [r3, #8]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	40012300 	.word	0x40012300
 8001c30:	0f000001 	.word	0x0f000001

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff4c 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db6:	f7ff ff61 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001dba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	6978      	ldr	r0, [r7, #20]
 8001dc2:	f7ff ffb1 	bl	8001d28 <NVIC_EncodePriority>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff80 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff54 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff fc86 	bl	8001714 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e099      	b.n	8001f48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0201 	bic.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e34:	e00f      	b.n	8001e56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e36:	f7ff fc6d 	bl	8001714 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d908      	bls.n	8001e56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e078      	b.n	8001f48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e8      	bne.n	8001e36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <HAL_DMA_Init+0x158>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d107      	bne.n	8001ec0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f023 0307 	bic.w	r3, r3, #7
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d117      	bne.n	8001f1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00e      	beq.n	8001f1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fa0b 	bl	8002318 <DMA_CheckFifoParam>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f16:	2301      	movs	r3, #1
 8001f18:	e016      	b.n	8001f48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f9c2 	bl	80022ac <DMA_CalcBaseAndBitshift>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	223f      	movs	r2, #63	; 0x3f
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	f010803f 	.word	0xf010803f

08001f54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d004      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2280      	movs	r2, #128	; 0x80
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00c      	b.n	8001f8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2205      	movs	r2, #5
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0201 	bic.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fa4:	4b92      	ldr	r3, [pc, #584]	; (80021f0 <HAL_DMA_IRQHandler+0x258>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a92      	ldr	r2, [pc, #584]	; (80021f4 <HAL_DMA_IRQHandler+0x25c>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0a9b      	lsrs	r3, r3, #10
 8001fb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	2208      	movs	r2, #8
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d01a      	beq.n	8002004 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d013      	beq.n	8002004 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0204 	bic.w	r2, r2, #4
 8001fea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2201      	movs	r2, #1
 800200a:	409a      	lsls	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d012      	beq.n	800203a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	2201      	movs	r2, #1
 8002028:	409a      	lsls	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f043 0202 	orr.w	r2, r3, #2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2204      	movs	r2, #4
 8002040:	409a      	lsls	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d012      	beq.n	8002070 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00b      	beq.n	8002070 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	2204      	movs	r2, #4
 800205e:	409a      	lsls	r2, r3
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002068:	f043 0204 	orr.w	r2, r3, #4
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	2210      	movs	r2, #16
 8002076:	409a      	lsls	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d043      	beq.n	8002108 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d03c      	beq.n	8002108 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	2210      	movs	r2, #16
 8002094:	409a      	lsls	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d018      	beq.n	80020da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d108      	bne.n	80020c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d024      	beq.n	8002108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
 80020c6:	e01f      	b.n	8002108 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d01b      	beq.n	8002108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4798      	blx	r3
 80020d8:	e016      	b.n	8002108 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d107      	bne.n	80020f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0208 	bic.w	r2, r2, #8
 80020f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2220      	movs	r2, #32
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 808e 	beq.w	8002236 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 8086 	beq.w	8002236 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212e:	2220      	movs	r2, #32
 8002130:	409a      	lsls	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b05      	cmp	r3, #5
 8002140:	d136      	bne.n	80021b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0216 	bic.w	r2, r2, #22
 8002150:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002160:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d103      	bne.n	8002172 <HAL_DMA_IRQHandler+0x1da>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216e:	2b00      	cmp	r3, #0
 8002170:	d007      	beq.n	8002182 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0208 	bic.w	r2, r2, #8
 8002180:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	223f      	movs	r2, #63	; 0x3f
 8002188:	409a      	lsls	r2, r3
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d07d      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4798      	blx	r3
        }
        return;
 80021ae:	e078      	b.n	80022a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01c      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d108      	bne.n	80021de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d030      	beq.n	8002236 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	e02b      	b.n	8002236 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d027      	beq.n	8002236 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	4798      	blx	r3
 80021ee:	e022      	b.n	8002236 <HAL_DMA_IRQHandler+0x29e>
 80021f0:	20000000 	.word	0x20000000
 80021f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10f      	bne.n	8002226 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0210 	bic.w	r2, r2, #16
 8002214:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223a:	2b00      	cmp	r3, #0
 800223c:	d032      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d022      	beq.n	8002290 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2205      	movs	r2, #5
 800224e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0201 	bic.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3301      	adds	r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	429a      	cmp	r2, r3
 800226c:	d307      	bcc.n	800227e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f2      	bne.n	8002262 <HAL_DMA_IRQHandler+0x2ca>
 800227c:	e000      	b.n	8002280 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800227e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4798      	blx	r3
 80022a0:	e000      	b.n	80022a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022a2:	bf00      	nop
    }
  }
}
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop

080022ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3b10      	subs	r3, #16
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <DMA_CalcBaseAndBitshift+0x64>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <DMA_CalcBaseAndBitshift+0x68>)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d909      	bls.n	80022ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	1d1a      	adds	r2, r3, #4
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	659a      	str	r2, [r3, #88]	; 0x58
 80022ec:	e007      	b.n	80022fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022f6:	f023 0303 	bic.w	r3, r3, #3
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	aaaaaaab 	.word	0xaaaaaaab
 8002314:	080058d8 	.word	0x080058d8

08002318 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d11f      	bne.n	8002372 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d855      	bhi.n	80023e4 <DMA_CheckFifoParam+0xcc>
 8002338:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <DMA_CheckFifoParam+0x28>)
 800233a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233e:	bf00      	nop
 8002340:	08002351 	.word	0x08002351
 8002344:	08002363 	.word	0x08002363
 8002348:	08002351 	.word	0x08002351
 800234c:	080023e5 	.word	0x080023e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d045      	beq.n	80023e8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002360:	e042      	b.n	80023e8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800236a:	d13f      	bne.n	80023ec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002370:	e03c      	b.n	80023ec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237a:	d121      	bne.n	80023c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d836      	bhi.n	80023f0 <DMA_CheckFifoParam+0xd8>
 8002382:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <DMA_CheckFifoParam+0x70>)
 8002384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002388:	08002399 	.word	0x08002399
 800238c:	0800239f 	.word	0x0800239f
 8002390:	08002399 	.word	0x08002399
 8002394:	080023b1 	.word	0x080023b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
      break;
 800239c:	e02f      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d024      	beq.n	80023f4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ae:	e021      	b.n	80023f4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023b8:	d11e      	bne.n	80023f8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023be:	e01b      	b.n	80023f8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d902      	bls.n	80023cc <DMA_CheckFifoParam+0xb4>
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d003      	beq.n	80023d2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ca:	e018      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      break;
 80023d0:	e015      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00e      	beq.n	80023fc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
      break;
 80023e2:	e00b      	b.n	80023fc <DMA_CheckFifoParam+0xe4>
      break;
 80023e4:	bf00      	nop
 80023e6:	e00a      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      break;
 80023e8:	bf00      	nop
 80023ea:	e008      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      break;
 80023ec:	bf00      	nop
 80023ee:	e006      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      break;
 80023f0:	bf00      	nop
 80023f2:	e004      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      break;
 80023f4:	bf00      	nop
 80023f6:	e002      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      break;   
 80023f8:	bf00      	nop
 80023fa:	e000      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      break;
 80023fc:	bf00      	nop
    }
  } 
  
  return status; 
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	e159      	b.n	80026dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002428:	2201      	movs	r2, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	429a      	cmp	r2, r3
 8002442:	f040 8148 	bne.w	80026d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x4a>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b12      	cmp	r3, #18
 8002454:	d123      	bne.n	800249e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	08da      	lsrs	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3208      	adds	r2, #8
 800245e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	220f      	movs	r2, #15
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	08da      	lsrs	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3208      	adds	r2, #8
 8002498:	69b9      	ldr	r1, [r7, #24]
 800249a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0203 	and.w	r2, r3, #3
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d00b      	beq.n	80024f2 <HAL_GPIO_Init+0xe6>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d007      	beq.n	80024f2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024e6:	2b11      	cmp	r3, #17
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b12      	cmp	r3, #18
 80024f0:	d130      	bne.n	8002554 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 0201 	and.w	r2, r3, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a2 	beq.w	80026d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b56      	ldr	r3, [pc, #344]	; (80026f0 <HAL_GPIO_Init+0x2e4>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	4a55      	ldr	r2, [pc, #340]	; (80026f0 <HAL_GPIO_Init+0x2e4>)
 800259c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a0:	6453      	str	r3, [r2, #68]	; 0x44
 80025a2:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <HAL_GPIO_Init+0x2e4>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ae:	4a51      	ldr	r2, [pc, #324]	; (80026f4 <HAL_GPIO_Init+0x2e8>)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3302      	adds	r3, #2
 80025b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	220f      	movs	r2, #15
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a48      	ldr	r2, [pc, #288]	; (80026f8 <HAL_GPIO_Init+0x2ec>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d019      	beq.n	800260e <HAL_GPIO_Init+0x202>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a47      	ldr	r2, [pc, #284]	; (80026fc <HAL_GPIO_Init+0x2f0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_GPIO_Init+0x1fe>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a46      	ldr	r2, [pc, #280]	; (8002700 <HAL_GPIO_Init+0x2f4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00d      	beq.n	8002606 <HAL_GPIO_Init+0x1fa>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a45      	ldr	r2, [pc, #276]	; (8002704 <HAL_GPIO_Init+0x2f8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <HAL_GPIO_Init+0x1f6>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a44      	ldr	r2, [pc, #272]	; (8002708 <HAL_GPIO_Init+0x2fc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <HAL_GPIO_Init+0x1f2>
 80025fa:	2304      	movs	r3, #4
 80025fc:	e008      	b.n	8002610 <HAL_GPIO_Init+0x204>
 80025fe:	2307      	movs	r3, #7
 8002600:	e006      	b.n	8002610 <HAL_GPIO_Init+0x204>
 8002602:	2303      	movs	r3, #3
 8002604:	e004      	b.n	8002610 <HAL_GPIO_Init+0x204>
 8002606:	2302      	movs	r3, #2
 8002608:	e002      	b.n	8002610 <HAL_GPIO_Init+0x204>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_GPIO_Init+0x204>
 800260e:	2300      	movs	r3, #0
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	f002 0203 	and.w	r2, r2, #3
 8002616:	0092      	lsls	r2, r2, #2
 8002618:	4093      	lsls	r3, r2
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002620:	4934      	ldr	r1, [pc, #208]	; (80026f4 <HAL_GPIO_Init+0x2e8>)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	3302      	adds	r3, #2
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800262e:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_GPIO_Init+0x300>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002652:	4a2e      	ldr	r2, [pc, #184]	; (800270c <HAL_GPIO_Init+0x300>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <HAL_GPIO_Init+0x300>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800267c:	4a23      	ldr	r2, [pc, #140]	; (800270c <HAL_GPIO_Init+0x300>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002682:	4b22      	ldr	r3, [pc, #136]	; (800270c <HAL_GPIO_Init+0x300>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a6:	4a19      	ldr	r2, [pc, #100]	; (800270c <HAL_GPIO_Init+0x300>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_GPIO_Init+0x300>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d0:	4a0e      	ldr	r2, [pc, #56]	; (800270c <HAL_GPIO_Init+0x300>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3301      	adds	r3, #1
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b0f      	cmp	r3, #15
 80026e0:	f67f aea2 	bls.w	8002428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e4:	bf00      	nop
 80026e6:	3724      	adds	r7, #36	; 0x24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800
 8002704:	40020c00 	.word	0x40020c00
 8002708:	40021000 	.word	0x40021000
 800270c:	40013c00 	.word	0x40013c00

08002710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
 800271c:	4613      	mov	r3, r2
 800271e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800272c:	e003      	b.n	8002736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	041a      	lsls	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	619a      	str	r2, [r3, #24]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	401a      	ands	r2, r3
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	429a      	cmp	r2, r3
 800275a:	d104      	bne.n	8002766 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	041a      	lsls	r2, r3, #16
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002764:	e002      	b.n	800276c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	619a      	str	r2, [r3, #24]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e10f      	b.n	80029aa <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe fccc 	bl	800113c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2224      	movs	r2, #36	; 0x24
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027bc:	f000 fce6 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80027c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4a7b      	ldr	r2, [pc, #492]	; (80029b4 <HAL_I2C_Init+0x23c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d807      	bhi.n	80027dc <HAL_I2C_Init+0x64>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a7a      	ldr	r2, [pc, #488]	; (80029b8 <HAL_I2C_Init+0x240>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	bf94      	ite	ls
 80027d4:	2301      	movls	r3, #1
 80027d6:	2300      	movhi	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	e006      	b.n	80027ea <HAL_I2C_Init+0x72>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a77      	ldr	r2, [pc, #476]	; (80029bc <HAL_I2C_Init+0x244>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	bf94      	ite	ls
 80027e4:	2301      	movls	r3, #1
 80027e6:	2300      	movhi	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0db      	b.n	80029aa <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4a72      	ldr	r2, [pc, #456]	; (80029c0 <HAL_I2C_Init+0x248>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0c9b      	lsrs	r3, r3, #18
 80027fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a64      	ldr	r2, [pc, #400]	; (80029b4 <HAL_I2C_Init+0x23c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d802      	bhi.n	800282c <HAL_I2C_Init+0xb4>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3301      	adds	r3, #1
 800282a:	e009      	b.n	8002840 <HAL_I2C_Init+0xc8>
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	4a63      	ldr	r2, [pc, #396]	; (80029c4 <HAL_I2C_Init+0x24c>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	099b      	lsrs	r3, r3, #6
 800283e:	3301      	adds	r3, #1
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	430b      	orrs	r3, r1
 8002846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002852:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4956      	ldr	r1, [pc, #344]	; (80029b4 <HAL_I2C_Init+0x23c>)
 800285c:	428b      	cmp	r3, r1
 800285e:	d80d      	bhi.n	800287c <HAL_I2C_Init+0x104>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e59      	subs	r1, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	fbb1 f3f3 	udiv	r3, r1, r3
 800286e:	3301      	adds	r3, #1
 8002870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002874:	2b04      	cmp	r3, #4
 8002876:	bf38      	it	cc
 8002878:	2304      	movcc	r3, #4
 800287a:	e04f      	b.n	800291c <HAL_I2C_Init+0x1a4>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d111      	bne.n	80028a8 <HAL_I2C_Init+0x130>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e58      	subs	r0, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e012      	b.n	80028ce <HAL_I2C_Init+0x156>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	0099      	lsls	r1, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Init+0x15e>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e022      	b.n	800291c <HAL_I2C_Init+0x1a4>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10e      	bne.n	80028fc <HAL_I2C_Init+0x184>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1e58      	subs	r0, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	440b      	add	r3, r1
 80028ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f0:	3301      	adds	r3, #1
 80028f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fa:	e00f      	b.n	800291c <HAL_I2C_Init+0x1a4>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	0099      	lsls	r1, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002912:	3301      	adds	r3, #1
 8002914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	6809      	ldr	r1, [r1, #0]
 8002920:	4313      	orrs	r3, r2
 8002922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800294a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6911      	ldr	r1, [r2, #16]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68d2      	ldr	r2, [r2, #12]
 8002956:	4311      	orrs	r1, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	430b      	orrs	r3, r1
 800295e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	000186a0 	.word	0x000186a0
 80029b8:	001e847f 	.word	0x001e847f
 80029bc:	003d08ff 	.word	0x003d08ff
 80029c0:	431bde83 	.word	0x431bde83
 80029c4:	10624dd3 	.word	0x10624dd3

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e22d      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d075      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029e6:	4ba3      	ldr	r3, [pc, #652]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d00c      	beq.n	8002a0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f2:	4ba0      	ldr	r3, [pc, #640]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d112      	bne.n	8002a24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fe:	4b9d      	ldr	r3, [pc, #628]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a0a:	d10b      	bne.n	8002a24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0c:	4b99      	ldr	r3, [pc, #612]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d05b      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x108>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d157      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e208      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCC_OscConfig+0x74>
 8002a2e:	4b91      	ldr	r3, [pc, #580]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a90      	ldr	r2, [pc, #576]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e01d      	b.n	8002a78 <HAL_RCC_OscConfig+0xb0>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x98>
 8002a46:	4b8b      	ldr	r3, [pc, #556]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a8a      	ldr	r2, [pc, #552]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b88      	ldr	r3, [pc, #544]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a87      	ldr	r2, [pc, #540]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e00b      	b.n	8002a78 <HAL_RCC_OscConfig+0xb0>
 8002a60:	4b84      	ldr	r3, [pc, #528]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a83      	ldr	r2, [pc, #524]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b81      	ldr	r3, [pc, #516]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a80      	ldr	r2, [pc, #512]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fe fe48 	bl	8001714 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a88:	f7fe fe44 	bl	8001714 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e1cd      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b76      	ldr	r3, [pc, #472]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0xc0>
 8002aa6:	e014      	b.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fe34 	bl	8001714 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7fe fe30 	bl	8001714 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1b9      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac2:	4b6c      	ldr	r3, [pc, #432]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0xe8>
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d063      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ade:	4b65      	ldr	r3, [pc, #404]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aea:	4b62      	ldr	r3, [pc, #392]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d11c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af6:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d116      	bne.n	8002b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b02:	4b5c      	ldr	r3, [pc, #368]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_RCC_OscConfig+0x152>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e18d      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1a:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4952      	ldr	r1, [pc, #328]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	e03a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b38:	4b4f      	ldr	r3, [pc, #316]	; (8002c78 <HAL_RCC_OscConfig+0x2b0>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fde9 	bl	8001714 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b46:	f7fe fde5 	bl	8001714 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e16e      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b58:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4940      	ldr	r1, [pc, #256]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
 8002b78:	e015      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7a:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_RCC_OscConfig+0x2b0>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fdc8 	bl	8001714 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b88:	f7fe fdc4 	bl	8001714 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e14d      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d030      	beq.n	8002c14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d016      	beq.n	8002be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bba:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <HAL_RCC_OscConfig+0x2b4>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fda8 	bl	8001714 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc8:	f7fe fda4 	bl	8001714 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e12d      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x200>
 8002be6:	e015      	b.n	8002c14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be8:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <HAL_RCC_OscConfig+0x2b4>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bee:	f7fe fd91 	bl	8001714 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf6:	f7fe fd8d 	bl	8001714 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e116      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c08:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80a0 	beq.w	8002d62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c26:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10f      	bne.n	8002c52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_OscConfig+0x2b8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d121      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_RCC_OscConfig+0x2b8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <HAL_RCC_OscConfig+0x2b8>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7fe fd53 	bl	8001714 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e011      	b.n	8002c96 <HAL_RCC_OscConfig+0x2ce>
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	42470000 	.word	0x42470000
 8002c7c:	42470e80 	.word	0x42470e80
 8002c80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fe fd46 	bl	8001714 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0cf      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b6a      	ldr	r3, [pc, #424]	; (8002e40 <HAL_RCC_OscConfig+0x478>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d106      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x2f0>
 8002caa:	4b66      	ldr	r3, [pc, #408]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	4a65      	ldr	r2, [pc, #404]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb6:	e01c      	b.n	8002cf2 <HAL_RCC_OscConfig+0x32a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b05      	cmp	r3, #5
 8002cbe:	d10c      	bne.n	8002cda <HAL_RCC_OscConfig+0x312>
 8002cc0:	4b60      	ldr	r3, [pc, #384]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	4a5f      	ldr	r2, [pc, #380]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002cc6:	f043 0304 	orr.w	r3, r3, #4
 8002cca:	6713      	str	r3, [r2, #112]	; 0x70
 8002ccc:	4b5d      	ldr	r3, [pc, #372]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	4a5c      	ldr	r2, [pc, #368]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd8:	e00b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x32a>
 8002cda:	4b5a      	ldr	r3, [pc, #360]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	4a59      	ldr	r2, [pc, #356]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce6:	4b57      	ldr	r3, [pc, #348]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	4a56      	ldr	r2, [pc, #344]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d015      	beq.n	8002d26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfa:	f7fe fd0b 	bl	8001714 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d00:	e00a      	b.n	8002d18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d02:	f7fe fd07 	bl	8001714 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e08e      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ee      	beq.n	8002d02 <HAL_RCC_OscConfig+0x33a>
 8002d24:	e014      	b.n	8002d50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7fe fcf5 	bl	8001714 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7fe fcf1 	bl	8001714 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e078      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d44:	4b3f      	ldr	r3, [pc, #252]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ee      	bne.n	8002d2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d50:	7dfb      	ldrb	r3, [r7, #23]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d105      	bne.n	8002d62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d56:	4b3b      	ldr	r3, [pc, #236]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a3a      	ldr	r2, [pc, #232]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d064      	beq.n	8002e34 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d6a:	4b36      	ldr	r3, [pc, #216]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d05c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d141      	bne.n	8002e02 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7e:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <HAL_RCC_OscConfig+0x480>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fe fcc6 	bl	8001714 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fe fcc2 	bl	8001714 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e04b      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	4b29      	ldr	r3, [pc, #164]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	019b      	lsls	r3, r3, #6
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	085b      	lsrs	r3, r3, #1
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	491d      	ldr	r1, [pc, #116]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HAL_RCC_OscConfig+0x480>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe fc9b 	bl	8001714 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de2:	f7fe fc97 	bl	8001714 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e020      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df4:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x41a>
 8002e00:	e018      	b.n	8002e34 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <HAL_RCC_OscConfig+0x480>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe fc84 	bl	8001714 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fc80 	bl	8001714 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e009      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_OscConfig+0x47c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x448>
 8002e2e:	e001      	b.n	8002e34 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40007000 	.word	0x40007000
 8002e44:	40023800 	.word	0x40023800
 8002e48:	42470060 	.word	0x42470060

08002e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0ca      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e60:	4b67      	ldr	r3, [pc, #412]	; (8003000 <HAL_RCC_ClockConfig+0x1b4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d90c      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b64      	ldr	r3, [pc, #400]	; (8003000 <HAL_RCC_ClockConfig+0x1b4>)
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b62      	ldr	r3, [pc, #392]	; (8003000 <HAL_RCC_ClockConfig+0x1b4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0b6      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea0:	4b58      	ldr	r3, [pc, #352]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a57      	ldr	r2, [pc, #348]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb8:	4b52      	ldr	r3, [pc, #328]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a51      	ldr	r2, [pc, #324]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec4:	4b4f      	ldr	r3, [pc, #316]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	494c      	ldr	r1, [pc, #304]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d044      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d107      	bne.n	8002efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	4b46      	ldr	r3, [pc, #280]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d119      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e07d      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0a:	4b3e      	ldr	r3, [pc, #248]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e06d      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1a:	4b3a      	ldr	r3, [pc, #232]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e065      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2a:	4b36      	ldr	r3, [pc, #216]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f023 0203 	bic.w	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4933      	ldr	r1, [pc, #204]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f3c:	f7fe fbea 	bl	8001714 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f44:	f7fe fbe6 	bl	8001714 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e04d      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 020c 	and.w	r2, r3, #12
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d1eb      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b24      	ldr	r3, [pc, #144]	; (8003000 <HAL_RCC_ClockConfig+0x1b4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d20c      	bcs.n	8002f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b21      	ldr	r3, [pc, #132]	; (8003000 <HAL_RCC_ClockConfig+0x1b4>)
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b1f      	ldr	r3, [pc, #124]	; (8003000 <HAL_RCC_ClockConfig+0x1b4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e030      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa0:	4b18      	ldr	r3, [pc, #96]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4915      	ldr	r1, [pc, #84]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	490d      	ldr	r1, [pc, #52]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fd2:	f000 f81d 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 8002fd6:	4601      	mov	r1, r0
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	4a09      	ldr	r2, [pc, #36]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	5cd3      	ldrb	r3, [r2, r3]
 8002fe6:	fa21 f303 	lsr.w	r3, r1, r3
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f7fe fa48 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023c00 	.word	0x40023c00
 8003004:	40023800 	.word	0x40023800
 8003008:	080058c0 	.word	0x080058c0
 800300c:	20000000 	.word	0x20000000

08003010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	2300      	movs	r3, #0
 8003020:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003026:	4b50      	ldr	r3, [pc, #320]	; (8003168 <HAL_RCC_GetSysClockFreq+0x158>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b04      	cmp	r3, #4
 8003030:	d007      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x32>
 8003032:	2b08      	cmp	r3, #8
 8003034:	d008      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x38>
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 808d 	bne.w	8003156 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b4b      	ldr	r3, [pc, #300]	; (800316c <HAL_RCC_GetSysClockFreq+0x15c>)
 800303e:	60bb      	str	r3, [r7, #8]
       break;
 8003040:	e08c      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003042:	4b4b      	ldr	r3, [pc, #300]	; (8003170 <HAL_RCC_GetSysClockFreq+0x160>)
 8003044:	60bb      	str	r3, [r7, #8]
      break;
 8003046:	e089      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003048:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCC_GetSysClockFreq+0x158>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003050:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003052:	4b45      	ldr	r3, [pc, #276]	; (8003168 <HAL_RCC_GetSysClockFreq+0x158>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d023      	beq.n	80030a6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305e:	4b42      	ldr	r3, [pc, #264]	; (8003168 <HAL_RCC_GetSysClockFreq+0x158>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	099b      	lsrs	r3, r3, #6
 8003064:	f04f 0400 	mov.w	r4, #0
 8003068:	f240 11ff 	movw	r1, #511	; 0x1ff
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	ea03 0501 	and.w	r5, r3, r1
 8003074:	ea04 0602 	and.w	r6, r4, r2
 8003078:	4a3d      	ldr	r2, [pc, #244]	; (8003170 <HAL_RCC_GetSysClockFreq+0x160>)
 800307a:	fb02 f106 	mul.w	r1, r2, r6
 800307e:	2200      	movs	r2, #0
 8003080:	fb02 f205 	mul.w	r2, r2, r5
 8003084:	440a      	add	r2, r1
 8003086:	493a      	ldr	r1, [pc, #232]	; (8003170 <HAL_RCC_GetSysClockFreq+0x160>)
 8003088:	fba5 0101 	umull	r0, r1, r5, r1
 800308c:	1853      	adds	r3, r2, r1
 800308e:	4619      	mov	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f04f 0400 	mov.w	r4, #0
 8003096:	461a      	mov	r2, r3
 8003098:	4623      	mov	r3, r4
 800309a:	f7fd f8f9 	bl	8000290 <__aeabi_uldivmod>
 800309e:	4603      	mov	r3, r0
 80030a0:	460c      	mov	r4, r1
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	e049      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a6:	4b30      	ldr	r3, [pc, #192]	; (8003168 <HAL_RCC_GetSysClockFreq+0x158>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	099b      	lsrs	r3, r3, #6
 80030ac:	f04f 0400 	mov.w	r4, #0
 80030b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	ea03 0501 	and.w	r5, r3, r1
 80030bc:	ea04 0602 	and.w	r6, r4, r2
 80030c0:	4629      	mov	r1, r5
 80030c2:	4632      	mov	r2, r6
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	f04f 0400 	mov.w	r4, #0
 80030cc:	0154      	lsls	r4, r2, #5
 80030ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030d2:	014b      	lsls	r3, r1, #5
 80030d4:	4619      	mov	r1, r3
 80030d6:	4622      	mov	r2, r4
 80030d8:	1b49      	subs	r1, r1, r5
 80030da:	eb62 0206 	sbc.w	r2, r2, r6
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	f04f 0400 	mov.w	r4, #0
 80030e6:	0194      	lsls	r4, r2, #6
 80030e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030ec:	018b      	lsls	r3, r1, #6
 80030ee:	1a5b      	subs	r3, r3, r1
 80030f0:	eb64 0402 	sbc.w	r4, r4, r2
 80030f4:	f04f 0100 	mov.w	r1, #0
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	00e2      	lsls	r2, r4, #3
 80030fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003102:	00d9      	lsls	r1, r3, #3
 8003104:	460b      	mov	r3, r1
 8003106:	4614      	mov	r4, r2
 8003108:	195b      	adds	r3, r3, r5
 800310a:	eb44 0406 	adc.w	r4, r4, r6
 800310e:	f04f 0100 	mov.w	r1, #0
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	02a2      	lsls	r2, r4, #10
 8003118:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800311c:	0299      	lsls	r1, r3, #10
 800311e:	460b      	mov	r3, r1
 8003120:	4614      	mov	r4, r2
 8003122:	4618      	mov	r0, r3
 8003124:	4621      	mov	r1, r4
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f04f 0400 	mov.w	r4, #0
 800312c:	461a      	mov	r2, r3
 800312e:	4623      	mov	r3, r4
 8003130:	f7fd f8ae 	bl	8000290 <__aeabi_uldivmod>
 8003134:	4603      	mov	r3, r0
 8003136:	460c      	mov	r4, r1
 8003138:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_GetSysClockFreq+0x158>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	0c1b      	lsrs	r3, r3, #16
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	3301      	adds	r3, #1
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	60bb      	str	r3, [r7, #8]
      break;
 8003154:	e002      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003158:	60bb      	str	r3, [r7, #8]
      break;
 800315a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800315c:	68bb      	ldr	r3, [r7, #8]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	00f42400 	.word	0x00f42400
 8003170:	017d7840 	.word	0x017d7840

08003174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_RCC_GetHCLKFreq+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000000 	.word	0x20000000

0800318c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003190:	f7ff fff0 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 8003194:	4601      	mov	r1, r0
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	0a9b      	lsrs	r3, r3, #10
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4a03      	ldr	r2, [pc, #12]	; (80031b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a2:	5cd3      	ldrb	r3, [r2, r3]
 80031a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40023800 	.word	0x40023800
 80031b0:	080058d0 	.word	0x080058d0

080031b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031b8:	f7ff ffdc 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 80031bc:	4601      	mov	r1, r0
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	0b5b      	lsrs	r3, r3, #13
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4a03      	ldr	r2, [pc, #12]	; (80031d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ca:	5cd3      	ldrb	r3, [r2, r3]
 80031cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	080058d0 	.word	0x080058d0

080031dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	220f      	movs	r2, #15
 80031ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_RCC_GetClockConfig+0x5c>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0203 	and.w	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_RCC_GetClockConfig+0x5c>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <HAL_RCC_GetClockConfig+0x5c>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_RCC_GetClockConfig+0x5c>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	08db      	lsrs	r3, r3, #3
 8003216:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800321e:	4b07      	ldr	r3, [pc, #28]	; (800323c <HAL_RCC_GetClockConfig+0x60>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 020f 	and.w	r2, r3, #15
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	601a      	str	r2, [r3, #0]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40023c00 	.word	0x40023c00

08003240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e056      	b.n	8003300 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7fd ffad 	bl	80011cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2202      	movs	r2, #2
 8003276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003288:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	ea42 0103 	orr.w	r1, r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	0c1b      	lsrs	r3, r3, #16
 80032d0:	f003 0104 	and.w	r1, r3, #4
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e01d      	b.n	8003356 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f815 	bl	800335e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3304      	adds	r3, #4
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f000 f968 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b06      	cmp	r3, #6
 800339a:	d007      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d122      	bne.n	8003416 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d11b      	bne.n	8003416 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f06f 0202 	mvn.w	r2, #2
 80033e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f8ee 	bl	80035de <HAL_TIM_IC_CaptureCallback>
 8003402:	e005      	b.n	8003410 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f8e0 	bl	80035ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8f1 	bl	80035f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b04      	cmp	r3, #4
 8003422:	d122      	bne.n	800346a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b04      	cmp	r3, #4
 8003430:	d11b      	bne.n	800346a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f06f 0204 	mvn.w	r2, #4
 800343a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f8c4 	bl	80035de <HAL_TIM_IC_CaptureCallback>
 8003456:	e005      	b.n	8003464 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f8b6 	bl	80035ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f8c7 	bl	80035f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b08      	cmp	r3, #8
 8003476:	d122      	bne.n	80034be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b08      	cmp	r3, #8
 8003484:	d11b      	bne.n	80034be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f06f 0208 	mvn.w	r2, #8
 800348e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2204      	movs	r2, #4
 8003494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f89a 	bl	80035de <HAL_TIM_IC_CaptureCallback>
 80034aa:	e005      	b.n	80034b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f88c 	bl	80035ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f89d 	bl	80035f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d122      	bne.n	8003512 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d11b      	bne.n	8003512 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f06f 0210 	mvn.w	r2, #16
 80034e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2208      	movs	r2, #8
 80034e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f870 	bl	80035de <HAL_TIM_IC_CaptureCallback>
 80034fe:	e005      	b.n	800350c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f862 	bl	80035ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f873 	bl	80035f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d10e      	bne.n	800353e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 0201 	mvn.w	r2, #1
 8003536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7fd fcb3 	bl	8000ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	2b80      	cmp	r3, #128	; 0x80
 800354a:	d10e      	bne.n	800356a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b80      	cmp	r3, #128	; 0x80
 8003558:	d107      	bne.n	800356a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f8e3 	bl	8003730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d10e      	bne.n	8003596 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003582:	2b40      	cmp	r3, #64	; 0x40
 8003584:	d107      	bne.n	8003596 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800358e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f838 	bl	8003606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d10e      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d107      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f06f 0220 	mvn.w	r2, #32
 80035ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f8ad 	bl	800371c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a34      	ldr	r2, [pc, #208]	; (8003700 <TIM_Base_SetConfig+0xe4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00f      	beq.n	8003654 <TIM_Base_SetConfig+0x38>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d00b      	beq.n	8003654 <TIM_Base_SetConfig+0x38>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a31      	ldr	r2, [pc, #196]	; (8003704 <TIM_Base_SetConfig+0xe8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d007      	beq.n	8003654 <TIM_Base_SetConfig+0x38>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a30      	ldr	r2, [pc, #192]	; (8003708 <TIM_Base_SetConfig+0xec>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <TIM_Base_SetConfig+0x38>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a2f      	ldr	r2, [pc, #188]	; (800370c <TIM_Base_SetConfig+0xf0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d108      	bne.n	8003666 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a25      	ldr	r2, [pc, #148]	; (8003700 <TIM_Base_SetConfig+0xe4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01b      	beq.n	80036a6 <TIM_Base_SetConfig+0x8a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003674:	d017      	beq.n	80036a6 <TIM_Base_SetConfig+0x8a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a22      	ldr	r2, [pc, #136]	; (8003704 <TIM_Base_SetConfig+0xe8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <TIM_Base_SetConfig+0x8a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a21      	ldr	r2, [pc, #132]	; (8003708 <TIM_Base_SetConfig+0xec>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00f      	beq.n	80036a6 <TIM_Base_SetConfig+0x8a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a20      	ldr	r2, [pc, #128]	; (800370c <TIM_Base_SetConfig+0xf0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <TIM_Base_SetConfig+0x8a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <TIM_Base_SetConfig+0xf4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <TIM_Base_SetConfig+0x8a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a1e      	ldr	r2, [pc, #120]	; (8003714 <TIM_Base_SetConfig+0xf8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_Base_SetConfig+0x8a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a1d      	ldr	r2, [pc, #116]	; (8003718 <TIM_Base_SetConfig+0xfc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d108      	bne.n	80036b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a08      	ldr	r2, [pc, #32]	; (8003700 <TIM_Base_SetConfig+0xe4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d103      	bne.n	80036ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	615a      	str	r2, [r3, #20]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40010000 	.word	0x40010000
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40000c00 	.word	0x40000c00
 8003710:	40014000 	.word	0x40014000
 8003714:	40014400 	.word	0x40014400
 8003718:	40014800 	.word	0x40014800

0800371c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e03f      	b.n	80037d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd fd76 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fc43 	bl	8004014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800379c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b088      	sub	sp, #32
 80037e2:	af02      	add	r7, sp, #8
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	f040 8083 	bne.w	8003906 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_UART_Transmit+0x2e>
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e07b      	b.n	8003908 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_UART_Transmit+0x40>
 800381a:	2302      	movs	r3, #2
 800381c:	e074      	b.n	8003908 <HAL_UART_Transmit+0x12a>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2221      	movs	r2, #33	; 0x21
 8003830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003834:	f7fd ff6e 	bl	8001714 <HAL_GetTick>
 8003838:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003846:	e042      	b.n	80038ce <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385e:	d122      	bne.n	80038a6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2200      	movs	r2, #0
 8003868:	2180      	movs	r1, #128	; 0x80
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fa66 	bl	8003d3c <UART_WaitOnFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e046      	b.n	8003908 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800388c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	3302      	adds	r3, #2
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	e017      	b.n	80038ce <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	e013      	b.n	80038ce <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2200      	movs	r2, #0
 80038ae:	2180      	movs	r1, #128	; 0x80
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fa43 	bl	8003d3c <UART_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e023      	b.n	8003908 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	60ba      	str	r2, [r7, #8]
 80038c6:	781a      	ldrb	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1b7      	bne.n	8003848 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2200      	movs	r2, #0
 80038e0:	2140      	movs	r1, #64	; 0x40
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fa2a 	bl	8003d3c <UART_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e00a      	b.n	8003908 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	e000      	b.n	8003908 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003906:	2302      	movs	r3, #2
  }
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b20      	cmp	r3, #32
 800392e:	f040 8090 	bne.w	8003a52 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_UART_Receive+0x2e>
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e088      	b.n	8003a54 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_UART_Receive+0x40>
 800394c:	2302      	movs	r3, #2
 800394e:	e081      	b.n	8003a54 <HAL_UART_Receive+0x144>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2222      	movs	r2, #34	; 0x22
 8003962:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003966:	f7fd fed5 	bl	8001714 <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	88fa      	ldrh	r2, [r7, #6]
 8003976:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003978:	e05c      	b.n	8003a34 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003990:	d12b      	bne.n	80039ea <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	2120      	movs	r1, #32
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f9cd 	bl	8003d3c <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e053      	b.n	8003a54 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10c      	bne.n	80039d2 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	3302      	adds	r3, #2
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	e030      	b.n	8003a34 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	b29a      	uxth	r2, r3
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	3301      	adds	r3, #1
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	e024      	b.n	8003a34 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2200      	movs	r2, #0
 80039f2:	2120      	movs	r1, #32
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f9a1 	bl	8003d3c <UART_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e027      	b.n	8003a54 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d108      	bne.n	8003a1e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6859      	ldr	r1, [r3, #4]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	60ba      	str	r2, [r7, #8]
 8003a18:	b2ca      	uxtb	r2, r1
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	e00a      	b.n	8003a34 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1c59      	adds	r1, r3, #1
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d19d      	bne.n	800397a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e000      	b.n	8003a54 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
  }
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d140      	bne.n	8003af8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_UART_Receive_IT+0x26>
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e039      	b.n	8003afa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_UART_Receive_IT+0x38>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e032      	b.n	8003afa <HAL_UART_Receive_IT+0x9e>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	88fa      	ldrh	r2, [r7, #6]
 8003aa6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	88fa      	ldrh	r2, [r7, #6]
 8003aac:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2222      	movs	r2, #34	; 0x22
 8003ab8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0220 	orr.w	r2, r2, #32
 8003af2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10d      	bne.n	8003b5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_UART_IRQHandler+0x52>
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f9dc 	bl	8003f10 <UART_Receive_IT>
      return;
 8003b58:	e0cc      	b.n	8003cf4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80ab 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x1b0>
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d105      	bne.n	8003b78 <HAL_UART_IRQHandler+0x70>
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 80a0 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_UART_IRQHandler+0x90>
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	f043 0201 	orr.w	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_UART_IRQHandler+0xb0>
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	f043 0202 	orr.w	r2, r3, #2
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_UART_IRQHandler+0xd0>
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd0:	f043 0204 	orr.w	r2, r3, #4
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_UART_IRQHandler+0xf0>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	f043 0208 	orr.w	r2, r3, #8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d078      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d007      	beq.n	8003c1a <HAL_UART_IRQHandler+0x112>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f97b 	bl	8003f10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c24:	2b40      	cmp	r3, #64	; 0x40
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <HAL_UART_IRQHandler+0x13a>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d031      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f8c4 	bl	8003dd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d123      	bne.n	8003c9e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c64:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d013      	beq.n	8003c96 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c72:	4a22      	ldr	r2, [pc, #136]	; (8003cfc <HAL_UART_IRQHandler+0x1f4>)
 8003c74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe f96a 	bl	8001f54 <HAL_DMA_Abort_IT>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c90:	4610      	mov	r0, r2
 8003c92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	e00e      	b.n	8003cb4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f846 	bl	8003d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	e00a      	b.n	8003cb4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f842 	bl	8003d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	e006      	b.n	8003cb4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f83e 	bl	8003d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003cb2:	e01e      	b.n	8003cf2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	bf00      	nop
    return;
 8003cb6:	e01c      	b.n	8003cf2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x1cc>
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f8b1 	bl	8003e34 <UART_Transmit_IT>
    return;
 8003cd2:	e00f      	b.n	8003cf4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x1ec>
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f8f9 	bl	8003ee0 <UART_EndTransmit_IT>
    return;
 8003cee:	bf00      	nop
 8003cf0:	e000      	b.n	8003cf4 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003cf2:	bf00      	nop
  }
}
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	08003e0d 	.word	0x08003e0d

08003d00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d4c:	e02c      	b.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d028      	beq.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d5c:	f7fd fcda 	bl	8001714 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d21d      	bcs.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e00f      	b.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4013      	ands	r3, r2
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d0c3      	beq.n	8003d4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003de6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f7ff ff7e 	bl	8003d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b21      	cmp	r3, #33	; 0x21
 8003e46:	d144      	bne.n	8003ed2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e50:	d11a      	bne.n	8003e88 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e66:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	1c9a      	adds	r2, r3, #2
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	621a      	str	r2, [r3, #32]
 8003e7a:	e00e      	b.n	8003e9a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	621a      	str	r2, [r3, #32]
 8003e86:	e008      	b.n	8003e9a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	1c59      	adds	r1, r3, #1
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6211      	str	r1, [r2, #32]
 8003e92:	781a      	ldrb	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10f      	bne.n	8003ece <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ebc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ecc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e000      	b.n	8003ed4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
  }
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff fefd 	bl	8003d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b22      	cmp	r3, #34	; 0x22
 8003f22:	d171      	bne.n	8004008 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	d123      	bne.n	8003f76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10e      	bne.n	8003f5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	1c9a      	adds	r2, r3, #2
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28
 8003f58:	e029      	b.n	8003fae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28
 8003f74:	e01b      	b.n	8003fae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6858      	ldr	r0, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	1c59      	adds	r1, r3, #1
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6291      	str	r1, [r2, #40]	; 0x28
 8003f8e:	b2c2      	uxtb	r2, r0
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	e00c      	b.n	8003fae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	1c58      	adds	r0, r3, #1
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	6288      	str	r0, [r1, #40]	; 0x28
 8003fa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d120      	bne.n	8004004 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0220 	bic.w	r2, r2, #32
 8003fd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fe8a 	bl	8003d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	e002      	b.n	800400a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e000      	b.n	800400a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004014:	b5b0      	push	{r4, r5, r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004054:	f023 030c 	bic.w	r3, r3, #12
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	68f9      	ldr	r1, [r7, #12]
 800405e:	430b      	orrs	r3, r1
 8004060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699a      	ldr	r2, [r3, #24]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004080:	f040 80e4 	bne.w	800424c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4aab      	ldr	r2, [pc, #684]	; (8004338 <UART_SetConfig+0x324>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <UART_SetConfig+0x84>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4aaa      	ldr	r2, [pc, #680]	; (800433c <UART_SetConfig+0x328>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d16c      	bne.n	8004172 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004098:	f7ff f88c 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 800409c:	4602      	mov	r2, r0
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009a      	lsls	r2, r3, #2
 80040a6:	441a      	add	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b2:	4aa3      	ldr	r2, [pc, #652]	; (8004340 <UART_SetConfig+0x32c>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	011c      	lsls	r4, r3, #4
 80040bc:	f7ff f87a 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	009a      	lsls	r2, r3, #2
 80040ca:	441a      	add	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80040d6:	f7ff f86d 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 80040da:	4602      	mov	r2, r0
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009a      	lsls	r2, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	4a93      	ldr	r2, [pc, #588]	; (8004340 <UART_SetConfig+0x32c>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	2264      	movs	r2, #100	; 0x64
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	1aeb      	subs	r3, r5, r3
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	3332      	adds	r3, #50	; 0x32
 8004104:	4a8e      	ldr	r2, [pc, #568]	; (8004340 <UART_SetConfig+0x32c>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004112:	441c      	add	r4, r3
 8004114:	f7ff f84e 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 8004118:	4602      	mov	r2, r0
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009a      	lsls	r2, r3, #2
 8004122:	441a      	add	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	fbb2 f5f3 	udiv	r5, r2, r3
 800412e:	f7ff f841 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 8004132:	4602      	mov	r2, r0
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	4a7d      	ldr	r2, [pc, #500]	; (8004340 <UART_SetConfig+0x32c>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2264      	movs	r2, #100	; 0x64
 8004152:	fb02 f303 	mul.w	r3, r2, r3
 8004156:	1aeb      	subs	r3, r5, r3
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	3332      	adds	r3, #50	; 0x32
 800415c:	4a78      	ldr	r2, [pc, #480]	; (8004340 <UART_SetConfig+0x32c>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 0207 	and.w	r2, r3, #7
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4422      	add	r2, r4
 800416e:	609a      	str	r2, [r3, #8]
 8004170:	e154      	b.n	800441c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004172:	f7ff f80b 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004176:	4602      	mov	r2, r0
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009a      	lsls	r2, r3, #2
 8004180:	441a      	add	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	4a6c      	ldr	r2, [pc, #432]	; (8004340 <UART_SetConfig+0x32c>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	011c      	lsls	r4, r3, #4
 8004196:	f7fe fff9 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 800419a:	4602      	mov	r2, r0
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009a      	lsls	r2, r3, #2
 80041a4:	441a      	add	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80041b0:	f7fe ffec 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	009a      	lsls	r2, r3, #2
 80041be:	441a      	add	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ca:	4a5d      	ldr	r2, [pc, #372]	; (8004340 <UART_SetConfig+0x32c>)
 80041cc:	fba2 2303 	umull	r2, r3, r2, r3
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	2264      	movs	r2, #100	; 0x64
 80041d4:	fb02 f303 	mul.w	r3, r2, r3
 80041d8:	1aeb      	subs	r3, r5, r3
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	3332      	adds	r3, #50	; 0x32
 80041de:	4a58      	ldr	r2, [pc, #352]	; (8004340 <UART_SetConfig+0x32c>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041ec:	441c      	add	r4, r3
 80041ee:	f7fe ffcd 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80041f2:	4602      	mov	r2, r0
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009a      	lsls	r2, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	fbb2 f5f3 	udiv	r5, r2, r3
 8004208:	f7fe ffc0 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 800420c:	4602      	mov	r2, r0
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	009a      	lsls	r2, r3, #2
 8004216:	441a      	add	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004222:	4a47      	ldr	r2, [pc, #284]	; (8004340 <UART_SetConfig+0x32c>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	2264      	movs	r2, #100	; 0x64
 800422c:	fb02 f303 	mul.w	r3, r2, r3
 8004230:	1aeb      	subs	r3, r5, r3
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	3332      	adds	r3, #50	; 0x32
 8004236:	4a42      	ldr	r2, [pc, #264]	; (8004340 <UART_SetConfig+0x32c>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	f003 0207 	and.w	r2, r3, #7
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4422      	add	r2, r4
 8004248:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800424a:	e0e7      	b.n	800441c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a39      	ldr	r2, [pc, #228]	; (8004338 <UART_SetConfig+0x324>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <UART_SetConfig+0x24c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a38      	ldr	r2, [pc, #224]	; (800433c <UART_SetConfig+0x328>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d171      	bne.n	8004344 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004260:	f7fe ffa8 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 8004264:	4602      	mov	r2, r0
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009a      	lsls	r2, r3, #2
 800426e:	441a      	add	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	fbb2 f3f3 	udiv	r3, r2, r3
 800427a:	4a31      	ldr	r2, [pc, #196]	; (8004340 <UART_SetConfig+0x32c>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	011c      	lsls	r4, r3, #4
 8004284:	f7fe ff96 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 8004288:	4602      	mov	r2, r0
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	009a      	lsls	r2, r3, #2
 8004292:	441a      	add	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	fbb2 f5f3 	udiv	r5, r2, r3
 800429e:	f7fe ff89 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 80042a2:	4602      	mov	r2, r0
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	009a      	lsls	r2, r3, #2
 80042ac:	441a      	add	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b8:	4a21      	ldr	r2, [pc, #132]	; (8004340 <UART_SetConfig+0x32c>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	2264      	movs	r2, #100	; 0x64
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	1aeb      	subs	r3, r5, r3
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	3332      	adds	r3, #50	; 0x32
 80042cc:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <UART_SetConfig+0x32c>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d8:	441c      	add	r4, r3
 80042da:	f7fe ff6b 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 80042de:	4602      	mov	r2, r0
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009a      	lsls	r2, r3, #2
 80042e8:	441a      	add	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80042f4:	f7fe ff5e 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009a      	lsls	r2, r3, #2
 8004302:	441a      	add	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	fbb2 f3f3 	udiv	r3, r2, r3
 800430e:	4a0c      	ldr	r2, [pc, #48]	; (8004340 <UART_SetConfig+0x32c>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	2264      	movs	r2, #100	; 0x64
 8004318:	fb02 f303 	mul.w	r3, r2, r3
 800431c:	1aeb      	subs	r3, r5, r3
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	3332      	adds	r3, #50	; 0x32
 8004322:	4a07      	ldr	r2, [pc, #28]	; (8004340 <UART_SetConfig+0x32c>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	f003 020f 	and.w	r2, r3, #15
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4422      	add	r2, r4
 8004334:	609a      	str	r2, [r3, #8]
 8004336:	e071      	b.n	800441c <UART_SetConfig+0x408>
 8004338:	40011000 	.word	0x40011000
 800433c:	40011400 	.word	0x40011400
 8004340:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004344:	f7fe ff22 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004348:	4602      	mov	r2, r0
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	009a      	lsls	r2, r3, #2
 8004352:	441a      	add	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	fbb2 f3f3 	udiv	r3, r2, r3
 800435e:	4a31      	ldr	r2, [pc, #196]	; (8004424 <UART_SetConfig+0x410>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	011c      	lsls	r4, r3, #4
 8004368:	f7fe ff10 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 800436c:	4602      	mov	r2, r0
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009a      	lsls	r2, r3, #2
 8004376:	441a      	add	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004382:	f7fe ff03 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004386:	4602      	mov	r2, r0
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009a      	lsls	r2, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	4a21      	ldr	r2, [pc, #132]	; (8004424 <UART_SetConfig+0x410>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	2264      	movs	r2, #100	; 0x64
 80043a6:	fb02 f303 	mul.w	r3, r2, r3
 80043aa:	1aeb      	subs	r3, r5, r3
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	3332      	adds	r3, #50	; 0x32
 80043b0:	4a1c      	ldr	r2, [pc, #112]	; (8004424 <UART_SetConfig+0x410>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043bc:	441c      	add	r4, r3
 80043be:	f7fe fee5 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80043c2:	4602      	mov	r2, r0
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	009a      	lsls	r2, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	fbb2 f5f3 	udiv	r5, r2, r3
 80043d8:	f7fe fed8 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	009a      	lsls	r2, r3, #2
 80043e6:	441a      	add	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	4a0c      	ldr	r2, [pc, #48]	; (8004424 <UART_SetConfig+0x410>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	2264      	movs	r2, #100	; 0x64
 80043fc:	fb02 f303 	mul.w	r3, r2, r3
 8004400:	1aeb      	subs	r3, r5, r3
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	3332      	adds	r3, #50	; 0x32
 8004406:	4a07      	ldr	r2, [pc, #28]	; (8004424 <UART_SetConfig+0x410>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	f003 020f 	and.w	r2, r3, #15
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4422      	add	r2, r4
 8004418:	609a      	str	r2, [r3, #8]
}
 800441a:	e7ff      	b.n	800441c <UART_SetConfig+0x408>
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bdb0      	pop	{r4, r5, r7, pc}
 8004424:	51eb851f 	.word	0x51eb851f

08004428 <__errno>:
 8004428:	4b01      	ldr	r3, [pc, #4]	; (8004430 <__errno+0x8>)
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000008 	.word	0x20000008

08004434 <__libc_init_array>:
 8004434:	b570      	push	{r4, r5, r6, lr}
 8004436:	4e0d      	ldr	r6, [pc, #52]	; (800446c <__libc_init_array+0x38>)
 8004438:	4c0d      	ldr	r4, [pc, #52]	; (8004470 <__libc_init_array+0x3c>)
 800443a:	1ba4      	subs	r4, r4, r6
 800443c:	10a4      	asrs	r4, r4, #2
 800443e:	2500      	movs	r5, #0
 8004440:	42a5      	cmp	r5, r4
 8004442:	d109      	bne.n	8004458 <__libc_init_array+0x24>
 8004444:	4e0b      	ldr	r6, [pc, #44]	; (8004474 <__libc_init_array+0x40>)
 8004446:	4c0c      	ldr	r4, [pc, #48]	; (8004478 <__libc_init_array+0x44>)
 8004448:	f001 f9f0 	bl	800582c <_init>
 800444c:	1ba4      	subs	r4, r4, r6
 800444e:	10a4      	asrs	r4, r4, #2
 8004450:	2500      	movs	r5, #0
 8004452:	42a5      	cmp	r5, r4
 8004454:	d105      	bne.n	8004462 <__libc_init_array+0x2e>
 8004456:	bd70      	pop	{r4, r5, r6, pc}
 8004458:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800445c:	4798      	blx	r3
 800445e:	3501      	adds	r5, #1
 8004460:	e7ee      	b.n	8004440 <__libc_init_array+0xc>
 8004462:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004466:	4798      	blx	r3
 8004468:	3501      	adds	r5, #1
 800446a:	e7f2      	b.n	8004452 <__libc_init_array+0x1e>
 800446c:	08005980 	.word	0x08005980
 8004470:	08005980 	.word	0x08005980
 8004474:	08005980 	.word	0x08005980
 8004478:	08005984 	.word	0x08005984

0800447c <memset>:
 800447c:	4402      	add	r2, r0
 800447e:	4603      	mov	r3, r0
 8004480:	4293      	cmp	r3, r2
 8004482:	d100      	bne.n	8004486 <memset+0xa>
 8004484:	4770      	bx	lr
 8004486:	f803 1b01 	strb.w	r1, [r3], #1
 800448a:	e7f9      	b.n	8004480 <memset+0x4>

0800448c <iprintf>:
 800448c:	b40f      	push	{r0, r1, r2, r3}
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <iprintf+0x2c>)
 8004490:	b513      	push	{r0, r1, r4, lr}
 8004492:	681c      	ldr	r4, [r3, #0]
 8004494:	b124      	cbz	r4, 80044a0 <iprintf+0x14>
 8004496:	69a3      	ldr	r3, [r4, #24]
 8004498:	b913      	cbnz	r3, 80044a0 <iprintf+0x14>
 800449a:	4620      	mov	r0, r4
 800449c:	f000 faf0 	bl	8004a80 <__sinit>
 80044a0:	ab05      	add	r3, sp, #20
 80044a2:	9a04      	ldr	r2, [sp, #16]
 80044a4:	68a1      	ldr	r1, [r4, #8]
 80044a6:	9301      	str	r3, [sp, #4]
 80044a8:	4620      	mov	r0, r4
 80044aa:	f000 fe03 	bl	80050b4 <_vfiprintf_r>
 80044ae:	b002      	add	sp, #8
 80044b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b4:	b004      	add	sp, #16
 80044b6:	4770      	bx	lr
 80044b8:	20000008 	.word	0x20000008

080044bc <_puts_r>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	460e      	mov	r6, r1
 80044c0:	4605      	mov	r5, r0
 80044c2:	b118      	cbz	r0, 80044cc <_puts_r+0x10>
 80044c4:	6983      	ldr	r3, [r0, #24]
 80044c6:	b90b      	cbnz	r3, 80044cc <_puts_r+0x10>
 80044c8:	f000 fada 	bl	8004a80 <__sinit>
 80044cc:	69ab      	ldr	r3, [r5, #24]
 80044ce:	68ac      	ldr	r4, [r5, #8]
 80044d0:	b913      	cbnz	r3, 80044d8 <_puts_r+0x1c>
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 fad4 	bl	8004a80 <__sinit>
 80044d8:	4b23      	ldr	r3, [pc, #140]	; (8004568 <_puts_r+0xac>)
 80044da:	429c      	cmp	r4, r3
 80044dc:	d117      	bne.n	800450e <_puts_r+0x52>
 80044de:	686c      	ldr	r4, [r5, #4]
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	071b      	lsls	r3, r3, #28
 80044e4:	d51d      	bpl.n	8004522 <_puts_r+0x66>
 80044e6:	6923      	ldr	r3, [r4, #16]
 80044e8:	b1db      	cbz	r3, 8004522 <_puts_r+0x66>
 80044ea:	3e01      	subs	r6, #1
 80044ec:	68a3      	ldr	r3, [r4, #8]
 80044ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044f2:	3b01      	subs	r3, #1
 80044f4:	60a3      	str	r3, [r4, #8]
 80044f6:	b9e9      	cbnz	r1, 8004534 <_puts_r+0x78>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	da2e      	bge.n	800455a <_puts_r+0x9e>
 80044fc:	4622      	mov	r2, r4
 80044fe:	210a      	movs	r1, #10
 8004500:	4628      	mov	r0, r5
 8004502:	f000 f90d 	bl	8004720 <__swbuf_r>
 8004506:	3001      	adds	r0, #1
 8004508:	d011      	beq.n	800452e <_puts_r+0x72>
 800450a:	200a      	movs	r0, #10
 800450c:	e011      	b.n	8004532 <_puts_r+0x76>
 800450e:	4b17      	ldr	r3, [pc, #92]	; (800456c <_puts_r+0xb0>)
 8004510:	429c      	cmp	r4, r3
 8004512:	d101      	bne.n	8004518 <_puts_r+0x5c>
 8004514:	68ac      	ldr	r4, [r5, #8]
 8004516:	e7e3      	b.n	80044e0 <_puts_r+0x24>
 8004518:	4b15      	ldr	r3, [pc, #84]	; (8004570 <_puts_r+0xb4>)
 800451a:	429c      	cmp	r4, r3
 800451c:	bf08      	it	eq
 800451e:	68ec      	ldreq	r4, [r5, #12]
 8004520:	e7de      	b.n	80044e0 <_puts_r+0x24>
 8004522:	4621      	mov	r1, r4
 8004524:	4628      	mov	r0, r5
 8004526:	f000 f94d 	bl	80047c4 <__swsetup_r>
 800452a:	2800      	cmp	r0, #0
 800452c:	d0dd      	beq.n	80044ea <_puts_r+0x2e>
 800452e:	f04f 30ff 	mov.w	r0, #4294967295
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	2b00      	cmp	r3, #0
 8004536:	da04      	bge.n	8004542 <_puts_r+0x86>
 8004538:	69a2      	ldr	r2, [r4, #24]
 800453a:	429a      	cmp	r2, r3
 800453c:	dc06      	bgt.n	800454c <_puts_r+0x90>
 800453e:	290a      	cmp	r1, #10
 8004540:	d004      	beq.n	800454c <_puts_r+0x90>
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	6022      	str	r2, [r4, #0]
 8004548:	7019      	strb	r1, [r3, #0]
 800454a:	e7cf      	b.n	80044ec <_puts_r+0x30>
 800454c:	4622      	mov	r2, r4
 800454e:	4628      	mov	r0, r5
 8004550:	f000 f8e6 	bl	8004720 <__swbuf_r>
 8004554:	3001      	adds	r0, #1
 8004556:	d1c9      	bne.n	80044ec <_puts_r+0x30>
 8004558:	e7e9      	b.n	800452e <_puts_r+0x72>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	200a      	movs	r0, #10
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	6022      	str	r2, [r4, #0]
 8004562:	7018      	strb	r0, [r3, #0]
 8004564:	e7e5      	b.n	8004532 <_puts_r+0x76>
 8004566:	bf00      	nop
 8004568:	08005904 	.word	0x08005904
 800456c:	08005924 	.word	0x08005924
 8004570:	080058e4 	.word	0x080058e4

08004574 <puts>:
 8004574:	4b02      	ldr	r3, [pc, #8]	; (8004580 <puts+0xc>)
 8004576:	4601      	mov	r1, r0
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	f7ff bf9f 	b.w	80044bc <_puts_r>
 800457e:	bf00      	nop
 8004580:	20000008 	.word	0x20000008

08004584 <setvbuf>:
 8004584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004588:	461d      	mov	r5, r3
 800458a:	4b51      	ldr	r3, [pc, #324]	; (80046d0 <setvbuf+0x14c>)
 800458c:	681e      	ldr	r6, [r3, #0]
 800458e:	4604      	mov	r4, r0
 8004590:	460f      	mov	r7, r1
 8004592:	4690      	mov	r8, r2
 8004594:	b126      	cbz	r6, 80045a0 <setvbuf+0x1c>
 8004596:	69b3      	ldr	r3, [r6, #24]
 8004598:	b913      	cbnz	r3, 80045a0 <setvbuf+0x1c>
 800459a:	4630      	mov	r0, r6
 800459c:	f000 fa70 	bl	8004a80 <__sinit>
 80045a0:	4b4c      	ldr	r3, [pc, #304]	; (80046d4 <setvbuf+0x150>)
 80045a2:	429c      	cmp	r4, r3
 80045a4:	d152      	bne.n	800464c <setvbuf+0xc8>
 80045a6:	6874      	ldr	r4, [r6, #4]
 80045a8:	f1b8 0f02 	cmp.w	r8, #2
 80045ac:	d006      	beq.n	80045bc <setvbuf+0x38>
 80045ae:	f1b8 0f01 	cmp.w	r8, #1
 80045b2:	f200 8089 	bhi.w	80046c8 <setvbuf+0x144>
 80045b6:	2d00      	cmp	r5, #0
 80045b8:	f2c0 8086 	blt.w	80046c8 <setvbuf+0x144>
 80045bc:	4621      	mov	r1, r4
 80045be:	4630      	mov	r0, r6
 80045c0:	f000 f9f4 	bl	80049ac <_fflush_r>
 80045c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045c6:	b141      	cbz	r1, 80045da <setvbuf+0x56>
 80045c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045cc:	4299      	cmp	r1, r3
 80045ce:	d002      	beq.n	80045d6 <setvbuf+0x52>
 80045d0:	4630      	mov	r0, r6
 80045d2:	f000 fb4b 	bl	8004c6c <_free_r>
 80045d6:	2300      	movs	r3, #0
 80045d8:	6363      	str	r3, [r4, #52]	; 0x34
 80045da:	2300      	movs	r3, #0
 80045dc:	61a3      	str	r3, [r4, #24]
 80045de:	6063      	str	r3, [r4, #4]
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	061b      	lsls	r3, r3, #24
 80045e4:	d503      	bpl.n	80045ee <setvbuf+0x6a>
 80045e6:	6921      	ldr	r1, [r4, #16]
 80045e8:	4630      	mov	r0, r6
 80045ea:	f000 fb3f 	bl	8004c6c <_free_r>
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80045f4:	f023 0303 	bic.w	r3, r3, #3
 80045f8:	f1b8 0f02 	cmp.w	r8, #2
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	d05d      	beq.n	80046bc <setvbuf+0x138>
 8004600:	ab01      	add	r3, sp, #4
 8004602:	466a      	mov	r2, sp
 8004604:	4621      	mov	r1, r4
 8004606:	4630      	mov	r0, r6
 8004608:	f000 fac4 	bl	8004b94 <__swhatbuf_r>
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	4318      	orrs	r0, r3
 8004610:	81a0      	strh	r0, [r4, #12]
 8004612:	bb2d      	cbnz	r5, 8004660 <setvbuf+0xdc>
 8004614:	9d00      	ldr	r5, [sp, #0]
 8004616:	4628      	mov	r0, r5
 8004618:	f000 fb20 	bl	8004c5c <malloc>
 800461c:	4607      	mov	r7, r0
 800461e:	2800      	cmp	r0, #0
 8004620:	d14e      	bne.n	80046c0 <setvbuf+0x13c>
 8004622:	f8dd 9000 	ldr.w	r9, [sp]
 8004626:	45a9      	cmp	r9, r5
 8004628:	d13c      	bne.n	80046a4 <setvbuf+0x120>
 800462a:	f04f 30ff 	mov.w	r0, #4294967295
 800462e:	89a3      	ldrh	r3, [r4, #12]
 8004630:	f043 0302 	orr.w	r3, r3, #2
 8004634:	81a3      	strh	r3, [r4, #12]
 8004636:	2300      	movs	r3, #0
 8004638:	60a3      	str	r3, [r4, #8]
 800463a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	6123      	str	r3, [r4, #16]
 8004642:	2301      	movs	r3, #1
 8004644:	6163      	str	r3, [r4, #20]
 8004646:	b003      	add	sp, #12
 8004648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800464c:	4b22      	ldr	r3, [pc, #136]	; (80046d8 <setvbuf+0x154>)
 800464e:	429c      	cmp	r4, r3
 8004650:	d101      	bne.n	8004656 <setvbuf+0xd2>
 8004652:	68b4      	ldr	r4, [r6, #8]
 8004654:	e7a8      	b.n	80045a8 <setvbuf+0x24>
 8004656:	4b21      	ldr	r3, [pc, #132]	; (80046dc <setvbuf+0x158>)
 8004658:	429c      	cmp	r4, r3
 800465a:	bf08      	it	eq
 800465c:	68f4      	ldreq	r4, [r6, #12]
 800465e:	e7a3      	b.n	80045a8 <setvbuf+0x24>
 8004660:	2f00      	cmp	r7, #0
 8004662:	d0d8      	beq.n	8004616 <setvbuf+0x92>
 8004664:	69b3      	ldr	r3, [r6, #24]
 8004666:	b913      	cbnz	r3, 800466e <setvbuf+0xea>
 8004668:	4630      	mov	r0, r6
 800466a:	f000 fa09 	bl	8004a80 <__sinit>
 800466e:	f1b8 0f01 	cmp.w	r8, #1
 8004672:	bf08      	it	eq
 8004674:	89a3      	ldrheq	r3, [r4, #12]
 8004676:	6027      	str	r7, [r4, #0]
 8004678:	bf04      	itt	eq
 800467a:	f043 0301 	orreq.w	r3, r3, #1
 800467e:	81a3      	strheq	r3, [r4, #12]
 8004680:	89a3      	ldrh	r3, [r4, #12]
 8004682:	f013 0008 	ands.w	r0, r3, #8
 8004686:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800468a:	d01b      	beq.n	80046c4 <setvbuf+0x140>
 800468c:	f013 0001 	ands.w	r0, r3, #1
 8004690:	bf18      	it	ne
 8004692:	426d      	negne	r5, r5
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	bf1d      	ittte	ne
 800469a:	60a3      	strne	r3, [r4, #8]
 800469c:	61a5      	strne	r5, [r4, #24]
 800469e:	4618      	movne	r0, r3
 80046a0:	60a5      	streq	r5, [r4, #8]
 80046a2:	e7d0      	b.n	8004646 <setvbuf+0xc2>
 80046a4:	4648      	mov	r0, r9
 80046a6:	f000 fad9 	bl	8004c5c <malloc>
 80046aa:	4607      	mov	r7, r0
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d0bc      	beq.n	800462a <setvbuf+0xa6>
 80046b0:	89a3      	ldrh	r3, [r4, #12]
 80046b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b6:	81a3      	strh	r3, [r4, #12]
 80046b8:	464d      	mov	r5, r9
 80046ba:	e7d3      	b.n	8004664 <setvbuf+0xe0>
 80046bc:	2000      	movs	r0, #0
 80046be:	e7b6      	b.n	800462e <setvbuf+0xaa>
 80046c0:	46a9      	mov	r9, r5
 80046c2:	e7f5      	b.n	80046b0 <setvbuf+0x12c>
 80046c4:	60a0      	str	r0, [r4, #8]
 80046c6:	e7be      	b.n	8004646 <setvbuf+0xc2>
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295
 80046cc:	e7bb      	b.n	8004646 <setvbuf+0xc2>
 80046ce:	bf00      	nop
 80046d0:	20000008 	.word	0x20000008
 80046d4:	08005904 	.word	0x08005904
 80046d8:	08005924 	.word	0x08005924
 80046dc:	080058e4 	.word	0x080058e4

080046e0 <siprintf>:
 80046e0:	b40e      	push	{r1, r2, r3}
 80046e2:	b500      	push	{lr}
 80046e4:	b09c      	sub	sp, #112	; 0x70
 80046e6:	ab1d      	add	r3, sp, #116	; 0x74
 80046e8:	9002      	str	r0, [sp, #8]
 80046ea:	9006      	str	r0, [sp, #24]
 80046ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046f0:	4809      	ldr	r0, [pc, #36]	; (8004718 <siprintf+0x38>)
 80046f2:	9107      	str	r1, [sp, #28]
 80046f4:	9104      	str	r1, [sp, #16]
 80046f6:	4909      	ldr	r1, [pc, #36]	; (800471c <siprintf+0x3c>)
 80046f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80046fc:	9105      	str	r1, [sp, #20]
 80046fe:	6800      	ldr	r0, [r0, #0]
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	a902      	add	r1, sp, #8
 8004704:	f000 fbb4 	bl	8004e70 <_svfiprintf_r>
 8004708:	9b02      	ldr	r3, [sp, #8]
 800470a:	2200      	movs	r2, #0
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	b01c      	add	sp, #112	; 0x70
 8004710:	f85d eb04 	ldr.w	lr, [sp], #4
 8004714:	b003      	add	sp, #12
 8004716:	4770      	bx	lr
 8004718:	20000008 	.word	0x20000008
 800471c:	ffff0208 	.word	0xffff0208

08004720 <__swbuf_r>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	460e      	mov	r6, r1
 8004724:	4614      	mov	r4, r2
 8004726:	4605      	mov	r5, r0
 8004728:	b118      	cbz	r0, 8004732 <__swbuf_r+0x12>
 800472a:	6983      	ldr	r3, [r0, #24]
 800472c:	b90b      	cbnz	r3, 8004732 <__swbuf_r+0x12>
 800472e:	f000 f9a7 	bl	8004a80 <__sinit>
 8004732:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <__swbuf_r+0x98>)
 8004734:	429c      	cmp	r4, r3
 8004736:	d12a      	bne.n	800478e <__swbuf_r+0x6e>
 8004738:	686c      	ldr	r4, [r5, #4]
 800473a:	69a3      	ldr	r3, [r4, #24]
 800473c:	60a3      	str	r3, [r4, #8]
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	071a      	lsls	r2, r3, #28
 8004742:	d52e      	bpl.n	80047a2 <__swbuf_r+0x82>
 8004744:	6923      	ldr	r3, [r4, #16]
 8004746:	b363      	cbz	r3, 80047a2 <__swbuf_r+0x82>
 8004748:	6923      	ldr	r3, [r4, #16]
 800474a:	6820      	ldr	r0, [r4, #0]
 800474c:	1ac0      	subs	r0, r0, r3
 800474e:	6963      	ldr	r3, [r4, #20]
 8004750:	b2f6      	uxtb	r6, r6
 8004752:	4283      	cmp	r3, r0
 8004754:	4637      	mov	r7, r6
 8004756:	dc04      	bgt.n	8004762 <__swbuf_r+0x42>
 8004758:	4621      	mov	r1, r4
 800475a:	4628      	mov	r0, r5
 800475c:	f000 f926 	bl	80049ac <_fflush_r>
 8004760:	bb28      	cbnz	r0, 80047ae <__swbuf_r+0x8e>
 8004762:	68a3      	ldr	r3, [r4, #8]
 8004764:	3b01      	subs	r3, #1
 8004766:	60a3      	str	r3, [r4, #8]
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	6022      	str	r2, [r4, #0]
 800476e:	701e      	strb	r6, [r3, #0]
 8004770:	6963      	ldr	r3, [r4, #20]
 8004772:	3001      	adds	r0, #1
 8004774:	4283      	cmp	r3, r0
 8004776:	d004      	beq.n	8004782 <__swbuf_r+0x62>
 8004778:	89a3      	ldrh	r3, [r4, #12]
 800477a:	07db      	lsls	r3, r3, #31
 800477c:	d519      	bpl.n	80047b2 <__swbuf_r+0x92>
 800477e:	2e0a      	cmp	r6, #10
 8004780:	d117      	bne.n	80047b2 <__swbuf_r+0x92>
 8004782:	4621      	mov	r1, r4
 8004784:	4628      	mov	r0, r5
 8004786:	f000 f911 	bl	80049ac <_fflush_r>
 800478a:	b190      	cbz	r0, 80047b2 <__swbuf_r+0x92>
 800478c:	e00f      	b.n	80047ae <__swbuf_r+0x8e>
 800478e:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <__swbuf_r+0x9c>)
 8004790:	429c      	cmp	r4, r3
 8004792:	d101      	bne.n	8004798 <__swbuf_r+0x78>
 8004794:	68ac      	ldr	r4, [r5, #8]
 8004796:	e7d0      	b.n	800473a <__swbuf_r+0x1a>
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <__swbuf_r+0xa0>)
 800479a:	429c      	cmp	r4, r3
 800479c:	bf08      	it	eq
 800479e:	68ec      	ldreq	r4, [r5, #12]
 80047a0:	e7cb      	b.n	800473a <__swbuf_r+0x1a>
 80047a2:	4621      	mov	r1, r4
 80047a4:	4628      	mov	r0, r5
 80047a6:	f000 f80d 	bl	80047c4 <__swsetup_r>
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d0cc      	beq.n	8004748 <__swbuf_r+0x28>
 80047ae:	f04f 37ff 	mov.w	r7, #4294967295
 80047b2:	4638      	mov	r0, r7
 80047b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b6:	bf00      	nop
 80047b8:	08005904 	.word	0x08005904
 80047bc:	08005924 	.word	0x08005924
 80047c0:	080058e4 	.word	0x080058e4

080047c4 <__swsetup_r>:
 80047c4:	4b32      	ldr	r3, [pc, #200]	; (8004890 <__swsetup_r+0xcc>)
 80047c6:	b570      	push	{r4, r5, r6, lr}
 80047c8:	681d      	ldr	r5, [r3, #0]
 80047ca:	4606      	mov	r6, r0
 80047cc:	460c      	mov	r4, r1
 80047ce:	b125      	cbz	r5, 80047da <__swsetup_r+0x16>
 80047d0:	69ab      	ldr	r3, [r5, #24]
 80047d2:	b913      	cbnz	r3, 80047da <__swsetup_r+0x16>
 80047d4:	4628      	mov	r0, r5
 80047d6:	f000 f953 	bl	8004a80 <__sinit>
 80047da:	4b2e      	ldr	r3, [pc, #184]	; (8004894 <__swsetup_r+0xd0>)
 80047dc:	429c      	cmp	r4, r3
 80047de:	d10f      	bne.n	8004800 <__swsetup_r+0x3c>
 80047e0:	686c      	ldr	r4, [r5, #4]
 80047e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	0715      	lsls	r5, r2, #28
 80047ea:	d42c      	bmi.n	8004846 <__swsetup_r+0x82>
 80047ec:	06d0      	lsls	r0, r2, #27
 80047ee:	d411      	bmi.n	8004814 <__swsetup_r+0x50>
 80047f0:	2209      	movs	r2, #9
 80047f2:	6032      	str	r2, [r6, #0]
 80047f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f8:	81a3      	strh	r3, [r4, #12]
 80047fa:	f04f 30ff 	mov.w	r0, #4294967295
 80047fe:	e03e      	b.n	800487e <__swsetup_r+0xba>
 8004800:	4b25      	ldr	r3, [pc, #148]	; (8004898 <__swsetup_r+0xd4>)
 8004802:	429c      	cmp	r4, r3
 8004804:	d101      	bne.n	800480a <__swsetup_r+0x46>
 8004806:	68ac      	ldr	r4, [r5, #8]
 8004808:	e7eb      	b.n	80047e2 <__swsetup_r+0x1e>
 800480a:	4b24      	ldr	r3, [pc, #144]	; (800489c <__swsetup_r+0xd8>)
 800480c:	429c      	cmp	r4, r3
 800480e:	bf08      	it	eq
 8004810:	68ec      	ldreq	r4, [r5, #12]
 8004812:	e7e6      	b.n	80047e2 <__swsetup_r+0x1e>
 8004814:	0751      	lsls	r1, r2, #29
 8004816:	d512      	bpl.n	800483e <__swsetup_r+0x7a>
 8004818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800481a:	b141      	cbz	r1, 800482e <__swsetup_r+0x6a>
 800481c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004820:	4299      	cmp	r1, r3
 8004822:	d002      	beq.n	800482a <__swsetup_r+0x66>
 8004824:	4630      	mov	r0, r6
 8004826:	f000 fa21 	bl	8004c6c <_free_r>
 800482a:	2300      	movs	r3, #0
 800482c:	6363      	str	r3, [r4, #52]	; 0x34
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004834:	81a3      	strh	r3, [r4, #12]
 8004836:	2300      	movs	r3, #0
 8004838:	6063      	str	r3, [r4, #4]
 800483a:	6923      	ldr	r3, [r4, #16]
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	f043 0308 	orr.w	r3, r3, #8
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	b94b      	cbnz	r3, 800485e <__swsetup_r+0x9a>
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004854:	d003      	beq.n	800485e <__swsetup_r+0x9a>
 8004856:	4621      	mov	r1, r4
 8004858:	4630      	mov	r0, r6
 800485a:	f000 f9bf 	bl	8004bdc <__smakebuf_r>
 800485e:	89a2      	ldrh	r2, [r4, #12]
 8004860:	f012 0301 	ands.w	r3, r2, #1
 8004864:	d00c      	beq.n	8004880 <__swsetup_r+0xbc>
 8004866:	2300      	movs	r3, #0
 8004868:	60a3      	str	r3, [r4, #8]
 800486a:	6963      	ldr	r3, [r4, #20]
 800486c:	425b      	negs	r3, r3
 800486e:	61a3      	str	r3, [r4, #24]
 8004870:	6923      	ldr	r3, [r4, #16]
 8004872:	b953      	cbnz	r3, 800488a <__swsetup_r+0xc6>
 8004874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004878:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800487c:	d1ba      	bne.n	80047f4 <__swsetup_r+0x30>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	0792      	lsls	r2, r2, #30
 8004882:	bf58      	it	pl
 8004884:	6963      	ldrpl	r3, [r4, #20]
 8004886:	60a3      	str	r3, [r4, #8]
 8004888:	e7f2      	b.n	8004870 <__swsetup_r+0xac>
 800488a:	2000      	movs	r0, #0
 800488c:	e7f7      	b.n	800487e <__swsetup_r+0xba>
 800488e:	bf00      	nop
 8004890:	20000008 	.word	0x20000008
 8004894:	08005904 	.word	0x08005904
 8004898:	08005924 	.word	0x08005924
 800489c:	080058e4 	.word	0x080058e4

080048a0 <__sflush_r>:
 80048a0:	898a      	ldrh	r2, [r1, #12]
 80048a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a6:	4605      	mov	r5, r0
 80048a8:	0710      	lsls	r0, r2, #28
 80048aa:	460c      	mov	r4, r1
 80048ac:	d458      	bmi.n	8004960 <__sflush_r+0xc0>
 80048ae:	684b      	ldr	r3, [r1, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	dc05      	bgt.n	80048c0 <__sflush_r+0x20>
 80048b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	dc02      	bgt.n	80048c0 <__sflush_r+0x20>
 80048ba:	2000      	movs	r0, #0
 80048bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048c2:	2e00      	cmp	r6, #0
 80048c4:	d0f9      	beq.n	80048ba <__sflush_r+0x1a>
 80048c6:	2300      	movs	r3, #0
 80048c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048cc:	682f      	ldr	r7, [r5, #0]
 80048ce:	6a21      	ldr	r1, [r4, #32]
 80048d0:	602b      	str	r3, [r5, #0]
 80048d2:	d032      	beq.n	800493a <__sflush_r+0x9a>
 80048d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048d6:	89a3      	ldrh	r3, [r4, #12]
 80048d8:	075a      	lsls	r2, r3, #29
 80048da:	d505      	bpl.n	80048e8 <__sflush_r+0x48>
 80048dc:	6863      	ldr	r3, [r4, #4]
 80048de:	1ac0      	subs	r0, r0, r3
 80048e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048e2:	b10b      	cbz	r3, 80048e8 <__sflush_r+0x48>
 80048e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048e6:	1ac0      	subs	r0, r0, r3
 80048e8:	2300      	movs	r3, #0
 80048ea:	4602      	mov	r2, r0
 80048ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ee:	6a21      	ldr	r1, [r4, #32]
 80048f0:	4628      	mov	r0, r5
 80048f2:	47b0      	blx	r6
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	d106      	bne.n	8004908 <__sflush_r+0x68>
 80048fa:	6829      	ldr	r1, [r5, #0]
 80048fc:	291d      	cmp	r1, #29
 80048fe:	d848      	bhi.n	8004992 <__sflush_r+0xf2>
 8004900:	4a29      	ldr	r2, [pc, #164]	; (80049a8 <__sflush_r+0x108>)
 8004902:	40ca      	lsrs	r2, r1
 8004904:	07d6      	lsls	r6, r2, #31
 8004906:	d544      	bpl.n	8004992 <__sflush_r+0xf2>
 8004908:	2200      	movs	r2, #0
 800490a:	6062      	str	r2, [r4, #4]
 800490c:	04d9      	lsls	r1, r3, #19
 800490e:	6922      	ldr	r2, [r4, #16]
 8004910:	6022      	str	r2, [r4, #0]
 8004912:	d504      	bpl.n	800491e <__sflush_r+0x7e>
 8004914:	1c42      	adds	r2, r0, #1
 8004916:	d101      	bne.n	800491c <__sflush_r+0x7c>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	b903      	cbnz	r3, 800491e <__sflush_r+0x7e>
 800491c:	6560      	str	r0, [r4, #84]	; 0x54
 800491e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004920:	602f      	str	r7, [r5, #0]
 8004922:	2900      	cmp	r1, #0
 8004924:	d0c9      	beq.n	80048ba <__sflush_r+0x1a>
 8004926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800492a:	4299      	cmp	r1, r3
 800492c:	d002      	beq.n	8004934 <__sflush_r+0x94>
 800492e:	4628      	mov	r0, r5
 8004930:	f000 f99c 	bl	8004c6c <_free_r>
 8004934:	2000      	movs	r0, #0
 8004936:	6360      	str	r0, [r4, #52]	; 0x34
 8004938:	e7c0      	b.n	80048bc <__sflush_r+0x1c>
 800493a:	2301      	movs	r3, #1
 800493c:	4628      	mov	r0, r5
 800493e:	47b0      	blx	r6
 8004940:	1c41      	adds	r1, r0, #1
 8004942:	d1c8      	bne.n	80048d6 <__sflush_r+0x36>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0c5      	beq.n	80048d6 <__sflush_r+0x36>
 800494a:	2b1d      	cmp	r3, #29
 800494c:	d001      	beq.n	8004952 <__sflush_r+0xb2>
 800494e:	2b16      	cmp	r3, #22
 8004950:	d101      	bne.n	8004956 <__sflush_r+0xb6>
 8004952:	602f      	str	r7, [r5, #0]
 8004954:	e7b1      	b.n	80048ba <__sflush_r+0x1a>
 8004956:	89a3      	ldrh	r3, [r4, #12]
 8004958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800495c:	81a3      	strh	r3, [r4, #12]
 800495e:	e7ad      	b.n	80048bc <__sflush_r+0x1c>
 8004960:	690f      	ldr	r7, [r1, #16]
 8004962:	2f00      	cmp	r7, #0
 8004964:	d0a9      	beq.n	80048ba <__sflush_r+0x1a>
 8004966:	0793      	lsls	r3, r2, #30
 8004968:	680e      	ldr	r6, [r1, #0]
 800496a:	bf08      	it	eq
 800496c:	694b      	ldreq	r3, [r1, #20]
 800496e:	600f      	str	r7, [r1, #0]
 8004970:	bf18      	it	ne
 8004972:	2300      	movne	r3, #0
 8004974:	eba6 0807 	sub.w	r8, r6, r7
 8004978:	608b      	str	r3, [r1, #8]
 800497a:	f1b8 0f00 	cmp.w	r8, #0
 800497e:	dd9c      	ble.n	80048ba <__sflush_r+0x1a>
 8004980:	4643      	mov	r3, r8
 8004982:	463a      	mov	r2, r7
 8004984:	6a21      	ldr	r1, [r4, #32]
 8004986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004988:	4628      	mov	r0, r5
 800498a:	47b0      	blx	r6
 800498c:	2800      	cmp	r0, #0
 800498e:	dc06      	bgt.n	800499e <__sflush_r+0xfe>
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004996:	81a3      	strh	r3, [r4, #12]
 8004998:	f04f 30ff 	mov.w	r0, #4294967295
 800499c:	e78e      	b.n	80048bc <__sflush_r+0x1c>
 800499e:	4407      	add	r7, r0
 80049a0:	eba8 0800 	sub.w	r8, r8, r0
 80049a4:	e7e9      	b.n	800497a <__sflush_r+0xda>
 80049a6:	bf00      	nop
 80049a8:	20400001 	.word	0x20400001

080049ac <_fflush_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	690b      	ldr	r3, [r1, #16]
 80049b0:	4605      	mov	r5, r0
 80049b2:	460c      	mov	r4, r1
 80049b4:	b1db      	cbz	r3, 80049ee <_fflush_r+0x42>
 80049b6:	b118      	cbz	r0, 80049c0 <_fflush_r+0x14>
 80049b8:	6983      	ldr	r3, [r0, #24]
 80049ba:	b90b      	cbnz	r3, 80049c0 <_fflush_r+0x14>
 80049bc:	f000 f860 	bl	8004a80 <__sinit>
 80049c0:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <_fflush_r+0x48>)
 80049c2:	429c      	cmp	r4, r3
 80049c4:	d109      	bne.n	80049da <_fflush_r+0x2e>
 80049c6:	686c      	ldr	r4, [r5, #4]
 80049c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049cc:	b17b      	cbz	r3, 80049ee <_fflush_r+0x42>
 80049ce:	4621      	mov	r1, r4
 80049d0:	4628      	mov	r0, r5
 80049d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049d6:	f7ff bf63 	b.w	80048a0 <__sflush_r>
 80049da:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <_fflush_r+0x4c>)
 80049dc:	429c      	cmp	r4, r3
 80049de:	d101      	bne.n	80049e4 <_fflush_r+0x38>
 80049e0:	68ac      	ldr	r4, [r5, #8]
 80049e2:	e7f1      	b.n	80049c8 <_fflush_r+0x1c>
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <_fflush_r+0x50>)
 80049e6:	429c      	cmp	r4, r3
 80049e8:	bf08      	it	eq
 80049ea:	68ec      	ldreq	r4, [r5, #12]
 80049ec:	e7ec      	b.n	80049c8 <_fflush_r+0x1c>
 80049ee:	2000      	movs	r0, #0
 80049f0:	bd38      	pop	{r3, r4, r5, pc}
 80049f2:	bf00      	nop
 80049f4:	08005904 	.word	0x08005904
 80049f8:	08005924 	.word	0x08005924
 80049fc:	080058e4 	.word	0x080058e4

08004a00 <std>:
 8004a00:	2300      	movs	r3, #0
 8004a02:	b510      	push	{r4, lr}
 8004a04:	4604      	mov	r4, r0
 8004a06:	e9c0 3300 	strd	r3, r3, [r0]
 8004a0a:	6083      	str	r3, [r0, #8]
 8004a0c:	8181      	strh	r1, [r0, #12]
 8004a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a10:	81c2      	strh	r2, [r0, #14]
 8004a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a16:	6183      	str	r3, [r0, #24]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	305c      	adds	r0, #92	; 0x5c
 8004a1e:	f7ff fd2d 	bl	800447c <memset>
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <std+0x38>)
 8004a24:	6263      	str	r3, [r4, #36]	; 0x24
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <std+0x3c>)
 8004a28:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <std+0x40>)
 8004a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <std+0x44>)
 8004a30:	6224      	str	r4, [r4, #32]
 8004a32:	6323      	str	r3, [r4, #48]	; 0x30
 8004a34:	bd10      	pop	{r4, pc}
 8004a36:	bf00      	nop
 8004a38:	08005611 	.word	0x08005611
 8004a3c:	08005633 	.word	0x08005633
 8004a40:	0800566b 	.word	0x0800566b
 8004a44:	0800568f 	.word	0x0800568f

08004a48 <_cleanup_r>:
 8004a48:	4901      	ldr	r1, [pc, #4]	; (8004a50 <_cleanup_r+0x8>)
 8004a4a:	f000 b885 	b.w	8004b58 <_fwalk_reent>
 8004a4e:	bf00      	nop
 8004a50:	080049ad 	.word	0x080049ad

08004a54 <__sfmoreglue>:
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	1e4a      	subs	r2, r1, #1
 8004a58:	2568      	movs	r5, #104	; 0x68
 8004a5a:	4355      	muls	r5, r2
 8004a5c:	460e      	mov	r6, r1
 8004a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a62:	f000 f951 	bl	8004d08 <_malloc_r>
 8004a66:	4604      	mov	r4, r0
 8004a68:	b140      	cbz	r0, 8004a7c <__sfmoreglue+0x28>
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	e9c0 1600 	strd	r1, r6, [r0]
 8004a70:	300c      	adds	r0, #12
 8004a72:	60a0      	str	r0, [r4, #8]
 8004a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a78:	f7ff fd00 	bl	800447c <memset>
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}

08004a80 <__sinit>:
 8004a80:	6983      	ldr	r3, [r0, #24]
 8004a82:	b510      	push	{r4, lr}
 8004a84:	4604      	mov	r4, r0
 8004a86:	bb33      	cbnz	r3, 8004ad6 <__sinit+0x56>
 8004a88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004a8c:	6503      	str	r3, [r0, #80]	; 0x50
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <__sinit+0x58>)
 8004a90:	4a12      	ldr	r2, [pc, #72]	; (8004adc <__sinit+0x5c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6282      	str	r2, [r0, #40]	; 0x28
 8004a96:	4298      	cmp	r0, r3
 8004a98:	bf04      	itt	eq
 8004a9a:	2301      	moveq	r3, #1
 8004a9c:	6183      	streq	r3, [r0, #24]
 8004a9e:	f000 f81f 	bl	8004ae0 <__sfp>
 8004aa2:	6060      	str	r0, [r4, #4]
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f000 f81b 	bl	8004ae0 <__sfp>
 8004aaa:	60a0      	str	r0, [r4, #8]
 8004aac:	4620      	mov	r0, r4
 8004aae:	f000 f817 	bl	8004ae0 <__sfp>
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	60e0      	str	r0, [r4, #12]
 8004ab6:	2104      	movs	r1, #4
 8004ab8:	6860      	ldr	r0, [r4, #4]
 8004aba:	f7ff ffa1 	bl	8004a00 <std>
 8004abe:	2201      	movs	r2, #1
 8004ac0:	2109      	movs	r1, #9
 8004ac2:	68a0      	ldr	r0, [r4, #8]
 8004ac4:	f7ff ff9c 	bl	8004a00 <std>
 8004ac8:	2202      	movs	r2, #2
 8004aca:	2112      	movs	r1, #18
 8004acc:	68e0      	ldr	r0, [r4, #12]
 8004ace:	f7ff ff97 	bl	8004a00 <std>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	61a3      	str	r3, [r4, #24]
 8004ad6:	bd10      	pop	{r4, pc}
 8004ad8:	080058e0 	.word	0x080058e0
 8004adc:	08004a49 	.word	0x08004a49

08004ae0 <__sfp>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <__sfp+0x70>)
 8004ae4:	681e      	ldr	r6, [r3, #0]
 8004ae6:	69b3      	ldr	r3, [r6, #24]
 8004ae8:	4607      	mov	r7, r0
 8004aea:	b913      	cbnz	r3, 8004af2 <__sfp+0x12>
 8004aec:	4630      	mov	r0, r6
 8004aee:	f7ff ffc7 	bl	8004a80 <__sinit>
 8004af2:	3648      	adds	r6, #72	; 0x48
 8004af4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	d503      	bpl.n	8004b04 <__sfp+0x24>
 8004afc:	6833      	ldr	r3, [r6, #0]
 8004afe:	b133      	cbz	r3, 8004b0e <__sfp+0x2e>
 8004b00:	6836      	ldr	r6, [r6, #0]
 8004b02:	e7f7      	b.n	8004af4 <__sfp+0x14>
 8004b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b08:	b16d      	cbz	r5, 8004b26 <__sfp+0x46>
 8004b0a:	3468      	adds	r4, #104	; 0x68
 8004b0c:	e7f4      	b.n	8004af8 <__sfp+0x18>
 8004b0e:	2104      	movs	r1, #4
 8004b10:	4638      	mov	r0, r7
 8004b12:	f7ff ff9f 	bl	8004a54 <__sfmoreglue>
 8004b16:	6030      	str	r0, [r6, #0]
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d1f1      	bne.n	8004b00 <__sfp+0x20>
 8004b1c:	230c      	movs	r3, #12
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4604      	mov	r4, r0
 8004b22:	4620      	mov	r0, r4
 8004b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <__sfp+0x74>)
 8004b28:	6665      	str	r5, [r4, #100]	; 0x64
 8004b2a:	e9c4 5500 	strd	r5, r5, [r4]
 8004b2e:	60a5      	str	r5, [r4, #8]
 8004b30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004b34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004b38:	2208      	movs	r2, #8
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b40:	f7ff fc9c 	bl	800447c <memset>
 8004b44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b4c:	e7e9      	b.n	8004b22 <__sfp+0x42>
 8004b4e:	bf00      	nop
 8004b50:	080058e0 	.word	0x080058e0
 8004b54:	ffff0001 	.word	0xffff0001

08004b58 <_fwalk_reent>:
 8004b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b5c:	4680      	mov	r8, r0
 8004b5e:	4689      	mov	r9, r1
 8004b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b64:	2600      	movs	r6, #0
 8004b66:	b914      	cbnz	r4, 8004b6e <_fwalk_reent+0x16>
 8004b68:	4630      	mov	r0, r6
 8004b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004b72:	3f01      	subs	r7, #1
 8004b74:	d501      	bpl.n	8004b7a <_fwalk_reent+0x22>
 8004b76:	6824      	ldr	r4, [r4, #0]
 8004b78:	e7f5      	b.n	8004b66 <_fwalk_reent+0xe>
 8004b7a:	89ab      	ldrh	r3, [r5, #12]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d907      	bls.n	8004b90 <_fwalk_reent+0x38>
 8004b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b84:	3301      	adds	r3, #1
 8004b86:	d003      	beq.n	8004b90 <_fwalk_reent+0x38>
 8004b88:	4629      	mov	r1, r5
 8004b8a:	4640      	mov	r0, r8
 8004b8c:	47c8      	blx	r9
 8004b8e:	4306      	orrs	r6, r0
 8004b90:	3568      	adds	r5, #104	; 0x68
 8004b92:	e7ee      	b.n	8004b72 <_fwalk_reent+0x1a>

08004b94 <__swhatbuf_r>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	460e      	mov	r6, r1
 8004b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9c:	2900      	cmp	r1, #0
 8004b9e:	b096      	sub	sp, #88	; 0x58
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	461d      	mov	r5, r3
 8004ba4:	da07      	bge.n	8004bb6 <__swhatbuf_r+0x22>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	89b3      	ldrh	r3, [r6, #12]
 8004bac:	061a      	lsls	r2, r3, #24
 8004bae:	d410      	bmi.n	8004bd2 <__swhatbuf_r+0x3e>
 8004bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb4:	e00e      	b.n	8004bd4 <__swhatbuf_r+0x40>
 8004bb6:	466a      	mov	r2, sp
 8004bb8:	f000 fd90 	bl	80056dc <_fstat_r>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	dbf2      	blt.n	8004ba6 <__swhatbuf_r+0x12>
 8004bc0:	9a01      	ldr	r2, [sp, #4]
 8004bc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004bc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004bca:	425a      	negs	r2, r3
 8004bcc:	415a      	adcs	r2, r3
 8004bce:	602a      	str	r2, [r5, #0]
 8004bd0:	e7ee      	b.n	8004bb0 <__swhatbuf_r+0x1c>
 8004bd2:	2340      	movs	r3, #64	; 0x40
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	b016      	add	sp, #88	; 0x58
 8004bda:	bd70      	pop	{r4, r5, r6, pc}

08004bdc <__smakebuf_r>:
 8004bdc:	898b      	ldrh	r3, [r1, #12]
 8004bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004be0:	079d      	lsls	r5, r3, #30
 8004be2:	4606      	mov	r6, r0
 8004be4:	460c      	mov	r4, r1
 8004be6:	d507      	bpl.n	8004bf8 <__smakebuf_r+0x1c>
 8004be8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	6123      	str	r3, [r4, #16]
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	6163      	str	r3, [r4, #20]
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	ab01      	add	r3, sp, #4
 8004bfa:	466a      	mov	r2, sp
 8004bfc:	f7ff ffca 	bl	8004b94 <__swhatbuf_r>
 8004c00:	9900      	ldr	r1, [sp, #0]
 8004c02:	4605      	mov	r5, r0
 8004c04:	4630      	mov	r0, r6
 8004c06:	f000 f87f 	bl	8004d08 <_malloc_r>
 8004c0a:	b948      	cbnz	r0, 8004c20 <__smakebuf_r+0x44>
 8004c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c10:	059a      	lsls	r2, r3, #22
 8004c12:	d4ef      	bmi.n	8004bf4 <__smakebuf_r+0x18>
 8004c14:	f023 0303 	bic.w	r3, r3, #3
 8004c18:	f043 0302 	orr.w	r3, r3, #2
 8004c1c:	81a3      	strh	r3, [r4, #12]
 8004c1e:	e7e3      	b.n	8004be8 <__smakebuf_r+0xc>
 8004c20:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <__smakebuf_r+0x7c>)
 8004c22:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	6020      	str	r0, [r4, #0]
 8004c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2c:	81a3      	strh	r3, [r4, #12]
 8004c2e:	9b00      	ldr	r3, [sp, #0]
 8004c30:	6163      	str	r3, [r4, #20]
 8004c32:	9b01      	ldr	r3, [sp, #4]
 8004c34:	6120      	str	r0, [r4, #16]
 8004c36:	b15b      	cbz	r3, 8004c50 <__smakebuf_r+0x74>
 8004c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f000 fd5f 	bl	8005700 <_isatty_r>
 8004c42:	b128      	cbz	r0, 8004c50 <__smakebuf_r+0x74>
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	f023 0303 	bic.w	r3, r3, #3
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	431d      	orrs	r5, r3
 8004c54:	81a5      	strh	r5, [r4, #12]
 8004c56:	e7cd      	b.n	8004bf4 <__smakebuf_r+0x18>
 8004c58:	08004a49 	.word	0x08004a49

08004c5c <malloc>:
 8004c5c:	4b02      	ldr	r3, [pc, #8]	; (8004c68 <malloc+0xc>)
 8004c5e:	4601      	mov	r1, r0
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	f000 b851 	b.w	8004d08 <_malloc_r>
 8004c66:	bf00      	nop
 8004c68:	20000008 	.word	0x20000008

08004c6c <_free_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	4605      	mov	r5, r0
 8004c70:	2900      	cmp	r1, #0
 8004c72:	d045      	beq.n	8004d00 <_free_r+0x94>
 8004c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c78:	1f0c      	subs	r4, r1, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bfb8      	it	lt
 8004c7e:	18e4      	addlt	r4, r4, r3
 8004c80:	f000 fd84 	bl	800578c <__malloc_lock>
 8004c84:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <_free_r+0x98>)
 8004c86:	6813      	ldr	r3, [r2, #0]
 8004c88:	4610      	mov	r0, r2
 8004c8a:	b933      	cbnz	r3, 8004c9a <_free_r+0x2e>
 8004c8c:	6063      	str	r3, [r4, #4]
 8004c8e:	6014      	str	r4, [r2, #0]
 8004c90:	4628      	mov	r0, r5
 8004c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c96:	f000 bd7a 	b.w	800578e <__malloc_unlock>
 8004c9a:	42a3      	cmp	r3, r4
 8004c9c:	d90c      	bls.n	8004cb8 <_free_r+0x4c>
 8004c9e:	6821      	ldr	r1, [r4, #0]
 8004ca0:	1862      	adds	r2, r4, r1
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	bf04      	itt	eq
 8004ca6:	681a      	ldreq	r2, [r3, #0]
 8004ca8:	685b      	ldreq	r3, [r3, #4]
 8004caa:	6063      	str	r3, [r4, #4]
 8004cac:	bf04      	itt	eq
 8004cae:	1852      	addeq	r2, r2, r1
 8004cb0:	6022      	streq	r2, [r4, #0]
 8004cb2:	6004      	str	r4, [r0, #0]
 8004cb4:	e7ec      	b.n	8004c90 <_free_r+0x24>
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	b10a      	cbz	r2, 8004cc0 <_free_r+0x54>
 8004cbc:	42a2      	cmp	r2, r4
 8004cbe:	d9fa      	bls.n	8004cb6 <_free_r+0x4a>
 8004cc0:	6819      	ldr	r1, [r3, #0]
 8004cc2:	1858      	adds	r0, r3, r1
 8004cc4:	42a0      	cmp	r0, r4
 8004cc6:	d10b      	bne.n	8004ce0 <_free_r+0x74>
 8004cc8:	6820      	ldr	r0, [r4, #0]
 8004cca:	4401      	add	r1, r0
 8004ccc:	1858      	adds	r0, r3, r1
 8004cce:	4282      	cmp	r2, r0
 8004cd0:	6019      	str	r1, [r3, #0]
 8004cd2:	d1dd      	bne.n	8004c90 <_free_r+0x24>
 8004cd4:	6810      	ldr	r0, [r2, #0]
 8004cd6:	6852      	ldr	r2, [r2, #4]
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	4401      	add	r1, r0
 8004cdc:	6019      	str	r1, [r3, #0]
 8004cde:	e7d7      	b.n	8004c90 <_free_r+0x24>
 8004ce0:	d902      	bls.n	8004ce8 <_free_r+0x7c>
 8004ce2:	230c      	movs	r3, #12
 8004ce4:	602b      	str	r3, [r5, #0]
 8004ce6:	e7d3      	b.n	8004c90 <_free_r+0x24>
 8004ce8:	6820      	ldr	r0, [r4, #0]
 8004cea:	1821      	adds	r1, r4, r0
 8004cec:	428a      	cmp	r2, r1
 8004cee:	bf04      	itt	eq
 8004cf0:	6811      	ldreq	r1, [r2, #0]
 8004cf2:	6852      	ldreq	r2, [r2, #4]
 8004cf4:	6062      	str	r2, [r4, #4]
 8004cf6:	bf04      	itt	eq
 8004cf8:	1809      	addeq	r1, r1, r0
 8004cfa:	6021      	streq	r1, [r4, #0]
 8004cfc:	605c      	str	r4, [r3, #4]
 8004cfe:	e7c7      	b.n	8004c90 <_free_r+0x24>
 8004d00:	bd38      	pop	{r3, r4, r5, pc}
 8004d02:	bf00      	nop
 8004d04:	20000088 	.word	0x20000088

08004d08 <_malloc_r>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	1ccd      	adds	r5, r1, #3
 8004d0c:	f025 0503 	bic.w	r5, r5, #3
 8004d10:	3508      	adds	r5, #8
 8004d12:	2d0c      	cmp	r5, #12
 8004d14:	bf38      	it	cc
 8004d16:	250c      	movcc	r5, #12
 8004d18:	2d00      	cmp	r5, #0
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	db01      	blt.n	8004d22 <_malloc_r+0x1a>
 8004d1e:	42a9      	cmp	r1, r5
 8004d20:	d903      	bls.n	8004d2a <_malloc_r+0x22>
 8004d22:	230c      	movs	r3, #12
 8004d24:	6033      	str	r3, [r6, #0]
 8004d26:	2000      	movs	r0, #0
 8004d28:	bd70      	pop	{r4, r5, r6, pc}
 8004d2a:	f000 fd2f 	bl	800578c <__malloc_lock>
 8004d2e:	4a21      	ldr	r2, [pc, #132]	; (8004db4 <_malloc_r+0xac>)
 8004d30:	6814      	ldr	r4, [r2, #0]
 8004d32:	4621      	mov	r1, r4
 8004d34:	b991      	cbnz	r1, 8004d5c <_malloc_r+0x54>
 8004d36:	4c20      	ldr	r4, [pc, #128]	; (8004db8 <_malloc_r+0xb0>)
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	b91b      	cbnz	r3, 8004d44 <_malloc_r+0x3c>
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	f000 fc57 	bl	80055f0 <_sbrk_r>
 8004d42:	6020      	str	r0, [r4, #0]
 8004d44:	4629      	mov	r1, r5
 8004d46:	4630      	mov	r0, r6
 8004d48:	f000 fc52 	bl	80055f0 <_sbrk_r>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d124      	bne.n	8004d9a <_malloc_r+0x92>
 8004d50:	230c      	movs	r3, #12
 8004d52:	6033      	str	r3, [r6, #0]
 8004d54:	4630      	mov	r0, r6
 8004d56:	f000 fd1a 	bl	800578e <__malloc_unlock>
 8004d5a:	e7e4      	b.n	8004d26 <_malloc_r+0x1e>
 8004d5c:	680b      	ldr	r3, [r1, #0]
 8004d5e:	1b5b      	subs	r3, r3, r5
 8004d60:	d418      	bmi.n	8004d94 <_malloc_r+0x8c>
 8004d62:	2b0b      	cmp	r3, #11
 8004d64:	d90f      	bls.n	8004d86 <_malloc_r+0x7e>
 8004d66:	600b      	str	r3, [r1, #0]
 8004d68:	50cd      	str	r5, [r1, r3]
 8004d6a:	18cc      	adds	r4, r1, r3
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f000 fd0e 	bl	800578e <__malloc_unlock>
 8004d72:	f104 000b 	add.w	r0, r4, #11
 8004d76:	1d23      	adds	r3, r4, #4
 8004d78:	f020 0007 	bic.w	r0, r0, #7
 8004d7c:	1ac3      	subs	r3, r0, r3
 8004d7e:	d0d3      	beq.n	8004d28 <_malloc_r+0x20>
 8004d80:	425a      	negs	r2, r3
 8004d82:	50e2      	str	r2, [r4, r3]
 8004d84:	e7d0      	b.n	8004d28 <_malloc_r+0x20>
 8004d86:	428c      	cmp	r4, r1
 8004d88:	684b      	ldr	r3, [r1, #4]
 8004d8a:	bf16      	itet	ne
 8004d8c:	6063      	strne	r3, [r4, #4]
 8004d8e:	6013      	streq	r3, [r2, #0]
 8004d90:	460c      	movne	r4, r1
 8004d92:	e7eb      	b.n	8004d6c <_malloc_r+0x64>
 8004d94:	460c      	mov	r4, r1
 8004d96:	6849      	ldr	r1, [r1, #4]
 8004d98:	e7cc      	b.n	8004d34 <_malloc_r+0x2c>
 8004d9a:	1cc4      	adds	r4, r0, #3
 8004d9c:	f024 0403 	bic.w	r4, r4, #3
 8004da0:	42a0      	cmp	r0, r4
 8004da2:	d005      	beq.n	8004db0 <_malloc_r+0xa8>
 8004da4:	1a21      	subs	r1, r4, r0
 8004da6:	4630      	mov	r0, r6
 8004da8:	f000 fc22 	bl	80055f0 <_sbrk_r>
 8004dac:	3001      	adds	r0, #1
 8004dae:	d0cf      	beq.n	8004d50 <_malloc_r+0x48>
 8004db0:	6025      	str	r5, [r4, #0]
 8004db2:	e7db      	b.n	8004d6c <_malloc_r+0x64>
 8004db4:	20000088 	.word	0x20000088
 8004db8:	2000008c 	.word	0x2000008c

08004dbc <__ssputs_r>:
 8004dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc0:	688e      	ldr	r6, [r1, #8]
 8004dc2:	429e      	cmp	r6, r3
 8004dc4:	4682      	mov	sl, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	4690      	mov	r8, r2
 8004dca:	4699      	mov	r9, r3
 8004dcc:	d837      	bhi.n	8004e3e <__ssputs_r+0x82>
 8004dce:	898a      	ldrh	r2, [r1, #12]
 8004dd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dd4:	d031      	beq.n	8004e3a <__ssputs_r+0x7e>
 8004dd6:	6825      	ldr	r5, [r4, #0]
 8004dd8:	6909      	ldr	r1, [r1, #16]
 8004dda:	1a6f      	subs	r7, r5, r1
 8004ddc:	6965      	ldr	r5, [r4, #20]
 8004dde:	2302      	movs	r3, #2
 8004de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004de4:	fb95 f5f3 	sdiv	r5, r5, r3
 8004de8:	f109 0301 	add.w	r3, r9, #1
 8004dec:	443b      	add	r3, r7
 8004dee:	429d      	cmp	r5, r3
 8004df0:	bf38      	it	cc
 8004df2:	461d      	movcc	r5, r3
 8004df4:	0553      	lsls	r3, r2, #21
 8004df6:	d530      	bpl.n	8004e5a <__ssputs_r+0x9e>
 8004df8:	4629      	mov	r1, r5
 8004dfa:	f7ff ff85 	bl	8004d08 <_malloc_r>
 8004dfe:	4606      	mov	r6, r0
 8004e00:	b950      	cbnz	r0, 8004e18 <__ssputs_r+0x5c>
 8004e02:	230c      	movs	r3, #12
 8004e04:	f8ca 3000 	str.w	r3, [sl]
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e18:	463a      	mov	r2, r7
 8004e1a:	6921      	ldr	r1, [r4, #16]
 8004e1c:	f000 fc92 	bl	8005744 <memcpy>
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2a:	81a3      	strh	r3, [r4, #12]
 8004e2c:	6126      	str	r6, [r4, #16]
 8004e2e:	6165      	str	r5, [r4, #20]
 8004e30:	443e      	add	r6, r7
 8004e32:	1bed      	subs	r5, r5, r7
 8004e34:	6026      	str	r6, [r4, #0]
 8004e36:	60a5      	str	r5, [r4, #8]
 8004e38:	464e      	mov	r6, r9
 8004e3a:	454e      	cmp	r6, r9
 8004e3c:	d900      	bls.n	8004e40 <__ssputs_r+0x84>
 8004e3e:	464e      	mov	r6, r9
 8004e40:	4632      	mov	r2, r6
 8004e42:	4641      	mov	r1, r8
 8004e44:	6820      	ldr	r0, [r4, #0]
 8004e46:	f000 fc88 	bl	800575a <memmove>
 8004e4a:	68a3      	ldr	r3, [r4, #8]
 8004e4c:	1b9b      	subs	r3, r3, r6
 8004e4e:	60a3      	str	r3, [r4, #8]
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	441e      	add	r6, r3
 8004e54:	6026      	str	r6, [r4, #0]
 8004e56:	2000      	movs	r0, #0
 8004e58:	e7dc      	b.n	8004e14 <__ssputs_r+0x58>
 8004e5a:	462a      	mov	r2, r5
 8004e5c:	f000 fc98 	bl	8005790 <_realloc_r>
 8004e60:	4606      	mov	r6, r0
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d1e2      	bne.n	8004e2c <__ssputs_r+0x70>
 8004e66:	6921      	ldr	r1, [r4, #16]
 8004e68:	4650      	mov	r0, sl
 8004e6a:	f7ff feff 	bl	8004c6c <_free_r>
 8004e6e:	e7c8      	b.n	8004e02 <__ssputs_r+0x46>

08004e70 <_svfiprintf_r>:
 8004e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	461d      	mov	r5, r3
 8004e76:	898b      	ldrh	r3, [r1, #12]
 8004e78:	061f      	lsls	r7, r3, #24
 8004e7a:	b09d      	sub	sp, #116	; 0x74
 8004e7c:	4680      	mov	r8, r0
 8004e7e:	460c      	mov	r4, r1
 8004e80:	4616      	mov	r6, r2
 8004e82:	d50f      	bpl.n	8004ea4 <_svfiprintf_r+0x34>
 8004e84:	690b      	ldr	r3, [r1, #16]
 8004e86:	b96b      	cbnz	r3, 8004ea4 <_svfiprintf_r+0x34>
 8004e88:	2140      	movs	r1, #64	; 0x40
 8004e8a:	f7ff ff3d 	bl	8004d08 <_malloc_r>
 8004e8e:	6020      	str	r0, [r4, #0]
 8004e90:	6120      	str	r0, [r4, #16]
 8004e92:	b928      	cbnz	r0, 8004ea0 <_svfiprintf_r+0x30>
 8004e94:	230c      	movs	r3, #12
 8004e96:	f8c8 3000 	str.w	r3, [r8]
 8004e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9e:	e0c8      	b.n	8005032 <_svfiprintf_r+0x1c2>
 8004ea0:	2340      	movs	r3, #64	; 0x40
 8004ea2:	6163      	str	r3, [r4, #20]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ea8:	2320      	movs	r3, #32
 8004eaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eae:	2330      	movs	r3, #48	; 0x30
 8004eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eb4:	9503      	str	r5, [sp, #12]
 8004eb6:	f04f 0b01 	mov.w	fp, #1
 8004eba:	4637      	mov	r7, r6
 8004ebc:	463d      	mov	r5, r7
 8004ebe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004ec2:	b10b      	cbz	r3, 8004ec8 <_svfiprintf_r+0x58>
 8004ec4:	2b25      	cmp	r3, #37	; 0x25
 8004ec6:	d13e      	bne.n	8004f46 <_svfiprintf_r+0xd6>
 8004ec8:	ebb7 0a06 	subs.w	sl, r7, r6
 8004ecc:	d00b      	beq.n	8004ee6 <_svfiprintf_r+0x76>
 8004ece:	4653      	mov	r3, sl
 8004ed0:	4632      	mov	r2, r6
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	f7ff ff71 	bl	8004dbc <__ssputs_r>
 8004eda:	3001      	adds	r0, #1
 8004edc:	f000 80a4 	beq.w	8005028 <_svfiprintf_r+0x1b8>
 8004ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee2:	4453      	add	r3, sl
 8004ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee6:	783b      	ldrb	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 809d 	beq.w	8005028 <_svfiprintf_r+0x1b8>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ef8:	9304      	str	r3, [sp, #16]
 8004efa:	9307      	str	r3, [sp, #28]
 8004efc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f00:	931a      	str	r3, [sp, #104]	; 0x68
 8004f02:	462f      	mov	r7, r5
 8004f04:	2205      	movs	r2, #5
 8004f06:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004f0a:	4850      	ldr	r0, [pc, #320]	; (800504c <_svfiprintf_r+0x1dc>)
 8004f0c:	f7fb f970 	bl	80001f0 <memchr>
 8004f10:	9b04      	ldr	r3, [sp, #16]
 8004f12:	b9d0      	cbnz	r0, 8004f4a <_svfiprintf_r+0xda>
 8004f14:	06d9      	lsls	r1, r3, #27
 8004f16:	bf44      	itt	mi
 8004f18:	2220      	movmi	r2, #32
 8004f1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f1e:	071a      	lsls	r2, r3, #28
 8004f20:	bf44      	itt	mi
 8004f22:	222b      	movmi	r2, #43	; 0x2b
 8004f24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f28:	782a      	ldrb	r2, [r5, #0]
 8004f2a:	2a2a      	cmp	r2, #42	; 0x2a
 8004f2c:	d015      	beq.n	8004f5a <_svfiprintf_r+0xea>
 8004f2e:	9a07      	ldr	r2, [sp, #28]
 8004f30:	462f      	mov	r7, r5
 8004f32:	2000      	movs	r0, #0
 8004f34:	250a      	movs	r5, #10
 8004f36:	4639      	mov	r1, r7
 8004f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f3c:	3b30      	subs	r3, #48	; 0x30
 8004f3e:	2b09      	cmp	r3, #9
 8004f40:	d94d      	bls.n	8004fde <_svfiprintf_r+0x16e>
 8004f42:	b1b8      	cbz	r0, 8004f74 <_svfiprintf_r+0x104>
 8004f44:	e00f      	b.n	8004f66 <_svfiprintf_r+0xf6>
 8004f46:	462f      	mov	r7, r5
 8004f48:	e7b8      	b.n	8004ebc <_svfiprintf_r+0x4c>
 8004f4a:	4a40      	ldr	r2, [pc, #256]	; (800504c <_svfiprintf_r+0x1dc>)
 8004f4c:	1a80      	subs	r0, r0, r2
 8004f4e:	fa0b f000 	lsl.w	r0, fp, r0
 8004f52:	4318      	orrs	r0, r3
 8004f54:	9004      	str	r0, [sp, #16]
 8004f56:	463d      	mov	r5, r7
 8004f58:	e7d3      	b.n	8004f02 <_svfiprintf_r+0x92>
 8004f5a:	9a03      	ldr	r2, [sp, #12]
 8004f5c:	1d11      	adds	r1, r2, #4
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	9103      	str	r1, [sp, #12]
 8004f62:	2a00      	cmp	r2, #0
 8004f64:	db01      	blt.n	8004f6a <_svfiprintf_r+0xfa>
 8004f66:	9207      	str	r2, [sp, #28]
 8004f68:	e004      	b.n	8004f74 <_svfiprintf_r+0x104>
 8004f6a:	4252      	negs	r2, r2
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	9207      	str	r2, [sp, #28]
 8004f72:	9304      	str	r3, [sp, #16]
 8004f74:	783b      	ldrb	r3, [r7, #0]
 8004f76:	2b2e      	cmp	r3, #46	; 0x2e
 8004f78:	d10c      	bne.n	8004f94 <_svfiprintf_r+0x124>
 8004f7a:	787b      	ldrb	r3, [r7, #1]
 8004f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f7e:	d133      	bne.n	8004fe8 <_svfiprintf_r+0x178>
 8004f80:	9b03      	ldr	r3, [sp, #12]
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	9203      	str	r2, [sp, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bfb8      	it	lt
 8004f8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f90:	3702      	adds	r7, #2
 8004f92:	9305      	str	r3, [sp, #20]
 8004f94:	4d2e      	ldr	r5, [pc, #184]	; (8005050 <_svfiprintf_r+0x1e0>)
 8004f96:	7839      	ldrb	r1, [r7, #0]
 8004f98:	2203      	movs	r2, #3
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f7fb f928 	bl	80001f0 <memchr>
 8004fa0:	b138      	cbz	r0, 8004fb2 <_svfiprintf_r+0x142>
 8004fa2:	2340      	movs	r3, #64	; 0x40
 8004fa4:	1b40      	subs	r0, r0, r5
 8004fa6:	fa03 f000 	lsl.w	r0, r3, r0
 8004faa:	9b04      	ldr	r3, [sp, #16]
 8004fac:	4303      	orrs	r3, r0
 8004fae:	3701      	adds	r7, #1
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	7839      	ldrb	r1, [r7, #0]
 8004fb4:	4827      	ldr	r0, [pc, #156]	; (8005054 <_svfiprintf_r+0x1e4>)
 8004fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fba:	2206      	movs	r2, #6
 8004fbc:	1c7e      	adds	r6, r7, #1
 8004fbe:	f7fb f917 	bl	80001f0 <memchr>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d038      	beq.n	8005038 <_svfiprintf_r+0x1c8>
 8004fc6:	4b24      	ldr	r3, [pc, #144]	; (8005058 <_svfiprintf_r+0x1e8>)
 8004fc8:	bb13      	cbnz	r3, 8005010 <_svfiprintf_r+0x1a0>
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	3307      	adds	r3, #7
 8004fce:	f023 0307 	bic.w	r3, r3, #7
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	9303      	str	r3, [sp, #12]
 8004fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd8:	444b      	add	r3, r9
 8004fda:	9309      	str	r3, [sp, #36]	; 0x24
 8004fdc:	e76d      	b.n	8004eba <_svfiprintf_r+0x4a>
 8004fde:	fb05 3202 	mla	r2, r5, r2, r3
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	460f      	mov	r7, r1
 8004fe6:	e7a6      	b.n	8004f36 <_svfiprintf_r+0xc6>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	3701      	adds	r7, #1
 8004fec:	9305      	str	r3, [sp, #20]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	250a      	movs	r5, #10
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ff8:	3a30      	subs	r2, #48	; 0x30
 8004ffa:	2a09      	cmp	r2, #9
 8004ffc:	d903      	bls.n	8005006 <_svfiprintf_r+0x196>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0c8      	beq.n	8004f94 <_svfiprintf_r+0x124>
 8005002:	9105      	str	r1, [sp, #20]
 8005004:	e7c6      	b.n	8004f94 <_svfiprintf_r+0x124>
 8005006:	fb05 2101 	mla	r1, r5, r1, r2
 800500a:	2301      	movs	r3, #1
 800500c:	4607      	mov	r7, r0
 800500e:	e7f0      	b.n	8004ff2 <_svfiprintf_r+0x182>
 8005010:	ab03      	add	r3, sp, #12
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	4622      	mov	r2, r4
 8005016:	4b11      	ldr	r3, [pc, #68]	; (800505c <_svfiprintf_r+0x1ec>)
 8005018:	a904      	add	r1, sp, #16
 800501a:	4640      	mov	r0, r8
 800501c:	f3af 8000 	nop.w
 8005020:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005024:	4681      	mov	r9, r0
 8005026:	d1d6      	bne.n	8004fd6 <_svfiprintf_r+0x166>
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	065b      	lsls	r3, r3, #25
 800502c:	f53f af35 	bmi.w	8004e9a <_svfiprintf_r+0x2a>
 8005030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005032:	b01d      	add	sp, #116	; 0x74
 8005034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005038:	ab03      	add	r3, sp, #12
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	4622      	mov	r2, r4
 800503e:	4b07      	ldr	r3, [pc, #28]	; (800505c <_svfiprintf_r+0x1ec>)
 8005040:	a904      	add	r1, sp, #16
 8005042:	4640      	mov	r0, r8
 8005044:	f000 f9c2 	bl	80053cc <_printf_i>
 8005048:	e7ea      	b.n	8005020 <_svfiprintf_r+0x1b0>
 800504a:	bf00      	nop
 800504c:	08005944 	.word	0x08005944
 8005050:	0800594a 	.word	0x0800594a
 8005054:	0800594e 	.word	0x0800594e
 8005058:	00000000 	.word	0x00000000
 800505c:	08004dbd 	.word	0x08004dbd

08005060 <__sfputc_r>:
 8005060:	6893      	ldr	r3, [r2, #8]
 8005062:	3b01      	subs	r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	b410      	push	{r4}
 8005068:	6093      	str	r3, [r2, #8]
 800506a:	da08      	bge.n	800507e <__sfputc_r+0x1e>
 800506c:	6994      	ldr	r4, [r2, #24]
 800506e:	42a3      	cmp	r3, r4
 8005070:	db01      	blt.n	8005076 <__sfputc_r+0x16>
 8005072:	290a      	cmp	r1, #10
 8005074:	d103      	bne.n	800507e <__sfputc_r+0x1e>
 8005076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800507a:	f7ff bb51 	b.w	8004720 <__swbuf_r>
 800507e:	6813      	ldr	r3, [r2, #0]
 8005080:	1c58      	adds	r0, r3, #1
 8005082:	6010      	str	r0, [r2, #0]
 8005084:	7019      	strb	r1, [r3, #0]
 8005086:	4608      	mov	r0, r1
 8005088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800508c:	4770      	bx	lr

0800508e <__sfputs_r>:
 800508e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005090:	4606      	mov	r6, r0
 8005092:	460f      	mov	r7, r1
 8005094:	4614      	mov	r4, r2
 8005096:	18d5      	adds	r5, r2, r3
 8005098:	42ac      	cmp	r4, r5
 800509a:	d101      	bne.n	80050a0 <__sfputs_r+0x12>
 800509c:	2000      	movs	r0, #0
 800509e:	e007      	b.n	80050b0 <__sfputs_r+0x22>
 80050a0:	463a      	mov	r2, r7
 80050a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a6:	4630      	mov	r0, r6
 80050a8:	f7ff ffda 	bl	8005060 <__sfputc_r>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d1f3      	bne.n	8005098 <__sfputs_r+0xa>
 80050b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050b4 <_vfiprintf_r>:
 80050b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b8:	460c      	mov	r4, r1
 80050ba:	b09d      	sub	sp, #116	; 0x74
 80050bc:	4617      	mov	r7, r2
 80050be:	461d      	mov	r5, r3
 80050c0:	4606      	mov	r6, r0
 80050c2:	b118      	cbz	r0, 80050cc <_vfiprintf_r+0x18>
 80050c4:	6983      	ldr	r3, [r0, #24]
 80050c6:	b90b      	cbnz	r3, 80050cc <_vfiprintf_r+0x18>
 80050c8:	f7ff fcda 	bl	8004a80 <__sinit>
 80050cc:	4b7c      	ldr	r3, [pc, #496]	; (80052c0 <_vfiprintf_r+0x20c>)
 80050ce:	429c      	cmp	r4, r3
 80050d0:	d158      	bne.n	8005184 <_vfiprintf_r+0xd0>
 80050d2:	6874      	ldr	r4, [r6, #4]
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	0718      	lsls	r0, r3, #28
 80050d8:	d55e      	bpl.n	8005198 <_vfiprintf_r+0xe4>
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d05b      	beq.n	8005198 <_vfiprintf_r+0xe4>
 80050e0:	2300      	movs	r3, #0
 80050e2:	9309      	str	r3, [sp, #36]	; 0x24
 80050e4:	2320      	movs	r3, #32
 80050e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050ea:	2330      	movs	r3, #48	; 0x30
 80050ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050f0:	9503      	str	r5, [sp, #12]
 80050f2:	f04f 0b01 	mov.w	fp, #1
 80050f6:	46b8      	mov	r8, r7
 80050f8:	4645      	mov	r5, r8
 80050fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80050fe:	b10b      	cbz	r3, 8005104 <_vfiprintf_r+0x50>
 8005100:	2b25      	cmp	r3, #37	; 0x25
 8005102:	d154      	bne.n	80051ae <_vfiprintf_r+0xfa>
 8005104:	ebb8 0a07 	subs.w	sl, r8, r7
 8005108:	d00b      	beq.n	8005122 <_vfiprintf_r+0x6e>
 800510a:	4653      	mov	r3, sl
 800510c:	463a      	mov	r2, r7
 800510e:	4621      	mov	r1, r4
 8005110:	4630      	mov	r0, r6
 8005112:	f7ff ffbc 	bl	800508e <__sfputs_r>
 8005116:	3001      	adds	r0, #1
 8005118:	f000 80c2 	beq.w	80052a0 <_vfiprintf_r+0x1ec>
 800511c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800511e:	4453      	add	r3, sl
 8005120:	9309      	str	r3, [sp, #36]	; 0x24
 8005122:	f898 3000 	ldrb.w	r3, [r8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 80ba 	beq.w	80052a0 <_vfiprintf_r+0x1ec>
 800512c:	2300      	movs	r3, #0
 800512e:	f04f 32ff 	mov.w	r2, #4294967295
 8005132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	9307      	str	r3, [sp, #28]
 800513a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800513e:	931a      	str	r3, [sp, #104]	; 0x68
 8005140:	46a8      	mov	r8, r5
 8005142:	2205      	movs	r2, #5
 8005144:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005148:	485e      	ldr	r0, [pc, #376]	; (80052c4 <_vfiprintf_r+0x210>)
 800514a:	f7fb f851 	bl	80001f0 <memchr>
 800514e:	9b04      	ldr	r3, [sp, #16]
 8005150:	bb78      	cbnz	r0, 80051b2 <_vfiprintf_r+0xfe>
 8005152:	06d9      	lsls	r1, r3, #27
 8005154:	bf44      	itt	mi
 8005156:	2220      	movmi	r2, #32
 8005158:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800515c:	071a      	lsls	r2, r3, #28
 800515e:	bf44      	itt	mi
 8005160:	222b      	movmi	r2, #43	; 0x2b
 8005162:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005166:	782a      	ldrb	r2, [r5, #0]
 8005168:	2a2a      	cmp	r2, #42	; 0x2a
 800516a:	d02a      	beq.n	80051c2 <_vfiprintf_r+0x10e>
 800516c:	9a07      	ldr	r2, [sp, #28]
 800516e:	46a8      	mov	r8, r5
 8005170:	2000      	movs	r0, #0
 8005172:	250a      	movs	r5, #10
 8005174:	4641      	mov	r1, r8
 8005176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800517a:	3b30      	subs	r3, #48	; 0x30
 800517c:	2b09      	cmp	r3, #9
 800517e:	d969      	bls.n	8005254 <_vfiprintf_r+0x1a0>
 8005180:	b360      	cbz	r0, 80051dc <_vfiprintf_r+0x128>
 8005182:	e024      	b.n	80051ce <_vfiprintf_r+0x11a>
 8005184:	4b50      	ldr	r3, [pc, #320]	; (80052c8 <_vfiprintf_r+0x214>)
 8005186:	429c      	cmp	r4, r3
 8005188:	d101      	bne.n	800518e <_vfiprintf_r+0xda>
 800518a:	68b4      	ldr	r4, [r6, #8]
 800518c:	e7a2      	b.n	80050d4 <_vfiprintf_r+0x20>
 800518e:	4b4f      	ldr	r3, [pc, #316]	; (80052cc <_vfiprintf_r+0x218>)
 8005190:	429c      	cmp	r4, r3
 8005192:	bf08      	it	eq
 8005194:	68f4      	ldreq	r4, [r6, #12]
 8005196:	e79d      	b.n	80050d4 <_vfiprintf_r+0x20>
 8005198:	4621      	mov	r1, r4
 800519a:	4630      	mov	r0, r6
 800519c:	f7ff fb12 	bl	80047c4 <__swsetup_r>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d09d      	beq.n	80050e0 <_vfiprintf_r+0x2c>
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	b01d      	add	sp, #116	; 0x74
 80051aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ae:	46a8      	mov	r8, r5
 80051b0:	e7a2      	b.n	80050f8 <_vfiprintf_r+0x44>
 80051b2:	4a44      	ldr	r2, [pc, #272]	; (80052c4 <_vfiprintf_r+0x210>)
 80051b4:	1a80      	subs	r0, r0, r2
 80051b6:	fa0b f000 	lsl.w	r0, fp, r0
 80051ba:	4318      	orrs	r0, r3
 80051bc:	9004      	str	r0, [sp, #16]
 80051be:	4645      	mov	r5, r8
 80051c0:	e7be      	b.n	8005140 <_vfiprintf_r+0x8c>
 80051c2:	9a03      	ldr	r2, [sp, #12]
 80051c4:	1d11      	adds	r1, r2, #4
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	9103      	str	r1, [sp, #12]
 80051ca:	2a00      	cmp	r2, #0
 80051cc:	db01      	blt.n	80051d2 <_vfiprintf_r+0x11e>
 80051ce:	9207      	str	r2, [sp, #28]
 80051d0:	e004      	b.n	80051dc <_vfiprintf_r+0x128>
 80051d2:	4252      	negs	r2, r2
 80051d4:	f043 0302 	orr.w	r3, r3, #2
 80051d8:	9207      	str	r2, [sp, #28]
 80051da:	9304      	str	r3, [sp, #16]
 80051dc:	f898 3000 	ldrb.w	r3, [r8]
 80051e0:	2b2e      	cmp	r3, #46	; 0x2e
 80051e2:	d10e      	bne.n	8005202 <_vfiprintf_r+0x14e>
 80051e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80051e8:	2b2a      	cmp	r3, #42	; 0x2a
 80051ea:	d138      	bne.n	800525e <_vfiprintf_r+0x1aa>
 80051ec:	9b03      	ldr	r3, [sp, #12]
 80051ee:	1d1a      	adds	r2, r3, #4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	9203      	str	r2, [sp, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bfb8      	it	lt
 80051f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80051fc:	f108 0802 	add.w	r8, r8, #2
 8005200:	9305      	str	r3, [sp, #20]
 8005202:	4d33      	ldr	r5, [pc, #204]	; (80052d0 <_vfiprintf_r+0x21c>)
 8005204:	f898 1000 	ldrb.w	r1, [r8]
 8005208:	2203      	movs	r2, #3
 800520a:	4628      	mov	r0, r5
 800520c:	f7fa fff0 	bl	80001f0 <memchr>
 8005210:	b140      	cbz	r0, 8005224 <_vfiprintf_r+0x170>
 8005212:	2340      	movs	r3, #64	; 0x40
 8005214:	1b40      	subs	r0, r0, r5
 8005216:	fa03 f000 	lsl.w	r0, r3, r0
 800521a:	9b04      	ldr	r3, [sp, #16]
 800521c:	4303      	orrs	r3, r0
 800521e:	f108 0801 	add.w	r8, r8, #1
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	f898 1000 	ldrb.w	r1, [r8]
 8005228:	482a      	ldr	r0, [pc, #168]	; (80052d4 <_vfiprintf_r+0x220>)
 800522a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800522e:	2206      	movs	r2, #6
 8005230:	f108 0701 	add.w	r7, r8, #1
 8005234:	f7fa ffdc 	bl	80001f0 <memchr>
 8005238:	2800      	cmp	r0, #0
 800523a:	d037      	beq.n	80052ac <_vfiprintf_r+0x1f8>
 800523c:	4b26      	ldr	r3, [pc, #152]	; (80052d8 <_vfiprintf_r+0x224>)
 800523e:	bb1b      	cbnz	r3, 8005288 <_vfiprintf_r+0x1d4>
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	3307      	adds	r3, #7
 8005244:	f023 0307 	bic.w	r3, r3, #7
 8005248:	3308      	adds	r3, #8
 800524a:	9303      	str	r3, [sp, #12]
 800524c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524e:	444b      	add	r3, r9
 8005250:	9309      	str	r3, [sp, #36]	; 0x24
 8005252:	e750      	b.n	80050f6 <_vfiprintf_r+0x42>
 8005254:	fb05 3202 	mla	r2, r5, r2, r3
 8005258:	2001      	movs	r0, #1
 800525a:	4688      	mov	r8, r1
 800525c:	e78a      	b.n	8005174 <_vfiprintf_r+0xc0>
 800525e:	2300      	movs	r3, #0
 8005260:	f108 0801 	add.w	r8, r8, #1
 8005264:	9305      	str	r3, [sp, #20]
 8005266:	4619      	mov	r1, r3
 8005268:	250a      	movs	r5, #10
 800526a:	4640      	mov	r0, r8
 800526c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005270:	3a30      	subs	r2, #48	; 0x30
 8005272:	2a09      	cmp	r2, #9
 8005274:	d903      	bls.n	800527e <_vfiprintf_r+0x1ca>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0c3      	beq.n	8005202 <_vfiprintf_r+0x14e>
 800527a:	9105      	str	r1, [sp, #20]
 800527c:	e7c1      	b.n	8005202 <_vfiprintf_r+0x14e>
 800527e:	fb05 2101 	mla	r1, r5, r1, r2
 8005282:	2301      	movs	r3, #1
 8005284:	4680      	mov	r8, r0
 8005286:	e7f0      	b.n	800526a <_vfiprintf_r+0x1b6>
 8005288:	ab03      	add	r3, sp, #12
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	4622      	mov	r2, r4
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <_vfiprintf_r+0x228>)
 8005290:	a904      	add	r1, sp, #16
 8005292:	4630      	mov	r0, r6
 8005294:	f3af 8000 	nop.w
 8005298:	f1b0 3fff 	cmp.w	r0, #4294967295
 800529c:	4681      	mov	r9, r0
 800529e:	d1d5      	bne.n	800524c <_vfiprintf_r+0x198>
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	065b      	lsls	r3, r3, #25
 80052a4:	f53f af7e 	bmi.w	80051a4 <_vfiprintf_r+0xf0>
 80052a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052aa:	e77d      	b.n	80051a8 <_vfiprintf_r+0xf4>
 80052ac:	ab03      	add	r3, sp, #12
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	4622      	mov	r2, r4
 80052b2:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <_vfiprintf_r+0x228>)
 80052b4:	a904      	add	r1, sp, #16
 80052b6:	4630      	mov	r0, r6
 80052b8:	f000 f888 	bl	80053cc <_printf_i>
 80052bc:	e7ec      	b.n	8005298 <_vfiprintf_r+0x1e4>
 80052be:	bf00      	nop
 80052c0:	08005904 	.word	0x08005904
 80052c4:	08005944 	.word	0x08005944
 80052c8:	08005924 	.word	0x08005924
 80052cc:	080058e4 	.word	0x080058e4
 80052d0:	0800594a 	.word	0x0800594a
 80052d4:	0800594e 	.word	0x0800594e
 80052d8:	00000000 	.word	0x00000000
 80052dc:	0800508f 	.word	0x0800508f

080052e0 <_printf_common>:
 80052e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e4:	4691      	mov	r9, r2
 80052e6:	461f      	mov	r7, r3
 80052e8:	688a      	ldr	r2, [r1, #8]
 80052ea:	690b      	ldr	r3, [r1, #16]
 80052ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052f0:	4293      	cmp	r3, r2
 80052f2:	bfb8      	it	lt
 80052f4:	4613      	movlt	r3, r2
 80052f6:	f8c9 3000 	str.w	r3, [r9]
 80052fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052fe:	4606      	mov	r6, r0
 8005300:	460c      	mov	r4, r1
 8005302:	b112      	cbz	r2, 800530a <_printf_common+0x2a>
 8005304:	3301      	adds	r3, #1
 8005306:	f8c9 3000 	str.w	r3, [r9]
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	0699      	lsls	r1, r3, #26
 800530e:	bf42      	ittt	mi
 8005310:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005314:	3302      	addmi	r3, #2
 8005316:	f8c9 3000 	strmi.w	r3, [r9]
 800531a:	6825      	ldr	r5, [r4, #0]
 800531c:	f015 0506 	ands.w	r5, r5, #6
 8005320:	d107      	bne.n	8005332 <_printf_common+0x52>
 8005322:	f104 0a19 	add.w	sl, r4, #25
 8005326:	68e3      	ldr	r3, [r4, #12]
 8005328:	f8d9 2000 	ldr.w	r2, [r9]
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	42ab      	cmp	r3, r5
 8005330:	dc28      	bgt.n	8005384 <_printf_common+0xa4>
 8005332:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	3300      	adds	r3, #0
 800533a:	bf18      	it	ne
 800533c:	2301      	movne	r3, #1
 800533e:	0692      	lsls	r2, r2, #26
 8005340:	d42d      	bmi.n	800539e <_printf_common+0xbe>
 8005342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005346:	4639      	mov	r1, r7
 8005348:	4630      	mov	r0, r6
 800534a:	47c0      	blx	r8
 800534c:	3001      	adds	r0, #1
 800534e:	d020      	beq.n	8005392 <_printf_common+0xb2>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	68e5      	ldr	r5, [r4, #12]
 8005354:	f8d9 2000 	ldr.w	r2, [r9]
 8005358:	f003 0306 	and.w	r3, r3, #6
 800535c:	2b04      	cmp	r3, #4
 800535e:	bf08      	it	eq
 8005360:	1aad      	subeq	r5, r5, r2
 8005362:	68a3      	ldr	r3, [r4, #8]
 8005364:	6922      	ldr	r2, [r4, #16]
 8005366:	bf0c      	ite	eq
 8005368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800536c:	2500      	movne	r5, #0
 800536e:	4293      	cmp	r3, r2
 8005370:	bfc4      	itt	gt
 8005372:	1a9b      	subgt	r3, r3, r2
 8005374:	18ed      	addgt	r5, r5, r3
 8005376:	f04f 0900 	mov.w	r9, #0
 800537a:	341a      	adds	r4, #26
 800537c:	454d      	cmp	r5, r9
 800537e:	d11a      	bne.n	80053b6 <_printf_common+0xd6>
 8005380:	2000      	movs	r0, #0
 8005382:	e008      	b.n	8005396 <_printf_common+0xb6>
 8005384:	2301      	movs	r3, #1
 8005386:	4652      	mov	r2, sl
 8005388:	4639      	mov	r1, r7
 800538a:	4630      	mov	r0, r6
 800538c:	47c0      	blx	r8
 800538e:	3001      	adds	r0, #1
 8005390:	d103      	bne.n	800539a <_printf_common+0xba>
 8005392:	f04f 30ff 	mov.w	r0, #4294967295
 8005396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539a:	3501      	adds	r5, #1
 800539c:	e7c3      	b.n	8005326 <_printf_common+0x46>
 800539e:	18e1      	adds	r1, r4, r3
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	2030      	movs	r0, #48	; 0x30
 80053a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053a8:	4422      	add	r2, r4
 80053aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053b2:	3302      	adds	r3, #2
 80053b4:	e7c5      	b.n	8005342 <_printf_common+0x62>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4622      	mov	r2, r4
 80053ba:	4639      	mov	r1, r7
 80053bc:	4630      	mov	r0, r6
 80053be:	47c0      	blx	r8
 80053c0:	3001      	adds	r0, #1
 80053c2:	d0e6      	beq.n	8005392 <_printf_common+0xb2>
 80053c4:	f109 0901 	add.w	r9, r9, #1
 80053c8:	e7d8      	b.n	800537c <_printf_common+0x9c>
	...

080053cc <_printf_i>:
 80053cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80053d4:	460c      	mov	r4, r1
 80053d6:	7e09      	ldrb	r1, [r1, #24]
 80053d8:	b085      	sub	sp, #20
 80053da:	296e      	cmp	r1, #110	; 0x6e
 80053dc:	4617      	mov	r7, r2
 80053de:	4606      	mov	r6, r0
 80053e0:	4698      	mov	r8, r3
 80053e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053e4:	f000 80b3 	beq.w	800554e <_printf_i+0x182>
 80053e8:	d822      	bhi.n	8005430 <_printf_i+0x64>
 80053ea:	2963      	cmp	r1, #99	; 0x63
 80053ec:	d036      	beq.n	800545c <_printf_i+0x90>
 80053ee:	d80a      	bhi.n	8005406 <_printf_i+0x3a>
 80053f0:	2900      	cmp	r1, #0
 80053f2:	f000 80b9 	beq.w	8005568 <_printf_i+0x19c>
 80053f6:	2958      	cmp	r1, #88	; 0x58
 80053f8:	f000 8083 	beq.w	8005502 <_printf_i+0x136>
 80053fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005400:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005404:	e032      	b.n	800546c <_printf_i+0xa0>
 8005406:	2964      	cmp	r1, #100	; 0x64
 8005408:	d001      	beq.n	800540e <_printf_i+0x42>
 800540a:	2969      	cmp	r1, #105	; 0x69
 800540c:	d1f6      	bne.n	80053fc <_printf_i+0x30>
 800540e:	6820      	ldr	r0, [r4, #0]
 8005410:	6813      	ldr	r3, [r2, #0]
 8005412:	0605      	lsls	r5, r0, #24
 8005414:	f103 0104 	add.w	r1, r3, #4
 8005418:	d52a      	bpl.n	8005470 <_printf_i+0xa4>
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6011      	str	r1, [r2, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	da03      	bge.n	800542a <_printf_i+0x5e>
 8005422:	222d      	movs	r2, #45	; 0x2d
 8005424:	425b      	negs	r3, r3
 8005426:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800542a:	486f      	ldr	r0, [pc, #444]	; (80055e8 <_printf_i+0x21c>)
 800542c:	220a      	movs	r2, #10
 800542e:	e039      	b.n	80054a4 <_printf_i+0xd8>
 8005430:	2973      	cmp	r1, #115	; 0x73
 8005432:	f000 809d 	beq.w	8005570 <_printf_i+0x1a4>
 8005436:	d808      	bhi.n	800544a <_printf_i+0x7e>
 8005438:	296f      	cmp	r1, #111	; 0x6f
 800543a:	d020      	beq.n	800547e <_printf_i+0xb2>
 800543c:	2970      	cmp	r1, #112	; 0x70
 800543e:	d1dd      	bne.n	80053fc <_printf_i+0x30>
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	f043 0320 	orr.w	r3, r3, #32
 8005446:	6023      	str	r3, [r4, #0]
 8005448:	e003      	b.n	8005452 <_printf_i+0x86>
 800544a:	2975      	cmp	r1, #117	; 0x75
 800544c:	d017      	beq.n	800547e <_printf_i+0xb2>
 800544e:	2978      	cmp	r1, #120	; 0x78
 8005450:	d1d4      	bne.n	80053fc <_printf_i+0x30>
 8005452:	2378      	movs	r3, #120	; 0x78
 8005454:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005458:	4864      	ldr	r0, [pc, #400]	; (80055ec <_printf_i+0x220>)
 800545a:	e055      	b.n	8005508 <_printf_i+0x13c>
 800545c:	6813      	ldr	r3, [r2, #0]
 800545e:	1d19      	adds	r1, r3, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6011      	str	r1, [r2, #0]
 8005464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800546c:	2301      	movs	r3, #1
 800546e:	e08c      	b.n	800558a <_printf_i+0x1be>
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6011      	str	r1, [r2, #0]
 8005474:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005478:	bf18      	it	ne
 800547a:	b21b      	sxthne	r3, r3
 800547c:	e7cf      	b.n	800541e <_printf_i+0x52>
 800547e:	6813      	ldr	r3, [r2, #0]
 8005480:	6825      	ldr	r5, [r4, #0]
 8005482:	1d18      	adds	r0, r3, #4
 8005484:	6010      	str	r0, [r2, #0]
 8005486:	0628      	lsls	r0, r5, #24
 8005488:	d501      	bpl.n	800548e <_printf_i+0xc2>
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	e002      	b.n	8005494 <_printf_i+0xc8>
 800548e:	0668      	lsls	r0, r5, #25
 8005490:	d5fb      	bpl.n	800548a <_printf_i+0xbe>
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	4854      	ldr	r0, [pc, #336]	; (80055e8 <_printf_i+0x21c>)
 8005496:	296f      	cmp	r1, #111	; 0x6f
 8005498:	bf14      	ite	ne
 800549a:	220a      	movne	r2, #10
 800549c:	2208      	moveq	r2, #8
 800549e:	2100      	movs	r1, #0
 80054a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054a4:	6865      	ldr	r5, [r4, #4]
 80054a6:	60a5      	str	r5, [r4, #8]
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	f2c0 8095 	blt.w	80055d8 <_printf_i+0x20c>
 80054ae:	6821      	ldr	r1, [r4, #0]
 80054b0:	f021 0104 	bic.w	r1, r1, #4
 80054b4:	6021      	str	r1, [r4, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d13d      	bne.n	8005536 <_printf_i+0x16a>
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	f040 808e 	bne.w	80055dc <_printf_i+0x210>
 80054c0:	4665      	mov	r5, ip
 80054c2:	2a08      	cmp	r2, #8
 80054c4:	d10b      	bne.n	80054de <_printf_i+0x112>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	07db      	lsls	r3, r3, #31
 80054ca:	d508      	bpl.n	80054de <_printf_i+0x112>
 80054cc:	6923      	ldr	r3, [r4, #16]
 80054ce:	6862      	ldr	r2, [r4, #4]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	bfde      	ittt	le
 80054d4:	2330      	movle	r3, #48	; 0x30
 80054d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054de:	ebac 0305 	sub.w	r3, ip, r5
 80054e2:	6123      	str	r3, [r4, #16]
 80054e4:	f8cd 8000 	str.w	r8, [sp]
 80054e8:	463b      	mov	r3, r7
 80054ea:	aa03      	add	r2, sp, #12
 80054ec:	4621      	mov	r1, r4
 80054ee:	4630      	mov	r0, r6
 80054f0:	f7ff fef6 	bl	80052e0 <_printf_common>
 80054f4:	3001      	adds	r0, #1
 80054f6:	d14d      	bne.n	8005594 <_printf_i+0x1c8>
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	b005      	add	sp, #20
 80054fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005502:	4839      	ldr	r0, [pc, #228]	; (80055e8 <_printf_i+0x21c>)
 8005504:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005508:	6813      	ldr	r3, [r2, #0]
 800550a:	6821      	ldr	r1, [r4, #0]
 800550c:	1d1d      	adds	r5, r3, #4
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6015      	str	r5, [r2, #0]
 8005512:	060a      	lsls	r2, r1, #24
 8005514:	d50b      	bpl.n	800552e <_printf_i+0x162>
 8005516:	07ca      	lsls	r2, r1, #31
 8005518:	bf44      	itt	mi
 800551a:	f041 0120 	orrmi.w	r1, r1, #32
 800551e:	6021      	strmi	r1, [r4, #0]
 8005520:	b91b      	cbnz	r3, 800552a <_printf_i+0x15e>
 8005522:	6822      	ldr	r2, [r4, #0]
 8005524:	f022 0220 	bic.w	r2, r2, #32
 8005528:	6022      	str	r2, [r4, #0]
 800552a:	2210      	movs	r2, #16
 800552c:	e7b7      	b.n	800549e <_printf_i+0xd2>
 800552e:	064d      	lsls	r5, r1, #25
 8005530:	bf48      	it	mi
 8005532:	b29b      	uxthmi	r3, r3
 8005534:	e7ef      	b.n	8005516 <_printf_i+0x14a>
 8005536:	4665      	mov	r5, ip
 8005538:	fbb3 f1f2 	udiv	r1, r3, r2
 800553c:	fb02 3311 	mls	r3, r2, r1, r3
 8005540:	5cc3      	ldrb	r3, [r0, r3]
 8005542:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005546:	460b      	mov	r3, r1
 8005548:	2900      	cmp	r1, #0
 800554a:	d1f5      	bne.n	8005538 <_printf_i+0x16c>
 800554c:	e7b9      	b.n	80054c2 <_printf_i+0xf6>
 800554e:	6813      	ldr	r3, [r2, #0]
 8005550:	6825      	ldr	r5, [r4, #0]
 8005552:	6961      	ldr	r1, [r4, #20]
 8005554:	1d18      	adds	r0, r3, #4
 8005556:	6010      	str	r0, [r2, #0]
 8005558:	0628      	lsls	r0, r5, #24
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	d501      	bpl.n	8005562 <_printf_i+0x196>
 800555e:	6019      	str	r1, [r3, #0]
 8005560:	e002      	b.n	8005568 <_printf_i+0x19c>
 8005562:	066a      	lsls	r2, r5, #25
 8005564:	d5fb      	bpl.n	800555e <_printf_i+0x192>
 8005566:	8019      	strh	r1, [r3, #0]
 8005568:	2300      	movs	r3, #0
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	4665      	mov	r5, ip
 800556e:	e7b9      	b.n	80054e4 <_printf_i+0x118>
 8005570:	6813      	ldr	r3, [r2, #0]
 8005572:	1d19      	adds	r1, r3, #4
 8005574:	6011      	str	r1, [r2, #0]
 8005576:	681d      	ldr	r5, [r3, #0]
 8005578:	6862      	ldr	r2, [r4, #4]
 800557a:	2100      	movs	r1, #0
 800557c:	4628      	mov	r0, r5
 800557e:	f7fa fe37 	bl	80001f0 <memchr>
 8005582:	b108      	cbz	r0, 8005588 <_printf_i+0x1bc>
 8005584:	1b40      	subs	r0, r0, r5
 8005586:	6060      	str	r0, [r4, #4]
 8005588:	6863      	ldr	r3, [r4, #4]
 800558a:	6123      	str	r3, [r4, #16]
 800558c:	2300      	movs	r3, #0
 800558e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005592:	e7a7      	b.n	80054e4 <_printf_i+0x118>
 8005594:	6923      	ldr	r3, [r4, #16]
 8005596:	462a      	mov	r2, r5
 8005598:	4639      	mov	r1, r7
 800559a:	4630      	mov	r0, r6
 800559c:	47c0      	blx	r8
 800559e:	3001      	adds	r0, #1
 80055a0:	d0aa      	beq.n	80054f8 <_printf_i+0x12c>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	079b      	lsls	r3, r3, #30
 80055a6:	d413      	bmi.n	80055d0 <_printf_i+0x204>
 80055a8:	68e0      	ldr	r0, [r4, #12]
 80055aa:	9b03      	ldr	r3, [sp, #12]
 80055ac:	4298      	cmp	r0, r3
 80055ae:	bfb8      	it	lt
 80055b0:	4618      	movlt	r0, r3
 80055b2:	e7a3      	b.n	80054fc <_printf_i+0x130>
 80055b4:	2301      	movs	r3, #1
 80055b6:	464a      	mov	r2, r9
 80055b8:	4639      	mov	r1, r7
 80055ba:	4630      	mov	r0, r6
 80055bc:	47c0      	blx	r8
 80055be:	3001      	adds	r0, #1
 80055c0:	d09a      	beq.n	80054f8 <_printf_i+0x12c>
 80055c2:	3501      	adds	r5, #1
 80055c4:	68e3      	ldr	r3, [r4, #12]
 80055c6:	9a03      	ldr	r2, [sp, #12]
 80055c8:	1a9b      	subs	r3, r3, r2
 80055ca:	42ab      	cmp	r3, r5
 80055cc:	dcf2      	bgt.n	80055b4 <_printf_i+0x1e8>
 80055ce:	e7eb      	b.n	80055a8 <_printf_i+0x1dc>
 80055d0:	2500      	movs	r5, #0
 80055d2:	f104 0919 	add.w	r9, r4, #25
 80055d6:	e7f5      	b.n	80055c4 <_printf_i+0x1f8>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1ac      	bne.n	8005536 <_printf_i+0x16a>
 80055dc:	7803      	ldrb	r3, [r0, #0]
 80055de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055e6:	e76c      	b.n	80054c2 <_printf_i+0xf6>
 80055e8:	08005955 	.word	0x08005955
 80055ec:	08005966 	.word	0x08005966

080055f0 <_sbrk_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4c06      	ldr	r4, [pc, #24]	; (800560c <_sbrk_r+0x1c>)
 80055f4:	2300      	movs	r3, #0
 80055f6:	4605      	mov	r5, r0
 80055f8:	4608      	mov	r0, r1
 80055fa:	6023      	str	r3, [r4, #0]
 80055fc:	f000 f908 	bl	8005810 <_sbrk>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d102      	bne.n	800560a <_sbrk_r+0x1a>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	b103      	cbz	r3, 800560a <_sbrk_r+0x1a>
 8005608:	602b      	str	r3, [r5, #0]
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	20000330 	.word	0x20000330

08005610 <__sread>:
 8005610:	b510      	push	{r4, lr}
 8005612:	460c      	mov	r4, r1
 8005614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005618:	f000 f8e0 	bl	80057dc <_read_r>
 800561c:	2800      	cmp	r0, #0
 800561e:	bfab      	itete	ge
 8005620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005622:	89a3      	ldrhlt	r3, [r4, #12]
 8005624:	181b      	addge	r3, r3, r0
 8005626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800562a:	bfac      	ite	ge
 800562c:	6563      	strge	r3, [r4, #84]	; 0x54
 800562e:	81a3      	strhlt	r3, [r4, #12]
 8005630:	bd10      	pop	{r4, pc}

08005632 <__swrite>:
 8005632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005636:	461f      	mov	r7, r3
 8005638:	898b      	ldrh	r3, [r1, #12]
 800563a:	05db      	lsls	r3, r3, #23
 800563c:	4605      	mov	r5, r0
 800563e:	460c      	mov	r4, r1
 8005640:	4616      	mov	r6, r2
 8005642:	d505      	bpl.n	8005650 <__swrite+0x1e>
 8005644:	2302      	movs	r3, #2
 8005646:	2200      	movs	r2, #0
 8005648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800564c:	f000 f868 	bl	8005720 <_lseek_r>
 8005650:	89a3      	ldrh	r3, [r4, #12]
 8005652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800565a:	81a3      	strh	r3, [r4, #12]
 800565c:	4632      	mov	r2, r6
 800565e:	463b      	mov	r3, r7
 8005660:	4628      	mov	r0, r5
 8005662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005666:	f000 b817 	b.w	8005698 <_write_r>

0800566a <__sseek>:
 800566a:	b510      	push	{r4, lr}
 800566c:	460c      	mov	r4, r1
 800566e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005672:	f000 f855 	bl	8005720 <_lseek_r>
 8005676:	1c43      	adds	r3, r0, #1
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	bf15      	itete	ne
 800567c:	6560      	strne	r0, [r4, #84]	; 0x54
 800567e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005686:	81a3      	strheq	r3, [r4, #12]
 8005688:	bf18      	it	ne
 800568a:	81a3      	strhne	r3, [r4, #12]
 800568c:	bd10      	pop	{r4, pc}

0800568e <__sclose>:
 800568e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005692:	f000 b813 	b.w	80056bc <_close_r>
	...

08005698 <_write_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4c07      	ldr	r4, [pc, #28]	; (80056b8 <_write_r+0x20>)
 800569c:	4605      	mov	r5, r0
 800569e:	4608      	mov	r0, r1
 80056a0:	4611      	mov	r1, r2
 80056a2:	2200      	movs	r2, #0
 80056a4:	6022      	str	r2, [r4, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f7fb fc44 	bl	8000f34 <_write>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_write_r+0x1e>
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_write_r+0x1e>
 80056b4:	602b      	str	r3, [r5, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	20000330 	.word	0x20000330

080056bc <_close_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4c06      	ldr	r4, [pc, #24]	; (80056d8 <_close_r+0x1c>)
 80056c0:	2300      	movs	r3, #0
 80056c2:	4605      	mov	r5, r0
 80056c4:	4608      	mov	r0, r1
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	f7fb fc60 	bl	8000f8c <_close>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	d102      	bne.n	80056d6 <_close_r+0x1a>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	b103      	cbz	r3, 80056d6 <_close_r+0x1a>
 80056d4:	602b      	str	r3, [r5, #0]
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
 80056d8:	20000330 	.word	0x20000330

080056dc <_fstat_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4c07      	ldr	r4, [pc, #28]	; (80056fc <_fstat_r+0x20>)
 80056e0:	2300      	movs	r3, #0
 80056e2:	4605      	mov	r5, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	4611      	mov	r1, r2
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	f7fb fc9f 	bl	800102c <_fstat>
 80056ee:	1c43      	adds	r3, r0, #1
 80056f0:	d102      	bne.n	80056f8 <_fstat_r+0x1c>
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	b103      	cbz	r3, 80056f8 <_fstat_r+0x1c>
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	bd38      	pop	{r3, r4, r5, pc}
 80056fa:	bf00      	nop
 80056fc:	20000330 	.word	0x20000330

08005700 <_isatty_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4c06      	ldr	r4, [pc, #24]	; (800571c <_isatty_r+0x1c>)
 8005704:	2300      	movs	r3, #0
 8005706:	4605      	mov	r5, r0
 8005708:	4608      	mov	r0, r1
 800570a:	6023      	str	r3, [r4, #0]
 800570c:	f7fb fbfc 	bl	8000f08 <_isatty>
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d102      	bne.n	800571a <_isatty_r+0x1a>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	b103      	cbz	r3, 800571a <_isatty_r+0x1a>
 8005718:	602b      	str	r3, [r5, #0]
 800571a:	bd38      	pop	{r3, r4, r5, pc}
 800571c:	20000330 	.word	0x20000330

08005720 <_lseek_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4c07      	ldr	r4, [pc, #28]	; (8005740 <_lseek_r+0x20>)
 8005724:	4605      	mov	r5, r0
 8005726:	4608      	mov	r0, r1
 8005728:	4611      	mov	r1, r2
 800572a:	2200      	movs	r2, #0
 800572c:	6022      	str	r2, [r4, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	f7fb fc43 	bl	8000fba <_lseek>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d102      	bne.n	800573e <_lseek_r+0x1e>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	b103      	cbz	r3, 800573e <_lseek_r+0x1e>
 800573c:	602b      	str	r3, [r5, #0]
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	20000330 	.word	0x20000330

08005744 <memcpy>:
 8005744:	b510      	push	{r4, lr}
 8005746:	1e43      	subs	r3, r0, #1
 8005748:	440a      	add	r2, r1
 800574a:	4291      	cmp	r1, r2
 800574c:	d100      	bne.n	8005750 <memcpy+0xc>
 800574e:	bd10      	pop	{r4, pc}
 8005750:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005754:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005758:	e7f7      	b.n	800574a <memcpy+0x6>

0800575a <memmove>:
 800575a:	4288      	cmp	r0, r1
 800575c:	b510      	push	{r4, lr}
 800575e:	eb01 0302 	add.w	r3, r1, r2
 8005762:	d807      	bhi.n	8005774 <memmove+0x1a>
 8005764:	1e42      	subs	r2, r0, #1
 8005766:	4299      	cmp	r1, r3
 8005768:	d00a      	beq.n	8005780 <memmove+0x26>
 800576a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800576e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005772:	e7f8      	b.n	8005766 <memmove+0xc>
 8005774:	4283      	cmp	r3, r0
 8005776:	d9f5      	bls.n	8005764 <memmove+0xa>
 8005778:	1881      	adds	r1, r0, r2
 800577a:	1ad2      	subs	r2, r2, r3
 800577c:	42d3      	cmn	r3, r2
 800577e:	d100      	bne.n	8005782 <memmove+0x28>
 8005780:	bd10      	pop	{r4, pc}
 8005782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005786:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800578a:	e7f7      	b.n	800577c <memmove+0x22>

0800578c <__malloc_lock>:
 800578c:	4770      	bx	lr

0800578e <__malloc_unlock>:
 800578e:	4770      	bx	lr

08005790 <_realloc_r>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	4607      	mov	r7, r0
 8005794:	4614      	mov	r4, r2
 8005796:	460e      	mov	r6, r1
 8005798:	b921      	cbnz	r1, 80057a4 <_realloc_r+0x14>
 800579a:	4611      	mov	r1, r2
 800579c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057a0:	f7ff bab2 	b.w	8004d08 <_malloc_r>
 80057a4:	b922      	cbnz	r2, 80057b0 <_realloc_r+0x20>
 80057a6:	f7ff fa61 	bl	8004c6c <_free_r>
 80057aa:	4625      	mov	r5, r4
 80057ac:	4628      	mov	r0, r5
 80057ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b0:	f000 f826 	bl	8005800 <_malloc_usable_size_r>
 80057b4:	42a0      	cmp	r0, r4
 80057b6:	d20f      	bcs.n	80057d8 <_realloc_r+0x48>
 80057b8:	4621      	mov	r1, r4
 80057ba:	4638      	mov	r0, r7
 80057bc:	f7ff faa4 	bl	8004d08 <_malloc_r>
 80057c0:	4605      	mov	r5, r0
 80057c2:	2800      	cmp	r0, #0
 80057c4:	d0f2      	beq.n	80057ac <_realloc_r+0x1c>
 80057c6:	4631      	mov	r1, r6
 80057c8:	4622      	mov	r2, r4
 80057ca:	f7ff ffbb 	bl	8005744 <memcpy>
 80057ce:	4631      	mov	r1, r6
 80057d0:	4638      	mov	r0, r7
 80057d2:	f7ff fa4b 	bl	8004c6c <_free_r>
 80057d6:	e7e9      	b.n	80057ac <_realloc_r+0x1c>
 80057d8:	4635      	mov	r5, r6
 80057da:	e7e7      	b.n	80057ac <_realloc_r+0x1c>

080057dc <_read_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4c07      	ldr	r4, [pc, #28]	; (80057fc <_read_r+0x20>)
 80057e0:	4605      	mov	r5, r0
 80057e2:	4608      	mov	r0, r1
 80057e4:	4611      	mov	r1, r2
 80057e6:	2200      	movs	r2, #0
 80057e8:	6022      	str	r2, [r4, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f7fb fbf6 	bl	8000fdc <_read>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d102      	bne.n	80057fa <_read_r+0x1e>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	b103      	cbz	r3, 80057fa <_read_r+0x1e>
 80057f8:	602b      	str	r3, [r5, #0]
 80057fa:	bd38      	pop	{r3, r4, r5, pc}
 80057fc:	20000330 	.word	0x20000330

08005800 <_malloc_usable_size_r>:
 8005800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005804:	1f18      	subs	r0, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	bfbc      	itt	lt
 800580a:	580b      	ldrlt	r3, [r1, r0]
 800580c:	18c0      	addlt	r0, r0, r3
 800580e:	4770      	bx	lr

08005810 <_sbrk>:
 8005810:	4b04      	ldr	r3, [pc, #16]	; (8005824 <_sbrk+0x14>)
 8005812:	6819      	ldr	r1, [r3, #0]
 8005814:	4602      	mov	r2, r0
 8005816:	b909      	cbnz	r1, 800581c <_sbrk+0xc>
 8005818:	4903      	ldr	r1, [pc, #12]	; (8005828 <_sbrk+0x18>)
 800581a:	6019      	str	r1, [r3, #0]
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	4402      	add	r2, r0
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	4770      	bx	lr
 8005824:	20000090 	.word	0x20000090
 8005828:	20000338 	.word	0x20000338

0800582c <_init>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	bf00      	nop
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr

08005838 <_fini>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	bf00      	nop
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr
