
PM2.5 module RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007b74  08007b74  00017b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cf8  08007cf8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08007cf8  08007cf8  00017cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d00  08007d00  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d00  08007d00  00017d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d04  08007d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042b0  2000008c  08007d94  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000433c  08007d94  0002433c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9a2  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000388d  00000000  00000000  0003ba5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001810  00000000  00000000  0003f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001688  00000000  00000000  00040b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ad04  00000000  00000000  00042188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012f3b  00000000  00000000  0005ce8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e546  00000000  00000000  0006fdc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e30d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e74  00000000  00000000  0010e388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b5c 	.word	0x08007b5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08007b5c 	.word	0x08007b5c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <PMchecksum>:
#include "PMmodule.h"
/*
 * @brief	return 1 if checksum error. return 0 if correct.
 */
uint8_t PMchecksum(uint8_t *buf,uint8_t buflen)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
	//uint8_t buflen = strlen(buf);
	uint8_t rxerror = 1;
 800059c:	2301      	movs	r3, #1
 800059e:	733b      	strb	r3, [r7, #12]
	uint16_t checksum = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	for (i=0;i<(buflen-2);i++){
 80005a4:	2300      	movs	r3, #0
 80005a6:	737b      	strb	r3, [r7, #13]
 80005a8:	e00a      	b.n	80005c0 <PMchecksum+0x30>
		checksum = checksum+buf[i];
 80005aa:	7b7b      	ldrb	r3, [r7, #13]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	89fb      	ldrh	r3, [r7, #14]
 80005b6:	4413      	add	r3, r2
 80005b8:	81fb      	strh	r3, [r7, #14]
	for (i=0;i<(buflen-2);i++){
 80005ba:	7b7b      	ldrb	r3, [r7, #13]
 80005bc:	3301      	adds	r3, #1
 80005be:	737b      	strb	r3, [r7, #13]
 80005c0:	7b7a      	ldrb	r2, [r7, #13]
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	3b02      	subs	r3, #2
 80005c6:	429a      	cmp	r2, r3
 80005c8:	dbef      	blt.n	80005aa <PMchecksum+0x1a>
	}
	if (buflen ==31){
 80005ca:	78fb      	ldrb	r3, [r7, #3]
 80005cc:	2b1f      	cmp	r3, #31
 80005ce:	d102      	bne.n	80005d6 <PMchecksum+0x46>
		checksum = checksum+0x42; //uncomment if buf does not add 0x42
 80005d0:	89fb      	ldrh	r3, [r7, #14]
 80005d2:	3342      	adds	r3, #66	; 0x42
 80005d4:	81fb      	strh	r3, [r7, #14]
	}
	if (checksum==((buf[buflen-2]<<8)+buf[buflen-1]))
 80005d6:	89fa      	ldrh	r2, [r7, #14]
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	3b02      	subs	r3, #2
 80005dc:	6879      	ldr	r1, [r7, #4]
 80005de:	440b      	add	r3, r1
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	021b      	lsls	r3, r3, #8
 80005e4:	78f9      	ldrb	r1, [r7, #3]
 80005e6:	3901      	subs	r1, #1
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	4401      	add	r1, r0
 80005ec:	7809      	ldrb	r1, [r1, #0]
 80005ee:	440b      	add	r3, r1
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d103      	bne.n	80005fc <PMchecksum+0x6c>
	{
		rxerror = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	733b      	strb	r3, [r7, #12]
		return rxerror;
 80005f8:	7b3b      	ldrb	r3, [r7, #12]
 80005fa:	e000      	b.n	80005fe <PMchecksum+0x6e>
	}
	return rxerror;
 80005fc:	7b3b      	ldrb	r3, [r7, #12]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <transmitPM2_5>:
	return PM01Val;
}

//transmit PM Value to PC
uint16_t transmitPM2_5(uint8_t *thebuf)
{
 800060a:	b480      	push	{r7}
 800060c:	b085      	sub	sp, #20
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
	uint16_t PM2_5Val;
    PM2_5Val=((thebuf[6]<<8) + thebuf[7]);//count PM2.5 value of the air detector module
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3306      	adds	r3, #6
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b29b      	uxth	r3, r3
 800061a:	021b      	lsls	r3, r3, #8
 800061c:	b29a      	uxth	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3307      	adds	r3, #7
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b29b      	uxth	r3, r3
 8000626:	4413      	add	r3, r2
 8000628:	81fb      	strh	r3, [r7, #14]
	return PM2_5Val;
 800062a:	89fb      	ldrh	r3, [r7, #14]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4a07      	ldr	r2, [pc, #28]	; (8000664 <vApplicationGetIdleTaskMemory+0x2c>)
 8000648:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <vApplicationGetIdleTaskMemory+0x30>)
 800064e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200000a8 	.word	0x200000a8
 8000668:	200000fc 	.word	0x200000fc

0800066c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800067a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800067e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000682:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000686:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800068a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800068c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800068e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	613b      	str	r3, [r7, #16]

	Lcd_mode_select(&lcd);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f80e 	bl	80006c2 <Lcd_mode_select>

	return lcd;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	461d      	mov	r5, r3
 80006aa:	f107 0410 	add.w	r4, r7, #16
 80006ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006b6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bdb0      	pop	{r4, r5, r7, pc}

080006c2 <Lcd_mode_select>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_mode_select(Lcd_HandleTypeDef * lcd)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7d9b      	ldrb	r3, [r3, #22]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d10c      	bne.n	80006ec <Lcd_mode_select+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80006d2:	2133      	movs	r1, #51	; 0x33
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f879 	bl	80007cc <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80006da:	2132      	movs	r1, #50	; 0x32
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f875 	bl	80007cc <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80006e2:	2128      	movs	r1, #40	; 0x28
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 f871 	bl	80007cc <lcd_write_command>
 80006ea:	e003      	b.n	80006f4 <Lcd_mode_select+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80006ec:	2138      	movs	r1, #56	; 0x38
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f86c 	bl	80007cc <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80006f4:	2101      	movs	r1, #1
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 f868 	bl	80007cc <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80006fc:	210c      	movs	r1, #12
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f864 	bl	80007cc <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000704:	2106      	movs	r1, #6
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f860 	bl	80007cc <lcd_write_command>

}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <Lcd_int>:

/**
 * Write a number on the current position
 */
 void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	4906      	ldr	r1, [pc, #24]	; (8000740 <Lcd_int+0x2c>)
 8000726:	4618      	mov	r0, r3
 8000728:	f006 f97c 	bl	8006a24 <siprintf>

	Lcd_string(lcd, buffer);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	4619      	mov	r1, r3
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f806 	bl	8000744 <Lcd_string>
}
 8000738:	bf00      	nop
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	08007b74 	.word	0x08007b74

08000744 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800074e:	2300      	movs	r3, #0
 8000750:	73fb      	strb	r3, [r7, #15]
 8000752:	e00a      	b.n	800076a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f000 f862 	bl	8000828 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	3301      	adds	r3, #1
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	7bfc      	ldrb	r4, [r7, #15]
 800076c:	6838      	ldr	r0, [r7, #0]
 800076e:	f7ff fd37 	bl	80001e0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	429c      	cmp	r4, r3
 8000776:	d3ed      	bcc.n	8000754 <Lcd_string+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bd90      	pop	{r4, r7, pc}

08000780 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
 800078c:	4613      	mov	r3, r2
 800078e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <Lcd_cursor+0x30>)
 8000794:	5cd2      	ldrb	r2, [r2, r3]
 8000796:	78bb      	ldrb	r3, [r7, #2]
 8000798:	4413      	add	r3, r2
 800079a:	b2db      	uxtb	r3, r3
 800079c:	3b80      	subs	r3, #128	; 0x80
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f812 	bl	80007cc <lcd_write_command>
	#endif
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	08007c3c 	.word	0x08007c3c

080007b4 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80007bc:	2101      	movs	r1, #1
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f804 	bl	80007cc <lcd_write_command>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6898      	ldr	r0, [r3, #8]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	899b      	ldrh	r3, [r3, #12]
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	f002 f822 	bl	800282c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	7d9b      	ldrb	r3, [r3, #22]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d111      	bne.n	8000814 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	091b      	lsrs	r3, r3, #4
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2204      	movs	r2, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f000 f842 	bl	8000884 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2204      	movs	r2, #4
 800080a:	4619      	mov	r1, r3
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f839 	bl	8000884 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000812:	e005      	b.n	8000820 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	2208      	movs	r2, #8
 8000818:	4619      	mov	r1, r3
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f000 f832 	bl	8000884 <lcd_write>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6898      	ldr	r0, [r3, #8]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	899b      	ldrh	r3, [r3, #12]
 800083c:	2201      	movs	r2, #1
 800083e:	4619      	mov	r1, r3
 8000840:	f001 fff4 	bl	800282c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7d9b      	ldrb	r3, [r3, #22]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d111      	bne.n	8000870 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	091b      	lsrs	r3, r3, #4
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2204      	movs	r2, #4
 8000854:	4619      	mov	r1, r3
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f000 f814 	bl	8000884 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2204      	movs	r2, #4
 8000866:	4619      	mov	r1, r3
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f80b 	bl	8000884 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800086e:	e005      	b.n	800087c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	2208      	movs	r2, #8
 8000874:	4619      	mov	r1, r3
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f000 f804 	bl	8000884 <lcd_write>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
 8000890:	4613      	mov	r3, r2
 8000892:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]
 8000898:	e019      	b.n	80008ce <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685a      	ldr	r2, [r3, #4]
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	8819      	ldrh	r1, [r3, #0]
 80008b2:	78fa      	ldrb	r2, [r7, #3]
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	fa42 f303 	asr.w	r3, r2, r3
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	f001 ffb2 	bl	800282c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	3301      	adds	r3, #1
 80008cc:	73fb      	strb	r3, [r7, #15]
 80008ce:	7bfa      	ldrb	r2, [r7, #15]
 80008d0:	78bb      	ldrb	r3, [r7, #2]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d3e1      	bcc.n	800089a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6918      	ldr	r0, [r3, #16]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	8a9b      	ldrh	r3, [r3, #20]
 80008de:	2201      	movs	r2, #1
 80008e0:	4619      	mov	r1, r3
 80008e2:	f001 ffa3 	bl	800282c <HAL_GPIO_WritePin>
	DELAY(1);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 ffae 	bl	8001848 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6918      	ldr	r0, [r3, #16]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	8a9b      	ldrh	r3, [r3, #20]
 80008f4:	2200      	movs	r2, #0
 80008f6:	4619      	mov	r1, r3
 80008f8:	f001 ff98 	bl	800282c <HAL_GPIO_WritePin>
}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b5b0      	push	{r4, r5, r7, lr}
 8000906:	b0a4      	sub	sp, #144	; 0x90
 8000908:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090a:	f000 ff5b 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090e:	f000 f89d 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000912:	f000 fa3b 	bl	8000d8c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000916:	f000 f8f9 	bl	8000b0c <MX_ADC1_Init>
  MX_I2C1_Init();
 800091a:	f000 f949 	bl	8000bb0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800091e:	f000 f9ab 	bl	8000c78 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000922:	f000 f9d3 	bl	8000ccc <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8000926:	f000 f971 	bl	8000c0c <MX_SPI3_Init>
  MX_DMA_Init();
 800092a:	f000 f9f9 	bl	8000d20 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800092e:	4837      	ldr	r0, [pc, #220]	; (8000a0c <main+0x108>)
 8000930:	f000 fb6a 	bl	8001008 <RetargetInit>


  static Lcd_PortType ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
  static Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2140      	movs	r1, #64	; 0x40
 8000938:	4835      	ldr	r0, [pc, #212]	; (8000a10 <main+0x10c>)
 800093a:	f001 ff77 	bl	800282c <HAL_GPIO_WritePin>
  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 800093e:	4c35      	ldr	r4, [pc, #212]	; (8000a14 <main+0x110>)
 8000940:	4638      	mov	r0, r7
 8000942:	2300      	movs	r3, #0
 8000944:	9303      	str	r3, [sp, #12]
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	9302      	str	r3, [sp, #8]
 800094a:	4b33      	ldr	r3, [pc, #204]	; (8000a18 <main+0x114>)
 800094c:	9301      	str	r3, [sp, #4]
 800094e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <main+0x118>)
 8000956:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <main+0x11c>)
 8000958:	4932      	ldr	r1, [pc, #200]	; (8000a24 <main+0x120>)
 800095a:	f7ff fe87 	bl	800066c <Lcd_create>
 800095e:	4625      	mov	r5, r4
 8000960:	463c      	mov	r4, r7
 8000962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000966:	e894 0003 	ldmia.w	r4, {r0, r1}
 800096a:	e885 0003 	stmia.w	r5, {r0, r1}
  Lcd_string(&lcd, "Initialising");
 800096e:	492e      	ldr	r1, [pc, #184]	; (8000a28 <main+0x124>)
 8000970:	4828      	ldr	r0, [pc, #160]	; (8000a14 <main+0x110>)
 8000972:	f7ff fee7 	bl	8000744 <Lcd_string>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of PMvalue */
  osMessageQDef(PMvalue, 1, uint8_t);
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <main+0x128>)
 8000978:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800097c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800097e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  PMvalueHandle = osMessageCreate(osMessageQ(PMvalue), NULL);
 8000982:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fe62 	bl	8004652 <osMessageCreate>
 800098e:	4602      	mov	r2, r0
 8000990:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <main+0x12c>)
 8000992:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000994:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <main+0x130>)
 8000996:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800099a:	461d      	mov	r5, r3
 800099c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f003 fdef 	bl	8004592 <osThreadCreate>
 80009b4:	4602      	mov	r2, r0
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <main+0x134>)
 80009b8:	601a      	str	r2, [r3, #0]

  /* definition and creation of LCDtask */
  osThreadDef(LCDtask, LCDtask1, osPriorityIdle, 0, 128);
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <main+0x138>)
 80009bc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80009c0:	461d      	mov	r5, r3
 80009c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDtaskHandle = osThreadCreate(osThread(LCDtask), NULL);
 80009ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 fddc 	bl	8004592 <osThreadCreate>
 80009da:	4602      	mov	r2, r0
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <main+0x13c>)
 80009de:	601a      	str	r2, [r3, #0]

  /* definition and creation of PM2_5 */
  osThreadDef(PM2_5, PM2_5_1, osPriorityIdle, 0, 128);
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <main+0x140>)
 80009e2:	f107 041c 	add.w	r4, r7, #28
 80009e6:	461d      	mov	r5, r3
 80009e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PM2_5Handle = osThreadCreate(osThread(PM2_5), NULL);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 fdc9 	bl	8004592 <osThreadCreate>
 8000a00:	4602      	mov	r2, r0
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <main+0x144>)
 8000a04:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a06:	f003 fdbd 	bl	8004584 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <main+0x106>
 8000a0c:	200042b0 	.word	0x200042b0
 8000a10:	40020400 	.word	0x40020400
 8000a14:	200002fc 	.word	0x200002fc
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	20000014 	.word	0x20000014
 8000a24:	20000004 	.word	0x20000004
 8000a28:	08007b78 	.word	0x08007b78
 8000a2c:	08007b88 	.word	0x08007b88
 8000a30:	2000422c 	.word	0x2000422c
 8000a34:	08007ba4 	.word	0x08007ba4
 8000a38:	2000406c 	.word	0x2000406c
 8000a3c:	08007bc8 	.word	0x08007bc8
 8000a40:	200040d0 	.word	0x200040d0
 8000a44:	08007bec 	.word	0x08007bec
 8000a48:	20004180 	.word	0x20004180

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b094      	sub	sp, #80	; 0x50
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	2230      	movs	r2, #48	; 0x30
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f005 ff13 	bl	8006886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <SystemClock_Config+0xb8>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <SystemClock_Config+0xb8>)
 8000a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <SystemClock_Config+0xb8>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <SystemClock_Config+0xbc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <SystemClock_Config+0xbc>)
 8000a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <SystemClock_Config+0xbc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aac:	2302      	movs	r3, #2
 8000aae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f002 f80f 	bl	8002ae4 <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000acc:	f000 fa94 	bl	8000ff8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 fa3c 	bl	8002f68 <HAL_RCC_ClockConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000af6:	f000 fa7f 	bl	8000ff8 <Error_Handler>
  }
}
 8000afa:	bf00      	nop
 8000afc:	3750      	adds	r7, #80	; 0x50
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40007000 	.word	0x40007000

08000b0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b12:	463b      	mov	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b20:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <MX_ADC1_Init+0x9c>)
 8000b22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b4c:	4a17      	ldr	r2, [pc, #92]	; (8000bac <MX_ADC1_Init+0xa0>)
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b6a:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b6c:	f000 fe8e 	bl	800188c <HAL_ADC_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b76:	f000 fa3f 	bl	8000ff8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_ADC1_Init+0x98>)
 8000b8c:	f000 fec2 	bl	8001914 <HAL_ADC_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b96:	f000 fa2f 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20004184 	.word	0x20004184
 8000ba8:	40012000 	.word	0x40012000
 8000bac:	0f000001 	.word	0x0f000001

08000bb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_I2C1_Init+0x50>)
 8000bb6:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <MX_I2C1_Init+0x54>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_I2C1_Init+0x50>)
 8000bbc:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <MX_I2C1_Init+0x58>)
 8000bbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_I2C1_Init+0x50>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_I2C1_Init+0x50>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_I2C1_Init+0x50>)
 8000bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MX_I2C1_Init+0x50>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_I2C1_Init+0x50>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <MX_I2C1_Init+0x50>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_I2C1_Init+0x50>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_I2C1_Init+0x50>)
 8000bee:	f001 fe51 	bl	8002894 <HAL_I2C_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bf8:	f000 f9fe 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200040d4 	.word	0x200040d4
 8000c04:	40005400 	.word	0x40005400
 8000c08:	000186a0 	.word	0x000186a0

08000c0c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_SPI3_Init+0x64>)
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <MX_SPI3_Init+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_SPI3_Init+0x64>)
 8000c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c1c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_SPI3_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_SPI3_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_SPI3_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_SPI3_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_SPI3_Init+0x64>)
 8000c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c3c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_SPI3_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_SPI3_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_SPI3_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_SPI3_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_SPI3_Init+0x64>)
 8000c58:	220a      	movs	r2, #10
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_SPI3_Init+0x64>)
 8000c5e:	f002 fb7d 	bl	800335c <HAL_SPI_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000c68:	f000 f9c6 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20004128 	.word	0x20004128
 8000c74:	40003c00 	.word	0x40003c00

08000c78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <MX_USART2_UART_Init+0x50>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	f002 fdd6 	bl	8003860 <HAL_UART_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cba:	f000 f99d 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200042b0 	.word	0x200042b0
 8000cc8:	40004400 	.word	0x40004400

08000ccc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_USART6_UART_Init+0x4c>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <MX_USART6_UART_Init+0x50>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_USART6_UART_Init+0x4c>)
 8000cd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cdc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_USART6_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_USART6_UART_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_USART6_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_USART6_UART_Init+0x4c>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_USART6_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_USART6_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_USART6_UART_Init+0x4c>)
 8000d04:	f002 fdac 	bl	8003860 <HAL_UART_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d0e:	f000 f973 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20004270 	.word	0x20004270
 8000d1c:	40011400 	.word	0x40011400

08000d20 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_DMA_Init+0x68>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <MX_DMA_Init+0x68>)
 8000d30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_DMA_Init+0x68>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <MX_DMA_Init+0x68>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <MX_DMA_Init+0x68>)
 8000d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <MX_DMA_Init+0x68>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2105      	movs	r1, #5
 8000d62:	2011      	movs	r0, #17
 8000d64:	f001 f8ac 	bl	8001ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d68:	2011      	movs	r0, #17
 8000d6a:	f001 f8c5 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2105      	movs	r1, #5
 8000d72:	2039      	movs	r0, #57	; 0x39
 8000d74:	f001 f8a4 	bl	8001ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d78:	2039      	movs	r0, #57	; 0x39
 8000d7a:	f001 f8bd 	bl	8001ef8 <HAL_NVIC_EnableIRQ>

}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b41      	ldr	r3, [pc, #260]	; (8000eac <MX_GPIO_Init+0x120>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a40      	ldr	r2, [pc, #256]	; (8000eac <MX_GPIO_Init+0x120>)
 8000dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <MX_GPIO_Init+0x120>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <MX_GPIO_Init+0x120>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a39      	ldr	r2, [pc, #228]	; (8000eac <MX_GPIO_Init+0x120>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <MX_GPIO_Init+0x120>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b33      	ldr	r3, [pc, #204]	; (8000eac <MX_GPIO_Init+0x120>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a32      	ldr	r2, [pc, #200]	; (8000eac <MX_GPIO_Init+0x120>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b30      	ldr	r3, [pc, #192]	; (8000eac <MX_GPIO_Init+0x120>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <MX_GPIO_Init+0x120>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a2b      	ldr	r2, [pc, #172]	; (8000eac <MX_GPIO_Init+0x120>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b29      	ldr	r3, [pc, #164]	; (8000eac <MX_GPIO_Init+0x120>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|D7_LCD_Pin|D8_LCD_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000e18:	4825      	ldr	r0, [pc, #148]	; (8000eb0 <MX_GPIO_Init+0x124>)
 8000e1a:	f001 fd07 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|LED_Green_Pin|LED_Yellow_Pin|LED_Red_Pin 
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f24e 4170 	movw	r1, #58480	; 0xe470
 8000e24:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <MX_GPIO_Init+0x128>)
 8000e26:	f001 fd01 	bl	800282c <HAL_GPIO_WritePin>
                          |D5_LCD_Pin|D4_LCD_Pin|D10_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_LCD_GPIO_Port, D9_LCD_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	4822      	ldr	r0, [pc, #136]	; (8000eb8 <MX_GPIO_Init+0x12c>)
 8000e30:	f001 fcfc 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A0_LCD_Pin */
  GPIO_InitStruct.Pin = A0_LCD_Pin;
 8000e34:	2301      	movs	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_LCD_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <MX_GPIO_Init+0x124>)
 8000e48:	f001 fb6e 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 D7_LCD_Pin D8_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|D7_LCD_Pin|D8_LCD_Pin;
 8000e4c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <MX_GPIO_Init+0x124>)
 8000e66:	f001 fb5f 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin LED_Green_Pin LED_Yellow_Pin LED_Red_Pin 
                           D5_LCD_Pin D4_LCD_Pin D10_LCD_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|LED_Green_Pin|LED_Yellow_Pin|LED_Red_Pin 
 8000e6a:	f24e 4370 	movw	r3, #58480	; 0xe470
 8000e6e:	617b      	str	r3, [r7, #20]
                          |D5_LCD_Pin|D4_LCD_Pin|D10_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <MX_GPIO_Init+0x128>)
 8000e84:	f001 fb50 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_LCD_Pin */
  GPIO_InitStruct.Pin = D9_LCD_Pin;
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D9_LCD_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_GPIO_Init+0x12c>)
 8000ea0:	f001 fb42 	bl	8002528 <HAL_GPIO_Init>

}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	; 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40020800 	.word	0x40020800

08000ebc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	RxReady = SET;
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_UART_RxCpltCallback+0x1c>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000000 	.word	0x20000000

08000edc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f003 fba0 	bl	800462a <osDelay>
 8000eea:	e7fb      	b.n	8000ee4 <StartDefaultTask+0x8>

08000eec <LCDtask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCDtask1 */
void LCDtask1(void const * argument)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
		lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
		 */
  /* Infinite loop */
  for(;;)
  {
	  PMevt = osMessagePeek(PMvalueHandle,osWaitForever);
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <LCDtask1+0x64>)
 8000ef6:	6819      	ldr	r1, [r3, #0]
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fc05 	bl	8004710 <osMessagePeek>
	  if (PMevt.status == osEventMessage)
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	2b10      	cmp	r3, #16
 8000f0a:	d11c      	bne.n	8000f46 <LCDtask1+0x5a>
	  {
		  PM2_5 = PMevt.value.v;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	75fb      	strb	r3, [r7, #23]
		  printf("The current PM2.5 is : %d \r\n", PM2_5);
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	4619      	mov	r1, r3
 8000f14:	480f      	ldr	r0, [pc, #60]	; (8000f54 <LCDtask1+0x68>)
 8000f16:	f005 fcbf 	bl	8006898 <iprintf>
		  Lcd_clear(&lcd);
 8000f1a:	480f      	ldr	r0, [pc, #60]	; (8000f58 <LCDtask1+0x6c>)
 8000f1c:	f7ff fc4a 	bl	80007b4 <Lcd_clear>
		  Lcd_cursor(&lcd,0,0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <LCDtask1+0x6c>)
 8000f26:	f7ff fc2b 	bl	8000780 <Lcd_cursor>
		  Lcd_string(&lcd, "PM2.5 is:");
 8000f2a:	490c      	ldr	r1, [pc, #48]	; (8000f5c <LCDtask1+0x70>)
 8000f2c:	480a      	ldr	r0, [pc, #40]	; (8000f58 <LCDtask1+0x6c>)
 8000f2e:	f7ff fc09 	bl	8000744 <Lcd_string>
		  Lcd_cursor(&lcd,0,10);
 8000f32:	220a      	movs	r2, #10
 8000f34:	2100      	movs	r1, #0
 8000f36:	4808      	ldr	r0, [pc, #32]	; (8000f58 <LCDtask1+0x6c>)
 8000f38:	f7ff fc22 	bl	8000780 <Lcd_cursor>
		  Lcd_int(&lcd,PM2_5);
 8000f3c:	7dfb      	ldrb	r3, [r7, #23]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <LCDtask1+0x6c>)
 8000f42:	f7ff fbe7 	bl	8000714 <Lcd_int>

	  }

	  osDelay(1000);
 8000f46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4a:	f003 fb6e 	bl	800462a <osDelay>
	  PMevt = osMessagePeek(PMvalueHandle,osWaitForever);
 8000f4e:	e7d1      	b.n	8000ef4 <LCDtask1+0x8>
 8000f50:	2000422c 	.word	0x2000422c
 8000f54:	08007c08 	.word	0x08007c08
 8000f58:	200002fc 	.word	0x200002fc
 8000f5c:	08007c28 	.word	0x08007c28

08000f60 <PM2_5_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PM2_5_1 */
void PM2_5_1(void const * argument)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PM2_5_1 */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t PM2_5;
	  if (RxReady==SET)
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <PM2_5_1+0x60>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d122      	bne.n	8000fb6 <PM2_5_1+0x56>
	  {
		  RxReady = RESET;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <PM2_5_1+0x60>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart6, pmflag, 32); //Read data from PM2.5 module, fixed packet length is 32 bytes.
 8000f76:	2220      	movs	r2, #32
 8000f78:	4912      	ldr	r1, [pc, #72]	; (8000fc4 <PM2_5_1+0x64>)
 8000f7a:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <PM2_5_1+0x68>)
 8000f7c:	f002 fdfc 	bl	8003b78 <HAL_UART_Receive_IT>
		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000f80:	2120      	movs	r1, #32
 8000f82:	4812      	ldr	r0, [pc, #72]	; (8000fcc <PM2_5_1+0x6c>)
 8000f84:	f001 fc6b 	bl	800285e <HAL_GPIO_TogglePin>
		  if(pmflag[0]==0x42) //The correct data start with 0x42.
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <PM2_5_1+0x64>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b42      	cmp	r3, #66	; 0x42
 8000f8e:	d112      	bne.n	8000fb6 <PM2_5_1+0x56>
		  {
			  PM2_5 = transmitPM2_5(pmflag);
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <PM2_5_1+0x64>)
 8000f92:	f7ff fb3a 	bl	800060a <transmitPM2_5>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]
			  if(PMchecksum(pmflag,32)==0)
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <PM2_5_1+0x64>)
 8000f9e:	f7ff faf7 	bl	8000590 <PMchecksum>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d106      	bne.n	8000fb6 <PM2_5_1+0x56>
			  {
				  osMessageOverwrite(PMvalueHandle,PM2_5); //Since CMSIS-RTOS library does not have such function. This is user defined function
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <PM2_5_1+0x70>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 fb77 	bl	80046a4 <osMessageOverwrite>
				  //printf("Get PM2.5 value\r\n");
			  }
		  }
	  }
	  osDelay(500);
 8000fb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fba:	f003 fb36 	bl	800462a <osDelay>
  {
 8000fbe:	e7d3      	b.n	8000f68 <PM2_5_1+0x8>
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20004250 	.word	0x20004250
 8000fc8:	20004270 	.word	0x20004270
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	2000422c 	.word	0x2000422c

08000fd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fe6:	f000 fc0f 	bl	8001808 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40000400 	.word	0x40000400

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <RetargetInit+0x28>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <RetargetInit+0x2c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6898      	ldr	r0, [r3, #8]
 800101c:	2300      	movs	r3, #0
 800101e:	2202      	movs	r2, #2
 8001020:	2100      	movs	r1, #0
 8001022:	f005 fc51 	bl	80068c8 <setvbuf>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200042f0 	.word	0x200042f0
 8001034:	20000028 	.word	0x20000028

08001038 <_isatty>:

int _isatty(int fd) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db04      	blt.n	8001050 <_isatty+0x18>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b02      	cmp	r3, #2
 800104a:	dc01      	bgt.n	8001050 <_isatty+0x18>
    return 1;
 800104c:	2301      	movs	r3, #1
 800104e:	e005      	b.n	800105c <_isatty+0x24>

  errno = EBADF;
 8001050:	f005 fbe4 	bl	800681c <__errno>
 8001054:	4602      	mov	r2, r0
 8001056:	2309      	movs	r3, #9
 8001058:	6013      	str	r3, [r2, #0]
  return 0;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <_write>:

int _write(int fd, char* ptr, int len) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d002      	beq.n	800107c <_write+0x18>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d111      	bne.n	80010a0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <_write+0x54>)
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	b29a      	uxth	r2, r3
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	f002 fc36 	bl	80038fa <HAL_UART_Transmit>
 800108e:	4603      	mov	r3, r0
 8001090:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <_write+0x38>
      return len;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	e008      	b.n	80010ae <_write+0x4a>
    else
      return EIO;
 800109c:	2305      	movs	r3, #5
 800109e:	e006      	b.n	80010ae <_write+0x4a>
  }
  errno = EBADF;
 80010a0:	f005 fbbc 	bl	800681c <__errno>
 80010a4:	4602      	mov	r2, r0
 80010a6:	2309      	movs	r3, #9
 80010a8:	6013      	str	r3, [r2, #0]
  return -1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200042f0 	.word	0x200042f0

080010bc <_close>:

int _close(int fd) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db04      	blt.n	80010d4 <_close+0x18>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	dc01      	bgt.n	80010d4 <_close+0x18>
    return 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e006      	b.n	80010e2 <_close+0x26>

  errno = EBADF;
 80010d4:	f005 fba2 	bl	800681c <__errno>
 80010d8:	4602      	mov	r2, r0
 80010da:	2309      	movs	r3, #9
 80010dc:	6013      	str	r3, [r2, #0]
  return -1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80010f6:	f005 fb91 	bl	800681c <__errno>
 80010fa:	4602      	mov	r2, r0
 80010fc:	2309      	movs	r3, #9
 80010fe:	6013      	str	r3, [r2, #0]
  return -1;
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <_read>:

int _read(int fd, char* ptr, int len) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d110      	bne.n	8001140 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <_read+0x4c>)
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	2201      	movs	r2, #1
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	f002 fc7f 	bl	8003a2c <HAL_UART_Receive>
 800112e:	4603      	mov	r3, r0
 8001130:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <_read+0x30>
      return 1;
 8001138:	2301      	movs	r3, #1
 800113a:	e008      	b.n	800114e <_read+0x42>
    else
      return EIO;
 800113c:	2305      	movs	r3, #5
 800113e:	e006      	b.n	800114e <_read+0x42>
  }
  errno = EBADF;
 8001140:	f005 fb6c 	bl	800681c <__errno>
 8001144:	4602      	mov	r2, r0
 8001146:	2309      	movs	r3, #9
 8001148:	6013      	str	r3, [r2, #0]
  return -1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200042f0 	.word	0x200042f0

0800115c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db08      	blt.n	800117e <_fstat+0x22>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b02      	cmp	r3, #2
 8001170:	dc05      	bgt.n	800117e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001178:	605a      	str	r2, [r3, #4]
    return 0;
 800117a:	2300      	movs	r3, #0
 800117c:	e005      	b.n	800118a <_fstat+0x2e>
  }

  errno = EBADF;
 800117e:	f005 fb4d 	bl	800681c <__errno>
 8001182:	4602      	mov	r2, r0
 8001184:	2309      	movs	r3, #9
 8001186:	6013      	str	r3, [r2, #0]
  return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_MspInit+0x54>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a11      	ldr	r2, [pc, #68]	; (80011e8 <HAL_MspInit+0x54>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_MspInit+0x54>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_MspInit+0x54>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_MspInit+0x54>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_MspInit+0x54>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	210f      	movs	r1, #15
 80011d6:	f06f 0001 	mvn.w	r0, #1
 80011da:	f000 fe71 	bl	8001ec0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a17      	ldr	r2, [pc, #92]	; (8001268 <HAL_ADC_MspInit+0x7c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d127      	bne.n	800125e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_ADC_MspInit+0x80>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <HAL_ADC_MspInit+0x80>)
 8001218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121c:	6453      	str	r3, [r2, #68]	; 0x44
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_ADC_MspInit+0x80>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_ADC_MspInit+0x80>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <HAL_ADC_MspInit+0x80>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_ADC_MspInit+0x80>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = A0_LCD_Pin;
 8001246:	2301      	movs	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124a:	2303      	movs	r3, #3
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A0_LCD_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_ADC_MspInit+0x84>)
 800125a:	f001 f965 	bl	8002528 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40012000 	.word	0x40012000
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000

08001274 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <HAL_I2C_MspInit+0x84>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d12c      	bne.n	80012f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_I2C_MspInit+0x88>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_I2C_MspInit+0x88>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_I2C_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = RTC_I2C_SCL_Pin|RTC_I2C_SDA_Pin;
 80012b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b8:	2312      	movs	r3, #18
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012bc:	2301      	movs	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012c4:	2304      	movs	r3, #4
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	480c      	ldr	r0, [pc, #48]	; (8001300 <HAL_I2C_MspInit+0x8c>)
 80012d0:	f001 f92a 	bl	8002528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_I2C_MspInit+0x88>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_I2C_MspInit+0x88>)
 80012de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_I2C_MspInit+0x88>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40005400 	.word	0x40005400
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020400 	.word	0x40020400

08001304 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a19      	ldr	r2, [pc, #100]	; (8001388 <HAL_SPI_MspInit+0x84>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d12c      	bne.n	8001380 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_SPI_MspInit+0x88>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a17      	ldr	r2, [pc, #92]	; (800138c <HAL_SPI_MspInit+0x88>)
 8001330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_SPI_MspInit+0x88>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_SPI_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_SPI_MspInit+0x88>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_SPI_MspInit+0x88>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800135e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001370:	2306      	movs	r3, #6
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <HAL_SPI_MspInit+0x8c>)
 800137c:	f001 f8d4 	bl	8002528 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40003c00 	.word	0x40003c00
 800138c:	40023800 	.word	0x40023800
 8001390:	40020800 	.word	0x40020800

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	; 0x30
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a79      	ldr	r2, [pc, #484]	; (8001598 <HAL_UART_MspInit+0x204>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d163      	bne.n	800147e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	4b78      	ldr	r3, [pc, #480]	; (800159c <HAL_UART_MspInit+0x208>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a77      	ldr	r2, [pc, #476]	; (800159c <HAL_UART_MspInit+0x208>)
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b75      	ldr	r3, [pc, #468]	; (800159c <HAL_UART_MspInit+0x208>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	4b71      	ldr	r3, [pc, #452]	; (800159c <HAL_UART_MspInit+0x208>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a70      	ldr	r2, [pc, #448]	; (800159c <HAL_UART_MspInit+0x208>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b6e      	ldr	r3, [pc, #440]	; (800159c <HAL_UART_MspInit+0x208>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ee:	230c      	movs	r3, #12
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013fe:	2307      	movs	r3, #7
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4865      	ldr	r0, [pc, #404]	; (80015a0 <HAL_UART_MspInit+0x20c>)
 800140a:	f001 f88d 	bl	8002528 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800140e:	4b65      	ldr	r3, [pc, #404]	; (80015a4 <HAL_UART_MspInit+0x210>)
 8001410:	4a65      	ldr	r2, [pc, #404]	; (80015a8 <HAL_UART_MspInit+0x214>)
 8001412:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001414:	4b63      	ldr	r3, [pc, #396]	; (80015a4 <HAL_UART_MspInit+0x210>)
 8001416:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800141a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800141c:	4b61      	ldr	r3, [pc, #388]	; (80015a4 <HAL_UART_MspInit+0x210>)
 800141e:	2240      	movs	r2, #64	; 0x40
 8001420:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001422:	4b60      	ldr	r3, [pc, #384]	; (80015a4 <HAL_UART_MspInit+0x210>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001428:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <HAL_UART_MspInit+0x210>)
 800142a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001430:	4b5c      	ldr	r3, [pc, #368]	; (80015a4 <HAL_UART_MspInit+0x210>)
 8001432:	2200      	movs	r2, #0
 8001434:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001436:	4b5b      	ldr	r3, [pc, #364]	; (80015a4 <HAL_UART_MspInit+0x210>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800143c:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <HAL_UART_MspInit+0x210>)
 800143e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001442:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001444:	4b57      	ldr	r3, [pc, #348]	; (80015a4 <HAL_UART_MspInit+0x210>)
 8001446:	2200      	movs	r2, #0
 8001448:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800144a:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <HAL_UART_MspInit+0x210>)
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001450:	4854      	ldr	r0, [pc, #336]	; (80015a4 <HAL_UART_MspInit+0x210>)
 8001452:	f000 fd5f 	bl	8001f14 <HAL_DMA_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800145c:	f7ff fdcc 	bl	8000ff8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a50      	ldr	r2, [pc, #320]	; (80015a4 <HAL_UART_MspInit+0x210>)
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
 8001466:	4a4f      	ldr	r2, [pc, #316]	; (80015a4 <HAL_UART_MspInit+0x210>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2105      	movs	r1, #5
 8001470:	2026      	movs	r0, #38	; 0x26
 8001472:	f000 fd25 	bl	8001ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001476:	2026      	movs	r0, #38	; 0x26
 8001478:	f000 fd3e 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800147c:	e087      	b.n	800158e <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART6)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a4a      	ldr	r2, [pc, #296]	; (80015ac <HAL_UART_MspInit+0x218>)
 8001484:	4293      	cmp	r3, r2
 8001486:	f040 8082 	bne.w	800158e <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART6_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b43      	ldr	r3, [pc, #268]	; (800159c <HAL_UART_MspInit+0x208>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a42      	ldr	r2, [pc, #264]	; (800159c <HAL_UART_MspInit+0x208>)
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b40      	ldr	r3, [pc, #256]	; (800159c <HAL_UART_MspInit+0x208>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b3c      	ldr	r3, [pc, #240]	; (800159c <HAL_UART_MspInit+0x208>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a3b      	ldr	r2, [pc, #236]	; (800159c <HAL_UART_MspInit+0x208>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b39      	ldr	r3, [pc, #228]	; (800159c <HAL_UART_MspInit+0x208>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b35      	ldr	r3, [pc, #212]	; (800159c <HAL_UART_MspInit+0x208>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a34      	ldr	r2, [pc, #208]	; (800159c <HAL_UART_MspInit+0x208>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b32      	ldr	r3, [pc, #200]	; (800159c <HAL_UART_MspInit+0x208>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PM2_5_UART6_TX_Pin;
 80014de:	2340      	movs	r3, #64	; 0x40
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014ee:	2308      	movs	r3, #8
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PM2_5_UART6_TX_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	482d      	ldr	r0, [pc, #180]	; (80015b0 <HAL_UART_MspInit+0x21c>)
 80014fa:	f001 f815 	bl	8002528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PM2_5_UART6_RX_Pin;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001508:	2301      	movs	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001510:	2308      	movs	r3, #8
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PM2_5_UART6_RX_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	4821      	ldr	r0, [pc, #132]	; (80015a0 <HAL_UART_MspInit+0x20c>)
 800151c:	f001 f804 	bl	8002528 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <HAL_UART_MspInit+0x220>)
 8001522:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <HAL_UART_MspInit+0x224>)
 8001524:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <HAL_UART_MspInit+0x220>)
 8001528:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800152c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <HAL_UART_MspInit+0x220>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <HAL_UART_MspInit+0x220>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <HAL_UART_MspInit+0x220>)
 800153c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001540:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_UART_MspInit+0x220>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <HAL_UART_MspInit+0x220>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_UART_MspInit+0x220>)
 8001550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001554:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_UART_MspInit+0x220>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_UART_MspInit+0x220>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001562:	4814      	ldr	r0, [pc, #80]	; (80015b4 <HAL_UART_MspInit+0x220>)
 8001564:	f000 fcd6 	bl	8001f14 <HAL_DMA_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_UART_MspInit+0x1de>
      Error_Handler();
 800156e:	f7ff fd43 	bl	8000ff8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <HAL_UART_MspInit+0x220>)
 8001576:	635a      	str	r2, [r3, #52]	; 0x34
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <HAL_UART_MspInit+0x220>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2105      	movs	r1, #5
 8001582:	2047      	movs	r0, #71	; 0x47
 8001584:	f000 fc9c 	bl	8001ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001588:	2047      	movs	r0, #71	; 0x47
 800158a:	f000 fcb5 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3730      	adds	r7, #48	; 0x30
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40004400 	.word	0x40004400
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	200041cc 	.word	0x200041cc
 80015a8:	400260a0 	.word	0x400260a0
 80015ac:	40011400 	.word	0x40011400
 80015b0:	40020800 	.word	0x40020800
 80015b4:	20004070 	.word	0x20004070
 80015b8:	40026428 	.word	0x40026428

080015bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	201d      	movs	r0, #29
 80015d2:	f000 fc75 	bl	8001ec0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 80015d6:	201d      	movs	r0, #29
 80015d8:	f000 fc8e 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <HAL_InitTick+0xa0>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	4a1d      	ldr	r2, [pc, #116]	; (800165c <HAL_InitTick+0xa0>)
 80015e6:	f043 0302 	orr.w	r3, r3, #2
 80015ea:	6413      	str	r3, [r2, #64]	; 0x40
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_InitTick+0xa0>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f8:	f107 0210 	add.w	r2, r7, #16
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fe78 	bl	80032f8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001608:	f001 fe4e 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 800160c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	4a13      	ldr	r2, [pc, #76]	; (8001660 <HAL_InitTick+0xa4>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	0c9b      	lsrs	r3, r3, #18
 8001618:	3b01      	subs	r3, #1
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_InitTick+0xa8>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <HAL_InitTick+0xac>)
 8001620:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_InitTick+0xa8>)
 8001624:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001628:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_InitTick+0xa8>)
 800162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_InitTick+0xa8>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_InitTick+0xa8>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <HAL_InitTick+0xa8>)
 800163e:	f001 fef1 	bl	8003424 <HAL_TIM_Base_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d104      	bne.n	8001652 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <HAL_InitTick+0xa8>)
 800164a:	f001 ff20 	bl	800348e <HAL_TIM_Base_Start_IT>
 800164e:	4603      	mov	r3, r0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3730      	adds	r7, #48	; 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40023800 	.word	0x40023800
 8001660:	431bde83 	.word	0x431bde83
 8001664:	200042f4 	.word	0x200042f4
 8001668:	40000400 	.word	0x40000400

0800166c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <DMA1_Stream6_IRQHandler+0x10>)
 80016a6:	f000 fd05 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200041cc 	.word	0x200041cc

080016b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <TIM3_IRQHandler+0x10>)
 80016ba:	f001 ff0c 	bl	80034d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200042f4 	.word	0x200042f4

080016c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <USART2_IRQHandler+0x10>)
 80016ce:	f002 faa9 	bl	8003c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200042b0 	.word	0x200042b0

080016dc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <DMA2_Stream1_IRQHandler+0x10>)
 80016e2:	f000 fce7 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20004070 	.word	0x20004070

080016f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <USART6_IRQHandler+0x10>)
 80016f6:	f002 fa95 	bl	8003c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20004270 	.word	0x20004270

08001704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <SystemInit+0x60>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <SystemInit+0x60>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <SystemInit+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a12      	ldr	r2, [pc, #72]	; (8001768 <SystemInit+0x64>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <SystemInit+0x64>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <SystemInit+0x64>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <SystemInit+0x64>)
 8001730:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <SystemInit+0x64>)
 800173c:	4a0b      	ldr	r2, [pc, #44]	; (800176c <SystemInit+0x68>)
 800173e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <SystemInit+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a08      	ldr	r2, [pc, #32]	; (8001768 <SystemInit+0x64>)
 8001746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SystemInit+0x64>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <SystemInit+0x60>)
 8001754:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001758:	609a      	str	r2, [r3, #8]
#endif
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00
 8001768:	40023800 	.word	0x40023800
 800176c:	24003010 	.word	0x24003010

08001770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001774:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001776:	e003      	b.n	8001780 <LoopCopyDataInit>

08001778 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800177a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800177c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800177e:	3104      	adds	r1, #4

08001780 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001780:	480b      	ldr	r0, [pc, #44]	; (80017b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001784:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001786:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001788:	d3f6      	bcc.n	8001778 <CopyDataInit>
  ldr  r2, =_sbss
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800178c:	e002      	b.n	8001794 <LoopFillZerobss>

0800178e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800178e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001790:	f842 3b04 	str.w	r3, [r2], #4

08001794 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001796:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001798:	d3f9      	bcc.n	800178e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800179a:	f7ff ffb3 	bl	8001704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800179e:	f005 f843 	bl	8006828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a2:	f7ff f8af 	bl	8000904 <main>
  bx  lr    
 80017a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017a8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80017ac:	08007d08 	.word	0x08007d08
  ldr  r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017b4:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80017b8:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 80017bc:	2000433c 	.word	0x2000433c

080017c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <HAL_Init+0x40>)
 80017ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_Init+0x40>)
 80017da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_Init+0x40>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 fb5c 	bl	8001eaa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fee2 	bl	80015bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f8:	f7ff fccc 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023c00 	.word	0x40023c00

08001808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_IncTick+0x20>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x24>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_IncTick+0x24>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000020 	.word	0x20000020
 800182c:	20004334 	.word	0x20004334

08001830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_GetTick+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20004334 	.word	0x20004334

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff ffee 	bl	8001830 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d005      	beq.n	800186e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_Delay+0x40>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800186e:	bf00      	nop
 8001870:	f7ff ffde 	bl	8001830 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f7      	bhi.n	8001870 <HAL_Delay+0x28>
  {
  }
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000020 	.word	0x20000020

0800188c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e033      	b.n	800190a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fc9e 	bl	80011ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d118      	bne.n	80018fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018d2:	f023 0302 	bic.w	r3, r3, #2
 80018d6:	f043 0202 	orr.w	r2, r3, #2
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f93a 	bl	8001b58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f023 0303 	bic.w	r3, r3, #3
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
 80018fa:	e001      	b.n	8001900 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x1c>
 800192c:	2302      	movs	r3, #2
 800192e:	e105      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x228>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b09      	cmp	r3, #9
 800193e:	d925      	bls.n	800198c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68d9      	ldr	r1, [r3, #12]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	b29b      	uxth	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	3b1e      	subs	r3, #30
 8001956:	2207      	movs	r2, #7
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43da      	mvns	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	400a      	ands	r2, r1
 8001964:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68d9      	ldr	r1, [r3, #12]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4618      	mov	r0, r3
 8001978:	4603      	mov	r3, r0
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4403      	add	r3, r0
 800197e:	3b1e      	subs	r3, #30
 8001980:	409a      	lsls	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	e022      	b.n	80019d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6919      	ldr	r1, [r3, #16]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	461a      	mov	r2, r3
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	2207      	movs	r2, #7
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	400a      	ands	r2, r1
 80019ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6919      	ldr	r1, [r3, #16]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4403      	add	r3, r0
 80019c8:	409a      	lsls	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d824      	bhi.n	8001a24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	3b05      	subs	r3, #5
 80019ec:	221f      	movs	r2, #31
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	400a      	ands	r2, r1
 80019fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b05      	subs	r3, #5
 8001a16:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
 8001a22:	e04c      	b.n	8001abe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b0c      	cmp	r3, #12
 8001a2a:	d824      	bhi.n	8001a76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3b23      	subs	r3, #35	; 0x23
 8001a3e:	221f      	movs	r2, #31
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43da      	mvns	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	3b23      	subs	r3, #35	; 0x23
 8001a68:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
 8001a74:	e023      	b.n	8001abe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	3b41      	subs	r3, #65	; 0x41
 8001a88:	221f      	movs	r2, #31
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	400a      	ands	r2, r1
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	3b41      	subs	r3, #65	; 0x41
 8001ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_ADC_ConfigChannel+0x234>)
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a21      	ldr	r2, [pc, #132]	; (8001b4c <HAL_ADC_ConfigChannel+0x238>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d109      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1cc>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b12      	cmp	r3, #18
 8001ad2:	d105      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a19      	ldr	r2, [pc, #100]	; (8001b4c <HAL_ADC_ConfigChannel+0x238>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d123      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x21e>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d003      	beq.n	8001afa <HAL_ADC_ConfigChannel+0x1e6>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b11      	cmp	r3, #17
 8001af8:	d11b      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d111      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_ADC_ConfigChannel+0x23c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_ADC_ConfigChannel+0x240>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	0c9a      	lsrs	r2, r3, #18
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b24:	e002      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f9      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40012300 	.word	0x40012300
 8001b4c:	40012000 	.word	0x40012000
 8001b50:	2000001c 	.word	0x2000001c
 8001b54:	431bde83 	.word	0x431bde83

08001b58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b60:	4b79      	ldr	r3, [pc, #484]	; (8001d48 <ADC_Init+0x1f0>)
 8001b62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6859      	ldr	r1, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	021a      	lsls	r2, r3, #8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6899      	ldr	r1, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <ADC_Init+0x1f4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d022      	beq.n	8001c36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6899      	ldr	r1, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6899      	ldr	r1, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	e00f      	b.n	8001c56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0202 	bic.w	r2, r2, #2
 8001c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6899      	ldr	r1, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7e1b      	ldrb	r3, [r3, #24]
 8001c70:	005a      	lsls	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01b      	beq.n	8001cbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ca2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6859      	ldr	r1, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	035a      	lsls	r2, r3, #13
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	e007      	b.n	8001ccc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	051a      	lsls	r2, r3, #20
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6899      	ldr	r1, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d0e:	025a      	lsls	r2, r3, #9
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6899      	ldr	r1, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	029a      	lsls	r2, r3, #10
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	609a      	str	r2, [r3, #8]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40012300 	.word	0x40012300
 8001d4c:	0f000001 	.word	0x0f000001

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff4c 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed2:	f7ff ff61 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001ed6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	6978      	ldr	r0, [r7, #20]
 8001ede:	f7ff ffb1 	bl	8001e44 <NVIC_EncodePriority>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ff80 	bl	8001df0 <__NVIC_SetPriority>
}
 8001ef0:	bf00      	nop
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff54 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff fc86 	bl	8001830 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e099      	b.n	8002064 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f50:	e00f      	b.n	8001f72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f52:	f7ff fc6d 	bl	8001830 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b05      	cmp	r3, #5
 8001f5e:	d908      	bls.n	8001f72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2203      	movs	r2, #3
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e078      	b.n	8002064 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e8      	bne.n	8001f52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <HAL_DMA_Init+0x158>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d107      	bne.n	8001fdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f023 0307 	bic.w	r3, r3, #7
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	2b04      	cmp	r3, #4
 8002004:	d117      	bne.n	8002036 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00e      	beq.n	8002036 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fa0b 	bl	8002434 <DMA_CheckFifoParam>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002032:	2301      	movs	r3, #1
 8002034:	e016      	b.n	8002064 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f9c2 	bl	80023c8 <DMA_CalcBaseAndBitshift>
 8002044:	4603      	mov	r3, r0
 8002046:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	223f      	movs	r2, #63	; 0x3f
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	f010803f 	.word	0xf010803f

08002070 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d004      	beq.n	800208e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2280      	movs	r2, #128	; 0x80
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e00c      	b.n	80020a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2205      	movs	r2, #5
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020c0:	4b92      	ldr	r3, [pc, #584]	; (800230c <HAL_DMA_IRQHandler+0x258>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a92      	ldr	r2, [pc, #584]	; (8002310 <HAL_DMA_IRQHandler+0x25c>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0a9b      	lsrs	r3, r3, #10
 80020cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	2208      	movs	r2, #8
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01a      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0204 	bic.w	r2, r2, #4
 8002106:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2208      	movs	r2, #8
 800210e:	409a      	lsls	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	2201      	movs	r2, #1
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2201      	movs	r2, #1
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	f043 0202 	orr.w	r2, r3, #2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	2204      	movs	r2, #4
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d012      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2204      	movs	r2, #4
 800217a:	409a      	lsls	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	f043 0204 	orr.w	r2, r3, #4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	2210      	movs	r2, #16
 8002192:	409a      	lsls	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d043      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d03c      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	2210      	movs	r2, #16
 80021b0:	409a      	lsls	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d018      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d108      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d024      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
 80021e2:	e01f      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
 80021f4:	e016      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0208 	bic.w	r2, r2, #8
 8002212:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2220      	movs	r2, #32
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 808e 	beq.w	8002352 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8086 	beq.w	8002352 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	2220      	movs	r2, #32
 800224c:	409a      	lsls	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b05      	cmp	r3, #5
 800225c:	d136      	bne.n	80022cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0216 	bic.w	r2, r2, #22
 800226c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_DMA_IRQHandler+0x1da>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0208 	bic.w	r2, r2, #8
 800229c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	223f      	movs	r2, #63	; 0x3f
 80022a4:	409a      	lsls	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d07d      	beq.n	80023be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
        }
        return;
 80022ca:	e078      	b.n	80023be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01c      	beq.n	8002314 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d108      	bne.n	80022fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d030      	beq.n	8002352 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
 80022f8:	e02b      	b.n	8002352 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d027      	beq.n	8002352 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	4798      	blx	r3
 800230a:	e022      	b.n	8002352 <HAL_DMA_IRQHandler+0x29e>
 800230c:	2000001c 	.word	0x2000001c
 8002310:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10f      	bne.n	8002342 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0210 	bic.w	r2, r2, #16
 8002330:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	2b00      	cmp	r3, #0
 8002358:	d032      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d022      	beq.n	80023ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2205      	movs	r2, #5
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3301      	adds	r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	429a      	cmp	r2, r3
 8002388:	d307      	bcc.n	800239a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f2      	bne.n	800237e <HAL_DMA_IRQHandler+0x2ca>
 8002398:	e000      	b.n	800239c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800239a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
 80023bc:	e000      	b.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80023be:	bf00      	nop
    }
  }
}
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop

080023c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	3b10      	subs	r3, #16
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <DMA_CalcBaseAndBitshift+0x64>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <DMA_CalcBaseAndBitshift+0x68>)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d909      	bls.n	800240a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	1d1a      	adds	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	659a      	str	r2, [r3, #88]	; 0x58
 8002408:	e007      	b.n	800241a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	aaaaaaab 	.word	0xaaaaaaab
 8002430:	08007c58 	.word	0x08007c58

08002434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d11f      	bne.n	800248e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d855      	bhi.n	8002500 <DMA_CheckFifoParam+0xcc>
 8002454:	a201      	add	r2, pc, #4	; (adr r2, 800245c <DMA_CheckFifoParam+0x28>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	0800246d 	.word	0x0800246d
 8002460:	0800247f 	.word	0x0800247f
 8002464:	0800246d 	.word	0x0800246d
 8002468:	08002501 	.word	0x08002501
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d045      	beq.n	8002504 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247c:	e042      	b.n	8002504 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002486:	d13f      	bne.n	8002508 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248c:	e03c      	b.n	8002508 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002496:	d121      	bne.n	80024dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d836      	bhi.n	800250c <DMA_CheckFifoParam+0xd8>
 800249e:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <DMA_CheckFifoParam+0x70>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	080024b5 	.word	0x080024b5
 80024a8:	080024bb 	.word	0x080024bb
 80024ac:	080024b5 	.word	0x080024b5
 80024b0:	080024cd 	.word	0x080024cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e02f      	b.n	800251a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d024      	beq.n	8002510 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ca:	e021      	b.n	8002510 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024d4:	d11e      	bne.n	8002514 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024da:	e01b      	b.n	8002514 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d902      	bls.n	80024e8 <DMA_CheckFifoParam+0xb4>
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d003      	beq.n	80024ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024e6:	e018      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      break;
 80024ec:	e015      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00e      	beq.n	8002518 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
      break;
 80024fe:	e00b      	b.n	8002518 <DMA_CheckFifoParam+0xe4>
      break;
 8002500:	bf00      	nop
 8002502:	e00a      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002504:	bf00      	nop
 8002506:	e008      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002508:	bf00      	nop
 800250a:	e006      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 800250c:	bf00      	nop
 800250e:	e004      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002510:	bf00      	nop
 8002512:	e002      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;   
 8002514:	bf00      	nop
 8002516:	e000      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002518:	bf00      	nop
    }
  } 
  
  return status; 
 800251a:	7bfb      	ldrb	r3, [r7, #15]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	e159      	b.n	80027f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002544:	2201      	movs	r2, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	429a      	cmp	r2, r3
 800255e:	f040 8148 	bne.w	80027f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x4a>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b12      	cmp	r3, #18
 8002570:	d123      	bne.n	80025ba <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	69b9      	ldr	r1, [r7, #24]
 80025b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	2203      	movs	r2, #3
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0203 	and.w	r2, r3, #3
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d00b      	beq.n	800260e <HAL_GPIO_Init+0xe6>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d007      	beq.n	800260e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002602:	2b11      	cmp	r3, #17
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b12      	cmp	r3, #18
 800260c:	d130      	bne.n	8002670 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2203      	movs	r2, #3
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002644:	2201      	movs	r2, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 0201 	and.w	r2, r3, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a2 	beq.w	80027f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4b56      	ldr	r3, [pc, #344]	; (800280c <HAL_GPIO_Init+0x2e4>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a55      	ldr	r2, [pc, #340]	; (800280c <HAL_GPIO_Init+0x2e4>)
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_GPIO_Init+0x2e4>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ca:	4a51      	ldr	r2, [pc, #324]	; (8002810 <HAL_GPIO_Init+0x2e8>)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	220f      	movs	r2, #15
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a48      	ldr	r2, [pc, #288]	; (8002814 <HAL_GPIO_Init+0x2ec>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_Init+0x202>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a47      	ldr	r2, [pc, #284]	; (8002818 <HAL_GPIO_Init+0x2f0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x1fe>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a46      	ldr	r2, [pc, #280]	; (800281c <HAL_GPIO_Init+0x2f4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x1fa>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a45      	ldr	r2, [pc, #276]	; (8002820 <HAL_GPIO_Init+0x2f8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x1f6>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a44      	ldr	r2, [pc, #272]	; (8002824 <HAL_GPIO_Init+0x2fc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x1f2>
 8002716:	2304      	movs	r3, #4
 8002718:	e008      	b.n	800272c <HAL_GPIO_Init+0x204>
 800271a:	2307      	movs	r3, #7
 800271c:	e006      	b.n	800272c <HAL_GPIO_Init+0x204>
 800271e:	2303      	movs	r3, #3
 8002720:	e004      	b.n	800272c <HAL_GPIO_Init+0x204>
 8002722:	2302      	movs	r3, #2
 8002724:	e002      	b.n	800272c <HAL_GPIO_Init+0x204>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_GPIO_Init+0x204>
 800272a:	2300      	movs	r3, #0
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	f002 0203 	and.w	r2, r2, #3
 8002732:	0092      	lsls	r2, r2, #2
 8002734:	4093      	lsls	r3, r2
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800273c:	4934      	ldr	r1, [pc, #208]	; (8002810 <HAL_GPIO_Init+0x2e8>)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	3302      	adds	r3, #2
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <HAL_GPIO_Init+0x300>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800276e:	4a2e      	ldr	r2, [pc, #184]	; (8002828 <HAL_GPIO_Init+0x300>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002774:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <HAL_GPIO_Init+0x300>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002798:	4a23      	ldr	r2, [pc, #140]	; (8002828 <HAL_GPIO_Init+0x300>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279e:	4b22      	ldr	r3, [pc, #136]	; (8002828 <HAL_GPIO_Init+0x300>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c2:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_GPIO_Init+0x300>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c8:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_GPIO_Init+0x300>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ec:	4a0e      	ldr	r2, [pc, #56]	; (8002828 <HAL_GPIO_Init+0x300>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b0f      	cmp	r3, #15
 80027fc:	f67f aea2 	bls.w	8002544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002800:	bf00      	nop
 8002802:	3724      	adds	r7, #36	; 0x24
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	40023800 	.word	0x40023800
 8002810:	40013800 	.word	0x40013800
 8002814:	40020000 	.word	0x40020000
 8002818:	40020400 	.word	0x40020400
 800281c:	40020800 	.word	0x40020800
 8002820:	40020c00 	.word	0x40020c00
 8002824:	40021000 	.word	0x40021000
 8002828:	40013c00 	.word	0x40013c00

0800282c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
 8002838:	4613      	mov	r3, r2
 800283a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800283c:	787b      	ldrb	r3, [r7, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002848:	e003      	b.n	8002852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800284a:	887b      	ldrh	r3, [r7, #2]
 800284c:	041a      	lsls	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	619a      	str	r2, [r3, #24]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	460b      	mov	r3, r1
 8002868:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	887b      	ldrh	r3, [r7, #2]
 8002870:	401a      	ands	r2, r3
 8002872:	887b      	ldrh	r3, [r7, #2]
 8002874:	429a      	cmp	r2, r3
 8002876:	d104      	bne.n	8002882 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002878:	887b      	ldrh	r3, [r7, #2]
 800287a:	041a      	lsls	r2, r3, #16
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002880:	e002      	b.n	8002888 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002882:	887a      	ldrh	r2, [r7, #2]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	619a      	str	r2, [r3, #24]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e10f      	b.n	8002ac6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fcda 	bl	8001274 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2224      	movs	r2, #36	; 0x24
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028d8:	f000 fce6 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 80028dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4a7b      	ldr	r2, [pc, #492]	; (8002ad0 <HAL_I2C_Init+0x23c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d807      	bhi.n	80028f8 <HAL_I2C_Init+0x64>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4a7a      	ldr	r2, [pc, #488]	; (8002ad4 <HAL_I2C_Init+0x240>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	bf94      	ite	ls
 80028f0:	2301      	movls	r3, #1
 80028f2:	2300      	movhi	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	e006      	b.n	8002906 <HAL_I2C_Init+0x72>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4a77      	ldr	r2, [pc, #476]	; (8002ad8 <HAL_I2C_Init+0x244>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	bf94      	ite	ls
 8002900:	2301      	movls	r3, #1
 8002902:	2300      	movhi	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0db      	b.n	8002ac6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4a72      	ldr	r2, [pc, #456]	; (8002adc <HAL_I2C_Init+0x248>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0c9b      	lsrs	r3, r3, #18
 8002918:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	430a      	orrs	r2, r1
 800292c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a64      	ldr	r2, [pc, #400]	; (8002ad0 <HAL_I2C_Init+0x23c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d802      	bhi.n	8002948 <HAL_I2C_Init+0xb4>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	3301      	adds	r3, #1
 8002946:	e009      	b.n	800295c <HAL_I2C_Init+0xc8>
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	4a63      	ldr	r2, [pc, #396]	; (8002ae0 <HAL_I2C_Init+0x24c>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	3301      	adds	r3, #1
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	430b      	orrs	r3, r1
 8002962:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800296e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4956      	ldr	r1, [pc, #344]	; (8002ad0 <HAL_I2C_Init+0x23c>)
 8002978:	428b      	cmp	r3, r1
 800297a:	d80d      	bhi.n	8002998 <HAL_I2C_Init+0x104>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1e59      	subs	r1, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fbb1 f3f3 	udiv	r3, r1, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	2b04      	cmp	r3, #4
 8002992:	bf38      	it	cc
 8002994:	2304      	movcc	r3, #4
 8002996:	e04f      	b.n	8002a38 <HAL_I2C_Init+0x1a4>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d111      	bne.n	80029c4 <HAL_I2C_Init+0x130>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1e58      	subs	r0, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	440b      	add	r3, r1
 80029ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	e012      	b.n	80029ea <HAL_I2C_Init+0x156>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1e58      	subs	r0, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6859      	ldr	r1, [r3, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	0099      	lsls	r1, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_Init+0x15e>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e022      	b.n	8002a38 <HAL_I2C_Init+0x1a4>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10e      	bne.n	8002a18 <HAL_I2C_Init+0x184>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1e58      	subs	r0, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	440b      	add	r3, r1
 8002a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a16:	e00f      	b.n	8002a38 <HAL_I2C_Init+0x1a4>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e58      	subs	r0, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	0099      	lsls	r1, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	6809      	ldr	r1, [r1, #0]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6911      	ldr	r1, [r2, #16]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68d2      	ldr	r2, [r2, #12]
 8002a72:	4311      	orrs	r1, r2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	000186a0 	.word	0x000186a0
 8002ad4:	001e847f 	.word	0x001e847f
 8002ad8:	003d08ff 	.word	0x003d08ff
 8002adc:	431bde83 	.word	0x431bde83
 8002ae0:	10624dd3 	.word	0x10624dd3

08002ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e22d      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d075      	beq.n	8002bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b02:	4ba3      	ldr	r3, [pc, #652]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d00c      	beq.n	8002b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0e:	4ba0      	ldr	r3, [pc, #640]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d112      	bne.n	8002b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b1a:	4b9d      	ldr	r3, [pc, #628]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b26:	d10b      	bne.n	8002b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	4b99      	ldr	r3, [pc, #612]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d05b      	beq.n	8002bec <HAL_RCC_OscConfig+0x108>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d157      	bne.n	8002bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e208      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d106      	bne.n	8002b58 <HAL_RCC_OscConfig+0x74>
 8002b4a:	4b91      	ldr	r3, [pc, #580]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a90      	ldr	r2, [pc, #576]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e01d      	b.n	8002b94 <HAL_RCC_OscConfig+0xb0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x98>
 8002b62:	4b8b      	ldr	r3, [pc, #556]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a8a      	ldr	r2, [pc, #552]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b88      	ldr	r3, [pc, #544]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a87      	ldr	r2, [pc, #540]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCC_OscConfig+0xb0>
 8002b7c:	4b84      	ldr	r3, [pc, #528]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a83      	ldr	r2, [pc, #524]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b81      	ldr	r3, [pc, #516]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a80      	ldr	r2, [pc, #512]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fe48 	bl	8001830 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7fe fe44 	bl	8001830 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e1cd      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b76      	ldr	r3, [pc, #472]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0xc0>
 8002bc2:	e014      	b.n	8002bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fe34 	bl	8001830 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7fe fe30 	bl	8001830 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e1b9      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	4b6c      	ldr	r3, [pc, #432]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0xe8>
 8002bea:	e000      	b.n	8002bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d063      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bfa:	4b65      	ldr	r3, [pc, #404]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b62      	ldr	r3, [pc, #392]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d11c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c12:	4b5f      	ldr	r3, [pc, #380]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d116      	bne.n	8002c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	4b5c      	ldr	r3, [pc, #368]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_RCC_OscConfig+0x152>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e18d      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c36:	4b56      	ldr	r3, [pc, #344]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4952      	ldr	r1, [pc, #328]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	e03a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c54:	4b4f      	ldr	r3, [pc, #316]	; (8002d94 <HAL_RCC_OscConfig+0x2b0>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fde9 	bl	8001830 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c62:	f7fe fde5 	bl	8001830 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e16e      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c80:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4940      	ldr	r1, [pc, #256]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]
 8002c94:	e015      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c96:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_RCC_OscConfig+0x2b0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fdc8 	bl	8001830 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca4:	f7fe fdc4 	bl	8001830 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e14d      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d030      	beq.n	8002d30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd6:	4b30      	ldr	r3, [pc, #192]	; (8002d98 <HAL_RCC_OscConfig+0x2b4>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe fda8 	bl	8001830 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7fe fda4 	bl	8001830 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e12d      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x200>
 8002d02:	e015      	b.n	8002d30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_RCC_OscConfig+0x2b4>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fd91 	bl	8001830 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d12:	f7fe fd8d 	bl	8001830 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e116      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f0      	bne.n	8002d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80a0 	beq.w	8002e7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x2b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d121      	bne.n	8002dbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_RCC_OscConfig+0x2b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <HAL_RCC_OscConfig+0x2b8>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7fe fd53 	bl	8001830 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e011      	b.n	8002db2 <HAL_RCC_OscConfig+0x2ce>
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	42470000 	.word	0x42470000
 8002d98:	42470e80 	.word	0x42470e80
 8002d9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da0:	f7fe fd46 	bl	8001830 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e0cf      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db2:	4b6a      	ldr	r3, [pc, #424]	; (8002f5c <HAL_RCC_OscConfig+0x478>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d106      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x2f0>
 8002dc6:	4b66      	ldr	r3, [pc, #408]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	4a65      	ldr	r2, [pc, #404]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd2:	e01c      	b.n	8002e0e <HAL_RCC_OscConfig+0x32a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCC_OscConfig+0x312>
 8002ddc:	4b60      	ldr	r3, [pc, #384]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4a5f      	ldr	r2, [pc, #380]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	6713      	str	r3, [r2, #112]	; 0x70
 8002de8:	4b5d      	ldr	r3, [pc, #372]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a5c      	ldr	r2, [pc, #368]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	e00b      	b.n	8002e0e <HAL_RCC_OscConfig+0x32a>
 8002df6:	4b5a      	ldr	r3, [pc, #360]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a59      	ldr	r2, [pc, #356]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
 8002e02:	4b57      	ldr	r3, [pc, #348]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a56      	ldr	r2, [pc, #344]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d015      	beq.n	8002e42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e16:	f7fe fd0b 	bl	8001830 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe fd07 	bl	8001830 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e08e      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ee      	beq.n	8002e1e <HAL_RCC_OscConfig+0x33a>
 8002e40:	e014      	b.n	8002e6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7fe fcf5 	bl	8001830 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fe fcf1 	bl	8001830 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e078      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e60:	4b3f      	ldr	r3, [pc, #252]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d105      	bne.n	8002e7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e72:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a3a      	ldr	r2, [pc, #232]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d064      	beq.n	8002f50 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e86:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d05c      	beq.n	8002f4c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d141      	bne.n	8002f1e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9a:	4b32      	ldr	r3, [pc, #200]	; (8002f64 <HAL_RCC_OscConfig+0x480>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fcc6 	bl	8001830 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fe fcc2 	bl	8001830 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e04b      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eba:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	491d      	ldr	r1, [pc, #116]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_RCC_OscConfig+0x480>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7fe fc9b 	bl	8001830 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efe:	f7fe fc97 	bl	8001830 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e020      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f10:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x41a>
 8002f1c:	e018      	b.n	8002f50 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_RCC_OscConfig+0x480>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7fe fc84 	bl	8001830 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe fc80 	bl	8001830 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e009      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <HAL_RCC_OscConfig+0x47c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x448>
 8002f4a:	e001      	b.n	8002f50 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	40023800 	.word	0x40023800
 8002f64:	42470060 	.word	0x42470060

08002f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0ca      	b.n	8003112 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b67      	ldr	r3, [pc, #412]	; (800311c <HAL_RCC_ClockConfig+0x1b4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d90c      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b64      	ldr	r3, [pc, #400]	; (800311c <HAL_RCC_ClockConfig+0x1b4>)
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b62      	ldr	r3, [pc, #392]	; (800311c <HAL_RCC_ClockConfig+0x1b4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0b6      	b.n	8003112 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d020      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fbc:	4b58      	ldr	r3, [pc, #352]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4a57      	ldr	r2, [pc, #348]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd4:	4b52      	ldr	r3, [pc, #328]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a51      	ldr	r2, [pc, #324]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe0:	4b4f      	ldr	r3, [pc, #316]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	494c      	ldr	r1, [pc, #304]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d044      	beq.n	8003088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	4b46      	ldr	r3, [pc, #280]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d119      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e07d      	b.n	8003112 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d003      	beq.n	8003026 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003022:	2b03      	cmp	r3, #3
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003026:	4b3e      	ldr	r3, [pc, #248]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e06d      	b.n	8003112 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003036:	4b3a      	ldr	r3, [pc, #232]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e065      	b.n	8003112 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003046:	4b36      	ldr	r3, [pc, #216]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f023 0203 	bic.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4933      	ldr	r1, [pc, #204]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	4313      	orrs	r3, r2
 8003056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003058:	f7fe fbea 	bl	8001830 <HAL_GetTick>
 800305c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	e00a      	b.n	8003076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003060:	f7fe fbe6 	bl	8001830 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e04d      	b.n	8003112 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 020c 	and.w	r2, r3, #12
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	429a      	cmp	r2, r3
 8003086:	d1eb      	bne.n	8003060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003088:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_RCC_ClockConfig+0x1b4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d20c      	bcs.n	80030b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b21      	ldr	r3, [pc, #132]	; (800311c <HAL_RCC_ClockConfig+0x1b4>)
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b1f      	ldr	r3, [pc, #124]	; (800311c <HAL_RCC_ClockConfig+0x1b4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e030      	b.n	8003112 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4915      	ldr	r1, [pc, #84]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	490d      	ldr	r1, [pc, #52]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ee:	f000 f81d 	bl	800312c <HAL_RCC_GetSysClockFreq>
 80030f2:	4601      	mov	r1, r0
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	4a09      	ldr	r2, [pc, #36]	; (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	5cd3      	ldrb	r3, [r2, r3]
 8003102:	fa21 f303 	lsr.w	r3, r1, r3
 8003106:	4a08      	ldr	r2, [pc, #32]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800310a:	2000      	movs	r0, #0
 800310c:	f7fe fa56 	bl	80015bc <HAL_InitTick>

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40023c00 	.word	0x40023c00
 8003120:	40023800 	.word	0x40023800
 8003124:	08007c40 	.word	0x08007c40
 8003128:	2000001c 	.word	0x2000001c

0800312c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800312c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	2300      	movs	r3, #0
 800313c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003142:	4b50      	ldr	r3, [pc, #320]	; (8003284 <HAL_RCC_GetSysClockFreq+0x158>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b04      	cmp	r3, #4
 800314c:	d007      	beq.n	800315e <HAL_RCC_GetSysClockFreq+0x32>
 800314e:	2b08      	cmp	r3, #8
 8003150:	d008      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x38>
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 808d 	bne.w	8003272 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4b4b      	ldr	r3, [pc, #300]	; (8003288 <HAL_RCC_GetSysClockFreq+0x15c>)
 800315a:	60bb      	str	r3, [r7, #8]
       break;
 800315c:	e08c      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800315e:	4b4b      	ldr	r3, [pc, #300]	; (800328c <HAL_RCC_GetSysClockFreq+0x160>)
 8003160:	60bb      	str	r3, [r7, #8]
      break;
 8003162:	e089      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003164:	4b47      	ldr	r3, [pc, #284]	; (8003284 <HAL_RCC_GetSysClockFreq+0x158>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800316c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800316e:	4b45      	ldr	r3, [pc, #276]	; (8003284 <HAL_RCC_GetSysClockFreq+0x158>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d023      	beq.n	80031c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317a:	4b42      	ldr	r3, [pc, #264]	; (8003284 <HAL_RCC_GetSysClockFreq+0x158>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	099b      	lsrs	r3, r3, #6
 8003180:	f04f 0400 	mov.w	r4, #0
 8003184:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	ea03 0501 	and.w	r5, r3, r1
 8003190:	ea04 0602 	and.w	r6, r4, r2
 8003194:	4a3d      	ldr	r2, [pc, #244]	; (800328c <HAL_RCC_GetSysClockFreq+0x160>)
 8003196:	fb02 f106 	mul.w	r1, r2, r6
 800319a:	2200      	movs	r2, #0
 800319c:	fb02 f205 	mul.w	r2, r2, r5
 80031a0:	440a      	add	r2, r1
 80031a2:	493a      	ldr	r1, [pc, #232]	; (800328c <HAL_RCC_GetSysClockFreq+0x160>)
 80031a4:	fba5 0101 	umull	r0, r1, r5, r1
 80031a8:	1853      	adds	r3, r2, r1
 80031aa:	4619      	mov	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f04f 0400 	mov.w	r4, #0
 80031b2:	461a      	mov	r2, r3
 80031b4:	4623      	mov	r3, r4
 80031b6:	f7fd f86b 	bl	8000290 <__aeabi_uldivmod>
 80031ba:	4603      	mov	r3, r0
 80031bc:	460c      	mov	r4, r1
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	e049      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c2:	4b30      	ldr	r3, [pc, #192]	; (8003284 <HAL_RCC_GetSysClockFreq+0x158>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	f04f 0400 	mov.w	r4, #0
 80031cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	ea03 0501 	and.w	r5, r3, r1
 80031d8:	ea04 0602 	and.w	r6, r4, r2
 80031dc:	4629      	mov	r1, r5
 80031de:	4632      	mov	r2, r6
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	f04f 0400 	mov.w	r4, #0
 80031e8:	0154      	lsls	r4, r2, #5
 80031ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031ee:	014b      	lsls	r3, r1, #5
 80031f0:	4619      	mov	r1, r3
 80031f2:	4622      	mov	r2, r4
 80031f4:	1b49      	subs	r1, r1, r5
 80031f6:	eb62 0206 	sbc.w	r2, r2, r6
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	f04f 0400 	mov.w	r4, #0
 8003202:	0194      	lsls	r4, r2, #6
 8003204:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003208:	018b      	lsls	r3, r1, #6
 800320a:	1a5b      	subs	r3, r3, r1
 800320c:	eb64 0402 	sbc.w	r4, r4, r2
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	00e2      	lsls	r2, r4, #3
 800321a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800321e:	00d9      	lsls	r1, r3, #3
 8003220:	460b      	mov	r3, r1
 8003222:	4614      	mov	r4, r2
 8003224:	195b      	adds	r3, r3, r5
 8003226:	eb44 0406 	adc.w	r4, r4, r6
 800322a:	f04f 0100 	mov.w	r1, #0
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	02a2      	lsls	r2, r4, #10
 8003234:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003238:	0299      	lsls	r1, r3, #10
 800323a:	460b      	mov	r3, r1
 800323c:	4614      	mov	r4, r2
 800323e:	4618      	mov	r0, r3
 8003240:	4621      	mov	r1, r4
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f04f 0400 	mov.w	r4, #0
 8003248:	461a      	mov	r2, r3
 800324a:	4623      	mov	r3, r4
 800324c:	f7fd f820 	bl	8000290 <__aeabi_uldivmod>
 8003250:	4603      	mov	r3, r0
 8003252:	460c      	mov	r4, r1
 8003254:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCC_GetSysClockFreq+0x158>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	0c1b      	lsrs	r3, r3, #16
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	3301      	adds	r3, #1
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	60bb      	str	r3, [r7, #8]
      break;
 8003270:	e002      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003274:	60bb      	str	r3, [r7, #8]
      break;
 8003276:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003278:	68bb      	ldr	r3, [r7, #8]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	00f42400 	.word	0x00f42400
 800328c:	017d7840 	.word	0x017d7840

08003290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	2000001c 	.word	0x2000001c

080032a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032ac:	f7ff fff0 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032b0:	4601      	mov	r1, r0
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	0a9b      	lsrs	r3, r3, #10
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	4a03      	ldr	r2, [pc, #12]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032be:	5cd3      	ldrb	r3, [r2, r3]
 80032c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40023800 	.word	0x40023800
 80032cc:	08007c50 	.word	0x08007c50

080032d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032d4:	f7ff ffdc 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032d8:	4601      	mov	r1, r0
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	0b5b      	lsrs	r3, r3, #13
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	4a03      	ldr	r2, [pc, #12]	; (80032f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e6:	5cd3      	ldrb	r3, [r2, r3]
 80032e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40023800 	.word	0x40023800
 80032f4:	08007c50 	.word	0x08007c50

080032f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	220f      	movs	r2, #15
 8003306:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_RCC_GetClockConfig+0x5c>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0203 	and.w	r2, r3, #3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <HAL_RCC_GetClockConfig+0x5c>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <HAL_RCC_GetClockConfig+0x5c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_GetClockConfig+0x5c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	08db      	lsrs	r3, r3, #3
 8003332:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <HAL_RCC_GetClockConfig+0x60>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 020f 	and.w	r2, r3, #15
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	601a      	str	r2, [r3, #0]
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	40023c00 	.word	0x40023c00

0800335c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e056      	b.n	800341c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7fd ffbb 	bl	8001304 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	ea42 0103 	orr.w	r1, r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	0c1b      	lsrs	r3, r3, #16
 80033ec:	f003 0104 	and.w	r1, r3, #4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800340a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e01d      	b.n	8003472 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f815 	bl	800347a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3304      	adds	r3, #4
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f000 f968 	bl	8003738 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b085      	sub	sp, #20
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0201 	orr.w	r2, r2, #1
 80034a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d007      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d122      	bne.n	8003532 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d11b      	bne.n	8003532 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f06f 0202 	mvn.w	r2, #2
 8003502:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f8ee 	bl	80036fa <HAL_TIM_IC_CaptureCallback>
 800351e:	e005      	b.n	800352c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f8e0 	bl	80036e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8f1 	bl	800370e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b04      	cmp	r3, #4
 800353e:	d122      	bne.n	8003586 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b04      	cmp	r3, #4
 800354c:	d11b      	bne.n	8003586 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f06f 0204 	mvn.w	r2, #4
 8003556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f8c4 	bl	80036fa <HAL_TIM_IC_CaptureCallback>
 8003572:	e005      	b.n	8003580 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f8b6 	bl	80036e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8c7 	bl	800370e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b08      	cmp	r3, #8
 8003592:	d122      	bne.n	80035da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d11b      	bne.n	80035da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f06f 0208 	mvn.w	r2, #8
 80035aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2204      	movs	r2, #4
 80035b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f89a 	bl	80036fa <HAL_TIM_IC_CaptureCallback>
 80035c6:	e005      	b.n	80035d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f88c 	bl	80036e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f89d 	bl	800370e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	d122      	bne.n	800362e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d11b      	bne.n	800362e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f06f 0210 	mvn.w	r2, #16
 80035fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2208      	movs	r2, #8
 8003604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f870 	bl	80036fa <HAL_TIM_IC_CaptureCallback>
 800361a:	e005      	b.n	8003628 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f862 	bl	80036e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f873 	bl	800370e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b01      	cmp	r3, #1
 800363a:	d10e      	bne.n	800365a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b01      	cmp	r3, #1
 8003648:	d107      	bne.n	800365a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f06f 0201 	mvn.w	r2, #1
 8003652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7fd fcbd 	bl	8000fd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003664:	2b80      	cmp	r3, #128	; 0x80
 8003666:	d10e      	bne.n	8003686 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003672:	2b80      	cmp	r3, #128	; 0x80
 8003674:	d107      	bne.n	8003686 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800367e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f8e3 	bl	800384c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003690:	2b40      	cmp	r3, #64	; 0x40
 8003692:	d10e      	bne.n	80036b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	d107      	bne.n	80036b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f838 	bl	8003722 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d10e      	bne.n	80036de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d107      	bne.n	80036de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f06f 0220 	mvn.w	r2, #32
 80036d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f8ad 	bl	8003838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a34      	ldr	r2, [pc, #208]	; (800381c <TIM_Base_SetConfig+0xe4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00f      	beq.n	8003770 <TIM_Base_SetConfig+0x38>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003756:	d00b      	beq.n	8003770 <TIM_Base_SetConfig+0x38>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a31      	ldr	r2, [pc, #196]	; (8003820 <TIM_Base_SetConfig+0xe8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d007      	beq.n	8003770 <TIM_Base_SetConfig+0x38>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a30      	ldr	r2, [pc, #192]	; (8003824 <TIM_Base_SetConfig+0xec>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d003      	beq.n	8003770 <TIM_Base_SetConfig+0x38>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a2f      	ldr	r2, [pc, #188]	; (8003828 <TIM_Base_SetConfig+0xf0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d108      	bne.n	8003782 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a25      	ldr	r2, [pc, #148]	; (800381c <TIM_Base_SetConfig+0xe4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01b      	beq.n	80037c2 <TIM_Base_SetConfig+0x8a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d017      	beq.n	80037c2 <TIM_Base_SetConfig+0x8a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <TIM_Base_SetConfig+0xe8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <TIM_Base_SetConfig+0x8a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a21      	ldr	r2, [pc, #132]	; (8003824 <TIM_Base_SetConfig+0xec>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00f      	beq.n	80037c2 <TIM_Base_SetConfig+0x8a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a20      	ldr	r2, [pc, #128]	; (8003828 <TIM_Base_SetConfig+0xf0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00b      	beq.n	80037c2 <TIM_Base_SetConfig+0x8a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1f      	ldr	r2, [pc, #124]	; (800382c <TIM_Base_SetConfig+0xf4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d007      	beq.n	80037c2 <TIM_Base_SetConfig+0x8a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <TIM_Base_SetConfig+0xf8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d003      	beq.n	80037c2 <TIM_Base_SetConfig+0x8a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1d      	ldr	r2, [pc, #116]	; (8003834 <TIM_Base_SetConfig+0xfc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d108      	bne.n	80037d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a08      	ldr	r2, [pc, #32]	; (800381c <TIM_Base_SetConfig+0xe4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d103      	bne.n	8003808 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	615a      	str	r2, [r3, #20]
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40010000 	.word	0x40010000
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800
 8003828:	40000c00 	.word	0x40000c00
 800382c:	40014000 	.word	0x40014000
 8003830:	40014400 	.word	0x40014400
 8003834:	40014800 	.word	0x40014800

08003838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e03f      	b.n	80038f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd fd84 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fc39 	bl	800411c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b088      	sub	sp, #32
 80038fe:	af02      	add	r7, sp, #8
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b20      	cmp	r3, #32
 8003918:	f040 8083 	bne.w	8003a22 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_UART_Transmit+0x2e>
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e07b      	b.n	8003a24 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_UART_Transmit+0x40>
 8003936:	2302      	movs	r3, #2
 8003938:	e074      	b.n	8003a24 <HAL_UART_Transmit+0x12a>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2221      	movs	r2, #33	; 0x21
 800394c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003950:	f7fd ff6e 	bl	8001830 <HAL_GetTick>
 8003954:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	88fa      	ldrh	r2, [r7, #6]
 800395a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003962:	e042      	b.n	80039ea <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397a:	d122      	bne.n	80039c2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2200      	movs	r2, #0
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fa5c 	bl	8003e44 <UART_WaitOnFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e046      	b.n	8003a24 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	3302      	adds	r3, #2
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	e017      	b.n	80039ea <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	3301      	adds	r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	e013      	b.n	80039ea <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2200      	movs	r2, #0
 80039ca:	2180      	movs	r1, #128	; 0x80
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 fa39 	bl	8003e44 <UART_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e023      	b.n	8003a24 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	60ba      	str	r2, [r7, #8]
 80039e2:	781a      	ldrb	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1b7      	bne.n	8003964 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2200      	movs	r2, #0
 80039fc:	2140      	movs	r1, #64	; 0x40
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fa20 	bl	8003e44 <UART_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e00a      	b.n	8003a24 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e000      	b.n	8003a24 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	f040 8090 	bne.w	8003b6e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_UART_Receive+0x2e>
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e088      	b.n	8003b70 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_UART_Receive+0x40>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e081      	b.n	8003b70 <HAL_UART_Receive+0x144>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2222      	movs	r2, #34	; 0x22
 8003a7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a82:	f7fd fed5 	bl	8001830 <HAL_GetTick>
 8003a86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	88fa      	ldrh	r2, [r7, #6]
 8003a8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	88fa      	ldrh	r2, [r7, #6]
 8003a92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a94:	e05c      	b.n	8003b50 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aac:	d12b      	bne.n	8003b06 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2120      	movs	r1, #32
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f9c3 	bl	8003e44 <UART_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e053      	b.n	8003b70 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10c      	bne.n	8003aee <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	3302      	adds	r3, #2
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	e030      	b.n	8003b50 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	3301      	adds	r3, #1
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	e024      	b.n	8003b50 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2120      	movs	r1, #32
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f997 	bl	8003e44 <UART_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e027      	b.n	8003b70 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d108      	bne.n	8003b3a <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	60ba      	str	r2, [r7, #8]
 8003b34:	b2ca      	uxtb	r2, r1
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	e00a      	b.n	8003b50 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	1c59      	adds	r1, r3, #1
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d19d      	bne.n	8003a96 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e000      	b.n	8003b70 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
  }
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	4613      	mov	r3, r2
 8003b84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d140      	bne.n	8003c14 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_UART_Receive_IT+0x26>
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e039      	b.n	8003c16 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_UART_Receive_IT+0x38>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e032      	b.n	8003c16 <HAL_UART_Receive_IT+0x9e>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	88fa      	ldrh	r2, [r7, #6]
 8003bc2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2222      	movs	r2, #34	; 0x22
 8003bd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bee:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0220 	orr.w	r2, r2, #32
 8003c0e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e000      	b.n	8003c16 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_UART_IRQHandler+0x52>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f9d2 	bl	8004018 <UART_Receive_IT>
      return;
 8003c74:	e0cc      	b.n	8003e10 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80ab 	beq.w	8003dd4 <HAL_UART_IRQHandler+0x1b0>
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_UART_IRQHandler+0x70>
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80a0 	beq.w	8003dd4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x90>
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	f043 0201 	orr.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_UART_IRQHandler+0xb0>
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ccc:	f043 0202 	orr.w	r2, r3, #2
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_UART_IRQHandler+0xd0>
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	f043 0204 	orr.w	r2, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_UART_IRQHandler+0xf0>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0c:	f043 0208 	orr.w	r2, r3, #8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d078      	beq.n	8003e0e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d007      	beq.n	8003d36 <HAL_UART_IRQHandler+0x112>
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f971 	bl	8004018 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d102      	bne.n	8003d5e <HAL_UART_IRQHandler+0x13a>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d031      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f8ba 	bl	8003ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6e:	2b40      	cmp	r3, #64	; 0x40
 8003d70:	d123      	bne.n	8003dba <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d80:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d013      	beq.n	8003db2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8e:	4a22      	ldr	r2, [pc, #136]	; (8003e18 <HAL_UART_IRQHandler+0x1f4>)
 8003d90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe f96a 	bl	8002070 <HAL_DMA_Abort_IT>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dac:	4610      	mov	r0, r2
 8003dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	e00e      	b.n	8003dd0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f83c 	bl	8003e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	e00a      	b.n	8003dd0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f838 	bl	8003e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e006      	b.n	8003dd0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f834 	bl	8003e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003dce:	e01e      	b.n	8003e0e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	bf00      	nop
    return;
 8003dd2:	e01c      	b.n	8003e0e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_UART_IRQHandler+0x1cc>
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f8a7 	bl	8003f3c <UART_Transmit_IT>
    return;
 8003dee:	e00f      	b.n	8003e10 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_UART_IRQHandler+0x1ec>
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f8ef 	bl	8003fe8 <UART_EndTransmit_IT>
    return;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003e0e:	bf00      	nop
  }
}
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	08003f15 	.word	0x08003f15

08003e1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e54:	e02c      	b.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d028      	beq.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e64:	f7fd fce4 	bl	8001830 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d21d      	bcs.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e00f      	b.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d0c3      	beq.n	8003e56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003eee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f7ff ff7e 	bl	8003e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f34:	bf00      	nop
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b21      	cmp	r3, #33	; 0x21
 8003f4e:	d144      	bne.n	8003fda <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f58:	d11a      	bne.n	8003f90 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f6e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d105      	bne.n	8003f84 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	1c9a      	adds	r2, r3, #2
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	621a      	str	r2, [r3, #32]
 8003f82:	e00e      	b.n	8003fa2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	621a      	str	r2, [r3, #32]
 8003f8e:	e008      	b.n	8003fa2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	1c59      	adds	r1, r3, #1
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6211      	str	r1, [r2, #32]
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10f      	bne.n	8003fd6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e000      	b.n	8003fdc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
  }
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ffe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff ff07 	bl	8003e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b22      	cmp	r3, #34	; 0x22
 800402a:	d171      	bne.n	8004110 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004034:	d123      	bne.n	800407e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10e      	bne.n	8004062 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	b29b      	uxth	r3, r3
 800404c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	1c9a      	adds	r2, r3, #2
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
 8004060:	e029      	b.n	80040b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	b29b      	uxth	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
 800407c:	e01b      	b.n	80040b6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6858      	ldr	r0, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	1c59      	adds	r1, r3, #1
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6291      	str	r1, [r2, #40]	; 0x28
 8004096:	b2c2      	uxtb	r2, r0
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	e00c      	b.n	80040b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	1c58      	adds	r0, r3, #1
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	6288      	str	r0, [r1, #40]	; 0x28
 80040ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29b      	uxth	r3, r3
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4619      	mov	r1, r3
 80040c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d120      	bne.n	800410c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0220 	bic.w	r2, r2, #32
 80040d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0201 	bic.w	r2, r2, #1
 80040f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fc feda 	bl	8000ebc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e002      	b.n	8004112 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e000      	b.n	8004112 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004110:	2302      	movs	r3, #2
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800411c:	b5b0      	push	{r4, r5, r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800415c:	f023 030c 	bic.w	r3, r3, #12
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	68f9      	ldr	r1, [r7, #12]
 8004166:	430b      	orrs	r3, r1
 8004168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699a      	ldr	r2, [r3, #24]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004188:	f040 80e4 	bne.w	8004354 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4aab      	ldr	r2, [pc, #684]	; (8004440 <UART_SetConfig+0x324>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <UART_SetConfig+0x84>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4aaa      	ldr	r2, [pc, #680]	; (8004444 <UART_SetConfig+0x328>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d16c      	bne.n	800427a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80041a0:	f7ff f896 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	009a      	lsls	r2, r3, #2
 80041ae:	441a      	add	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ba:	4aa3      	ldr	r2, [pc, #652]	; (8004448 <UART_SetConfig+0x32c>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	011c      	lsls	r4, r3, #4
 80041c4:	f7ff f884 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009a      	lsls	r2, r3, #2
 80041d2:	441a      	add	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	fbb2 f5f3 	udiv	r5, r2, r3
 80041de:	f7ff f877 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 80041e2:	4602      	mov	r2, r0
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009a      	lsls	r2, r3, #2
 80041ec:	441a      	add	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	4a93      	ldr	r2, [pc, #588]	; (8004448 <UART_SetConfig+0x32c>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2264      	movs	r2, #100	; 0x64
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	1aeb      	subs	r3, r5, r3
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	3332      	adds	r3, #50	; 0x32
 800420c:	4a8e      	ldr	r2, [pc, #568]	; (8004448 <UART_SetConfig+0x32c>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800421a:	441c      	add	r4, r3
 800421c:	f7ff f858 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 8004220:	4602      	mov	r2, r0
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009a      	lsls	r2, r3, #2
 800422a:	441a      	add	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	fbb2 f5f3 	udiv	r5, r2, r3
 8004236:	f7ff f84b 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 800423a:	4602      	mov	r2, r0
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	009a      	lsls	r2, r3, #2
 8004244:	441a      	add	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	4a7d      	ldr	r2, [pc, #500]	; (8004448 <UART_SetConfig+0x32c>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	2264      	movs	r2, #100	; 0x64
 800425a:	fb02 f303 	mul.w	r3, r2, r3
 800425e:	1aeb      	subs	r3, r5, r3
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	3332      	adds	r3, #50	; 0x32
 8004264:	4a78      	ldr	r2, [pc, #480]	; (8004448 <UART_SetConfig+0x32c>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	f003 0207 	and.w	r2, r3, #7
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4422      	add	r2, r4
 8004276:	609a      	str	r2, [r3, #8]
 8004278:	e154      	b.n	8004524 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800427a:	f7ff f815 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 800427e:	4602      	mov	r2, r0
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	009a      	lsls	r2, r3, #2
 8004288:	441a      	add	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	fbb2 f3f3 	udiv	r3, r2, r3
 8004294:	4a6c      	ldr	r2, [pc, #432]	; (8004448 <UART_SetConfig+0x32c>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	011c      	lsls	r4, r3, #4
 800429e:	f7ff f803 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 80042a2:	4602      	mov	r2, r0
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	009a      	lsls	r2, r3, #2
 80042ac:	441a      	add	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	fbb2 f5f3 	udiv	r5, r2, r3
 80042b8:	f7fe fff6 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	009a      	lsls	r2, r3, #2
 80042c6:	441a      	add	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d2:	4a5d      	ldr	r2, [pc, #372]	; (8004448 <UART_SetConfig+0x32c>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	2264      	movs	r2, #100	; 0x64
 80042dc:	fb02 f303 	mul.w	r3, r2, r3
 80042e0:	1aeb      	subs	r3, r5, r3
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	3332      	adds	r3, #50	; 0x32
 80042e6:	4a58      	ldr	r2, [pc, #352]	; (8004448 <UART_SetConfig+0x32c>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042f4:	441c      	add	r4, r3
 80042f6:	f7fe ffd7 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 80042fa:	4602      	mov	r2, r0
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009a      	lsls	r2, r3, #2
 8004304:	441a      	add	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004310:	f7fe ffca 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 8004314:	4602      	mov	r2, r0
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009a      	lsls	r2, r3, #2
 800431e:	441a      	add	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	fbb2 f3f3 	udiv	r3, r2, r3
 800432a:	4a47      	ldr	r2, [pc, #284]	; (8004448 <UART_SetConfig+0x32c>)
 800432c:	fba2 2303 	umull	r2, r3, r2, r3
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	2264      	movs	r2, #100	; 0x64
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	1aeb      	subs	r3, r5, r3
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	3332      	adds	r3, #50	; 0x32
 800433e:	4a42      	ldr	r2, [pc, #264]	; (8004448 <UART_SetConfig+0x32c>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	f003 0207 	and.w	r2, r3, #7
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4422      	add	r2, r4
 8004350:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004352:	e0e7      	b.n	8004524 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a39      	ldr	r2, [pc, #228]	; (8004440 <UART_SetConfig+0x324>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d004      	beq.n	8004368 <UART_SetConfig+0x24c>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a38      	ldr	r2, [pc, #224]	; (8004444 <UART_SetConfig+0x328>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d171      	bne.n	800444c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004368:	f7fe ffb2 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 800436c:	4602      	mov	r2, r0
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009a      	lsls	r2, r3, #2
 8004376:	441a      	add	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	4a31      	ldr	r2, [pc, #196]	; (8004448 <UART_SetConfig+0x32c>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	011c      	lsls	r4, r3, #4
 800438c:	f7fe ffa0 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 8004390:	4602      	mov	r2, r0
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009a      	lsls	r2, r3, #2
 800439a:	441a      	add	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	fbb2 f5f3 	udiv	r5, r2, r3
 80043a6:	f7fe ff93 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 80043aa:	4602      	mov	r2, r0
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009a      	lsls	r2, r3, #2
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	4a21      	ldr	r2, [pc, #132]	; (8004448 <UART_SetConfig+0x32c>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2264      	movs	r2, #100	; 0x64
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	1aeb      	subs	r3, r5, r3
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	3332      	adds	r3, #50	; 0x32
 80043d4:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <UART_SetConfig+0x32c>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e0:	441c      	add	r4, r3
 80043e2:	f7fe ff75 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 80043e6:	4602      	mov	r2, r0
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009a      	lsls	r2, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	fbb2 f5f3 	udiv	r5, r2, r3
 80043fc:	f7fe ff68 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 8004400:	4602      	mov	r2, r0
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009a      	lsls	r2, r3, #2
 800440a:	441a      	add	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <UART_SetConfig+0x32c>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	2264      	movs	r2, #100	; 0x64
 8004420:	fb02 f303 	mul.w	r3, r2, r3
 8004424:	1aeb      	subs	r3, r5, r3
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	3332      	adds	r3, #50	; 0x32
 800442a:	4a07      	ldr	r2, [pc, #28]	; (8004448 <UART_SetConfig+0x32c>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	f003 020f 	and.w	r2, r3, #15
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4422      	add	r2, r4
 800443c:	609a      	str	r2, [r3, #8]
 800443e:	e071      	b.n	8004524 <UART_SetConfig+0x408>
 8004440:	40011000 	.word	0x40011000
 8004444:	40011400 	.word	0x40011400
 8004448:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800444c:	f7fe ff2c 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 8004450:	4602      	mov	r2, r0
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	009a      	lsls	r2, r3, #2
 800445a:	441a      	add	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	4a31      	ldr	r2, [pc, #196]	; (800452c <UART_SetConfig+0x410>)
 8004468:	fba2 2303 	umull	r2, r3, r2, r3
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	011c      	lsls	r4, r3, #4
 8004470:	f7fe ff1a 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 8004474:	4602      	mov	r2, r0
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	009a      	lsls	r2, r3, #2
 800447e:	441a      	add	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	fbb2 f5f3 	udiv	r5, r2, r3
 800448a:	f7fe ff0d 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 800448e:	4602      	mov	r2, r0
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009a      	lsls	r2, r3, #2
 8004498:	441a      	add	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	4a21      	ldr	r2, [pc, #132]	; (800452c <UART_SetConfig+0x410>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2264      	movs	r2, #100	; 0x64
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	1aeb      	subs	r3, r5, r3
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	3332      	adds	r3, #50	; 0x32
 80044b8:	4a1c      	ldr	r2, [pc, #112]	; (800452c <UART_SetConfig+0x410>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c4:	441c      	add	r4, r3
 80044c6:	f7fe feef 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009a      	lsls	r2, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	fbb2 f5f3 	udiv	r5, r2, r3
 80044e0:	f7fe fee2 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	009a      	lsls	r2, r3, #2
 80044ee:	441a      	add	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fa:	4a0c      	ldr	r2, [pc, #48]	; (800452c <UART_SetConfig+0x410>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	2264      	movs	r2, #100	; 0x64
 8004504:	fb02 f303 	mul.w	r3, r2, r3
 8004508:	1aeb      	subs	r3, r5, r3
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	3332      	adds	r3, #50	; 0x32
 800450e:	4a07      	ldr	r2, [pc, #28]	; (800452c <UART_SetConfig+0x410>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	f003 020f 	and.w	r2, r3, #15
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4422      	add	r2, r4
 8004520:	609a      	str	r2, [r3, #8]
}
 8004522:	e7ff      	b.n	8004524 <UART_SetConfig+0x408>
 8004524:	bf00      	nop
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bdb0      	pop	{r4, r5, r7, pc}
 800452c:	51eb851f 	.word	0x51eb851f

08004530 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800453e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004542:	2b84      	cmp	r3, #132	; 0x84
 8004544:	d005      	beq.n	8004552 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004546:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	3303      	adds	r3, #3
 8004550:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004552:	68fb      	ldr	r3, [r7, #12]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004566:	f3ef 8305 	mrs	r3, IPSR
 800456a:	607b      	str	r3, [r7, #4]
  return(result);
 800456c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800456e:	2b00      	cmp	r3, #0
 8004570:	bf14      	ite	ne
 8004572:	2301      	movne	r3, #1
 8004574:	2300      	moveq	r3, #0
 8004576:	b2db      	uxtb	r3, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004588:	f001 f82e 	bl	80055e8 <vTaskStartScheduler>
  
  return osOK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	bd80      	pop	{r7, pc}

08004592 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004592:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004594:	b089      	sub	sp, #36	; 0x24
 8004596:	af04      	add	r7, sp, #16
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <osThreadCreate+0x54>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01c      	beq.n	80045e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685c      	ldr	r4, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681d      	ldr	r5, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691e      	ldr	r6, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff ffb6 	bl	8004530 <makeFreeRtosPriority>
 80045c4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045ce:	9202      	str	r2, [sp, #8]
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	9100      	str	r1, [sp, #0]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	4632      	mov	r2, r6
 80045d8:	4629      	mov	r1, r5
 80045da:	4620      	mov	r0, r4
 80045dc:	f000 fe4a 	bl	8005274 <xTaskCreateStatic>
 80045e0:	4603      	mov	r3, r0
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e01c      	b.n	8004620 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685c      	ldr	r4, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045f2:	b29e      	uxth	r6, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff ff98 	bl	8004530 <makeFreeRtosPriority>
 8004600:	4602      	mov	r2, r0
 8004602:	f107 030c 	add.w	r3, r7, #12
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	9200      	str	r2, [sp, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	4632      	mov	r2, r6
 800460e:	4629      	mov	r1, r5
 8004610:	4620      	mov	r0, r4
 8004612:	f000 fe88 	bl	8005326 <xTaskCreate>
 8004616:	4603      	mov	r3, r0
 8004618:	2b01      	cmp	r3, #1
 800461a:	d001      	beq.n	8004620 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800461c:	2300      	movs	r3, #0
 800461e:	e000      	b.n	8004622 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004620:	68fb      	ldr	r3, [r7, #12]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800462a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <osDelay+0x16>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	e000      	b.n	8004642 <osDelay+0x18>
 8004640:	2301      	movs	r3, #1
 8004642:	4618      	mov	r0, r3
 8004644:	f000 ff9c 	bl	8005580 <vTaskDelay>
  
  return osOK;
 8004648:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004652:	b590      	push	{r4, r7, lr}
 8004654:	b085      	sub	sp, #20
 8004656:	af02      	add	r7, sp, #8
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d012      	beq.n	800468a <osMessageCreate+0x38>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00e      	beq.n	800468a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68dc      	ldr	r4, [r3, #12]
 800467c:	2300      	movs	r3, #0
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	4623      	mov	r3, r4
 8004682:	f000 f9ad 	bl	80049e0 <xQueueGenericCreateStatic>
 8004686:	4603      	mov	r3, r0
 8004688:	e008      	b.n	800469c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	4619      	mov	r1, r3
 8004696:	f000 fa15 	bl	8004ac4 <xQueueGenericCreate>
 800469a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd90      	pop	{r4, r7, pc}

080046a4 <osMessageOverwrite>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   This is a !!!!!user-defined!!!!! function. Must be used for length-one queue only.
*/
osStatus osMessageOverwrite (osMessageQId queue_id, uint32_t info)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken = pdFALSE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]


  if (inHandlerMode()) {
 80046b2:	f7ff ff55 	bl	8004560 <inHandlerMode>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d017      	beq.n	80046ec <osMessageOverwrite+0x48>
    if (xQueueOverwriteFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80046bc:	f107 020c 	add.w	r2, r7, #12
 80046c0:	4639      	mov	r1, r7
 80046c2:	2302      	movs	r3, #2
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fb53 	bl	8004d70 <xQueueGenericSendFromISR>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d001      	beq.n	80046d4 <osMessageOverwrite+0x30>
      return osErrorOS;
 80046d0:	23ff      	movs	r3, #255	; 0xff
 80046d2:	e017      	b.n	8004704 <osMessageOverwrite+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d013      	beq.n	8004702 <osMessageOverwrite+0x5e>
 80046da:	4b0c      	ldr	r3, [pc, #48]	; (800470c <osMessageOverwrite+0x68>)
 80046dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	e00a      	b.n	8004702 <osMessageOverwrite+0x5e>
  }
  else {
    if (xQueueOverwrite(queue_id, &info) != pdTRUE) {
 80046ec:	4639      	mov	r1, r7
 80046ee:	2302      	movs	r3, #2
 80046f0:	2200      	movs	r2, #0
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fa42 	bl	8004b7c <xQueueGenericSend>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d001      	beq.n	8004702 <osMessageOverwrite+0x5e>
      return osErrorOS;
 80046fe:	23ff      	movs	r3, #255	; 0xff
 8004700:	e000      	b.n	8004704 <osMessageOverwrite+0x60>
    }
  }

  return osOK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	e000ed04 	.word	0xe000ed04

08004710 <osMessagePeek>:
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
*/
osEvent osMessagePeek (osMessageQId queue_id, uint32_t millisec)
{
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b089      	sub	sp, #36	; 0x24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <osMessagePeek+0x2c>
    event.status = osErrorParameter;
 8004726:	2380      	movs	r3, #128	; 0x80
 8004728:	613b      	str	r3, [r7, #16]
    return event;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	461c      	mov	r4, r3
 800472e:	f107 0310 	add.w	r3, r7, #16
 8004732:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800473a:	e030      	b.n	800479e <osMessagePeek+0x8e>
  }
  
  ticks = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004746:	d103      	bne.n	8004750 <osMessagePeek+0x40>
    ticks = portMAX_DELAY;
 8004748:	f04f 33ff 	mov.w	r3, #4294967295
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	e009      	b.n	8004764 <osMessagePeek+0x54>
  }
  else if (millisec != 0) {
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d006      	beq.n	8004764 <osMessagePeek+0x54>
    ticks = millisec / portTICK_PERIOD_MS;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <osMessagePeek+0x54>
      ticks = 1;
 8004760:	2301      	movs	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
    }
  }
  
  if (xQueuePeek(queue_id, &event.value.v, ticks) == pdTRUE) 
 8004764:	f107 0310 	add.w	r3, r7, #16
 8004768:	3304      	adds	r3, #4
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	4619      	mov	r1, r3
 800476e:	68b8      	ldr	r0, [r7, #8]
 8004770:	f000 fb92 	bl	8004e98 <xQueuePeek>
 8004774:	4603      	mov	r3, r0
 8004776:	2b01      	cmp	r3, #1
 8004778:	d102      	bne.n	8004780 <osMessagePeek+0x70>
  {
    /* We have mail */
    event.status = osEventMessage;
 800477a:	2310      	movs	r3, #16
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	e006      	b.n	800478e <osMessagePeek+0x7e>
  }
  else 
  {
    event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <osMessagePeek+0x7a>
 8004786:	2300      	movs	r3, #0
 8004788:	e000      	b.n	800478c <osMessagePeek+0x7c>
 800478a:	2340      	movs	r3, #64	; 0x40
 800478c:	613b      	str	r3, [r7, #16]
  }
  
  return event;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	461c      	mov	r4, r3
 8004792:	f107 0310 	add.w	r3, r7, #16
 8004796:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800479a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	3724      	adds	r7, #36	; 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd90      	pop	{r4, r7, pc}

080047a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f103 0208 	add.w	r2, r3, #8
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f04f 32ff 	mov.w	r2, #4294967295
 80047be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f103 0208 	add.w	r2, r3, #8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f103 0208 	add.w	r2, r3, #8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	601a      	str	r2, [r3, #0]
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485e:	d103      	bne.n	8004868 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e00c      	b.n	8004882 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3308      	adds	r3, #8
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	e002      	b.n	8004876 <vListInsert+0x2e>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	429a      	cmp	r2, r3
 8004880:	d2f6      	bcs.n	8004870 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	601a      	str	r2, [r3, #0]
}
 80048ae:	bf00      	nop
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6892      	ldr	r2, [r2, #8]
 80048d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6852      	ldr	r2, [r2, #4]
 80048da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d103      	bne.n	80048ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	1e5a      	subs	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
	...

08004910 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d109      	bne.n	8004938 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	e7fe      	b.n	8004936 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004938:	f001 fc80 	bl	800623c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004944:	68f9      	ldr	r1, [r7, #12]
 8004946:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	441a      	add	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	3b01      	subs	r3, #1
 800496a:	68f9      	ldr	r1, [r7, #12]
 800496c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	441a      	add	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	22ff      	movs	r2, #255	; 0xff
 800497c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	22ff      	movs	r2, #255	; 0xff
 8004984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d114      	bne.n	80049b8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01a      	beq.n	80049cc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3310      	adds	r3, #16
 800499a:	4618      	mov	r0, r3
 800499c:	f001 f866 	bl	8005a6c <xTaskRemoveFromEventList>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d012      	beq.n	80049cc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049a6:	4b0d      	ldr	r3, [pc, #52]	; (80049dc <xQueueGenericReset+0xcc>)
 80049a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	e009      	b.n	80049cc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3310      	adds	r3, #16
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fef2 	bl	80047a6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3324      	adds	r3, #36	; 0x24
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff feed 	bl	80047a6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049cc:	f001 fc64 	bl	8006298 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049d0:	2301      	movs	r3, #1
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	e000ed04 	.word	0xe000ed04

080049e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08e      	sub	sp, #56	; 0x38
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d109      	bne.n	8004a08 <xQueueGenericCreateStatic+0x28>
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a06:	e7fe      	b.n	8004a06 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <xQueueGenericCreateStatic+0x42>
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a20:	e7fe      	b.n	8004a20 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <xQueueGenericCreateStatic+0x4e>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <xQueueGenericCreateStatic+0x52>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <xQueueGenericCreateStatic+0x54>
 8004a32:	2300      	movs	r3, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d109      	bne.n	8004a4c <xQueueGenericCreateStatic+0x6c>
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	623b      	str	r3, [r7, #32]
 8004a4a:	e7fe      	b.n	8004a4a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d102      	bne.n	8004a58 <xQueueGenericCreateStatic+0x78>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <xQueueGenericCreateStatic+0x7c>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <xQueueGenericCreateStatic+0x7e>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <xQueueGenericCreateStatic+0x96>
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	e7fe      	b.n	8004a74 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a76:	2348      	movs	r3, #72	; 0x48
 8004a78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b48      	cmp	r3, #72	; 0x48
 8004a7e:	d009      	beq.n	8004a94 <xQueueGenericCreateStatic+0xb4>
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	e7fe      	b.n	8004a92 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004aa6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f842 	bl	8004b3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3730      	adds	r7, #48	; 0x30
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08a      	sub	sp, #40	; 0x28
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d109      	bne.n	8004aec <xQueueGenericCreate+0x28>
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	e7fe      	b.n	8004aea <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
 8004af6:	e004      	b.n	8004b02 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3348      	adds	r3, #72	; 0x48
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 fcb2 	bl	8006470 <pvPortMalloc>
 8004b0c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00f      	beq.n	8004b34 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	3348      	adds	r3, #72	; 0x48
 8004b18:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b22:	79fa      	ldrb	r2, [r7, #7]
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f805 	bl	8004b3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004b34:	69bb      	ldr	r3, [r7, #24]
	}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	607a      	str	r2, [r7, #4]
 8004b4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d103      	bne.n	8004b5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e002      	b.n	8004b60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	69b8      	ldr	r0, [r7, #24]
 8004b70:	f7ff fece 	bl	8004910 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08e      	sub	sp, #56	; 0x38
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <xQueueGenericSend+0x30>
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004baa:	e7fe      	b.n	8004baa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d103      	bne.n	8004bba <xQueueGenericSend+0x3e>
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <xQueueGenericSend+0x42>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <xQueueGenericSend+0x44>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d109      	bne.n	8004bd8 <xQueueGenericSend+0x5c>
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd6:	e7fe      	b.n	8004bd6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d103      	bne.n	8004be6 <xQueueGenericSend+0x6a>
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <xQueueGenericSend+0x6e>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <xQueueGenericSend+0x70>
 8004bea:	2300      	movs	r3, #0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d109      	bne.n	8004c04 <xQueueGenericSend+0x88>
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	623b      	str	r3, [r7, #32]
 8004c02:	e7fe      	b.n	8004c02 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c04:	f001 f8ee 	bl	8005de4 <xTaskGetSchedulerState>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d102      	bne.n	8004c14 <xQueueGenericSend+0x98>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <xQueueGenericSend+0x9c>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <xQueueGenericSend+0x9e>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <xQueueGenericSend+0xb6>
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	e7fe      	b.n	8004c30 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c32:	f001 fb03 	bl	800623c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d302      	bcc.n	8004c48 <xQueueGenericSend+0xcc>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d129      	bne.n	8004c9c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c4e:	f000 fa01 	bl	8005054 <prvCopyDataToQueue>
 8004c52:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d010      	beq.n	8004c7e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	3324      	adds	r3, #36	; 0x24
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 ff03 	bl	8005a6c <xTaskRemoveFromEventList>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d013      	beq.n	8004c94 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c6c:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <xQueueGenericSend+0x1f0>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	e00a      	b.n	8004c94 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c84:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <xQueueGenericSend+0x1f0>)
 8004c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c94:	f001 fb00 	bl	8006298 <vPortExitCritical>
				return pdPASS;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e063      	b.n	8004d64 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ca2:	f001 faf9 	bl	8006298 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e05c      	b.n	8004d64 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d106      	bne.n	8004cbe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cb0:	f107 0314 	add.w	r3, r7, #20
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 ff3b 	bl	8005b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cbe:	f001 faeb 	bl	8006298 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cc2:	f000 fcef 	bl	80056a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cc6:	f001 fab9 	bl	800623c <vPortEnterCritical>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cd0:	b25b      	sxtb	r3, r3
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d103      	bne.n	8004ce0 <xQueueGenericSend+0x164>
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ce6:	b25b      	sxtb	r3, r3
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d103      	bne.n	8004cf6 <xQueueGenericSend+0x17a>
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cf6:	f001 facf 	bl	8006298 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cfa:	1d3a      	adds	r2, r7, #4
 8004cfc:	f107 0314 	add.w	r3, r7, #20
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 ff2a 	bl	8005b5c <xTaskCheckForTimeOut>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d124      	bne.n	8004d58 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d10:	f000 fa98 	bl	8005244 <prvIsQueueFull>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d018      	beq.n	8004d4c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	3310      	adds	r3, #16
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fe7e 	bl	8005a24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d2a:	f000 fa23 	bl	8005174 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d2e:	f000 fcc7 	bl	80056c0 <xTaskResumeAll>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f47f af7c 	bne.w	8004c32 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <xQueueGenericSend+0x1f0>)
 8004d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	e772      	b.n	8004c32 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d4e:	f000 fa11 	bl	8005174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d52:	f000 fcb5 	bl	80056c0 <xTaskResumeAll>
 8004d56:	e76c      	b.n	8004c32 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d5a:	f000 fa0b 	bl	8005174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d5e:	f000 fcaf 	bl	80056c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d62:	2300      	movs	r3, #0
		}
	}
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3738      	adds	r7, #56	; 0x38
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08e      	sub	sp, #56	; 0x38
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <xQueueGenericSendFromISR+0x2c>
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9a:	e7fe      	b.n	8004d9a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <xQueueGenericSendFromISR+0x3a>
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <xQueueGenericSendFromISR+0x3e>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <xQueueGenericSendFromISR+0x40>
 8004dae:	2300      	movs	r3, #0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <xQueueGenericSendFromISR+0x58>
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	e7fe      	b.n	8004dc6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d103      	bne.n	8004dd6 <xQueueGenericSendFromISR+0x66>
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <xQueueGenericSendFromISR+0x6a>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <xQueueGenericSendFromISR+0x6c>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d109      	bne.n	8004df4 <xQueueGenericSendFromISR+0x84>
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	e7fe      	b.n	8004df2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004df4:	f001 fafe 	bl	80063f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004df8:	f3ef 8211 	mrs	r2, BASEPRI
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	61ba      	str	r2, [r7, #24]
 8004e0e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e10:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d302      	bcc.n	8004e26 <xQueueGenericSendFromISR+0xb6>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d12c      	bne.n	8004e80 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e36:	f000 f90d 	bl	8005054 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e3a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d112      	bne.n	8004e6a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d016      	beq.n	8004e7a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	3324      	adds	r3, #36	; 0x24
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fe0b 	bl	8005a6c <xTaskRemoveFromEventList>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00e      	beq.n	8004e7a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e007      	b.n	8004e7a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e6e:	3301      	adds	r3, #1
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	b25a      	sxtb	r2, r3
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004e7e:	e001      	b.n	8004e84 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3738      	adds	r7, #56	; 0x38
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <xQueuePeek>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08e      	sub	sp, #56	; 0x38
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <xQueuePeek+0x2e>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec4:	e7fe      	b.n	8004ec4 <xQueuePeek+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d103      	bne.n	8004ed4 <xQueuePeek+0x3c>
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <xQueuePeek+0x40>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <xQueuePeek+0x42>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <xQueuePeek+0x5a>
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	623b      	str	r3, [r7, #32]
 8004ef0:	e7fe      	b.n	8004ef0 <xQueuePeek+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ef2:	f000 ff77 	bl	8005de4 <xTaskGetSchedulerState>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <xQueuePeek+0x6a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <xQueuePeek+0x6e>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <xQueuePeek+0x70>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d109      	bne.n	8004f20 <xQueuePeek+0x88>
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	61fb      	str	r3, [r7, #28]
 8004f1e:	e7fe      	b.n	8004f1e <xQueuePeek+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f20:	f001 f98c 	bl	800623c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d021      	beq.n	8004f74 <xQueuePeek+0xdc>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f3a:	f000 f8f5 	bl	8005128 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f42:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00f      	beq.n	8004f6c <xQueuePeek+0xd4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	3324      	adds	r3, #36	; 0x24
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fd8b 	bl	8005a6c <xTaskRemoveFromEventList>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d007      	beq.n	8004f6c <xQueuePeek+0xd4>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f5c:	4b3c      	ldr	r3, [pc, #240]	; (8005050 <xQueuePeek+0x1b8>)
 8004f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f6c:	f001 f994 	bl	8006298 <vPortExitCritical>
				return pdPASS;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e069      	b.n	8005048 <xQueuePeek+0x1b0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d103      	bne.n	8004f82 <xQueuePeek+0xea>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f7a:	f001 f98d 	bl	8006298 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e062      	b.n	8005048 <xQueuePeek+0x1b0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d106      	bne.n	8004f96 <xQueuePeek+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f88:	f107 0314 	add.w	r3, r7, #20
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fdcf 	bl	8005b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f92:	2301      	movs	r3, #1
 8004f94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f96:	f001 f97f 	bl	8006298 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f9a:	f000 fb83 	bl	80056a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f9e:	f001 f94d 	bl	800623c <vPortEnterCritical>
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fa8:	b25b      	sxtb	r3, r3
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d103      	bne.n	8004fb8 <xQueuePeek+0x120>
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fbe:	b25b      	sxtb	r3, r3
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d103      	bne.n	8004fce <xQueuePeek+0x136>
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fce:	f001 f963 	bl	8006298 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fd2:	1d3a      	adds	r2, r7, #4
 8004fd4:	f107 0314 	add.w	r3, r7, #20
 8004fd8:	4611      	mov	r1, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fdbe 	bl	8005b5c <xTaskCheckForTimeOut>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d123      	bne.n	800502e <xQueuePeek+0x196>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fe8:	f000 f916 	bl	8005218 <prvIsQueueEmpty>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d017      	beq.n	8005022 <xQueuePeek+0x18a>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	3324      	adds	r3, #36	; 0x24
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fd12 	bl	8005a24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005002:	f000 f8b7 	bl	8005174 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005006:	f000 fb5b 	bl	80056c0 <xTaskResumeAll>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d187      	bne.n	8004f20 <xQueuePeek+0x88>
				{
					portYIELD_WITHIN_API();
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <xQueuePeek+0x1b8>)
 8005012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	e77e      	b.n	8004f20 <xQueuePeek+0x88>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8005022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005024:	f000 f8a6 	bl	8005174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005028:	f000 fb4a 	bl	80056c0 <xTaskResumeAll>
 800502c:	e778      	b.n	8004f20 <xQueuePeek+0x88>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800502e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005030:	f000 f8a0 	bl	8005174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005034:	f000 fb44 	bl	80056c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800503a:	f000 f8ed 	bl	8005218 <prvIsQueueEmpty>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	f43f af6d 	beq.w	8004f20 <xQueuePeek+0x88>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005046:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005048:	4618      	mov	r0, r3
 800504a:	3738      	adds	r7, #56	; 0x38
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	e000ed04 	.word	0xe000ed04

08005054 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10d      	bne.n	800508e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d14d      	bne.n	8005116 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fece 	bl	8005e20 <xTaskPriorityDisinherit>
 8005084:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	605a      	str	r2, [r3, #4]
 800508c:	e043      	b.n	8005116 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d119      	bne.n	80050c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6898      	ldr	r0, [r3, #8]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	461a      	mov	r2, r3
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	f001 fbe6 	bl	8006870 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	441a      	add	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d32b      	bcc.n	8005116 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	609a      	str	r2, [r3, #8]
 80050c6:	e026      	b.n	8005116 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	68d8      	ldr	r0, [r3, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	461a      	mov	r2, r3
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	f001 fbcc 	bl	8006870 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	425b      	negs	r3, r3
 80050e2:	441a      	add	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d207      	bcs.n	8005104 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	425b      	negs	r3, r3
 80050fe:	441a      	add	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d105      	bne.n	8005116 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	3b01      	subs	r3, #1
 8005114:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800511e:	697b      	ldr	r3, [r7, #20]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d018      	beq.n	800516c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	441a      	add	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d303      	bcc.n	800515c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68d9      	ldr	r1, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	461a      	mov	r2, r3
 8005166:	6838      	ldr	r0, [r7, #0]
 8005168:	f001 fb82 	bl	8006870 <memcpy>
	}
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800517c:	f001 f85e 	bl	800623c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005186:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005188:	e011      	b.n	80051ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	2b00      	cmp	r3, #0
 8005190:	d012      	beq.n	80051b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3324      	adds	r3, #36	; 0x24
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fc68 	bl	8005a6c <xTaskRemoveFromEventList>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051a2:	f000 fd3b 	bl	8005c1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	dce9      	bgt.n	800518a <prvUnlockQueue+0x16>
 80051b6:	e000      	b.n	80051ba <prvUnlockQueue+0x46>
					break;
 80051b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	22ff      	movs	r2, #255	; 0xff
 80051be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80051c2:	f001 f869 	bl	8006298 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051c6:	f001 f839 	bl	800623c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051d2:	e011      	b.n	80051f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d012      	beq.n	8005202 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3310      	adds	r3, #16
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fc43 	bl	8005a6c <xTaskRemoveFromEventList>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051ec:	f000 fd16 	bl	8005c1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051f0:	7bbb      	ldrb	r3, [r7, #14]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	dce9      	bgt.n	80051d4 <prvUnlockQueue+0x60>
 8005200:	e000      	b.n	8005204 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005202:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	22ff      	movs	r2, #255	; 0xff
 8005208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800520c:	f001 f844 	bl	8006298 <vPortExitCritical>
}
 8005210:	bf00      	nop
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005220:	f001 f80c 	bl	800623c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	2b00      	cmp	r3, #0
 800522a:	d102      	bne.n	8005232 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800522c:	2301      	movs	r3, #1
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	e001      	b.n	8005236 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005236:	f001 f82f 	bl	8006298 <vPortExitCritical>

	return xReturn;
 800523a:	68fb      	ldr	r3, [r7, #12]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800524c:	f000 fff6 	bl	800623c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005258:	429a      	cmp	r2, r3
 800525a:	d102      	bne.n	8005262 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800525c:	2301      	movs	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e001      	b.n	8005266 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005266:	f001 f817 	bl	8006298 <vPortExitCritical>

	return xReturn;
 800526a:	68fb      	ldr	r3, [r7, #12]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	; 0x38
 8005278:	af04      	add	r7, sp, #16
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005284:	2b00      	cmp	r3, #0
 8005286:	d109      	bne.n	800529c <xTaskCreateStatic+0x28>
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	623b      	str	r3, [r7, #32]
 800529a:	e7fe      	b.n	800529a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <xTaskCreateStatic+0x42>
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	e7fe      	b.n	80052b4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052b6:	2354      	movs	r3, #84	; 0x54
 80052b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b54      	cmp	r3, #84	; 0x54
 80052be:	d009      	beq.n	80052d4 <xTaskCreateStatic+0x60>
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	e7fe      	b.n	80052d2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01e      	beq.n	8005318 <xTaskCreateStatic+0xa4>
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01b      	beq.n	8005318 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052f2:	2300      	movs	r3, #0
 80052f4:	9303      	str	r3, [sp, #12]
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	9302      	str	r3, [sp, #8]
 80052fa:	f107 0314 	add.w	r3, r7, #20
 80052fe:	9301      	str	r3, [sp, #4]
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f850 	bl	80053b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005312:	f000 f8cb 	bl	80054ac <prvAddNewTaskToReadyList>
 8005316:	e001      	b.n	800531c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800531c:	697b      	ldr	r3, [r7, #20]
	}
 800531e:	4618      	mov	r0, r3
 8005320:	3728      	adds	r7, #40	; 0x28
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005326:	b580      	push	{r7, lr}
 8005328:	b08c      	sub	sp, #48	; 0x30
 800532a:	af04      	add	r7, sp, #16
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4618      	mov	r0, r3
 800533c:	f001 f898 	bl	8006470 <pvPortMalloc>
 8005340:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00e      	beq.n	8005366 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005348:	2054      	movs	r0, #84	; 0x54
 800534a:	f001 f891 	bl	8006470 <pvPortMalloc>
 800534e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
 800535c:	e005      	b.n	800536a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800535e:	6978      	ldr	r0, [r7, #20]
 8005360:	f001 f948 	bl	80065f4 <vPortFree>
 8005364:	e001      	b.n	800536a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d017      	beq.n	80053a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005378:	88fa      	ldrh	r2, [r7, #6]
 800537a:	2300      	movs	r3, #0
 800537c:	9303      	str	r3, [sp, #12]
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	9302      	str	r3, [sp, #8]
 8005382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f80e 	bl	80053b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005394:	69f8      	ldr	r0, [r7, #28]
 8005396:	f000 f889 	bl	80054ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800539a:	2301      	movs	r3, #1
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	e002      	b.n	80053a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053a0:	f04f 33ff 	mov.w	r3, #4294967295
 80053a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053a6:	69bb      	ldr	r3, [r7, #24]
	}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053c8:	3b01      	subs	r3, #1
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f023 0307 	bic.w	r3, r3, #7
 80053d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <prvInitialiseNewTask+0x46>
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	e7fe      	b.n	80053f4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	e012      	b.n	8005422 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	4413      	add	r3, r2
 8005402:	7819      	ldrb	r1, [r3, #0]
 8005404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	3334      	adds	r3, #52	; 0x34
 800540c:	460a      	mov	r2, r1
 800540e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d006      	beq.n	800542a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	3301      	adds	r3, #1
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	2b0f      	cmp	r3, #15
 8005426:	d9e9      	bls.n	80053fc <prvInitialiseNewTask+0x4c>
 8005428:	e000      	b.n	800542c <prvInitialiseNewTask+0x7c>
		{
			break;
 800542a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	2b06      	cmp	r3, #6
 8005438:	d901      	bls.n	800543e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800543a:	2306      	movs	r3, #6
 800543c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005442:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005448:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	2200      	movs	r2, #0
 800544e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	3304      	adds	r3, #4
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff f9c6 	bl	80047e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	3318      	adds	r3, #24
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff f9c1 	bl	80047e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005468:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	f1c3 0207 	rsb	r2, r3, #7
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005478:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	2200      	movs	r2, #0
 800547e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	69b8      	ldr	r0, [r7, #24]
 800548e:	f000 fdb1 	bl	8005ff4 <pxPortInitialiseStack>
 8005492:	4602      	mov	r2, r0
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054a4:	bf00      	nop
 80054a6:	3720      	adds	r7, #32
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054b4:	f000 fec2 	bl	800623c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054b8:	4b2a      	ldr	r3, [pc, #168]	; (8005564 <prvAddNewTaskToReadyList+0xb8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3301      	adds	r3, #1
 80054be:	4a29      	ldr	r2, [pc, #164]	; (8005564 <prvAddNewTaskToReadyList+0xb8>)
 80054c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054c2:	4b29      	ldr	r3, [pc, #164]	; (8005568 <prvAddNewTaskToReadyList+0xbc>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054ca:	4a27      	ldr	r2, [pc, #156]	; (8005568 <prvAddNewTaskToReadyList+0xbc>)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054d0:	4b24      	ldr	r3, [pc, #144]	; (8005564 <prvAddNewTaskToReadyList+0xb8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d110      	bne.n	80054fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054d8:	f000 fbc4 	bl	8005c64 <prvInitialiseTaskLists>
 80054dc:	e00d      	b.n	80054fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054de:	4b23      	ldr	r3, [pc, #140]	; (800556c <prvAddNewTaskToReadyList+0xc0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054e6:	4b20      	ldr	r3, [pc, #128]	; (8005568 <prvAddNewTaskToReadyList+0xbc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d802      	bhi.n	80054fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054f4:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <prvAddNewTaskToReadyList+0xbc>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054fa:	4b1d      	ldr	r3, [pc, #116]	; (8005570 <prvAddNewTaskToReadyList+0xc4>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3301      	adds	r3, #1
 8005500:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <prvAddNewTaskToReadyList+0xc4>)
 8005502:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	2201      	movs	r2, #1
 800550a:	409a      	lsls	r2, r3
 800550c:	4b19      	ldr	r3, [pc, #100]	; (8005574 <prvAddNewTaskToReadyList+0xc8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4313      	orrs	r3, r2
 8005512:	4a18      	ldr	r2, [pc, #96]	; (8005574 <prvAddNewTaskToReadyList+0xc8>)
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4a15      	ldr	r2, [pc, #84]	; (8005578 <prvAddNewTaskToReadyList+0xcc>)
 8005524:	441a      	add	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3304      	adds	r3, #4
 800552a:	4619      	mov	r1, r3
 800552c:	4610      	mov	r0, r2
 800552e:	f7ff f967 	bl	8004800 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005532:	f000 feb1 	bl	8006298 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005536:	4b0d      	ldr	r3, [pc, #52]	; (800556c <prvAddNewTaskToReadyList+0xc0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00e      	beq.n	800555c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800553e:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <prvAddNewTaskToReadyList+0xbc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	429a      	cmp	r2, r3
 800554a:	d207      	bcs.n	800555c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <prvAddNewTaskToReadyList+0xd0>)
 800554e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000414 	.word	0x20000414
 8005568:	20000314 	.word	0x20000314
 800556c:	20000420 	.word	0x20000420
 8005570:	20000430 	.word	0x20000430
 8005574:	2000041c 	.word	0x2000041c
 8005578:	20000318 	.word	0x20000318
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d016      	beq.n	80055c0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005592:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <vTaskDelay+0x60>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <vTaskDelay+0x2e>
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	60bb      	str	r3, [r7, #8]
 80055ac:	e7fe      	b.n	80055ac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80055ae:	f000 f879 	bl	80056a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055b2:	2100      	movs	r1, #0
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fcb7 	bl	8005f28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055ba:	f000 f881 	bl	80056c0 <xTaskResumeAll>
 80055be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d107      	bne.n	80055d6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80055c6:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <vTaskDelay+0x64>)
 80055c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055d6:	bf00      	nop
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	2000043c 	.word	0x2000043c
 80055e4:	e000ed04 	.word	0xe000ed04

080055e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	; 0x28
 80055ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055f6:	463a      	mov	r2, r7
 80055f8:	1d39      	adds	r1, r7, #4
 80055fa:	f107 0308 	add.w	r3, r7, #8
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fb f81a 	bl	8000638 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005604:	6839      	ldr	r1, [r7, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	9202      	str	r2, [sp, #8]
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	2300      	movs	r3, #0
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	2300      	movs	r3, #0
 8005614:	460a      	mov	r2, r1
 8005616:	491d      	ldr	r1, [pc, #116]	; (800568c <vTaskStartScheduler+0xa4>)
 8005618:	481d      	ldr	r0, [pc, #116]	; (8005690 <vTaskStartScheduler+0xa8>)
 800561a:	f7ff fe2b 	bl	8005274 <xTaskCreateStatic>
 800561e:	4602      	mov	r2, r0
 8005620:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <vTaskStartScheduler+0xac>)
 8005622:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005624:	4b1b      	ldr	r3, [pc, #108]	; (8005694 <vTaskStartScheduler+0xac>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800562c:	2301      	movs	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	e001      	b.n	8005636 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d115      	bne.n	8005668 <vTaskStartScheduler+0x80>
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800564e:	4b12      	ldr	r3, [pc, #72]	; (8005698 <vTaskStartScheduler+0xb0>)
 8005650:	f04f 32ff 	mov.w	r2, #4294967295
 8005654:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005656:	4b11      	ldr	r3, [pc, #68]	; (800569c <vTaskStartScheduler+0xb4>)
 8005658:	2201      	movs	r2, #1
 800565a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800565c:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <vTaskStartScheduler+0xb8>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005662:	f000 fd4d 	bl	8006100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005666:	e00d      	b.n	8005684 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d109      	bne.n	8005684 <vTaskStartScheduler+0x9c>
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e7fe      	b.n	8005682 <vTaskStartScheduler+0x9a>
}
 8005684:	bf00      	nop
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	08007c34 	.word	0x08007c34
 8005690:	08005c35 	.word	0x08005c35
 8005694:	20000438 	.word	0x20000438
 8005698:	20000434 	.word	0x20000434
 800569c:	20000420 	.word	0x20000420
 80056a0:	20000418 	.word	0x20000418

080056a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80056a8:	4b04      	ldr	r3, [pc, #16]	; (80056bc <vTaskSuspendAll+0x18>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3301      	adds	r3, #1
 80056ae:	4a03      	ldr	r2, [pc, #12]	; (80056bc <vTaskSuspendAll+0x18>)
 80056b0:	6013      	str	r3, [r2, #0]
}
 80056b2:	bf00      	nop
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	2000043c 	.word	0x2000043c

080056c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056ce:	4b41      	ldr	r3, [pc, #260]	; (80057d4 <xTaskResumeAll+0x114>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <xTaskResumeAll+0x2a>
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	e7fe      	b.n	80056e8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056ea:	f000 fda7 	bl	800623c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056ee:	4b39      	ldr	r3, [pc, #228]	; (80057d4 <xTaskResumeAll+0x114>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	4a37      	ldr	r2, [pc, #220]	; (80057d4 <xTaskResumeAll+0x114>)
 80056f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056f8:	4b36      	ldr	r3, [pc, #216]	; (80057d4 <xTaskResumeAll+0x114>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d161      	bne.n	80057c4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005700:	4b35      	ldr	r3, [pc, #212]	; (80057d8 <xTaskResumeAll+0x118>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d05d      	beq.n	80057c4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005708:	e02e      	b.n	8005768 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800570a:	4b34      	ldr	r3, [pc, #208]	; (80057dc <xTaskResumeAll+0x11c>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3318      	adds	r3, #24
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff f8cf 	bl	80048ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3304      	adds	r3, #4
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff f8ca 	bl	80048ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	2201      	movs	r2, #1
 800572c:	409a      	lsls	r2, r3
 800572e:	4b2c      	ldr	r3, [pc, #176]	; (80057e0 <xTaskResumeAll+0x120>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4313      	orrs	r3, r2
 8005734:	4a2a      	ldr	r2, [pc, #168]	; (80057e0 <xTaskResumeAll+0x120>)
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4a27      	ldr	r2, [pc, #156]	; (80057e4 <xTaskResumeAll+0x124>)
 8005746:	441a      	add	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3304      	adds	r3, #4
 800574c:	4619      	mov	r1, r3
 800574e:	4610      	mov	r0, r2
 8005750:	f7ff f856 	bl	8004800 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005758:	4b23      	ldr	r3, [pc, #140]	; (80057e8 <xTaskResumeAll+0x128>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	429a      	cmp	r2, r3
 8005760:	d302      	bcc.n	8005768 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005762:	4b22      	ldr	r3, [pc, #136]	; (80057ec <xTaskResumeAll+0x12c>)
 8005764:	2201      	movs	r2, #1
 8005766:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005768:	4b1c      	ldr	r3, [pc, #112]	; (80057dc <xTaskResumeAll+0x11c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1cc      	bne.n	800570a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005776:	f000 fb0f 	bl	8005d98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800577a:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <xTaskResumeAll+0x130>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d010      	beq.n	80057a8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005786:	f000 f837 	bl	80057f8 <xTaskIncrementTick>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005790:	4b16      	ldr	r3, [pc, #88]	; (80057ec <xTaskResumeAll+0x12c>)
 8005792:	2201      	movs	r2, #1
 8005794:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3b01      	subs	r3, #1
 800579a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f1      	bne.n	8005786 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80057a2:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <xTaskResumeAll+0x130>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057a8:	4b10      	ldr	r3, [pc, #64]	; (80057ec <xTaskResumeAll+0x12c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d009      	beq.n	80057c4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057b0:	2301      	movs	r3, #1
 80057b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057b4:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <xTaskResumeAll+0x134>)
 80057b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057c4:	f000 fd68 	bl	8006298 <vPortExitCritical>

	return xAlreadyYielded;
 80057c8:	68bb      	ldr	r3, [r7, #8]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	2000043c 	.word	0x2000043c
 80057d8:	20000414 	.word	0x20000414
 80057dc:	200003d4 	.word	0x200003d4
 80057e0:	2000041c 	.word	0x2000041c
 80057e4:	20000318 	.word	0x20000318
 80057e8:	20000314 	.word	0x20000314
 80057ec:	20000428 	.word	0x20000428
 80057f0:	20000424 	.word	0x20000424
 80057f4:	e000ed04 	.word	0xe000ed04

080057f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005802:	4b50      	ldr	r3, [pc, #320]	; (8005944 <xTaskIncrementTick+0x14c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f040 808c 	bne.w	8005924 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800580c:	4b4e      	ldr	r3, [pc, #312]	; (8005948 <xTaskIncrementTick+0x150>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3301      	adds	r3, #1
 8005812:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005814:	4a4c      	ldr	r2, [pc, #304]	; (8005948 <xTaskIncrementTick+0x150>)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d11f      	bne.n	8005860 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005820:	4b4a      	ldr	r3, [pc, #296]	; (800594c <xTaskIncrementTick+0x154>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <xTaskIncrementTick+0x46>
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	e7fe      	b.n	800583c <xTaskIncrementTick+0x44>
 800583e:	4b43      	ldr	r3, [pc, #268]	; (800594c <xTaskIncrementTick+0x154>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	4b42      	ldr	r3, [pc, #264]	; (8005950 <xTaskIncrementTick+0x158>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a40      	ldr	r2, [pc, #256]	; (800594c <xTaskIncrementTick+0x154>)
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	4a40      	ldr	r2, [pc, #256]	; (8005950 <xTaskIncrementTick+0x158>)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	4b40      	ldr	r3, [pc, #256]	; (8005954 <xTaskIncrementTick+0x15c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3301      	adds	r3, #1
 8005858:	4a3e      	ldr	r2, [pc, #248]	; (8005954 <xTaskIncrementTick+0x15c>)
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	f000 fa9c 	bl	8005d98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005860:	4b3d      	ldr	r3, [pc, #244]	; (8005958 <xTaskIncrementTick+0x160>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	429a      	cmp	r2, r3
 8005868:	d34d      	bcc.n	8005906 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800586a:	4b38      	ldr	r3, [pc, #224]	; (800594c <xTaskIncrementTick+0x154>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <xTaskIncrementTick+0x80>
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <xTaskIncrementTick+0x82>
 8005878:	2300      	movs	r3, #0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800587e:	4b36      	ldr	r3, [pc, #216]	; (8005958 <xTaskIncrementTick+0x160>)
 8005880:	f04f 32ff 	mov.w	r2, #4294967295
 8005884:	601a      	str	r2, [r3, #0]
					break;
 8005886:	e03e      	b.n	8005906 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005888:	4b30      	ldr	r3, [pc, #192]	; (800594c <xTaskIncrementTick+0x154>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	429a      	cmp	r2, r3
 800589e:	d203      	bcs.n	80058a8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058a0:	4a2d      	ldr	r2, [pc, #180]	; (8005958 <xTaskIncrementTick+0x160>)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6013      	str	r3, [r2, #0]
						break;
 80058a6:	e02e      	b.n	8005906 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff f804 	bl	80048ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d004      	beq.n	80058c4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	3318      	adds	r3, #24
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fe fffb 	bl	80048ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	2201      	movs	r2, #1
 80058ca:	409a      	lsls	r2, r3
 80058cc:	4b23      	ldr	r3, [pc, #140]	; (800595c <xTaskIncrementTick+0x164>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	4a22      	ldr	r2, [pc, #136]	; (800595c <xTaskIncrementTick+0x164>)
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <xTaskIncrementTick+0x168>)
 80058e4:	441a      	add	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	3304      	adds	r3, #4
 80058ea:	4619      	mov	r1, r3
 80058ec:	4610      	mov	r0, r2
 80058ee:	f7fe ff87 	bl	8004800 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f6:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <xTaskIncrementTick+0x16c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d3b4      	bcc.n	800586a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005900:	2301      	movs	r3, #1
 8005902:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005904:	e7b1      	b.n	800586a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005906:	4b17      	ldr	r3, [pc, #92]	; (8005964 <xTaskIncrementTick+0x16c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590c:	4914      	ldr	r1, [pc, #80]	; (8005960 <xTaskIncrementTick+0x168>)
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d907      	bls.n	800592e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800591e:	2301      	movs	r3, #1
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	e004      	b.n	800592e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005924:	4b10      	ldr	r3, [pc, #64]	; (8005968 <xTaskIncrementTick+0x170>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3301      	adds	r3, #1
 800592a:	4a0f      	ldr	r2, [pc, #60]	; (8005968 <xTaskIncrementTick+0x170>)
 800592c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800592e:	4b0f      	ldr	r3, [pc, #60]	; (800596c <xTaskIncrementTick+0x174>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005936:	2301      	movs	r3, #1
 8005938:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800593a:	697b      	ldr	r3, [r7, #20]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	2000043c 	.word	0x2000043c
 8005948:	20000418 	.word	0x20000418
 800594c:	200003cc 	.word	0x200003cc
 8005950:	200003d0 	.word	0x200003d0
 8005954:	2000042c 	.word	0x2000042c
 8005958:	20000434 	.word	0x20000434
 800595c:	2000041c 	.word	0x2000041c
 8005960:	20000318 	.word	0x20000318
 8005964:	20000314 	.word	0x20000314
 8005968:	20000424 	.word	0x20000424
 800596c:	20000428 	.word	0x20000428

08005970 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005976:	4b26      	ldr	r3, [pc, #152]	; (8005a10 <vTaskSwitchContext+0xa0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800597e:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <vTaskSwitchContext+0xa4>)
 8005980:	2201      	movs	r2, #1
 8005982:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005984:	e03e      	b.n	8005a04 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005986:	4b23      	ldr	r3, [pc, #140]	; (8005a14 <vTaskSwitchContext+0xa4>)
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800598c:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <vTaskSwitchContext+0xa8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	fab3 f383 	clz	r3, r3
 8005998:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800599a:	7afb      	ldrb	r3, [r7, #11]
 800599c:	f1c3 031f 	rsb	r3, r3, #31
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	491e      	ldr	r1, [pc, #120]	; (8005a1c <vTaskSwitchContext+0xac>)
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <vTaskSwitchContext+0x5a>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	607b      	str	r3, [r7, #4]
 80059c8:	e7fe      	b.n	80059c8 <vTaskSwitchContext+0x58>
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4a11      	ldr	r2, [pc, #68]	; (8005a1c <vTaskSwitchContext+0xac>)
 80059d6:	4413      	add	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	605a      	str	r2, [r3, #4]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	3308      	adds	r3, #8
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d104      	bne.n	80059fa <vTaskSwitchContext+0x8a>
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	4a07      	ldr	r2, [pc, #28]	; (8005a20 <vTaskSwitchContext+0xb0>)
 8005a02:	6013      	str	r3, [r2, #0]
}
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	2000043c 	.word	0x2000043c
 8005a14:	20000428 	.word	0x20000428
 8005a18:	2000041c 	.word	0x2000041c
 8005a1c:	20000318 	.word	0x20000318
 8005a20:	20000314 	.word	0x20000314

08005a24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d109      	bne.n	8005a48 <vTaskPlaceOnEventList+0x24>
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	e7fe      	b.n	8005a46 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a48:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <vTaskPlaceOnEventList+0x44>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3318      	adds	r3, #24
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7fe fef9 	bl	8004848 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a56:	2101      	movs	r1, #1
 8005a58:	6838      	ldr	r0, [r7, #0]
 8005a5a:	f000 fa65 	bl	8005f28 <prvAddCurrentTaskToDelayedList>
}
 8005a5e:	bf00      	nop
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000314 	.word	0x20000314

08005a6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d109      	bne.n	8005a96 <xTaskRemoveFromEventList+0x2a>
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e7fe      	b.n	8005a94 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	3318      	adds	r3, #24
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe ff0d 	bl	80048ba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aa0:	4b1d      	ldr	r3, [pc, #116]	; (8005b18 <xTaskRemoveFromEventList+0xac>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d11c      	bne.n	8005ae2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe ff04 	bl	80048ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	409a      	lsls	r2, r3
 8005aba:	4b18      	ldr	r3, [pc, #96]	; (8005b1c <xTaskRemoveFromEventList+0xb0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <xTaskRemoveFromEventList+0xb0>)
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4a13      	ldr	r2, [pc, #76]	; (8005b20 <xTaskRemoveFromEventList+0xb4>)
 8005ad2:	441a      	add	r2, r3
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f7fe fe90 	bl	8004800 <vListInsertEnd>
 8005ae0:	e005      	b.n	8005aee <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3318      	adds	r3, #24
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	480e      	ldr	r0, [pc, #56]	; (8005b24 <xTaskRemoveFromEventList+0xb8>)
 8005aea:	f7fe fe89 	bl	8004800 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af2:	4b0d      	ldr	r3, [pc, #52]	; (8005b28 <xTaskRemoveFromEventList+0xbc>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d905      	bls.n	8005b08 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005afc:	2301      	movs	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b00:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <xTaskRemoveFromEventList+0xc0>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	e001      	b.n	8005b0c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005b0c:	697b      	ldr	r3, [r7, #20]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	2000043c 	.word	0x2000043c
 8005b1c:	2000041c 	.word	0x2000041c
 8005b20:	20000318 	.word	0x20000318
 8005b24:	200003d4 	.word	0x200003d4
 8005b28:	20000314 	.word	0x20000314
 8005b2c:	20000428 	.word	0x20000428

08005b30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b38:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <vTaskInternalSetTimeOutState+0x24>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <vTaskInternalSetTimeOutState+0x28>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	605a      	str	r2, [r3, #4]
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	2000042c 	.word	0x2000042c
 8005b58:	20000418 	.word	0x20000418

08005b5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d109      	bne.n	8005b80 <xTaskCheckForTimeOut+0x24>
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	e7fe      	b.n	8005b7e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d109      	bne.n	8005b9a <xTaskCheckForTimeOut+0x3e>
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	e7fe      	b.n	8005b98 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005b9a:	f000 fb4f 	bl	800623c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b9e:	4b1d      	ldr	r3, [pc, #116]	; (8005c14 <xTaskCheckForTimeOut+0xb8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb6:	d102      	bne.n	8005bbe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61fb      	str	r3, [r7, #28]
 8005bbc:	e023      	b.n	8005c06 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <xTaskCheckForTimeOut+0xbc>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d007      	beq.n	8005bda <xTaskCheckForTimeOut+0x7e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d302      	bcc.n	8005bda <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	e015      	b.n	8005c06 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d20b      	bcs.n	8005bfc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	1ad2      	subs	r2, r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff ff9d 	bl	8005b30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	e004      	b.n	8005c06 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c02:	2301      	movs	r3, #1
 8005c04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c06:	f000 fb47 	bl	8006298 <vPortExitCritical>

	return xReturn;
 8005c0a:	69fb      	ldr	r3, [r7, #28]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20000418 	.word	0x20000418
 8005c18:	2000042c 	.word	0x2000042c

08005c1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c20:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <vTaskMissedYield+0x14>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
}
 8005c26:	bf00      	nop
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	20000428 	.word	0x20000428

08005c34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c3c:	f000 f852 	bl	8005ce4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <prvIdleTask+0x28>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d9f9      	bls.n	8005c3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c48:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <prvIdleTask+0x2c>)
 8005c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c58:	e7f0      	b.n	8005c3c <prvIdleTask+0x8>
 8005c5a:	bf00      	nop
 8005c5c:	20000318 	.word	0x20000318
 8005c60:	e000ed04 	.word	0xe000ed04

08005c64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	607b      	str	r3, [r7, #4]
 8005c6e:	e00c      	b.n	8005c8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4a12      	ldr	r2, [pc, #72]	; (8005cc4 <prvInitialiseTaskLists+0x60>)
 8005c7c:	4413      	add	r3, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fd91 	bl	80047a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3301      	adds	r3, #1
 8005c88:	607b      	str	r3, [r7, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b06      	cmp	r3, #6
 8005c8e:	d9ef      	bls.n	8005c70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c90:	480d      	ldr	r0, [pc, #52]	; (8005cc8 <prvInitialiseTaskLists+0x64>)
 8005c92:	f7fe fd88 	bl	80047a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c96:	480d      	ldr	r0, [pc, #52]	; (8005ccc <prvInitialiseTaskLists+0x68>)
 8005c98:	f7fe fd85 	bl	80047a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c9c:	480c      	ldr	r0, [pc, #48]	; (8005cd0 <prvInitialiseTaskLists+0x6c>)
 8005c9e:	f7fe fd82 	bl	80047a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ca2:	480c      	ldr	r0, [pc, #48]	; (8005cd4 <prvInitialiseTaskLists+0x70>)
 8005ca4:	f7fe fd7f 	bl	80047a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ca8:	480b      	ldr	r0, [pc, #44]	; (8005cd8 <prvInitialiseTaskLists+0x74>)
 8005caa:	f7fe fd7c 	bl	80047a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cae:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <prvInitialiseTaskLists+0x78>)
 8005cb0:	4a05      	ldr	r2, [pc, #20]	; (8005cc8 <prvInitialiseTaskLists+0x64>)
 8005cb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ce0 <prvInitialiseTaskLists+0x7c>)
 8005cb6:	4a05      	ldr	r2, [pc, #20]	; (8005ccc <prvInitialiseTaskLists+0x68>)
 8005cb8:	601a      	str	r2, [r3, #0]
}
 8005cba:	bf00      	nop
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000318 	.word	0x20000318
 8005cc8:	200003a4 	.word	0x200003a4
 8005ccc:	200003b8 	.word	0x200003b8
 8005cd0:	200003d4 	.word	0x200003d4
 8005cd4:	200003e8 	.word	0x200003e8
 8005cd8:	20000400 	.word	0x20000400
 8005cdc:	200003cc 	.word	0x200003cc
 8005ce0:	200003d0 	.word	0x200003d0

08005ce4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cea:	e019      	b.n	8005d20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cec:	f000 faa6 	bl	800623c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005cf0:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <prvCheckTasksWaitingTermination+0x4c>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fe fddc 	bl	80048ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d02:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <prvCheckTasksWaitingTermination+0x50>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	4a0a      	ldr	r2, [pc, #40]	; (8005d34 <prvCheckTasksWaitingTermination+0x50>)
 8005d0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d0c:	4b0a      	ldr	r3, [pc, #40]	; (8005d38 <prvCheckTasksWaitingTermination+0x54>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	4a09      	ldr	r2, [pc, #36]	; (8005d38 <prvCheckTasksWaitingTermination+0x54>)
 8005d14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d16:	f000 fabf 	bl	8006298 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f80e 	bl	8005d3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <prvCheckTasksWaitingTermination+0x54>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e1      	bne.n	8005cec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	200003e8 	.word	0x200003e8
 8005d34:	20000414 	.word	0x20000414
 8005d38:	200003fc 	.word	0x200003fc

08005d3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d108      	bne.n	8005d60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fc4e 	bl	80065f4 <vPortFree>
				vPortFree( pxTCB );
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fc4b 	bl	80065f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d5e:	e017      	b.n	8005d90 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d103      	bne.n	8005d72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fc42 	bl	80065f4 <vPortFree>
	}
 8005d70:	e00e      	b.n	8005d90 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d009      	beq.n	8005d90 <prvDeleteTCB+0x54>
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	e7fe      	b.n	8005d8e <prvDeleteTCB+0x52>
	}
 8005d90:	bf00      	nop
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d9e:	4b0f      	ldr	r3, [pc, #60]	; (8005ddc <prvResetNextTaskUnblockTime+0x44>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <prvResetNextTaskUnblockTime+0x14>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e000      	b.n	8005dae <prvResetNextTaskUnblockTime+0x16>
 8005dac:	2300      	movs	r3, #0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <prvResetNextTaskUnblockTime+0x48>)
 8005db4:	f04f 32ff 	mov.w	r2, #4294967295
 8005db8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005dba:	e008      	b.n	8005dce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005dbc:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <prvResetNextTaskUnblockTime+0x44>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	4a05      	ldr	r2, [pc, #20]	; (8005de0 <prvResetNextTaskUnblockTime+0x48>)
 8005dcc:	6013      	str	r3, [r2, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	200003cc 	.word	0x200003cc
 8005de0:	20000434 	.word	0x20000434

08005de4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <xTaskGetSchedulerState+0x34>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d102      	bne.n	8005df8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005df2:	2301      	movs	r3, #1
 8005df4:	607b      	str	r3, [r7, #4]
 8005df6:	e008      	b.n	8005e0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005df8:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <xTaskGetSchedulerState+0x38>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e00:	2302      	movs	r3, #2
 8005e02:	607b      	str	r3, [r7, #4]
 8005e04:	e001      	b.n	8005e0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e06:	2300      	movs	r3, #0
 8005e08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e0a:	687b      	ldr	r3, [r7, #4]
	}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	20000420 	.word	0x20000420
 8005e1c:	2000043c 	.word	0x2000043c

08005e20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d06c      	beq.n	8005f10 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e36:	4b39      	ldr	r3, [pc, #228]	; (8005f1c <xTaskPriorityDisinherit+0xfc>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d009      	beq.n	8005e54 <xTaskPriorityDisinherit+0x34>
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	e7fe      	b.n	8005e52 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d109      	bne.n	8005e70 <xTaskPriorityDisinherit+0x50>
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	60bb      	str	r3, [r7, #8]
 8005e6e:	e7fe      	b.n	8005e6e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e74:	1e5a      	subs	r2, r3, #1
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d044      	beq.n	8005f10 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d140      	bne.n	8005f10 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fe fd11 	bl	80048ba <uxListRemove>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d115      	bne.n	8005eca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea2:	491f      	ldr	r1, [pc, #124]	; (8005f20 <xTaskPriorityDisinherit+0x100>)
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	440b      	add	r3, r1
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <xTaskPriorityDisinherit+0xaa>
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	2201      	movs	r2, #1
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	43da      	mvns	r2, r3
 8005ec0:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <xTaskPriorityDisinherit+0x104>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <xTaskPriorityDisinherit+0x104>)
 8005ec8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	f1c3 0207 	rsb	r2, r3, #7
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	409a      	lsls	r2, r3
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <xTaskPriorityDisinherit+0x104>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	4a0d      	ldr	r2, [pc, #52]	; (8005f24 <xTaskPriorityDisinherit+0x104>)
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4a08      	ldr	r2, [pc, #32]	; (8005f20 <xTaskPriorityDisinherit+0x100>)
 8005efe:	441a      	add	r2, r3
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	3304      	adds	r3, #4
 8005f04:	4619      	mov	r1, r3
 8005f06:	4610      	mov	r0, r2
 8005f08:	f7fe fc7a 	bl	8004800 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f10:	697b      	ldr	r3, [r7, #20]
	}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000314 	.word	0x20000314
 8005f20:	20000318 	.word	0x20000318
 8005f24:	2000041c 	.word	0x2000041c

08005f28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f32:	4b29      	ldr	r3, [pc, #164]	; (8005fd8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f38:	4b28      	ldr	r3, [pc, #160]	; (8005fdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe fcbb 	bl	80048ba <uxListRemove>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10b      	bne.n	8005f62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005f4a:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	2201      	movs	r2, #1
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	43da      	mvns	r2, r3
 8005f58:	4b21      	ldr	r3, [pc, #132]	; (8005fe0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	4a20      	ldr	r2, [pc, #128]	; (8005fe0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f68:	d10a      	bne.n	8005f80 <prvAddCurrentTaskToDelayedList+0x58>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f70:	4b1a      	ldr	r3, [pc, #104]	; (8005fdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4619      	mov	r1, r3
 8005f78:	481a      	ldr	r0, [pc, #104]	; (8005fe4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f7a:	f7fe fc41 	bl	8004800 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f7e:	e026      	b.n	8005fce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4413      	add	r3, r2
 8005f86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d209      	bcs.n	8005fac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f98:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f7fe fc4f 	bl	8004848 <vListInsert>
}
 8005faa:	e010      	b.n	8005fce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fac:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <prvAddCurrentTaskToDelayedList+0xc4>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f7fe fc45 	bl	8004848 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fbe:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d202      	bcs.n	8005fce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005fc8:	4a09      	ldr	r2, [pc, #36]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6013      	str	r3, [r2, #0]
}
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000418 	.word	0x20000418
 8005fdc:	20000314 	.word	0x20000314
 8005fe0:	2000041c 	.word	0x2000041c
 8005fe4:	20000400 	.word	0x20000400
 8005fe8:	200003d0 	.word	0x200003d0
 8005fec:	200003cc 	.word	0x200003cc
 8005ff0:	20000434 	.word	0x20000434

08005ff4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	3b04      	subs	r3, #4
 8006004:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800600c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3b04      	subs	r3, #4
 8006012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f023 0201 	bic.w	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3b04      	subs	r3, #4
 8006022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006024:	4a0c      	ldr	r2, [pc, #48]	; (8006058 <pxPortInitialiseStack+0x64>)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3b14      	subs	r3, #20
 800602e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3b04      	subs	r3, #4
 800603a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f06f 0202 	mvn.w	r2, #2
 8006042:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3b20      	subs	r3, #32
 8006048:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800604a:	68fb      	ldr	r3, [r7, #12]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	0800605d 	.word	0x0800605d

0800605c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006066:	4b11      	ldr	r3, [pc, #68]	; (80060ac <prvTaskExitError+0x50>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606e:	d009      	beq.n	8006084 <prvTaskExitError+0x28>
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e7fe      	b.n	8006082 <prvTaskExitError+0x26>
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006096:	bf00      	nop
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0fc      	beq.n	8006098 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	20000024 	.word	0x20000024

080060b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060b0:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <pxCurrentTCBConst2>)
 80060b2:	6819      	ldr	r1, [r3, #0]
 80060b4:	6808      	ldr	r0, [r1, #0]
 80060b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ba:	f380 8809 	msr	PSP, r0
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f380 8811 	msr	BASEPRI, r0
 80060ca:	4770      	bx	lr
 80060cc:	f3af 8000 	nop.w

080060d0 <pxCurrentTCBConst2>:
 80060d0:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop

080060d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060d8:	4808      	ldr	r0, [pc, #32]	; (80060fc <prvPortStartFirstTask+0x24>)
 80060da:	6800      	ldr	r0, [r0, #0]
 80060dc:	6800      	ldr	r0, [r0, #0]
 80060de:	f380 8808 	msr	MSP, r0
 80060e2:	f04f 0000 	mov.w	r0, #0
 80060e6:	f380 8814 	msr	CONTROL, r0
 80060ea:	b662      	cpsie	i
 80060ec:	b661      	cpsie	f
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	df00      	svc	0
 80060f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060fa:	bf00      	nop
 80060fc:	e000ed08 	.word	0xe000ed08

08006100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006106:	4b44      	ldr	r3, [pc, #272]	; (8006218 <xPortStartScheduler+0x118>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a44      	ldr	r2, [pc, #272]	; (800621c <xPortStartScheduler+0x11c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d109      	bne.n	8006124 <xPortStartScheduler+0x24>
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	e7fe      	b.n	8006122 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006124:	4b3c      	ldr	r3, [pc, #240]	; (8006218 <xPortStartScheduler+0x118>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a3d      	ldr	r2, [pc, #244]	; (8006220 <xPortStartScheduler+0x120>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d109      	bne.n	8006142 <xPortStartScheduler+0x42>
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	e7fe      	b.n	8006140 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006142:	4b38      	ldr	r3, [pc, #224]	; (8006224 <xPortStartScheduler+0x124>)
 8006144:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	22ff      	movs	r2, #255	; 0xff
 8006152:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	b2db      	uxtb	r3, r3
 800615a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006164:	b2da      	uxtb	r2, r3
 8006166:	4b30      	ldr	r3, [pc, #192]	; (8006228 <xPortStartScheduler+0x128>)
 8006168:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800616a:	4b30      	ldr	r3, [pc, #192]	; (800622c <xPortStartScheduler+0x12c>)
 800616c:	2207      	movs	r2, #7
 800616e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006170:	e009      	b.n	8006186 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006172:	4b2e      	ldr	r3, [pc, #184]	; (800622c <xPortStartScheduler+0x12c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3b01      	subs	r3, #1
 8006178:	4a2c      	ldr	r2, [pc, #176]	; (800622c <xPortStartScheduler+0x12c>)
 800617a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800617c:	78fb      	ldrb	r3, [r7, #3]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	b2db      	uxtb	r3, r3
 8006184:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618e:	2b80      	cmp	r3, #128	; 0x80
 8006190:	d0ef      	beq.n	8006172 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006192:	4b26      	ldr	r3, [pc, #152]	; (800622c <xPortStartScheduler+0x12c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f1c3 0307 	rsb	r3, r3, #7
 800619a:	2b04      	cmp	r3, #4
 800619c:	d009      	beq.n	80061b2 <xPortStartScheduler+0xb2>
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	e7fe      	b.n	80061b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061b2:	4b1e      	ldr	r3, [pc, #120]	; (800622c <xPortStartScheduler+0x12c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	4a1c      	ldr	r2, [pc, #112]	; (800622c <xPortStartScheduler+0x12c>)
 80061ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061bc:	4b1b      	ldr	r3, [pc, #108]	; (800622c <xPortStartScheduler+0x12c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061c4:	4a19      	ldr	r2, [pc, #100]	; (800622c <xPortStartScheduler+0x12c>)
 80061c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061d0:	4b17      	ldr	r3, [pc, #92]	; (8006230 <xPortStartScheduler+0x130>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a16      	ldr	r2, [pc, #88]	; (8006230 <xPortStartScheduler+0x130>)
 80061d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061dc:	4b14      	ldr	r3, [pc, #80]	; (8006230 <xPortStartScheduler+0x130>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a13      	ldr	r2, [pc, #76]	; (8006230 <xPortStartScheduler+0x130>)
 80061e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061e8:	f000 f8d6 	bl	8006398 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061ec:	4b11      	ldr	r3, [pc, #68]	; (8006234 <xPortStartScheduler+0x134>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061f2:	f000 f8f5 	bl	80063e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061f6:	4b10      	ldr	r3, [pc, #64]	; (8006238 <xPortStartScheduler+0x138>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a0f      	ldr	r2, [pc, #60]	; (8006238 <xPortStartScheduler+0x138>)
 80061fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006200:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006202:	f7ff ff69 	bl	80060d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006206:	f7ff fbb3 	bl	8005970 <vTaskSwitchContext>
	prvTaskExitError();
 800620a:	f7ff ff27 	bl	800605c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	e000ed00 	.word	0xe000ed00
 800621c:	410fc271 	.word	0x410fc271
 8006220:	410fc270 	.word	0x410fc270
 8006224:	e000e400 	.word	0xe000e400
 8006228:	20000440 	.word	0x20000440
 800622c:	20000444 	.word	0x20000444
 8006230:	e000ed20 	.word	0xe000ed20
 8006234:	20000024 	.word	0x20000024
 8006238:	e000ef34 	.word	0xe000ef34

0800623c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006254:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <vPortEnterCritical+0x54>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3301      	adds	r3, #1
 800625a:	4a0d      	ldr	r2, [pc, #52]	; (8006290 <vPortEnterCritical+0x54>)
 800625c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800625e:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <vPortEnterCritical+0x54>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d10e      	bne.n	8006284 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006266:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <vPortEnterCritical+0x58>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d009      	beq.n	8006284 <vPortEnterCritical+0x48>
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	603b      	str	r3, [r7, #0]
 8006282:	e7fe      	b.n	8006282 <vPortEnterCritical+0x46>
	}
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	20000024 	.word	0x20000024
 8006294:	e000ed04 	.word	0xe000ed04

08006298 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800629e:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <vPortExitCritical+0x4c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d109      	bne.n	80062ba <vPortExitCritical+0x22>
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	607b      	str	r3, [r7, #4]
 80062b8:	e7fe      	b.n	80062b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80062ba:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <vPortExitCritical+0x4c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3b01      	subs	r3, #1
 80062c0:	4a08      	ldr	r2, [pc, #32]	; (80062e4 <vPortExitCritical+0x4c>)
 80062c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062c4:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <vPortExitCritical+0x4c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <vPortExitCritical+0x3e>
 80062cc:	2300      	movs	r3, #0
 80062ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20000024 	.word	0x20000024
	...

080062f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062f0:	f3ef 8009 	mrs	r0, PSP
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	4b15      	ldr	r3, [pc, #84]	; (8006350 <pxCurrentTCBConst>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	f01e 0f10 	tst.w	lr, #16
 8006300:	bf08      	it	eq
 8006302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630a:	6010      	str	r0, [r2, #0]
 800630c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006314:	f380 8811 	msr	BASEPRI, r0
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f7ff fb26 	bl	8005970 <vTaskSwitchContext>
 8006324:	f04f 0000 	mov.w	r0, #0
 8006328:	f380 8811 	msr	BASEPRI, r0
 800632c:	bc09      	pop	{r0, r3}
 800632e:	6819      	ldr	r1, [r3, #0]
 8006330:	6808      	ldr	r0, [r1, #0]
 8006332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006336:	f01e 0f10 	tst.w	lr, #16
 800633a:	bf08      	it	eq
 800633c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006340:	f380 8809 	msr	PSP, r0
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	f3af 8000 	nop.w

08006350 <pxCurrentTCBConst>:
 8006350:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop

08006358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006370:	f7ff fa42 	bl	80057f8 <xTaskIncrementTick>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800637a:	4b06      	ldr	r3, [pc, #24]	; (8006394 <SysTick_Handler+0x3c>)
 800637c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	2300      	movs	r3, #0
 8006384:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	e000ed04 	.word	0xe000ed04

08006398 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800639c:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <vPortSetupTimerInterrupt+0x34>)
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063a2:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <vPortSetupTimerInterrupt+0x38>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063a8:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <vPortSetupTimerInterrupt+0x3c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a0a      	ldr	r2, [pc, #40]	; (80063d8 <vPortSetupTimerInterrupt+0x40>)
 80063ae:	fba2 2303 	umull	r2, r3, r2, r3
 80063b2:	099b      	lsrs	r3, r3, #6
 80063b4:	4a09      	ldr	r2, [pc, #36]	; (80063dc <vPortSetupTimerInterrupt+0x44>)
 80063b6:	3b01      	subs	r3, #1
 80063b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ba:	4b04      	ldr	r3, [pc, #16]	; (80063cc <vPortSetupTimerInterrupt+0x34>)
 80063bc:	2207      	movs	r2, #7
 80063be:	601a      	str	r2, [r3, #0]
}
 80063c0:	bf00      	nop
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	e000e010 	.word	0xe000e010
 80063d0:	e000e018 	.word	0xe000e018
 80063d4:	2000001c 	.word	0x2000001c
 80063d8:	10624dd3 	.word	0x10624dd3
 80063dc:	e000e014 	.word	0xe000e014

080063e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063f0 <vPortEnableVFP+0x10>
 80063e4:	6801      	ldr	r1, [r0, #0]
 80063e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063ea:	6001      	str	r1, [r0, #0]
 80063ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063ee:	bf00      	nop
 80063f0:	e000ed88 	.word	0xe000ed88

080063f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063fa:	f3ef 8305 	mrs	r3, IPSR
 80063fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b0f      	cmp	r3, #15
 8006404:	d913      	bls.n	800642e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006406:	4a16      	ldr	r2, [pc, #88]	; (8006460 <vPortValidateInterruptPriority+0x6c>)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006410:	4b14      	ldr	r3, [pc, #80]	; (8006464 <vPortValidateInterruptPriority+0x70>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	7afa      	ldrb	r2, [r7, #11]
 8006416:	429a      	cmp	r2, r3
 8006418:	d209      	bcs.n	800642e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	607b      	str	r3, [r7, #4]
 800642c:	e7fe      	b.n	800642c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800642e:	4b0e      	ldr	r3, [pc, #56]	; (8006468 <vPortValidateInterruptPriority+0x74>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006436:	4b0d      	ldr	r3, [pc, #52]	; (800646c <vPortValidateInterruptPriority+0x78>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d909      	bls.n	8006452 <vPortValidateInterruptPriority+0x5e>
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	e7fe      	b.n	8006450 <vPortValidateInterruptPriority+0x5c>
	}
 8006452:	bf00      	nop
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	e000e3f0 	.word	0xe000e3f0
 8006464:	20000440 	.word	0x20000440
 8006468:	e000ed0c 	.word	0xe000ed0c
 800646c:	20000444 	.word	0x20000444

08006470 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08a      	sub	sp, #40	; 0x28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800647c:	f7ff f912 	bl	80056a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006480:	4b57      	ldr	r3, [pc, #348]	; (80065e0 <pvPortMalloc+0x170>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006488:	f000 f90c 	bl	80066a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800648c:	4b55      	ldr	r3, [pc, #340]	; (80065e4 <pvPortMalloc+0x174>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4013      	ands	r3, r2
 8006494:	2b00      	cmp	r3, #0
 8006496:	f040 808c 	bne.w	80065b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01c      	beq.n	80064da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80064a0:	2208      	movs	r2, #8
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4413      	add	r3, r2
 80064a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d013      	beq.n	80064da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f023 0307 	bic.w	r3, r3, #7
 80064b8:	3308      	adds	r3, #8
 80064ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d009      	beq.n	80064da <pvPortMalloc+0x6a>
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	e7fe      	b.n	80064d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d068      	beq.n	80065b2 <pvPortMalloc+0x142>
 80064e0:	4b41      	ldr	r3, [pc, #260]	; (80065e8 <pvPortMalloc+0x178>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d863      	bhi.n	80065b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064ea:	4b40      	ldr	r3, [pc, #256]	; (80065ec <pvPortMalloc+0x17c>)
 80064ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064ee:	4b3f      	ldr	r3, [pc, #252]	; (80065ec <pvPortMalloc+0x17c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064f4:	e004      	b.n	8006500 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	429a      	cmp	r2, r3
 8006508:	d903      	bls.n	8006512 <pvPortMalloc+0xa2>
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f1      	bne.n	80064f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006512:	4b33      	ldr	r3, [pc, #204]	; (80065e0 <pvPortMalloc+0x170>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006518:	429a      	cmp	r2, r3
 800651a:	d04a      	beq.n	80065b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2208      	movs	r2, #8
 8006522:	4413      	add	r3, r2
 8006524:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	1ad2      	subs	r2, r2, r3
 8006536:	2308      	movs	r3, #8
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	429a      	cmp	r2, r3
 800653c:	d91e      	bls.n	800657c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800653e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4413      	add	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	2b00      	cmp	r3, #0
 800654e:	d009      	beq.n	8006564 <pvPortMalloc+0xf4>
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	613b      	str	r3, [r7, #16]
 8006562:	e7fe      	b.n	8006562 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	1ad2      	subs	r2, r2, r3
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006576:	69b8      	ldr	r0, [r7, #24]
 8006578:	f000 f8f6 	bl	8006768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800657c:	4b1a      	ldr	r3, [pc, #104]	; (80065e8 <pvPortMalloc+0x178>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	4a18      	ldr	r2, [pc, #96]	; (80065e8 <pvPortMalloc+0x178>)
 8006588:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800658a:	4b17      	ldr	r3, [pc, #92]	; (80065e8 <pvPortMalloc+0x178>)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	4b18      	ldr	r3, [pc, #96]	; (80065f0 <pvPortMalloc+0x180>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d203      	bcs.n	800659e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006596:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <pvPortMalloc+0x178>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a15      	ldr	r2, [pc, #84]	; (80065f0 <pvPortMalloc+0x180>)
 800659c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <pvPortMalloc+0x174>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065b2:	f7ff f885 	bl	80056c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d009      	beq.n	80065d4 <pvPortMalloc+0x164>
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	e7fe      	b.n	80065d2 <pvPortMalloc+0x162>
	return pvReturn;
 80065d4:	69fb      	ldr	r3, [r7, #28]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3728      	adds	r7, #40	; 0x28
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20004050 	.word	0x20004050
 80065e4:	2000405c 	.word	0x2000405c
 80065e8:	20004054 	.word	0x20004054
 80065ec:	20004048 	.word	0x20004048
 80065f0:	20004058 	.word	0x20004058

080065f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d046      	beq.n	8006694 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006606:	2308      	movs	r3, #8
 8006608:	425b      	negs	r3, r3
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4413      	add	r3, r2
 800660e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	4b20      	ldr	r3, [pc, #128]	; (800669c <vPortFree+0xa8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4013      	ands	r3, r2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <vPortFree+0x42>
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	e7fe      	b.n	8006634 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <vPortFree+0x5e>
 800663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	60bb      	str	r3, [r7, #8]
 8006650:	e7fe      	b.n	8006650 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	4b11      	ldr	r3, [pc, #68]	; (800669c <vPortFree+0xa8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4013      	ands	r3, r2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d019      	beq.n	8006694 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d115      	bne.n	8006694 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	4b0b      	ldr	r3, [pc, #44]	; (800669c <vPortFree+0xa8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	43db      	mvns	r3, r3
 8006672:	401a      	ands	r2, r3
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006678:	f7ff f814 	bl	80056a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <vPortFree+0xac>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4413      	add	r3, r2
 8006686:	4a06      	ldr	r2, [pc, #24]	; (80066a0 <vPortFree+0xac>)
 8006688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800668a:	6938      	ldr	r0, [r7, #16]
 800668c:	f000 f86c 	bl	8006768 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006690:	f7ff f816 	bl	80056c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006694:	bf00      	nop
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	2000405c 	.word	0x2000405c
 80066a0:	20004054 	.word	0x20004054

080066a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80066ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066b0:	4b27      	ldr	r3, [pc, #156]	; (8006750 <prvHeapInit+0xac>)
 80066b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00c      	beq.n	80066d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3307      	adds	r3, #7
 80066c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0307 	bic.w	r3, r3, #7
 80066ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <prvHeapInit+0xac>)
 80066d4:	4413      	add	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066dc:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <prvHeapInit+0xb0>)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <prvHeapInit+0xb0>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4413      	add	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066f0:	2208      	movs	r2, #8
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0307 	bic.w	r3, r3, #7
 80066fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4a15      	ldr	r2, [pc, #84]	; (8006758 <prvHeapInit+0xb4>)
 8006704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <prvHeapInit+0xb4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <prvHeapInit+0xb4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006724:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <prvHeapInit+0xb4>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <prvHeapInit+0xb8>)
 8006732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <prvHeapInit+0xbc>)
 800673a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <prvHeapInit+0xc0>)
 800673e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20000448 	.word	0x20000448
 8006754:	20004048 	.word	0x20004048
 8006758:	20004050 	.word	0x20004050
 800675c:	20004058 	.word	0x20004058
 8006760:	20004054 	.word	0x20004054
 8006764:	2000405c 	.word	0x2000405c

08006768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006770:	4b28      	ldr	r3, [pc, #160]	; (8006814 <prvInsertBlockIntoFreeList+0xac>)
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e002      	b.n	800677c <prvInsertBlockIntoFreeList+0x14>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d8f7      	bhi.n	8006776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	4413      	add	r3, r2
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d108      	bne.n	80067aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	441a      	add	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	441a      	add	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d118      	bne.n	80067f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d00d      	beq.n	80067e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	441a      	add	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	e008      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e003      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d002      	beq.n	8006806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	20004048 	.word	0x20004048
 8006818:	20004050 	.word	0x20004050

0800681c <__errno>:
 800681c:	4b01      	ldr	r3, [pc, #4]	; (8006824 <__errno+0x8>)
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	20000028 	.word	0x20000028

08006828 <__libc_init_array>:
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	4e0d      	ldr	r6, [pc, #52]	; (8006860 <__libc_init_array+0x38>)
 800682c:	4c0d      	ldr	r4, [pc, #52]	; (8006864 <__libc_init_array+0x3c>)
 800682e:	1ba4      	subs	r4, r4, r6
 8006830:	10a4      	asrs	r4, r4, #2
 8006832:	2500      	movs	r5, #0
 8006834:	42a5      	cmp	r5, r4
 8006836:	d109      	bne.n	800684c <__libc_init_array+0x24>
 8006838:	4e0b      	ldr	r6, [pc, #44]	; (8006868 <__libc_init_array+0x40>)
 800683a:	4c0c      	ldr	r4, [pc, #48]	; (800686c <__libc_init_array+0x44>)
 800683c:	f001 f98e 	bl	8007b5c <_init>
 8006840:	1ba4      	subs	r4, r4, r6
 8006842:	10a4      	asrs	r4, r4, #2
 8006844:	2500      	movs	r5, #0
 8006846:	42a5      	cmp	r5, r4
 8006848:	d105      	bne.n	8006856 <__libc_init_array+0x2e>
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006850:	4798      	blx	r3
 8006852:	3501      	adds	r5, #1
 8006854:	e7ee      	b.n	8006834 <__libc_init_array+0xc>
 8006856:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800685a:	4798      	blx	r3
 800685c:	3501      	adds	r5, #1
 800685e:	e7f2      	b.n	8006846 <__libc_init_array+0x1e>
 8006860:	08007d00 	.word	0x08007d00
 8006864:	08007d00 	.word	0x08007d00
 8006868:	08007d00 	.word	0x08007d00
 800686c:	08007d04 	.word	0x08007d04

08006870 <memcpy>:
 8006870:	b510      	push	{r4, lr}
 8006872:	1e43      	subs	r3, r0, #1
 8006874:	440a      	add	r2, r1
 8006876:	4291      	cmp	r1, r2
 8006878:	d100      	bne.n	800687c <memcpy+0xc>
 800687a:	bd10      	pop	{r4, pc}
 800687c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006884:	e7f7      	b.n	8006876 <memcpy+0x6>

08006886 <memset>:
 8006886:	4402      	add	r2, r0
 8006888:	4603      	mov	r3, r0
 800688a:	4293      	cmp	r3, r2
 800688c:	d100      	bne.n	8006890 <memset+0xa>
 800688e:	4770      	bx	lr
 8006890:	f803 1b01 	strb.w	r1, [r3], #1
 8006894:	e7f9      	b.n	800688a <memset+0x4>
	...

08006898 <iprintf>:
 8006898:	b40f      	push	{r0, r1, r2, r3}
 800689a:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <iprintf+0x2c>)
 800689c:	b513      	push	{r0, r1, r4, lr}
 800689e:	681c      	ldr	r4, [r3, #0]
 80068a0:	b124      	cbz	r4, 80068ac <iprintf+0x14>
 80068a2:	69a3      	ldr	r3, [r4, #24]
 80068a4:	b913      	cbnz	r3, 80068ac <iprintf+0x14>
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 f9cc 	bl	8006c44 <__sinit>
 80068ac:	ab05      	add	r3, sp, #20
 80068ae:	9a04      	ldr	r2, [sp, #16]
 80068b0:	68a1      	ldr	r1, [r4, #8]
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	4620      	mov	r0, r4
 80068b6:	f000 fcdf 	bl	8007278 <_vfiprintf_r>
 80068ba:	b002      	add	sp, #8
 80068bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c0:	b004      	add	sp, #16
 80068c2:	4770      	bx	lr
 80068c4:	20000028 	.word	0x20000028

080068c8 <setvbuf>:
 80068c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068cc:	461d      	mov	r5, r3
 80068ce:	4b51      	ldr	r3, [pc, #324]	; (8006a14 <setvbuf+0x14c>)
 80068d0:	681e      	ldr	r6, [r3, #0]
 80068d2:	4604      	mov	r4, r0
 80068d4:	460f      	mov	r7, r1
 80068d6:	4690      	mov	r8, r2
 80068d8:	b126      	cbz	r6, 80068e4 <setvbuf+0x1c>
 80068da:	69b3      	ldr	r3, [r6, #24]
 80068dc:	b913      	cbnz	r3, 80068e4 <setvbuf+0x1c>
 80068de:	4630      	mov	r0, r6
 80068e0:	f000 f9b0 	bl	8006c44 <__sinit>
 80068e4:	4b4c      	ldr	r3, [pc, #304]	; (8006a18 <setvbuf+0x150>)
 80068e6:	429c      	cmp	r4, r3
 80068e8:	d152      	bne.n	8006990 <setvbuf+0xc8>
 80068ea:	6874      	ldr	r4, [r6, #4]
 80068ec:	f1b8 0f02 	cmp.w	r8, #2
 80068f0:	d006      	beq.n	8006900 <setvbuf+0x38>
 80068f2:	f1b8 0f01 	cmp.w	r8, #1
 80068f6:	f200 8089 	bhi.w	8006a0c <setvbuf+0x144>
 80068fa:	2d00      	cmp	r5, #0
 80068fc:	f2c0 8086 	blt.w	8006a0c <setvbuf+0x144>
 8006900:	4621      	mov	r1, r4
 8006902:	4630      	mov	r0, r6
 8006904:	f000 f934 	bl	8006b70 <_fflush_r>
 8006908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800690a:	b141      	cbz	r1, 800691e <setvbuf+0x56>
 800690c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006910:	4299      	cmp	r1, r3
 8006912:	d002      	beq.n	800691a <setvbuf+0x52>
 8006914:	4630      	mov	r0, r6
 8006916:	f000 fa8b 	bl	8006e30 <_free_r>
 800691a:	2300      	movs	r3, #0
 800691c:	6363      	str	r3, [r4, #52]	; 0x34
 800691e:	2300      	movs	r3, #0
 8006920:	61a3      	str	r3, [r4, #24]
 8006922:	6063      	str	r3, [r4, #4]
 8006924:	89a3      	ldrh	r3, [r4, #12]
 8006926:	061b      	lsls	r3, r3, #24
 8006928:	d503      	bpl.n	8006932 <setvbuf+0x6a>
 800692a:	6921      	ldr	r1, [r4, #16]
 800692c:	4630      	mov	r0, r6
 800692e:	f000 fa7f 	bl	8006e30 <_free_r>
 8006932:	89a3      	ldrh	r3, [r4, #12]
 8006934:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006938:	f023 0303 	bic.w	r3, r3, #3
 800693c:	f1b8 0f02 	cmp.w	r8, #2
 8006940:	81a3      	strh	r3, [r4, #12]
 8006942:	d05d      	beq.n	8006a00 <setvbuf+0x138>
 8006944:	ab01      	add	r3, sp, #4
 8006946:	466a      	mov	r2, sp
 8006948:	4621      	mov	r1, r4
 800694a:	4630      	mov	r0, r6
 800694c:	f000 fa04 	bl	8006d58 <__swhatbuf_r>
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	4318      	orrs	r0, r3
 8006954:	81a0      	strh	r0, [r4, #12]
 8006956:	bb2d      	cbnz	r5, 80069a4 <setvbuf+0xdc>
 8006958:	9d00      	ldr	r5, [sp, #0]
 800695a:	4628      	mov	r0, r5
 800695c:	f000 fa60 	bl	8006e20 <malloc>
 8006960:	4607      	mov	r7, r0
 8006962:	2800      	cmp	r0, #0
 8006964:	d14e      	bne.n	8006a04 <setvbuf+0x13c>
 8006966:	f8dd 9000 	ldr.w	r9, [sp]
 800696a:	45a9      	cmp	r9, r5
 800696c:	d13c      	bne.n	80069e8 <setvbuf+0x120>
 800696e:	f04f 30ff 	mov.w	r0, #4294967295
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	f043 0302 	orr.w	r3, r3, #2
 8006978:	81a3      	strh	r3, [r4, #12]
 800697a:	2300      	movs	r3, #0
 800697c:	60a3      	str	r3, [r4, #8]
 800697e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006982:	6023      	str	r3, [r4, #0]
 8006984:	6123      	str	r3, [r4, #16]
 8006986:	2301      	movs	r3, #1
 8006988:	6163      	str	r3, [r4, #20]
 800698a:	b003      	add	sp, #12
 800698c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006990:	4b22      	ldr	r3, [pc, #136]	; (8006a1c <setvbuf+0x154>)
 8006992:	429c      	cmp	r4, r3
 8006994:	d101      	bne.n	800699a <setvbuf+0xd2>
 8006996:	68b4      	ldr	r4, [r6, #8]
 8006998:	e7a8      	b.n	80068ec <setvbuf+0x24>
 800699a:	4b21      	ldr	r3, [pc, #132]	; (8006a20 <setvbuf+0x158>)
 800699c:	429c      	cmp	r4, r3
 800699e:	bf08      	it	eq
 80069a0:	68f4      	ldreq	r4, [r6, #12]
 80069a2:	e7a3      	b.n	80068ec <setvbuf+0x24>
 80069a4:	2f00      	cmp	r7, #0
 80069a6:	d0d8      	beq.n	800695a <setvbuf+0x92>
 80069a8:	69b3      	ldr	r3, [r6, #24]
 80069aa:	b913      	cbnz	r3, 80069b2 <setvbuf+0xea>
 80069ac:	4630      	mov	r0, r6
 80069ae:	f000 f949 	bl	8006c44 <__sinit>
 80069b2:	f1b8 0f01 	cmp.w	r8, #1
 80069b6:	bf08      	it	eq
 80069b8:	89a3      	ldrheq	r3, [r4, #12]
 80069ba:	6027      	str	r7, [r4, #0]
 80069bc:	bf04      	itt	eq
 80069be:	f043 0301 	orreq.w	r3, r3, #1
 80069c2:	81a3      	strheq	r3, [r4, #12]
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	f013 0008 	ands.w	r0, r3, #8
 80069ca:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80069ce:	d01b      	beq.n	8006a08 <setvbuf+0x140>
 80069d0:	f013 0001 	ands.w	r0, r3, #1
 80069d4:	bf18      	it	ne
 80069d6:	426d      	negne	r5, r5
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	bf1d      	ittte	ne
 80069de:	60a3      	strne	r3, [r4, #8]
 80069e0:	61a5      	strne	r5, [r4, #24]
 80069e2:	4618      	movne	r0, r3
 80069e4:	60a5      	streq	r5, [r4, #8]
 80069e6:	e7d0      	b.n	800698a <setvbuf+0xc2>
 80069e8:	4648      	mov	r0, r9
 80069ea:	f000 fa19 	bl	8006e20 <malloc>
 80069ee:	4607      	mov	r7, r0
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d0bc      	beq.n	800696e <setvbuf+0xa6>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fa:	81a3      	strh	r3, [r4, #12]
 80069fc:	464d      	mov	r5, r9
 80069fe:	e7d3      	b.n	80069a8 <setvbuf+0xe0>
 8006a00:	2000      	movs	r0, #0
 8006a02:	e7b6      	b.n	8006972 <setvbuf+0xaa>
 8006a04:	46a9      	mov	r9, r5
 8006a06:	e7f5      	b.n	80069f4 <setvbuf+0x12c>
 8006a08:	60a0      	str	r0, [r4, #8]
 8006a0a:	e7be      	b.n	800698a <setvbuf+0xc2>
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	e7bb      	b.n	800698a <setvbuf+0xc2>
 8006a12:	bf00      	nop
 8006a14:	20000028 	.word	0x20000028
 8006a18:	08007c84 	.word	0x08007c84
 8006a1c:	08007ca4 	.word	0x08007ca4
 8006a20:	08007c64 	.word	0x08007c64

08006a24 <siprintf>:
 8006a24:	b40e      	push	{r1, r2, r3}
 8006a26:	b500      	push	{lr}
 8006a28:	b09c      	sub	sp, #112	; 0x70
 8006a2a:	ab1d      	add	r3, sp, #116	; 0x74
 8006a2c:	9002      	str	r0, [sp, #8]
 8006a2e:	9006      	str	r0, [sp, #24]
 8006a30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a34:	4809      	ldr	r0, [pc, #36]	; (8006a5c <siprintf+0x38>)
 8006a36:	9107      	str	r1, [sp, #28]
 8006a38:	9104      	str	r1, [sp, #16]
 8006a3a:	4909      	ldr	r1, [pc, #36]	; (8006a60 <siprintf+0x3c>)
 8006a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a40:	9105      	str	r1, [sp, #20]
 8006a42:	6800      	ldr	r0, [r0, #0]
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	a902      	add	r1, sp, #8
 8006a48:	f000 faf4 	bl	8007034 <_svfiprintf_r>
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	701a      	strb	r2, [r3, #0]
 8006a52:	b01c      	add	sp, #112	; 0x70
 8006a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a58:	b003      	add	sp, #12
 8006a5a:	4770      	bx	lr
 8006a5c:	20000028 	.word	0x20000028
 8006a60:	ffff0208 	.word	0xffff0208

08006a64 <__sflush_r>:
 8006a64:	898a      	ldrh	r2, [r1, #12]
 8006a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	0710      	lsls	r0, r2, #28
 8006a6e:	460c      	mov	r4, r1
 8006a70:	d458      	bmi.n	8006b24 <__sflush_r+0xc0>
 8006a72:	684b      	ldr	r3, [r1, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dc05      	bgt.n	8006a84 <__sflush_r+0x20>
 8006a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	dc02      	bgt.n	8006a84 <__sflush_r+0x20>
 8006a7e:	2000      	movs	r0, #0
 8006a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a86:	2e00      	cmp	r6, #0
 8006a88:	d0f9      	beq.n	8006a7e <__sflush_r+0x1a>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a90:	682f      	ldr	r7, [r5, #0]
 8006a92:	6a21      	ldr	r1, [r4, #32]
 8006a94:	602b      	str	r3, [r5, #0]
 8006a96:	d032      	beq.n	8006afe <__sflush_r+0x9a>
 8006a98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	075a      	lsls	r2, r3, #29
 8006a9e:	d505      	bpl.n	8006aac <__sflush_r+0x48>
 8006aa0:	6863      	ldr	r3, [r4, #4]
 8006aa2:	1ac0      	subs	r0, r0, r3
 8006aa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aa6:	b10b      	cbz	r3, 8006aac <__sflush_r+0x48>
 8006aa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aaa:	1ac0      	subs	r0, r0, r3
 8006aac:	2300      	movs	r3, #0
 8006aae:	4602      	mov	r2, r0
 8006ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ab2:	6a21      	ldr	r1, [r4, #32]
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b0      	blx	r6
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	d106      	bne.n	8006acc <__sflush_r+0x68>
 8006abe:	6829      	ldr	r1, [r5, #0]
 8006ac0:	291d      	cmp	r1, #29
 8006ac2:	d848      	bhi.n	8006b56 <__sflush_r+0xf2>
 8006ac4:	4a29      	ldr	r2, [pc, #164]	; (8006b6c <__sflush_r+0x108>)
 8006ac6:	40ca      	lsrs	r2, r1
 8006ac8:	07d6      	lsls	r6, r2, #31
 8006aca:	d544      	bpl.n	8006b56 <__sflush_r+0xf2>
 8006acc:	2200      	movs	r2, #0
 8006ace:	6062      	str	r2, [r4, #4]
 8006ad0:	04d9      	lsls	r1, r3, #19
 8006ad2:	6922      	ldr	r2, [r4, #16]
 8006ad4:	6022      	str	r2, [r4, #0]
 8006ad6:	d504      	bpl.n	8006ae2 <__sflush_r+0x7e>
 8006ad8:	1c42      	adds	r2, r0, #1
 8006ada:	d101      	bne.n	8006ae0 <__sflush_r+0x7c>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b903      	cbnz	r3, 8006ae2 <__sflush_r+0x7e>
 8006ae0:	6560      	str	r0, [r4, #84]	; 0x54
 8006ae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ae4:	602f      	str	r7, [r5, #0]
 8006ae6:	2900      	cmp	r1, #0
 8006ae8:	d0c9      	beq.n	8006a7e <__sflush_r+0x1a>
 8006aea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aee:	4299      	cmp	r1, r3
 8006af0:	d002      	beq.n	8006af8 <__sflush_r+0x94>
 8006af2:	4628      	mov	r0, r5
 8006af4:	f000 f99c 	bl	8006e30 <_free_r>
 8006af8:	2000      	movs	r0, #0
 8006afa:	6360      	str	r0, [r4, #52]	; 0x34
 8006afc:	e7c0      	b.n	8006a80 <__sflush_r+0x1c>
 8006afe:	2301      	movs	r3, #1
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b0      	blx	r6
 8006b04:	1c41      	adds	r1, r0, #1
 8006b06:	d1c8      	bne.n	8006a9a <__sflush_r+0x36>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0c5      	beq.n	8006a9a <__sflush_r+0x36>
 8006b0e:	2b1d      	cmp	r3, #29
 8006b10:	d001      	beq.n	8006b16 <__sflush_r+0xb2>
 8006b12:	2b16      	cmp	r3, #22
 8006b14:	d101      	bne.n	8006b1a <__sflush_r+0xb6>
 8006b16:	602f      	str	r7, [r5, #0]
 8006b18:	e7b1      	b.n	8006a7e <__sflush_r+0x1a>
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	e7ad      	b.n	8006a80 <__sflush_r+0x1c>
 8006b24:	690f      	ldr	r7, [r1, #16]
 8006b26:	2f00      	cmp	r7, #0
 8006b28:	d0a9      	beq.n	8006a7e <__sflush_r+0x1a>
 8006b2a:	0793      	lsls	r3, r2, #30
 8006b2c:	680e      	ldr	r6, [r1, #0]
 8006b2e:	bf08      	it	eq
 8006b30:	694b      	ldreq	r3, [r1, #20]
 8006b32:	600f      	str	r7, [r1, #0]
 8006b34:	bf18      	it	ne
 8006b36:	2300      	movne	r3, #0
 8006b38:	eba6 0807 	sub.w	r8, r6, r7
 8006b3c:	608b      	str	r3, [r1, #8]
 8006b3e:	f1b8 0f00 	cmp.w	r8, #0
 8006b42:	dd9c      	ble.n	8006a7e <__sflush_r+0x1a>
 8006b44:	4643      	mov	r3, r8
 8006b46:	463a      	mov	r2, r7
 8006b48:	6a21      	ldr	r1, [r4, #32]
 8006b4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	47b0      	blx	r6
 8006b50:	2800      	cmp	r0, #0
 8006b52:	dc06      	bgt.n	8006b62 <__sflush_r+0xfe>
 8006b54:	89a3      	ldrh	r3, [r4, #12]
 8006b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b5a:	81a3      	strh	r3, [r4, #12]
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b60:	e78e      	b.n	8006a80 <__sflush_r+0x1c>
 8006b62:	4407      	add	r7, r0
 8006b64:	eba8 0800 	sub.w	r8, r8, r0
 8006b68:	e7e9      	b.n	8006b3e <__sflush_r+0xda>
 8006b6a:	bf00      	nop
 8006b6c:	20400001 	.word	0x20400001

08006b70 <_fflush_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	690b      	ldr	r3, [r1, #16]
 8006b74:	4605      	mov	r5, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	b1db      	cbz	r3, 8006bb2 <_fflush_r+0x42>
 8006b7a:	b118      	cbz	r0, 8006b84 <_fflush_r+0x14>
 8006b7c:	6983      	ldr	r3, [r0, #24]
 8006b7e:	b90b      	cbnz	r3, 8006b84 <_fflush_r+0x14>
 8006b80:	f000 f860 	bl	8006c44 <__sinit>
 8006b84:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <_fflush_r+0x48>)
 8006b86:	429c      	cmp	r4, r3
 8006b88:	d109      	bne.n	8006b9e <_fflush_r+0x2e>
 8006b8a:	686c      	ldr	r4, [r5, #4]
 8006b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b90:	b17b      	cbz	r3, 8006bb2 <_fflush_r+0x42>
 8006b92:	4621      	mov	r1, r4
 8006b94:	4628      	mov	r0, r5
 8006b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b9a:	f7ff bf63 	b.w	8006a64 <__sflush_r>
 8006b9e:	4b07      	ldr	r3, [pc, #28]	; (8006bbc <_fflush_r+0x4c>)
 8006ba0:	429c      	cmp	r4, r3
 8006ba2:	d101      	bne.n	8006ba8 <_fflush_r+0x38>
 8006ba4:	68ac      	ldr	r4, [r5, #8]
 8006ba6:	e7f1      	b.n	8006b8c <_fflush_r+0x1c>
 8006ba8:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <_fflush_r+0x50>)
 8006baa:	429c      	cmp	r4, r3
 8006bac:	bf08      	it	eq
 8006bae:	68ec      	ldreq	r4, [r5, #12]
 8006bb0:	e7ec      	b.n	8006b8c <_fflush_r+0x1c>
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	bd38      	pop	{r3, r4, r5, pc}
 8006bb6:	bf00      	nop
 8006bb8:	08007c84 	.word	0x08007c84
 8006bbc:	08007ca4 	.word	0x08007ca4
 8006bc0:	08007c64 	.word	0x08007c64

08006bc4 <std>:
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	b510      	push	{r4, lr}
 8006bc8:	4604      	mov	r4, r0
 8006bca:	e9c0 3300 	strd	r3, r3, [r0]
 8006bce:	6083      	str	r3, [r0, #8]
 8006bd0:	8181      	strh	r1, [r0, #12]
 8006bd2:	6643      	str	r3, [r0, #100]	; 0x64
 8006bd4:	81c2      	strh	r2, [r0, #14]
 8006bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bda:	6183      	str	r3, [r0, #24]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	2208      	movs	r2, #8
 8006be0:	305c      	adds	r0, #92	; 0x5c
 8006be2:	f7ff fe50 	bl	8006886 <memset>
 8006be6:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <std+0x38>)
 8006be8:	6263      	str	r3, [r4, #36]	; 0x24
 8006bea:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <std+0x3c>)
 8006bec:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bee:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <std+0x40>)
 8006bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bf2:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <std+0x44>)
 8006bf4:	6224      	str	r4, [r4, #32]
 8006bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8006bf8:	bd10      	pop	{r4, pc}
 8006bfa:	bf00      	nop
 8006bfc:	080077d5 	.word	0x080077d5
 8006c00:	080077f7 	.word	0x080077f7
 8006c04:	0800782f 	.word	0x0800782f
 8006c08:	08007853 	.word	0x08007853

08006c0c <_cleanup_r>:
 8006c0c:	4901      	ldr	r1, [pc, #4]	; (8006c14 <_cleanup_r+0x8>)
 8006c0e:	f000 b885 	b.w	8006d1c <_fwalk_reent>
 8006c12:	bf00      	nop
 8006c14:	08006b71 	.word	0x08006b71

08006c18 <__sfmoreglue>:
 8006c18:	b570      	push	{r4, r5, r6, lr}
 8006c1a:	1e4a      	subs	r2, r1, #1
 8006c1c:	2568      	movs	r5, #104	; 0x68
 8006c1e:	4355      	muls	r5, r2
 8006c20:	460e      	mov	r6, r1
 8006c22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c26:	f000 f951 	bl	8006ecc <_malloc_r>
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	b140      	cbz	r0, 8006c40 <__sfmoreglue+0x28>
 8006c2e:	2100      	movs	r1, #0
 8006c30:	e9c0 1600 	strd	r1, r6, [r0]
 8006c34:	300c      	adds	r0, #12
 8006c36:	60a0      	str	r0, [r4, #8]
 8006c38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c3c:	f7ff fe23 	bl	8006886 <memset>
 8006c40:	4620      	mov	r0, r4
 8006c42:	bd70      	pop	{r4, r5, r6, pc}

08006c44 <__sinit>:
 8006c44:	6983      	ldr	r3, [r0, #24]
 8006c46:	b510      	push	{r4, lr}
 8006c48:	4604      	mov	r4, r0
 8006c4a:	bb33      	cbnz	r3, 8006c9a <__sinit+0x56>
 8006c4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006c50:	6503      	str	r3, [r0, #80]	; 0x50
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <__sinit+0x58>)
 8006c54:	4a12      	ldr	r2, [pc, #72]	; (8006ca0 <__sinit+0x5c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6282      	str	r2, [r0, #40]	; 0x28
 8006c5a:	4298      	cmp	r0, r3
 8006c5c:	bf04      	itt	eq
 8006c5e:	2301      	moveq	r3, #1
 8006c60:	6183      	streq	r3, [r0, #24]
 8006c62:	f000 f81f 	bl	8006ca4 <__sfp>
 8006c66:	6060      	str	r0, [r4, #4]
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 f81b 	bl	8006ca4 <__sfp>
 8006c6e:	60a0      	str	r0, [r4, #8]
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 f817 	bl	8006ca4 <__sfp>
 8006c76:	2200      	movs	r2, #0
 8006c78:	60e0      	str	r0, [r4, #12]
 8006c7a:	2104      	movs	r1, #4
 8006c7c:	6860      	ldr	r0, [r4, #4]
 8006c7e:	f7ff ffa1 	bl	8006bc4 <std>
 8006c82:	2201      	movs	r2, #1
 8006c84:	2109      	movs	r1, #9
 8006c86:	68a0      	ldr	r0, [r4, #8]
 8006c88:	f7ff ff9c 	bl	8006bc4 <std>
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	2112      	movs	r1, #18
 8006c90:	68e0      	ldr	r0, [r4, #12]
 8006c92:	f7ff ff97 	bl	8006bc4 <std>
 8006c96:	2301      	movs	r3, #1
 8006c98:	61a3      	str	r3, [r4, #24]
 8006c9a:	bd10      	pop	{r4, pc}
 8006c9c:	08007c60 	.word	0x08007c60
 8006ca0:	08006c0d 	.word	0x08006c0d

08006ca4 <__sfp>:
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	4b1b      	ldr	r3, [pc, #108]	; (8006d14 <__sfp+0x70>)
 8006ca8:	681e      	ldr	r6, [r3, #0]
 8006caa:	69b3      	ldr	r3, [r6, #24]
 8006cac:	4607      	mov	r7, r0
 8006cae:	b913      	cbnz	r3, 8006cb6 <__sfp+0x12>
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7ff ffc7 	bl	8006c44 <__sinit>
 8006cb6:	3648      	adds	r6, #72	; 0x48
 8006cb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	d503      	bpl.n	8006cc8 <__sfp+0x24>
 8006cc0:	6833      	ldr	r3, [r6, #0]
 8006cc2:	b133      	cbz	r3, 8006cd2 <__sfp+0x2e>
 8006cc4:	6836      	ldr	r6, [r6, #0]
 8006cc6:	e7f7      	b.n	8006cb8 <__sfp+0x14>
 8006cc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ccc:	b16d      	cbz	r5, 8006cea <__sfp+0x46>
 8006cce:	3468      	adds	r4, #104	; 0x68
 8006cd0:	e7f4      	b.n	8006cbc <__sfp+0x18>
 8006cd2:	2104      	movs	r1, #4
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	f7ff ff9f 	bl	8006c18 <__sfmoreglue>
 8006cda:	6030      	str	r0, [r6, #0]
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d1f1      	bne.n	8006cc4 <__sfp+0x20>
 8006ce0:	230c      	movs	r3, #12
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cea:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <__sfp+0x74>)
 8006cec:	6665      	str	r5, [r4, #100]	; 0x64
 8006cee:	e9c4 5500 	strd	r5, r5, [r4]
 8006cf2:	60a5      	str	r5, [r4, #8]
 8006cf4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006cf8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	4629      	mov	r1, r5
 8006d00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d04:	f7ff fdbf 	bl	8006886 <memset>
 8006d08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d10:	e7e9      	b.n	8006ce6 <__sfp+0x42>
 8006d12:	bf00      	nop
 8006d14:	08007c60 	.word	0x08007c60
 8006d18:	ffff0001 	.word	0xffff0001

08006d1c <_fwalk_reent>:
 8006d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d20:	4680      	mov	r8, r0
 8006d22:	4689      	mov	r9, r1
 8006d24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d28:	2600      	movs	r6, #0
 8006d2a:	b914      	cbnz	r4, 8006d32 <_fwalk_reent+0x16>
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006d36:	3f01      	subs	r7, #1
 8006d38:	d501      	bpl.n	8006d3e <_fwalk_reent+0x22>
 8006d3a:	6824      	ldr	r4, [r4, #0]
 8006d3c:	e7f5      	b.n	8006d2a <_fwalk_reent+0xe>
 8006d3e:	89ab      	ldrh	r3, [r5, #12]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d907      	bls.n	8006d54 <_fwalk_reent+0x38>
 8006d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	d003      	beq.n	8006d54 <_fwalk_reent+0x38>
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	4640      	mov	r0, r8
 8006d50:	47c8      	blx	r9
 8006d52:	4306      	orrs	r6, r0
 8006d54:	3568      	adds	r5, #104	; 0x68
 8006d56:	e7ee      	b.n	8006d36 <_fwalk_reent+0x1a>

08006d58 <__swhatbuf_r>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	460e      	mov	r6, r1
 8006d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d60:	2900      	cmp	r1, #0
 8006d62:	b096      	sub	sp, #88	; 0x58
 8006d64:	4614      	mov	r4, r2
 8006d66:	461d      	mov	r5, r3
 8006d68:	da07      	bge.n	8006d7a <__swhatbuf_r+0x22>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	602b      	str	r3, [r5, #0]
 8006d6e:	89b3      	ldrh	r3, [r6, #12]
 8006d70:	061a      	lsls	r2, r3, #24
 8006d72:	d410      	bmi.n	8006d96 <__swhatbuf_r+0x3e>
 8006d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d78:	e00e      	b.n	8006d98 <__swhatbuf_r+0x40>
 8006d7a:	466a      	mov	r2, sp
 8006d7c:	f000 fe50 	bl	8007a20 <_fstat_r>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	dbf2      	blt.n	8006d6a <__swhatbuf_r+0x12>
 8006d84:	9a01      	ldr	r2, [sp, #4]
 8006d86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d8e:	425a      	negs	r2, r3
 8006d90:	415a      	adcs	r2, r3
 8006d92:	602a      	str	r2, [r5, #0]
 8006d94:	e7ee      	b.n	8006d74 <__swhatbuf_r+0x1c>
 8006d96:	2340      	movs	r3, #64	; 0x40
 8006d98:	2000      	movs	r0, #0
 8006d9a:	6023      	str	r3, [r4, #0]
 8006d9c:	b016      	add	sp, #88	; 0x58
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}

08006da0 <__smakebuf_r>:
 8006da0:	898b      	ldrh	r3, [r1, #12]
 8006da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006da4:	079d      	lsls	r5, r3, #30
 8006da6:	4606      	mov	r6, r0
 8006da8:	460c      	mov	r4, r1
 8006daa:	d507      	bpl.n	8006dbc <__smakebuf_r+0x1c>
 8006dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	6123      	str	r3, [r4, #16]
 8006db4:	2301      	movs	r3, #1
 8006db6:	6163      	str	r3, [r4, #20]
 8006db8:	b002      	add	sp, #8
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
 8006dbc:	ab01      	add	r3, sp, #4
 8006dbe:	466a      	mov	r2, sp
 8006dc0:	f7ff ffca 	bl	8006d58 <__swhatbuf_r>
 8006dc4:	9900      	ldr	r1, [sp, #0]
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f000 f87f 	bl	8006ecc <_malloc_r>
 8006dce:	b948      	cbnz	r0, 8006de4 <__smakebuf_r+0x44>
 8006dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd4:	059a      	lsls	r2, r3, #22
 8006dd6:	d4ef      	bmi.n	8006db8 <__smakebuf_r+0x18>
 8006dd8:	f023 0303 	bic.w	r3, r3, #3
 8006ddc:	f043 0302 	orr.w	r3, r3, #2
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	e7e3      	b.n	8006dac <__smakebuf_r+0xc>
 8006de4:	4b0d      	ldr	r3, [pc, #52]	; (8006e1c <__smakebuf_r+0x7c>)
 8006de6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	6020      	str	r0, [r4, #0]
 8006dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df0:	81a3      	strh	r3, [r4, #12]
 8006df2:	9b00      	ldr	r3, [sp, #0]
 8006df4:	6163      	str	r3, [r4, #20]
 8006df6:	9b01      	ldr	r3, [sp, #4]
 8006df8:	6120      	str	r0, [r4, #16]
 8006dfa:	b15b      	cbz	r3, 8006e14 <__smakebuf_r+0x74>
 8006dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e00:	4630      	mov	r0, r6
 8006e02:	f000 fe1f 	bl	8007a44 <_isatty_r>
 8006e06:	b128      	cbz	r0, 8006e14 <__smakebuf_r+0x74>
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f023 0303 	bic.w	r3, r3, #3
 8006e0e:	f043 0301 	orr.w	r3, r3, #1
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	431d      	orrs	r5, r3
 8006e18:	81a5      	strh	r5, [r4, #12]
 8006e1a:	e7cd      	b.n	8006db8 <__smakebuf_r+0x18>
 8006e1c:	08006c0d 	.word	0x08006c0d

08006e20 <malloc>:
 8006e20:	4b02      	ldr	r3, [pc, #8]	; (8006e2c <malloc+0xc>)
 8006e22:	4601      	mov	r1, r0
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	f000 b851 	b.w	8006ecc <_malloc_r>
 8006e2a:	bf00      	nop
 8006e2c:	20000028 	.word	0x20000028

08006e30 <_free_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4605      	mov	r5, r0
 8006e34:	2900      	cmp	r1, #0
 8006e36:	d045      	beq.n	8006ec4 <_free_r+0x94>
 8006e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e3c:	1f0c      	subs	r4, r1, #4
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	bfb8      	it	lt
 8006e42:	18e4      	addlt	r4, r4, r3
 8006e44:	f000 fe39 	bl	8007aba <__malloc_lock>
 8006e48:	4a1f      	ldr	r2, [pc, #124]	; (8006ec8 <_free_r+0x98>)
 8006e4a:	6813      	ldr	r3, [r2, #0]
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	b933      	cbnz	r3, 8006e5e <_free_r+0x2e>
 8006e50:	6063      	str	r3, [r4, #4]
 8006e52:	6014      	str	r4, [r2, #0]
 8006e54:	4628      	mov	r0, r5
 8006e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e5a:	f000 be2f 	b.w	8007abc <__malloc_unlock>
 8006e5e:	42a3      	cmp	r3, r4
 8006e60:	d90c      	bls.n	8006e7c <_free_r+0x4c>
 8006e62:	6821      	ldr	r1, [r4, #0]
 8006e64:	1862      	adds	r2, r4, r1
 8006e66:	4293      	cmp	r3, r2
 8006e68:	bf04      	itt	eq
 8006e6a:	681a      	ldreq	r2, [r3, #0]
 8006e6c:	685b      	ldreq	r3, [r3, #4]
 8006e6e:	6063      	str	r3, [r4, #4]
 8006e70:	bf04      	itt	eq
 8006e72:	1852      	addeq	r2, r2, r1
 8006e74:	6022      	streq	r2, [r4, #0]
 8006e76:	6004      	str	r4, [r0, #0]
 8006e78:	e7ec      	b.n	8006e54 <_free_r+0x24>
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	b10a      	cbz	r2, 8006e84 <_free_r+0x54>
 8006e80:	42a2      	cmp	r2, r4
 8006e82:	d9fa      	bls.n	8006e7a <_free_r+0x4a>
 8006e84:	6819      	ldr	r1, [r3, #0]
 8006e86:	1858      	adds	r0, r3, r1
 8006e88:	42a0      	cmp	r0, r4
 8006e8a:	d10b      	bne.n	8006ea4 <_free_r+0x74>
 8006e8c:	6820      	ldr	r0, [r4, #0]
 8006e8e:	4401      	add	r1, r0
 8006e90:	1858      	adds	r0, r3, r1
 8006e92:	4282      	cmp	r2, r0
 8006e94:	6019      	str	r1, [r3, #0]
 8006e96:	d1dd      	bne.n	8006e54 <_free_r+0x24>
 8006e98:	6810      	ldr	r0, [r2, #0]
 8006e9a:	6852      	ldr	r2, [r2, #4]
 8006e9c:	605a      	str	r2, [r3, #4]
 8006e9e:	4401      	add	r1, r0
 8006ea0:	6019      	str	r1, [r3, #0]
 8006ea2:	e7d7      	b.n	8006e54 <_free_r+0x24>
 8006ea4:	d902      	bls.n	8006eac <_free_r+0x7c>
 8006ea6:	230c      	movs	r3, #12
 8006ea8:	602b      	str	r3, [r5, #0]
 8006eaa:	e7d3      	b.n	8006e54 <_free_r+0x24>
 8006eac:	6820      	ldr	r0, [r4, #0]
 8006eae:	1821      	adds	r1, r4, r0
 8006eb0:	428a      	cmp	r2, r1
 8006eb2:	bf04      	itt	eq
 8006eb4:	6811      	ldreq	r1, [r2, #0]
 8006eb6:	6852      	ldreq	r2, [r2, #4]
 8006eb8:	6062      	str	r2, [r4, #4]
 8006eba:	bf04      	itt	eq
 8006ebc:	1809      	addeq	r1, r1, r0
 8006ebe:	6021      	streq	r1, [r4, #0]
 8006ec0:	605c      	str	r4, [r3, #4]
 8006ec2:	e7c7      	b.n	8006e54 <_free_r+0x24>
 8006ec4:	bd38      	pop	{r3, r4, r5, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20004060 	.word	0x20004060

08006ecc <_malloc_r>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	1ccd      	adds	r5, r1, #3
 8006ed0:	f025 0503 	bic.w	r5, r5, #3
 8006ed4:	3508      	adds	r5, #8
 8006ed6:	2d0c      	cmp	r5, #12
 8006ed8:	bf38      	it	cc
 8006eda:	250c      	movcc	r5, #12
 8006edc:	2d00      	cmp	r5, #0
 8006ede:	4606      	mov	r6, r0
 8006ee0:	db01      	blt.n	8006ee6 <_malloc_r+0x1a>
 8006ee2:	42a9      	cmp	r1, r5
 8006ee4:	d903      	bls.n	8006eee <_malloc_r+0x22>
 8006ee6:	230c      	movs	r3, #12
 8006ee8:	6033      	str	r3, [r6, #0]
 8006eea:	2000      	movs	r0, #0
 8006eec:	bd70      	pop	{r4, r5, r6, pc}
 8006eee:	f000 fde4 	bl	8007aba <__malloc_lock>
 8006ef2:	4a21      	ldr	r2, [pc, #132]	; (8006f78 <_malloc_r+0xac>)
 8006ef4:	6814      	ldr	r4, [r2, #0]
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	b991      	cbnz	r1, 8006f20 <_malloc_r+0x54>
 8006efa:	4c20      	ldr	r4, [pc, #128]	; (8006f7c <_malloc_r+0xb0>)
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	b91b      	cbnz	r3, 8006f08 <_malloc_r+0x3c>
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 fc57 	bl	80077b4 <_sbrk_r>
 8006f06:	6020      	str	r0, [r4, #0]
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f000 fc52 	bl	80077b4 <_sbrk_r>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	d124      	bne.n	8006f5e <_malloc_r+0x92>
 8006f14:	230c      	movs	r3, #12
 8006f16:	6033      	str	r3, [r6, #0]
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f000 fdcf 	bl	8007abc <__malloc_unlock>
 8006f1e:	e7e4      	b.n	8006eea <_malloc_r+0x1e>
 8006f20:	680b      	ldr	r3, [r1, #0]
 8006f22:	1b5b      	subs	r3, r3, r5
 8006f24:	d418      	bmi.n	8006f58 <_malloc_r+0x8c>
 8006f26:	2b0b      	cmp	r3, #11
 8006f28:	d90f      	bls.n	8006f4a <_malloc_r+0x7e>
 8006f2a:	600b      	str	r3, [r1, #0]
 8006f2c:	50cd      	str	r5, [r1, r3]
 8006f2e:	18cc      	adds	r4, r1, r3
 8006f30:	4630      	mov	r0, r6
 8006f32:	f000 fdc3 	bl	8007abc <__malloc_unlock>
 8006f36:	f104 000b 	add.w	r0, r4, #11
 8006f3a:	1d23      	adds	r3, r4, #4
 8006f3c:	f020 0007 	bic.w	r0, r0, #7
 8006f40:	1ac3      	subs	r3, r0, r3
 8006f42:	d0d3      	beq.n	8006eec <_malloc_r+0x20>
 8006f44:	425a      	negs	r2, r3
 8006f46:	50e2      	str	r2, [r4, r3]
 8006f48:	e7d0      	b.n	8006eec <_malloc_r+0x20>
 8006f4a:	428c      	cmp	r4, r1
 8006f4c:	684b      	ldr	r3, [r1, #4]
 8006f4e:	bf16      	itet	ne
 8006f50:	6063      	strne	r3, [r4, #4]
 8006f52:	6013      	streq	r3, [r2, #0]
 8006f54:	460c      	movne	r4, r1
 8006f56:	e7eb      	b.n	8006f30 <_malloc_r+0x64>
 8006f58:	460c      	mov	r4, r1
 8006f5a:	6849      	ldr	r1, [r1, #4]
 8006f5c:	e7cc      	b.n	8006ef8 <_malloc_r+0x2c>
 8006f5e:	1cc4      	adds	r4, r0, #3
 8006f60:	f024 0403 	bic.w	r4, r4, #3
 8006f64:	42a0      	cmp	r0, r4
 8006f66:	d005      	beq.n	8006f74 <_malloc_r+0xa8>
 8006f68:	1a21      	subs	r1, r4, r0
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f000 fc22 	bl	80077b4 <_sbrk_r>
 8006f70:	3001      	adds	r0, #1
 8006f72:	d0cf      	beq.n	8006f14 <_malloc_r+0x48>
 8006f74:	6025      	str	r5, [r4, #0]
 8006f76:	e7db      	b.n	8006f30 <_malloc_r+0x64>
 8006f78:	20004060 	.word	0x20004060
 8006f7c:	20004064 	.word	0x20004064

08006f80 <__ssputs_r>:
 8006f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f84:	688e      	ldr	r6, [r1, #8]
 8006f86:	429e      	cmp	r6, r3
 8006f88:	4682      	mov	sl, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	4690      	mov	r8, r2
 8006f8e:	4699      	mov	r9, r3
 8006f90:	d837      	bhi.n	8007002 <__ssputs_r+0x82>
 8006f92:	898a      	ldrh	r2, [r1, #12]
 8006f94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f98:	d031      	beq.n	8006ffe <__ssputs_r+0x7e>
 8006f9a:	6825      	ldr	r5, [r4, #0]
 8006f9c:	6909      	ldr	r1, [r1, #16]
 8006f9e:	1a6f      	subs	r7, r5, r1
 8006fa0:	6965      	ldr	r5, [r4, #20]
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fa8:	fb95 f5f3 	sdiv	r5, r5, r3
 8006fac:	f109 0301 	add.w	r3, r9, #1
 8006fb0:	443b      	add	r3, r7
 8006fb2:	429d      	cmp	r5, r3
 8006fb4:	bf38      	it	cc
 8006fb6:	461d      	movcc	r5, r3
 8006fb8:	0553      	lsls	r3, r2, #21
 8006fba:	d530      	bpl.n	800701e <__ssputs_r+0x9e>
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	f7ff ff85 	bl	8006ecc <_malloc_r>
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	b950      	cbnz	r0, 8006fdc <__ssputs_r+0x5c>
 8006fc6:	230c      	movs	r3, #12
 8006fc8:	f8ca 3000 	str.w	r3, [sl]
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd2:	81a3      	strh	r3, [r4, #12]
 8006fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fdc:	463a      	mov	r2, r7
 8006fde:	6921      	ldr	r1, [r4, #16]
 8006fe0:	f7ff fc46 	bl	8006870 <memcpy>
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fee:	81a3      	strh	r3, [r4, #12]
 8006ff0:	6126      	str	r6, [r4, #16]
 8006ff2:	6165      	str	r5, [r4, #20]
 8006ff4:	443e      	add	r6, r7
 8006ff6:	1bed      	subs	r5, r5, r7
 8006ff8:	6026      	str	r6, [r4, #0]
 8006ffa:	60a5      	str	r5, [r4, #8]
 8006ffc:	464e      	mov	r6, r9
 8006ffe:	454e      	cmp	r6, r9
 8007000:	d900      	bls.n	8007004 <__ssputs_r+0x84>
 8007002:	464e      	mov	r6, r9
 8007004:	4632      	mov	r2, r6
 8007006:	4641      	mov	r1, r8
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	f000 fd3d 	bl	8007a88 <memmove>
 800700e:	68a3      	ldr	r3, [r4, #8]
 8007010:	1b9b      	subs	r3, r3, r6
 8007012:	60a3      	str	r3, [r4, #8]
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	441e      	add	r6, r3
 8007018:	6026      	str	r6, [r4, #0]
 800701a:	2000      	movs	r0, #0
 800701c:	e7dc      	b.n	8006fd8 <__ssputs_r+0x58>
 800701e:	462a      	mov	r2, r5
 8007020:	f000 fd4d 	bl	8007abe <_realloc_r>
 8007024:	4606      	mov	r6, r0
 8007026:	2800      	cmp	r0, #0
 8007028:	d1e2      	bne.n	8006ff0 <__ssputs_r+0x70>
 800702a:	6921      	ldr	r1, [r4, #16]
 800702c:	4650      	mov	r0, sl
 800702e:	f7ff feff 	bl	8006e30 <_free_r>
 8007032:	e7c8      	b.n	8006fc6 <__ssputs_r+0x46>

08007034 <_svfiprintf_r>:
 8007034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007038:	461d      	mov	r5, r3
 800703a:	898b      	ldrh	r3, [r1, #12]
 800703c:	061f      	lsls	r7, r3, #24
 800703e:	b09d      	sub	sp, #116	; 0x74
 8007040:	4680      	mov	r8, r0
 8007042:	460c      	mov	r4, r1
 8007044:	4616      	mov	r6, r2
 8007046:	d50f      	bpl.n	8007068 <_svfiprintf_r+0x34>
 8007048:	690b      	ldr	r3, [r1, #16]
 800704a:	b96b      	cbnz	r3, 8007068 <_svfiprintf_r+0x34>
 800704c:	2140      	movs	r1, #64	; 0x40
 800704e:	f7ff ff3d 	bl	8006ecc <_malloc_r>
 8007052:	6020      	str	r0, [r4, #0]
 8007054:	6120      	str	r0, [r4, #16]
 8007056:	b928      	cbnz	r0, 8007064 <_svfiprintf_r+0x30>
 8007058:	230c      	movs	r3, #12
 800705a:	f8c8 3000 	str.w	r3, [r8]
 800705e:	f04f 30ff 	mov.w	r0, #4294967295
 8007062:	e0c8      	b.n	80071f6 <_svfiprintf_r+0x1c2>
 8007064:	2340      	movs	r3, #64	; 0x40
 8007066:	6163      	str	r3, [r4, #20]
 8007068:	2300      	movs	r3, #0
 800706a:	9309      	str	r3, [sp, #36]	; 0x24
 800706c:	2320      	movs	r3, #32
 800706e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007072:	2330      	movs	r3, #48	; 0x30
 8007074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007078:	9503      	str	r5, [sp, #12]
 800707a:	f04f 0b01 	mov.w	fp, #1
 800707e:	4637      	mov	r7, r6
 8007080:	463d      	mov	r5, r7
 8007082:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007086:	b10b      	cbz	r3, 800708c <_svfiprintf_r+0x58>
 8007088:	2b25      	cmp	r3, #37	; 0x25
 800708a:	d13e      	bne.n	800710a <_svfiprintf_r+0xd6>
 800708c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007090:	d00b      	beq.n	80070aa <_svfiprintf_r+0x76>
 8007092:	4653      	mov	r3, sl
 8007094:	4632      	mov	r2, r6
 8007096:	4621      	mov	r1, r4
 8007098:	4640      	mov	r0, r8
 800709a:	f7ff ff71 	bl	8006f80 <__ssputs_r>
 800709e:	3001      	adds	r0, #1
 80070a0:	f000 80a4 	beq.w	80071ec <_svfiprintf_r+0x1b8>
 80070a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a6:	4453      	add	r3, sl
 80070a8:	9309      	str	r3, [sp, #36]	; 0x24
 80070aa:	783b      	ldrb	r3, [r7, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 809d 	beq.w	80071ec <_svfiprintf_r+0x1b8>
 80070b2:	2300      	movs	r3, #0
 80070b4:	f04f 32ff 	mov.w	r2, #4294967295
 80070b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070bc:	9304      	str	r3, [sp, #16]
 80070be:	9307      	str	r3, [sp, #28]
 80070c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070c4:	931a      	str	r3, [sp, #104]	; 0x68
 80070c6:	462f      	mov	r7, r5
 80070c8:	2205      	movs	r2, #5
 80070ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80070ce:	4850      	ldr	r0, [pc, #320]	; (8007210 <_svfiprintf_r+0x1dc>)
 80070d0:	f7f9 f88e 	bl	80001f0 <memchr>
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	b9d0      	cbnz	r0, 800710e <_svfiprintf_r+0xda>
 80070d8:	06d9      	lsls	r1, r3, #27
 80070da:	bf44      	itt	mi
 80070dc:	2220      	movmi	r2, #32
 80070de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070e2:	071a      	lsls	r2, r3, #28
 80070e4:	bf44      	itt	mi
 80070e6:	222b      	movmi	r2, #43	; 0x2b
 80070e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070ec:	782a      	ldrb	r2, [r5, #0]
 80070ee:	2a2a      	cmp	r2, #42	; 0x2a
 80070f0:	d015      	beq.n	800711e <_svfiprintf_r+0xea>
 80070f2:	9a07      	ldr	r2, [sp, #28]
 80070f4:	462f      	mov	r7, r5
 80070f6:	2000      	movs	r0, #0
 80070f8:	250a      	movs	r5, #10
 80070fa:	4639      	mov	r1, r7
 80070fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007100:	3b30      	subs	r3, #48	; 0x30
 8007102:	2b09      	cmp	r3, #9
 8007104:	d94d      	bls.n	80071a2 <_svfiprintf_r+0x16e>
 8007106:	b1b8      	cbz	r0, 8007138 <_svfiprintf_r+0x104>
 8007108:	e00f      	b.n	800712a <_svfiprintf_r+0xf6>
 800710a:	462f      	mov	r7, r5
 800710c:	e7b8      	b.n	8007080 <_svfiprintf_r+0x4c>
 800710e:	4a40      	ldr	r2, [pc, #256]	; (8007210 <_svfiprintf_r+0x1dc>)
 8007110:	1a80      	subs	r0, r0, r2
 8007112:	fa0b f000 	lsl.w	r0, fp, r0
 8007116:	4318      	orrs	r0, r3
 8007118:	9004      	str	r0, [sp, #16]
 800711a:	463d      	mov	r5, r7
 800711c:	e7d3      	b.n	80070c6 <_svfiprintf_r+0x92>
 800711e:	9a03      	ldr	r2, [sp, #12]
 8007120:	1d11      	adds	r1, r2, #4
 8007122:	6812      	ldr	r2, [r2, #0]
 8007124:	9103      	str	r1, [sp, #12]
 8007126:	2a00      	cmp	r2, #0
 8007128:	db01      	blt.n	800712e <_svfiprintf_r+0xfa>
 800712a:	9207      	str	r2, [sp, #28]
 800712c:	e004      	b.n	8007138 <_svfiprintf_r+0x104>
 800712e:	4252      	negs	r2, r2
 8007130:	f043 0302 	orr.w	r3, r3, #2
 8007134:	9207      	str	r2, [sp, #28]
 8007136:	9304      	str	r3, [sp, #16]
 8007138:	783b      	ldrb	r3, [r7, #0]
 800713a:	2b2e      	cmp	r3, #46	; 0x2e
 800713c:	d10c      	bne.n	8007158 <_svfiprintf_r+0x124>
 800713e:	787b      	ldrb	r3, [r7, #1]
 8007140:	2b2a      	cmp	r3, #42	; 0x2a
 8007142:	d133      	bne.n	80071ac <_svfiprintf_r+0x178>
 8007144:	9b03      	ldr	r3, [sp, #12]
 8007146:	1d1a      	adds	r2, r3, #4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	9203      	str	r2, [sp, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	bfb8      	it	lt
 8007150:	f04f 33ff 	movlt.w	r3, #4294967295
 8007154:	3702      	adds	r7, #2
 8007156:	9305      	str	r3, [sp, #20]
 8007158:	4d2e      	ldr	r5, [pc, #184]	; (8007214 <_svfiprintf_r+0x1e0>)
 800715a:	7839      	ldrb	r1, [r7, #0]
 800715c:	2203      	movs	r2, #3
 800715e:	4628      	mov	r0, r5
 8007160:	f7f9 f846 	bl	80001f0 <memchr>
 8007164:	b138      	cbz	r0, 8007176 <_svfiprintf_r+0x142>
 8007166:	2340      	movs	r3, #64	; 0x40
 8007168:	1b40      	subs	r0, r0, r5
 800716a:	fa03 f000 	lsl.w	r0, r3, r0
 800716e:	9b04      	ldr	r3, [sp, #16]
 8007170:	4303      	orrs	r3, r0
 8007172:	3701      	adds	r7, #1
 8007174:	9304      	str	r3, [sp, #16]
 8007176:	7839      	ldrb	r1, [r7, #0]
 8007178:	4827      	ldr	r0, [pc, #156]	; (8007218 <_svfiprintf_r+0x1e4>)
 800717a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800717e:	2206      	movs	r2, #6
 8007180:	1c7e      	adds	r6, r7, #1
 8007182:	f7f9 f835 	bl	80001f0 <memchr>
 8007186:	2800      	cmp	r0, #0
 8007188:	d038      	beq.n	80071fc <_svfiprintf_r+0x1c8>
 800718a:	4b24      	ldr	r3, [pc, #144]	; (800721c <_svfiprintf_r+0x1e8>)
 800718c:	bb13      	cbnz	r3, 80071d4 <_svfiprintf_r+0x1a0>
 800718e:	9b03      	ldr	r3, [sp, #12]
 8007190:	3307      	adds	r3, #7
 8007192:	f023 0307 	bic.w	r3, r3, #7
 8007196:	3308      	adds	r3, #8
 8007198:	9303      	str	r3, [sp, #12]
 800719a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719c:	444b      	add	r3, r9
 800719e:	9309      	str	r3, [sp, #36]	; 0x24
 80071a0:	e76d      	b.n	800707e <_svfiprintf_r+0x4a>
 80071a2:	fb05 3202 	mla	r2, r5, r2, r3
 80071a6:	2001      	movs	r0, #1
 80071a8:	460f      	mov	r7, r1
 80071aa:	e7a6      	b.n	80070fa <_svfiprintf_r+0xc6>
 80071ac:	2300      	movs	r3, #0
 80071ae:	3701      	adds	r7, #1
 80071b0:	9305      	str	r3, [sp, #20]
 80071b2:	4619      	mov	r1, r3
 80071b4:	250a      	movs	r5, #10
 80071b6:	4638      	mov	r0, r7
 80071b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071bc:	3a30      	subs	r2, #48	; 0x30
 80071be:	2a09      	cmp	r2, #9
 80071c0:	d903      	bls.n	80071ca <_svfiprintf_r+0x196>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0c8      	beq.n	8007158 <_svfiprintf_r+0x124>
 80071c6:	9105      	str	r1, [sp, #20]
 80071c8:	e7c6      	b.n	8007158 <_svfiprintf_r+0x124>
 80071ca:	fb05 2101 	mla	r1, r5, r1, r2
 80071ce:	2301      	movs	r3, #1
 80071d0:	4607      	mov	r7, r0
 80071d2:	e7f0      	b.n	80071b6 <_svfiprintf_r+0x182>
 80071d4:	ab03      	add	r3, sp, #12
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	4622      	mov	r2, r4
 80071da:	4b11      	ldr	r3, [pc, #68]	; (8007220 <_svfiprintf_r+0x1ec>)
 80071dc:	a904      	add	r1, sp, #16
 80071de:	4640      	mov	r0, r8
 80071e0:	f3af 8000 	nop.w
 80071e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80071e8:	4681      	mov	r9, r0
 80071ea:	d1d6      	bne.n	800719a <_svfiprintf_r+0x166>
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	065b      	lsls	r3, r3, #25
 80071f0:	f53f af35 	bmi.w	800705e <_svfiprintf_r+0x2a>
 80071f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071f6:	b01d      	add	sp, #116	; 0x74
 80071f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fc:	ab03      	add	r3, sp, #12
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	4622      	mov	r2, r4
 8007202:	4b07      	ldr	r3, [pc, #28]	; (8007220 <_svfiprintf_r+0x1ec>)
 8007204:	a904      	add	r1, sp, #16
 8007206:	4640      	mov	r0, r8
 8007208:	f000 f9c2 	bl	8007590 <_printf_i>
 800720c:	e7ea      	b.n	80071e4 <_svfiprintf_r+0x1b0>
 800720e:	bf00      	nop
 8007210:	08007cc4 	.word	0x08007cc4
 8007214:	08007cca 	.word	0x08007cca
 8007218:	08007cce 	.word	0x08007cce
 800721c:	00000000 	.word	0x00000000
 8007220:	08006f81 	.word	0x08006f81

08007224 <__sfputc_r>:
 8007224:	6893      	ldr	r3, [r2, #8]
 8007226:	3b01      	subs	r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	b410      	push	{r4}
 800722c:	6093      	str	r3, [r2, #8]
 800722e:	da08      	bge.n	8007242 <__sfputc_r+0x1e>
 8007230:	6994      	ldr	r4, [r2, #24]
 8007232:	42a3      	cmp	r3, r4
 8007234:	db01      	blt.n	800723a <__sfputc_r+0x16>
 8007236:	290a      	cmp	r1, #10
 8007238:	d103      	bne.n	8007242 <__sfputc_r+0x1e>
 800723a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800723e:	f000 bb0d 	b.w	800785c <__swbuf_r>
 8007242:	6813      	ldr	r3, [r2, #0]
 8007244:	1c58      	adds	r0, r3, #1
 8007246:	6010      	str	r0, [r2, #0]
 8007248:	7019      	strb	r1, [r3, #0]
 800724a:	4608      	mov	r0, r1
 800724c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007250:	4770      	bx	lr

08007252 <__sfputs_r>:
 8007252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007254:	4606      	mov	r6, r0
 8007256:	460f      	mov	r7, r1
 8007258:	4614      	mov	r4, r2
 800725a:	18d5      	adds	r5, r2, r3
 800725c:	42ac      	cmp	r4, r5
 800725e:	d101      	bne.n	8007264 <__sfputs_r+0x12>
 8007260:	2000      	movs	r0, #0
 8007262:	e007      	b.n	8007274 <__sfputs_r+0x22>
 8007264:	463a      	mov	r2, r7
 8007266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800726a:	4630      	mov	r0, r6
 800726c:	f7ff ffda 	bl	8007224 <__sfputc_r>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d1f3      	bne.n	800725c <__sfputs_r+0xa>
 8007274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007278 <_vfiprintf_r>:
 8007278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727c:	460c      	mov	r4, r1
 800727e:	b09d      	sub	sp, #116	; 0x74
 8007280:	4617      	mov	r7, r2
 8007282:	461d      	mov	r5, r3
 8007284:	4606      	mov	r6, r0
 8007286:	b118      	cbz	r0, 8007290 <_vfiprintf_r+0x18>
 8007288:	6983      	ldr	r3, [r0, #24]
 800728a:	b90b      	cbnz	r3, 8007290 <_vfiprintf_r+0x18>
 800728c:	f7ff fcda 	bl	8006c44 <__sinit>
 8007290:	4b7c      	ldr	r3, [pc, #496]	; (8007484 <_vfiprintf_r+0x20c>)
 8007292:	429c      	cmp	r4, r3
 8007294:	d158      	bne.n	8007348 <_vfiprintf_r+0xd0>
 8007296:	6874      	ldr	r4, [r6, #4]
 8007298:	89a3      	ldrh	r3, [r4, #12]
 800729a:	0718      	lsls	r0, r3, #28
 800729c:	d55e      	bpl.n	800735c <_vfiprintf_r+0xe4>
 800729e:	6923      	ldr	r3, [r4, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d05b      	beq.n	800735c <_vfiprintf_r+0xe4>
 80072a4:	2300      	movs	r3, #0
 80072a6:	9309      	str	r3, [sp, #36]	; 0x24
 80072a8:	2320      	movs	r3, #32
 80072aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072ae:	2330      	movs	r3, #48	; 0x30
 80072b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072b4:	9503      	str	r5, [sp, #12]
 80072b6:	f04f 0b01 	mov.w	fp, #1
 80072ba:	46b8      	mov	r8, r7
 80072bc:	4645      	mov	r5, r8
 80072be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80072c2:	b10b      	cbz	r3, 80072c8 <_vfiprintf_r+0x50>
 80072c4:	2b25      	cmp	r3, #37	; 0x25
 80072c6:	d154      	bne.n	8007372 <_vfiprintf_r+0xfa>
 80072c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80072cc:	d00b      	beq.n	80072e6 <_vfiprintf_r+0x6e>
 80072ce:	4653      	mov	r3, sl
 80072d0:	463a      	mov	r2, r7
 80072d2:	4621      	mov	r1, r4
 80072d4:	4630      	mov	r0, r6
 80072d6:	f7ff ffbc 	bl	8007252 <__sfputs_r>
 80072da:	3001      	adds	r0, #1
 80072dc:	f000 80c2 	beq.w	8007464 <_vfiprintf_r+0x1ec>
 80072e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e2:	4453      	add	r3, sl
 80072e4:	9309      	str	r3, [sp, #36]	; 0x24
 80072e6:	f898 3000 	ldrb.w	r3, [r8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 80ba 	beq.w	8007464 <_vfiprintf_r+0x1ec>
 80072f0:	2300      	movs	r3, #0
 80072f2:	f04f 32ff 	mov.w	r2, #4294967295
 80072f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072fa:	9304      	str	r3, [sp, #16]
 80072fc:	9307      	str	r3, [sp, #28]
 80072fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007302:	931a      	str	r3, [sp, #104]	; 0x68
 8007304:	46a8      	mov	r8, r5
 8007306:	2205      	movs	r2, #5
 8007308:	f818 1b01 	ldrb.w	r1, [r8], #1
 800730c:	485e      	ldr	r0, [pc, #376]	; (8007488 <_vfiprintf_r+0x210>)
 800730e:	f7f8 ff6f 	bl	80001f0 <memchr>
 8007312:	9b04      	ldr	r3, [sp, #16]
 8007314:	bb78      	cbnz	r0, 8007376 <_vfiprintf_r+0xfe>
 8007316:	06d9      	lsls	r1, r3, #27
 8007318:	bf44      	itt	mi
 800731a:	2220      	movmi	r2, #32
 800731c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007320:	071a      	lsls	r2, r3, #28
 8007322:	bf44      	itt	mi
 8007324:	222b      	movmi	r2, #43	; 0x2b
 8007326:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800732a:	782a      	ldrb	r2, [r5, #0]
 800732c:	2a2a      	cmp	r2, #42	; 0x2a
 800732e:	d02a      	beq.n	8007386 <_vfiprintf_r+0x10e>
 8007330:	9a07      	ldr	r2, [sp, #28]
 8007332:	46a8      	mov	r8, r5
 8007334:	2000      	movs	r0, #0
 8007336:	250a      	movs	r5, #10
 8007338:	4641      	mov	r1, r8
 800733a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800733e:	3b30      	subs	r3, #48	; 0x30
 8007340:	2b09      	cmp	r3, #9
 8007342:	d969      	bls.n	8007418 <_vfiprintf_r+0x1a0>
 8007344:	b360      	cbz	r0, 80073a0 <_vfiprintf_r+0x128>
 8007346:	e024      	b.n	8007392 <_vfiprintf_r+0x11a>
 8007348:	4b50      	ldr	r3, [pc, #320]	; (800748c <_vfiprintf_r+0x214>)
 800734a:	429c      	cmp	r4, r3
 800734c:	d101      	bne.n	8007352 <_vfiprintf_r+0xda>
 800734e:	68b4      	ldr	r4, [r6, #8]
 8007350:	e7a2      	b.n	8007298 <_vfiprintf_r+0x20>
 8007352:	4b4f      	ldr	r3, [pc, #316]	; (8007490 <_vfiprintf_r+0x218>)
 8007354:	429c      	cmp	r4, r3
 8007356:	bf08      	it	eq
 8007358:	68f4      	ldreq	r4, [r6, #12]
 800735a:	e79d      	b.n	8007298 <_vfiprintf_r+0x20>
 800735c:	4621      	mov	r1, r4
 800735e:	4630      	mov	r0, r6
 8007360:	f000 fae0 	bl	8007924 <__swsetup_r>
 8007364:	2800      	cmp	r0, #0
 8007366:	d09d      	beq.n	80072a4 <_vfiprintf_r+0x2c>
 8007368:	f04f 30ff 	mov.w	r0, #4294967295
 800736c:	b01d      	add	sp, #116	; 0x74
 800736e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007372:	46a8      	mov	r8, r5
 8007374:	e7a2      	b.n	80072bc <_vfiprintf_r+0x44>
 8007376:	4a44      	ldr	r2, [pc, #272]	; (8007488 <_vfiprintf_r+0x210>)
 8007378:	1a80      	subs	r0, r0, r2
 800737a:	fa0b f000 	lsl.w	r0, fp, r0
 800737e:	4318      	orrs	r0, r3
 8007380:	9004      	str	r0, [sp, #16]
 8007382:	4645      	mov	r5, r8
 8007384:	e7be      	b.n	8007304 <_vfiprintf_r+0x8c>
 8007386:	9a03      	ldr	r2, [sp, #12]
 8007388:	1d11      	adds	r1, r2, #4
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	9103      	str	r1, [sp, #12]
 800738e:	2a00      	cmp	r2, #0
 8007390:	db01      	blt.n	8007396 <_vfiprintf_r+0x11e>
 8007392:	9207      	str	r2, [sp, #28]
 8007394:	e004      	b.n	80073a0 <_vfiprintf_r+0x128>
 8007396:	4252      	negs	r2, r2
 8007398:	f043 0302 	orr.w	r3, r3, #2
 800739c:	9207      	str	r2, [sp, #28]
 800739e:	9304      	str	r3, [sp, #16]
 80073a0:	f898 3000 	ldrb.w	r3, [r8]
 80073a4:	2b2e      	cmp	r3, #46	; 0x2e
 80073a6:	d10e      	bne.n	80073c6 <_vfiprintf_r+0x14e>
 80073a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80073ac:	2b2a      	cmp	r3, #42	; 0x2a
 80073ae:	d138      	bne.n	8007422 <_vfiprintf_r+0x1aa>
 80073b0:	9b03      	ldr	r3, [sp, #12]
 80073b2:	1d1a      	adds	r2, r3, #4
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	9203      	str	r2, [sp, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	bfb8      	it	lt
 80073bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80073c0:	f108 0802 	add.w	r8, r8, #2
 80073c4:	9305      	str	r3, [sp, #20]
 80073c6:	4d33      	ldr	r5, [pc, #204]	; (8007494 <_vfiprintf_r+0x21c>)
 80073c8:	f898 1000 	ldrb.w	r1, [r8]
 80073cc:	2203      	movs	r2, #3
 80073ce:	4628      	mov	r0, r5
 80073d0:	f7f8 ff0e 	bl	80001f0 <memchr>
 80073d4:	b140      	cbz	r0, 80073e8 <_vfiprintf_r+0x170>
 80073d6:	2340      	movs	r3, #64	; 0x40
 80073d8:	1b40      	subs	r0, r0, r5
 80073da:	fa03 f000 	lsl.w	r0, r3, r0
 80073de:	9b04      	ldr	r3, [sp, #16]
 80073e0:	4303      	orrs	r3, r0
 80073e2:	f108 0801 	add.w	r8, r8, #1
 80073e6:	9304      	str	r3, [sp, #16]
 80073e8:	f898 1000 	ldrb.w	r1, [r8]
 80073ec:	482a      	ldr	r0, [pc, #168]	; (8007498 <_vfiprintf_r+0x220>)
 80073ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073f2:	2206      	movs	r2, #6
 80073f4:	f108 0701 	add.w	r7, r8, #1
 80073f8:	f7f8 fefa 	bl	80001f0 <memchr>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d037      	beq.n	8007470 <_vfiprintf_r+0x1f8>
 8007400:	4b26      	ldr	r3, [pc, #152]	; (800749c <_vfiprintf_r+0x224>)
 8007402:	bb1b      	cbnz	r3, 800744c <_vfiprintf_r+0x1d4>
 8007404:	9b03      	ldr	r3, [sp, #12]
 8007406:	3307      	adds	r3, #7
 8007408:	f023 0307 	bic.w	r3, r3, #7
 800740c:	3308      	adds	r3, #8
 800740e:	9303      	str	r3, [sp, #12]
 8007410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007412:	444b      	add	r3, r9
 8007414:	9309      	str	r3, [sp, #36]	; 0x24
 8007416:	e750      	b.n	80072ba <_vfiprintf_r+0x42>
 8007418:	fb05 3202 	mla	r2, r5, r2, r3
 800741c:	2001      	movs	r0, #1
 800741e:	4688      	mov	r8, r1
 8007420:	e78a      	b.n	8007338 <_vfiprintf_r+0xc0>
 8007422:	2300      	movs	r3, #0
 8007424:	f108 0801 	add.w	r8, r8, #1
 8007428:	9305      	str	r3, [sp, #20]
 800742a:	4619      	mov	r1, r3
 800742c:	250a      	movs	r5, #10
 800742e:	4640      	mov	r0, r8
 8007430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007434:	3a30      	subs	r2, #48	; 0x30
 8007436:	2a09      	cmp	r2, #9
 8007438:	d903      	bls.n	8007442 <_vfiprintf_r+0x1ca>
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0c3      	beq.n	80073c6 <_vfiprintf_r+0x14e>
 800743e:	9105      	str	r1, [sp, #20]
 8007440:	e7c1      	b.n	80073c6 <_vfiprintf_r+0x14e>
 8007442:	fb05 2101 	mla	r1, r5, r1, r2
 8007446:	2301      	movs	r3, #1
 8007448:	4680      	mov	r8, r0
 800744a:	e7f0      	b.n	800742e <_vfiprintf_r+0x1b6>
 800744c:	ab03      	add	r3, sp, #12
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	4622      	mov	r2, r4
 8007452:	4b13      	ldr	r3, [pc, #76]	; (80074a0 <_vfiprintf_r+0x228>)
 8007454:	a904      	add	r1, sp, #16
 8007456:	4630      	mov	r0, r6
 8007458:	f3af 8000 	nop.w
 800745c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007460:	4681      	mov	r9, r0
 8007462:	d1d5      	bne.n	8007410 <_vfiprintf_r+0x198>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	065b      	lsls	r3, r3, #25
 8007468:	f53f af7e 	bmi.w	8007368 <_vfiprintf_r+0xf0>
 800746c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800746e:	e77d      	b.n	800736c <_vfiprintf_r+0xf4>
 8007470:	ab03      	add	r3, sp, #12
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	4622      	mov	r2, r4
 8007476:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <_vfiprintf_r+0x228>)
 8007478:	a904      	add	r1, sp, #16
 800747a:	4630      	mov	r0, r6
 800747c:	f000 f888 	bl	8007590 <_printf_i>
 8007480:	e7ec      	b.n	800745c <_vfiprintf_r+0x1e4>
 8007482:	bf00      	nop
 8007484:	08007c84 	.word	0x08007c84
 8007488:	08007cc4 	.word	0x08007cc4
 800748c:	08007ca4 	.word	0x08007ca4
 8007490:	08007c64 	.word	0x08007c64
 8007494:	08007cca 	.word	0x08007cca
 8007498:	08007cce 	.word	0x08007cce
 800749c:	00000000 	.word	0x00000000
 80074a0:	08007253 	.word	0x08007253

080074a4 <_printf_common>:
 80074a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a8:	4691      	mov	r9, r2
 80074aa:	461f      	mov	r7, r3
 80074ac:	688a      	ldr	r2, [r1, #8]
 80074ae:	690b      	ldr	r3, [r1, #16]
 80074b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074b4:	4293      	cmp	r3, r2
 80074b6:	bfb8      	it	lt
 80074b8:	4613      	movlt	r3, r2
 80074ba:	f8c9 3000 	str.w	r3, [r9]
 80074be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074c2:	4606      	mov	r6, r0
 80074c4:	460c      	mov	r4, r1
 80074c6:	b112      	cbz	r2, 80074ce <_printf_common+0x2a>
 80074c8:	3301      	adds	r3, #1
 80074ca:	f8c9 3000 	str.w	r3, [r9]
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	0699      	lsls	r1, r3, #26
 80074d2:	bf42      	ittt	mi
 80074d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80074d8:	3302      	addmi	r3, #2
 80074da:	f8c9 3000 	strmi.w	r3, [r9]
 80074de:	6825      	ldr	r5, [r4, #0]
 80074e0:	f015 0506 	ands.w	r5, r5, #6
 80074e4:	d107      	bne.n	80074f6 <_printf_common+0x52>
 80074e6:	f104 0a19 	add.w	sl, r4, #25
 80074ea:	68e3      	ldr	r3, [r4, #12]
 80074ec:	f8d9 2000 	ldr.w	r2, [r9]
 80074f0:	1a9b      	subs	r3, r3, r2
 80074f2:	42ab      	cmp	r3, r5
 80074f4:	dc28      	bgt.n	8007548 <_printf_common+0xa4>
 80074f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80074fa:	6822      	ldr	r2, [r4, #0]
 80074fc:	3300      	adds	r3, #0
 80074fe:	bf18      	it	ne
 8007500:	2301      	movne	r3, #1
 8007502:	0692      	lsls	r2, r2, #26
 8007504:	d42d      	bmi.n	8007562 <_printf_common+0xbe>
 8007506:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800750a:	4639      	mov	r1, r7
 800750c:	4630      	mov	r0, r6
 800750e:	47c0      	blx	r8
 8007510:	3001      	adds	r0, #1
 8007512:	d020      	beq.n	8007556 <_printf_common+0xb2>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	68e5      	ldr	r5, [r4, #12]
 8007518:	f8d9 2000 	ldr.w	r2, [r9]
 800751c:	f003 0306 	and.w	r3, r3, #6
 8007520:	2b04      	cmp	r3, #4
 8007522:	bf08      	it	eq
 8007524:	1aad      	subeq	r5, r5, r2
 8007526:	68a3      	ldr	r3, [r4, #8]
 8007528:	6922      	ldr	r2, [r4, #16]
 800752a:	bf0c      	ite	eq
 800752c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007530:	2500      	movne	r5, #0
 8007532:	4293      	cmp	r3, r2
 8007534:	bfc4      	itt	gt
 8007536:	1a9b      	subgt	r3, r3, r2
 8007538:	18ed      	addgt	r5, r5, r3
 800753a:	f04f 0900 	mov.w	r9, #0
 800753e:	341a      	adds	r4, #26
 8007540:	454d      	cmp	r5, r9
 8007542:	d11a      	bne.n	800757a <_printf_common+0xd6>
 8007544:	2000      	movs	r0, #0
 8007546:	e008      	b.n	800755a <_printf_common+0xb6>
 8007548:	2301      	movs	r3, #1
 800754a:	4652      	mov	r2, sl
 800754c:	4639      	mov	r1, r7
 800754e:	4630      	mov	r0, r6
 8007550:	47c0      	blx	r8
 8007552:	3001      	adds	r0, #1
 8007554:	d103      	bne.n	800755e <_printf_common+0xba>
 8007556:	f04f 30ff 	mov.w	r0, #4294967295
 800755a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755e:	3501      	adds	r5, #1
 8007560:	e7c3      	b.n	80074ea <_printf_common+0x46>
 8007562:	18e1      	adds	r1, r4, r3
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	2030      	movs	r0, #48	; 0x30
 8007568:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800756c:	4422      	add	r2, r4
 800756e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007572:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007576:	3302      	adds	r3, #2
 8007578:	e7c5      	b.n	8007506 <_printf_common+0x62>
 800757a:	2301      	movs	r3, #1
 800757c:	4622      	mov	r2, r4
 800757e:	4639      	mov	r1, r7
 8007580:	4630      	mov	r0, r6
 8007582:	47c0      	blx	r8
 8007584:	3001      	adds	r0, #1
 8007586:	d0e6      	beq.n	8007556 <_printf_common+0xb2>
 8007588:	f109 0901 	add.w	r9, r9, #1
 800758c:	e7d8      	b.n	8007540 <_printf_common+0x9c>
	...

08007590 <_printf_i>:
 8007590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007594:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007598:	460c      	mov	r4, r1
 800759a:	7e09      	ldrb	r1, [r1, #24]
 800759c:	b085      	sub	sp, #20
 800759e:	296e      	cmp	r1, #110	; 0x6e
 80075a0:	4617      	mov	r7, r2
 80075a2:	4606      	mov	r6, r0
 80075a4:	4698      	mov	r8, r3
 80075a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075a8:	f000 80b3 	beq.w	8007712 <_printf_i+0x182>
 80075ac:	d822      	bhi.n	80075f4 <_printf_i+0x64>
 80075ae:	2963      	cmp	r1, #99	; 0x63
 80075b0:	d036      	beq.n	8007620 <_printf_i+0x90>
 80075b2:	d80a      	bhi.n	80075ca <_printf_i+0x3a>
 80075b4:	2900      	cmp	r1, #0
 80075b6:	f000 80b9 	beq.w	800772c <_printf_i+0x19c>
 80075ba:	2958      	cmp	r1, #88	; 0x58
 80075bc:	f000 8083 	beq.w	80076c6 <_printf_i+0x136>
 80075c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80075c8:	e032      	b.n	8007630 <_printf_i+0xa0>
 80075ca:	2964      	cmp	r1, #100	; 0x64
 80075cc:	d001      	beq.n	80075d2 <_printf_i+0x42>
 80075ce:	2969      	cmp	r1, #105	; 0x69
 80075d0:	d1f6      	bne.n	80075c0 <_printf_i+0x30>
 80075d2:	6820      	ldr	r0, [r4, #0]
 80075d4:	6813      	ldr	r3, [r2, #0]
 80075d6:	0605      	lsls	r5, r0, #24
 80075d8:	f103 0104 	add.w	r1, r3, #4
 80075dc:	d52a      	bpl.n	8007634 <_printf_i+0xa4>
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6011      	str	r1, [r2, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	da03      	bge.n	80075ee <_printf_i+0x5e>
 80075e6:	222d      	movs	r2, #45	; 0x2d
 80075e8:	425b      	negs	r3, r3
 80075ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80075ee:	486f      	ldr	r0, [pc, #444]	; (80077ac <_printf_i+0x21c>)
 80075f0:	220a      	movs	r2, #10
 80075f2:	e039      	b.n	8007668 <_printf_i+0xd8>
 80075f4:	2973      	cmp	r1, #115	; 0x73
 80075f6:	f000 809d 	beq.w	8007734 <_printf_i+0x1a4>
 80075fa:	d808      	bhi.n	800760e <_printf_i+0x7e>
 80075fc:	296f      	cmp	r1, #111	; 0x6f
 80075fe:	d020      	beq.n	8007642 <_printf_i+0xb2>
 8007600:	2970      	cmp	r1, #112	; 0x70
 8007602:	d1dd      	bne.n	80075c0 <_printf_i+0x30>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	f043 0320 	orr.w	r3, r3, #32
 800760a:	6023      	str	r3, [r4, #0]
 800760c:	e003      	b.n	8007616 <_printf_i+0x86>
 800760e:	2975      	cmp	r1, #117	; 0x75
 8007610:	d017      	beq.n	8007642 <_printf_i+0xb2>
 8007612:	2978      	cmp	r1, #120	; 0x78
 8007614:	d1d4      	bne.n	80075c0 <_printf_i+0x30>
 8007616:	2378      	movs	r3, #120	; 0x78
 8007618:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800761c:	4864      	ldr	r0, [pc, #400]	; (80077b0 <_printf_i+0x220>)
 800761e:	e055      	b.n	80076cc <_printf_i+0x13c>
 8007620:	6813      	ldr	r3, [r2, #0]
 8007622:	1d19      	adds	r1, r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6011      	str	r1, [r2, #0]
 8007628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800762c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007630:	2301      	movs	r3, #1
 8007632:	e08c      	b.n	800774e <_printf_i+0x1be>
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6011      	str	r1, [r2, #0]
 8007638:	f010 0f40 	tst.w	r0, #64	; 0x40
 800763c:	bf18      	it	ne
 800763e:	b21b      	sxthne	r3, r3
 8007640:	e7cf      	b.n	80075e2 <_printf_i+0x52>
 8007642:	6813      	ldr	r3, [r2, #0]
 8007644:	6825      	ldr	r5, [r4, #0]
 8007646:	1d18      	adds	r0, r3, #4
 8007648:	6010      	str	r0, [r2, #0]
 800764a:	0628      	lsls	r0, r5, #24
 800764c:	d501      	bpl.n	8007652 <_printf_i+0xc2>
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	e002      	b.n	8007658 <_printf_i+0xc8>
 8007652:	0668      	lsls	r0, r5, #25
 8007654:	d5fb      	bpl.n	800764e <_printf_i+0xbe>
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	4854      	ldr	r0, [pc, #336]	; (80077ac <_printf_i+0x21c>)
 800765a:	296f      	cmp	r1, #111	; 0x6f
 800765c:	bf14      	ite	ne
 800765e:	220a      	movne	r2, #10
 8007660:	2208      	moveq	r2, #8
 8007662:	2100      	movs	r1, #0
 8007664:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007668:	6865      	ldr	r5, [r4, #4]
 800766a:	60a5      	str	r5, [r4, #8]
 800766c:	2d00      	cmp	r5, #0
 800766e:	f2c0 8095 	blt.w	800779c <_printf_i+0x20c>
 8007672:	6821      	ldr	r1, [r4, #0]
 8007674:	f021 0104 	bic.w	r1, r1, #4
 8007678:	6021      	str	r1, [r4, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d13d      	bne.n	80076fa <_printf_i+0x16a>
 800767e:	2d00      	cmp	r5, #0
 8007680:	f040 808e 	bne.w	80077a0 <_printf_i+0x210>
 8007684:	4665      	mov	r5, ip
 8007686:	2a08      	cmp	r2, #8
 8007688:	d10b      	bne.n	80076a2 <_printf_i+0x112>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	07db      	lsls	r3, r3, #31
 800768e:	d508      	bpl.n	80076a2 <_printf_i+0x112>
 8007690:	6923      	ldr	r3, [r4, #16]
 8007692:	6862      	ldr	r2, [r4, #4]
 8007694:	429a      	cmp	r2, r3
 8007696:	bfde      	ittt	le
 8007698:	2330      	movle	r3, #48	; 0x30
 800769a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800769e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076a2:	ebac 0305 	sub.w	r3, ip, r5
 80076a6:	6123      	str	r3, [r4, #16]
 80076a8:	f8cd 8000 	str.w	r8, [sp]
 80076ac:	463b      	mov	r3, r7
 80076ae:	aa03      	add	r2, sp, #12
 80076b0:	4621      	mov	r1, r4
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7ff fef6 	bl	80074a4 <_printf_common>
 80076b8:	3001      	adds	r0, #1
 80076ba:	d14d      	bne.n	8007758 <_printf_i+0x1c8>
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295
 80076c0:	b005      	add	sp, #20
 80076c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076c6:	4839      	ldr	r0, [pc, #228]	; (80077ac <_printf_i+0x21c>)
 80076c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80076cc:	6813      	ldr	r3, [r2, #0]
 80076ce:	6821      	ldr	r1, [r4, #0]
 80076d0:	1d1d      	adds	r5, r3, #4
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6015      	str	r5, [r2, #0]
 80076d6:	060a      	lsls	r2, r1, #24
 80076d8:	d50b      	bpl.n	80076f2 <_printf_i+0x162>
 80076da:	07ca      	lsls	r2, r1, #31
 80076dc:	bf44      	itt	mi
 80076de:	f041 0120 	orrmi.w	r1, r1, #32
 80076e2:	6021      	strmi	r1, [r4, #0]
 80076e4:	b91b      	cbnz	r3, 80076ee <_printf_i+0x15e>
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	f022 0220 	bic.w	r2, r2, #32
 80076ec:	6022      	str	r2, [r4, #0]
 80076ee:	2210      	movs	r2, #16
 80076f0:	e7b7      	b.n	8007662 <_printf_i+0xd2>
 80076f2:	064d      	lsls	r5, r1, #25
 80076f4:	bf48      	it	mi
 80076f6:	b29b      	uxthmi	r3, r3
 80076f8:	e7ef      	b.n	80076da <_printf_i+0x14a>
 80076fa:	4665      	mov	r5, ip
 80076fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007700:	fb02 3311 	mls	r3, r2, r1, r3
 8007704:	5cc3      	ldrb	r3, [r0, r3]
 8007706:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800770a:	460b      	mov	r3, r1
 800770c:	2900      	cmp	r1, #0
 800770e:	d1f5      	bne.n	80076fc <_printf_i+0x16c>
 8007710:	e7b9      	b.n	8007686 <_printf_i+0xf6>
 8007712:	6813      	ldr	r3, [r2, #0]
 8007714:	6825      	ldr	r5, [r4, #0]
 8007716:	6961      	ldr	r1, [r4, #20]
 8007718:	1d18      	adds	r0, r3, #4
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	0628      	lsls	r0, r5, #24
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	d501      	bpl.n	8007726 <_printf_i+0x196>
 8007722:	6019      	str	r1, [r3, #0]
 8007724:	e002      	b.n	800772c <_printf_i+0x19c>
 8007726:	066a      	lsls	r2, r5, #25
 8007728:	d5fb      	bpl.n	8007722 <_printf_i+0x192>
 800772a:	8019      	strh	r1, [r3, #0]
 800772c:	2300      	movs	r3, #0
 800772e:	6123      	str	r3, [r4, #16]
 8007730:	4665      	mov	r5, ip
 8007732:	e7b9      	b.n	80076a8 <_printf_i+0x118>
 8007734:	6813      	ldr	r3, [r2, #0]
 8007736:	1d19      	adds	r1, r3, #4
 8007738:	6011      	str	r1, [r2, #0]
 800773a:	681d      	ldr	r5, [r3, #0]
 800773c:	6862      	ldr	r2, [r4, #4]
 800773e:	2100      	movs	r1, #0
 8007740:	4628      	mov	r0, r5
 8007742:	f7f8 fd55 	bl	80001f0 <memchr>
 8007746:	b108      	cbz	r0, 800774c <_printf_i+0x1bc>
 8007748:	1b40      	subs	r0, r0, r5
 800774a:	6060      	str	r0, [r4, #4]
 800774c:	6863      	ldr	r3, [r4, #4]
 800774e:	6123      	str	r3, [r4, #16]
 8007750:	2300      	movs	r3, #0
 8007752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007756:	e7a7      	b.n	80076a8 <_printf_i+0x118>
 8007758:	6923      	ldr	r3, [r4, #16]
 800775a:	462a      	mov	r2, r5
 800775c:	4639      	mov	r1, r7
 800775e:	4630      	mov	r0, r6
 8007760:	47c0      	blx	r8
 8007762:	3001      	adds	r0, #1
 8007764:	d0aa      	beq.n	80076bc <_printf_i+0x12c>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	079b      	lsls	r3, r3, #30
 800776a:	d413      	bmi.n	8007794 <_printf_i+0x204>
 800776c:	68e0      	ldr	r0, [r4, #12]
 800776e:	9b03      	ldr	r3, [sp, #12]
 8007770:	4298      	cmp	r0, r3
 8007772:	bfb8      	it	lt
 8007774:	4618      	movlt	r0, r3
 8007776:	e7a3      	b.n	80076c0 <_printf_i+0x130>
 8007778:	2301      	movs	r3, #1
 800777a:	464a      	mov	r2, r9
 800777c:	4639      	mov	r1, r7
 800777e:	4630      	mov	r0, r6
 8007780:	47c0      	blx	r8
 8007782:	3001      	adds	r0, #1
 8007784:	d09a      	beq.n	80076bc <_printf_i+0x12c>
 8007786:	3501      	adds	r5, #1
 8007788:	68e3      	ldr	r3, [r4, #12]
 800778a:	9a03      	ldr	r2, [sp, #12]
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	42ab      	cmp	r3, r5
 8007790:	dcf2      	bgt.n	8007778 <_printf_i+0x1e8>
 8007792:	e7eb      	b.n	800776c <_printf_i+0x1dc>
 8007794:	2500      	movs	r5, #0
 8007796:	f104 0919 	add.w	r9, r4, #25
 800779a:	e7f5      	b.n	8007788 <_printf_i+0x1f8>
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1ac      	bne.n	80076fa <_printf_i+0x16a>
 80077a0:	7803      	ldrb	r3, [r0, #0]
 80077a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077aa:	e76c      	b.n	8007686 <_printf_i+0xf6>
 80077ac:	08007cd5 	.word	0x08007cd5
 80077b0:	08007ce6 	.word	0x08007ce6

080077b4 <_sbrk_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4c06      	ldr	r4, [pc, #24]	; (80077d0 <_sbrk_r+0x1c>)
 80077b8:	2300      	movs	r3, #0
 80077ba:	4605      	mov	r5, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	6023      	str	r3, [r4, #0]
 80077c0:	f000 f9be 	bl	8007b40 <_sbrk>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_sbrk_r+0x1a>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_sbrk_r+0x1a>
 80077cc:	602b      	str	r3, [r5, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	20004338 	.word	0x20004338

080077d4 <__sread>:
 80077d4:	b510      	push	{r4, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077dc:	f000 f996 	bl	8007b0c <_read_r>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	bfab      	itete	ge
 80077e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077e6:	89a3      	ldrhlt	r3, [r4, #12]
 80077e8:	181b      	addge	r3, r3, r0
 80077ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077ee:	bfac      	ite	ge
 80077f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80077f2:	81a3      	strhlt	r3, [r4, #12]
 80077f4:	bd10      	pop	{r4, pc}

080077f6 <__swrite>:
 80077f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077fa:	461f      	mov	r7, r3
 80077fc:	898b      	ldrh	r3, [r1, #12]
 80077fe:	05db      	lsls	r3, r3, #23
 8007800:	4605      	mov	r5, r0
 8007802:	460c      	mov	r4, r1
 8007804:	4616      	mov	r6, r2
 8007806:	d505      	bpl.n	8007814 <__swrite+0x1e>
 8007808:	2302      	movs	r3, #2
 800780a:	2200      	movs	r2, #0
 800780c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007810:	f000 f928 	bl	8007a64 <_lseek_r>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800781a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800781e:	81a3      	strh	r3, [r4, #12]
 8007820:	4632      	mov	r2, r6
 8007822:	463b      	mov	r3, r7
 8007824:	4628      	mov	r0, r5
 8007826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800782a:	f000 b869 	b.w	8007900 <_write_r>

0800782e <__sseek>:
 800782e:	b510      	push	{r4, lr}
 8007830:	460c      	mov	r4, r1
 8007832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007836:	f000 f915 	bl	8007a64 <_lseek_r>
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	89a3      	ldrh	r3, [r4, #12]
 800783e:	bf15      	itete	ne
 8007840:	6560      	strne	r0, [r4, #84]	; 0x54
 8007842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800784a:	81a3      	strheq	r3, [r4, #12]
 800784c:	bf18      	it	ne
 800784e:	81a3      	strhne	r3, [r4, #12]
 8007850:	bd10      	pop	{r4, pc}

08007852 <__sclose>:
 8007852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007856:	f000 b8d3 	b.w	8007a00 <_close_r>
	...

0800785c <__swbuf_r>:
 800785c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785e:	460e      	mov	r6, r1
 8007860:	4614      	mov	r4, r2
 8007862:	4605      	mov	r5, r0
 8007864:	b118      	cbz	r0, 800786e <__swbuf_r+0x12>
 8007866:	6983      	ldr	r3, [r0, #24]
 8007868:	b90b      	cbnz	r3, 800786e <__swbuf_r+0x12>
 800786a:	f7ff f9eb 	bl	8006c44 <__sinit>
 800786e:	4b21      	ldr	r3, [pc, #132]	; (80078f4 <__swbuf_r+0x98>)
 8007870:	429c      	cmp	r4, r3
 8007872:	d12a      	bne.n	80078ca <__swbuf_r+0x6e>
 8007874:	686c      	ldr	r4, [r5, #4]
 8007876:	69a3      	ldr	r3, [r4, #24]
 8007878:	60a3      	str	r3, [r4, #8]
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	071a      	lsls	r2, r3, #28
 800787e:	d52e      	bpl.n	80078de <__swbuf_r+0x82>
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	b363      	cbz	r3, 80078de <__swbuf_r+0x82>
 8007884:	6923      	ldr	r3, [r4, #16]
 8007886:	6820      	ldr	r0, [r4, #0]
 8007888:	1ac0      	subs	r0, r0, r3
 800788a:	6963      	ldr	r3, [r4, #20]
 800788c:	b2f6      	uxtb	r6, r6
 800788e:	4283      	cmp	r3, r0
 8007890:	4637      	mov	r7, r6
 8007892:	dc04      	bgt.n	800789e <__swbuf_r+0x42>
 8007894:	4621      	mov	r1, r4
 8007896:	4628      	mov	r0, r5
 8007898:	f7ff f96a 	bl	8006b70 <_fflush_r>
 800789c:	bb28      	cbnz	r0, 80078ea <__swbuf_r+0x8e>
 800789e:	68a3      	ldr	r3, [r4, #8]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	60a3      	str	r3, [r4, #8]
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	6022      	str	r2, [r4, #0]
 80078aa:	701e      	strb	r6, [r3, #0]
 80078ac:	6963      	ldr	r3, [r4, #20]
 80078ae:	3001      	adds	r0, #1
 80078b0:	4283      	cmp	r3, r0
 80078b2:	d004      	beq.n	80078be <__swbuf_r+0x62>
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	07db      	lsls	r3, r3, #31
 80078b8:	d519      	bpl.n	80078ee <__swbuf_r+0x92>
 80078ba:	2e0a      	cmp	r6, #10
 80078bc:	d117      	bne.n	80078ee <__swbuf_r+0x92>
 80078be:	4621      	mov	r1, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	f7ff f955 	bl	8006b70 <_fflush_r>
 80078c6:	b190      	cbz	r0, 80078ee <__swbuf_r+0x92>
 80078c8:	e00f      	b.n	80078ea <__swbuf_r+0x8e>
 80078ca:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <__swbuf_r+0x9c>)
 80078cc:	429c      	cmp	r4, r3
 80078ce:	d101      	bne.n	80078d4 <__swbuf_r+0x78>
 80078d0:	68ac      	ldr	r4, [r5, #8]
 80078d2:	e7d0      	b.n	8007876 <__swbuf_r+0x1a>
 80078d4:	4b09      	ldr	r3, [pc, #36]	; (80078fc <__swbuf_r+0xa0>)
 80078d6:	429c      	cmp	r4, r3
 80078d8:	bf08      	it	eq
 80078da:	68ec      	ldreq	r4, [r5, #12]
 80078dc:	e7cb      	b.n	8007876 <__swbuf_r+0x1a>
 80078de:	4621      	mov	r1, r4
 80078e0:	4628      	mov	r0, r5
 80078e2:	f000 f81f 	bl	8007924 <__swsetup_r>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d0cc      	beq.n	8007884 <__swbuf_r+0x28>
 80078ea:	f04f 37ff 	mov.w	r7, #4294967295
 80078ee:	4638      	mov	r0, r7
 80078f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078f2:	bf00      	nop
 80078f4:	08007c84 	.word	0x08007c84
 80078f8:	08007ca4 	.word	0x08007ca4
 80078fc:	08007c64 	.word	0x08007c64

08007900 <_write_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4c07      	ldr	r4, [pc, #28]	; (8007920 <_write_r+0x20>)
 8007904:	4605      	mov	r5, r0
 8007906:	4608      	mov	r0, r1
 8007908:	4611      	mov	r1, r2
 800790a:	2200      	movs	r2, #0
 800790c:	6022      	str	r2, [r4, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	f7f9 fba8 	bl	8001064 <_write>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_write_r+0x1e>
 8007918:	6823      	ldr	r3, [r4, #0]
 800791a:	b103      	cbz	r3, 800791e <_write_r+0x1e>
 800791c:	602b      	str	r3, [r5, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	20004338 	.word	0x20004338

08007924 <__swsetup_r>:
 8007924:	4b32      	ldr	r3, [pc, #200]	; (80079f0 <__swsetup_r+0xcc>)
 8007926:	b570      	push	{r4, r5, r6, lr}
 8007928:	681d      	ldr	r5, [r3, #0]
 800792a:	4606      	mov	r6, r0
 800792c:	460c      	mov	r4, r1
 800792e:	b125      	cbz	r5, 800793a <__swsetup_r+0x16>
 8007930:	69ab      	ldr	r3, [r5, #24]
 8007932:	b913      	cbnz	r3, 800793a <__swsetup_r+0x16>
 8007934:	4628      	mov	r0, r5
 8007936:	f7ff f985 	bl	8006c44 <__sinit>
 800793a:	4b2e      	ldr	r3, [pc, #184]	; (80079f4 <__swsetup_r+0xd0>)
 800793c:	429c      	cmp	r4, r3
 800793e:	d10f      	bne.n	8007960 <__swsetup_r+0x3c>
 8007940:	686c      	ldr	r4, [r5, #4]
 8007942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007946:	b29a      	uxth	r2, r3
 8007948:	0715      	lsls	r5, r2, #28
 800794a:	d42c      	bmi.n	80079a6 <__swsetup_r+0x82>
 800794c:	06d0      	lsls	r0, r2, #27
 800794e:	d411      	bmi.n	8007974 <__swsetup_r+0x50>
 8007950:	2209      	movs	r2, #9
 8007952:	6032      	str	r2, [r6, #0]
 8007954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007958:	81a3      	strh	r3, [r4, #12]
 800795a:	f04f 30ff 	mov.w	r0, #4294967295
 800795e:	e03e      	b.n	80079de <__swsetup_r+0xba>
 8007960:	4b25      	ldr	r3, [pc, #148]	; (80079f8 <__swsetup_r+0xd4>)
 8007962:	429c      	cmp	r4, r3
 8007964:	d101      	bne.n	800796a <__swsetup_r+0x46>
 8007966:	68ac      	ldr	r4, [r5, #8]
 8007968:	e7eb      	b.n	8007942 <__swsetup_r+0x1e>
 800796a:	4b24      	ldr	r3, [pc, #144]	; (80079fc <__swsetup_r+0xd8>)
 800796c:	429c      	cmp	r4, r3
 800796e:	bf08      	it	eq
 8007970:	68ec      	ldreq	r4, [r5, #12]
 8007972:	e7e6      	b.n	8007942 <__swsetup_r+0x1e>
 8007974:	0751      	lsls	r1, r2, #29
 8007976:	d512      	bpl.n	800799e <__swsetup_r+0x7a>
 8007978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800797a:	b141      	cbz	r1, 800798e <__swsetup_r+0x6a>
 800797c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007980:	4299      	cmp	r1, r3
 8007982:	d002      	beq.n	800798a <__swsetup_r+0x66>
 8007984:	4630      	mov	r0, r6
 8007986:	f7ff fa53 	bl	8006e30 <_free_r>
 800798a:	2300      	movs	r3, #0
 800798c:	6363      	str	r3, [r4, #52]	; 0x34
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	2300      	movs	r3, #0
 8007998:	6063      	str	r3, [r4, #4]
 800799a:	6923      	ldr	r3, [r4, #16]
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	f043 0308 	orr.w	r3, r3, #8
 80079a4:	81a3      	strh	r3, [r4, #12]
 80079a6:	6923      	ldr	r3, [r4, #16]
 80079a8:	b94b      	cbnz	r3, 80079be <__swsetup_r+0x9a>
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079b4:	d003      	beq.n	80079be <__swsetup_r+0x9a>
 80079b6:	4621      	mov	r1, r4
 80079b8:	4630      	mov	r0, r6
 80079ba:	f7ff f9f1 	bl	8006da0 <__smakebuf_r>
 80079be:	89a2      	ldrh	r2, [r4, #12]
 80079c0:	f012 0301 	ands.w	r3, r2, #1
 80079c4:	d00c      	beq.n	80079e0 <__swsetup_r+0xbc>
 80079c6:	2300      	movs	r3, #0
 80079c8:	60a3      	str	r3, [r4, #8]
 80079ca:	6963      	ldr	r3, [r4, #20]
 80079cc:	425b      	negs	r3, r3
 80079ce:	61a3      	str	r3, [r4, #24]
 80079d0:	6923      	ldr	r3, [r4, #16]
 80079d2:	b953      	cbnz	r3, 80079ea <__swsetup_r+0xc6>
 80079d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80079dc:	d1ba      	bne.n	8007954 <__swsetup_r+0x30>
 80079de:	bd70      	pop	{r4, r5, r6, pc}
 80079e0:	0792      	lsls	r2, r2, #30
 80079e2:	bf58      	it	pl
 80079e4:	6963      	ldrpl	r3, [r4, #20]
 80079e6:	60a3      	str	r3, [r4, #8]
 80079e8:	e7f2      	b.n	80079d0 <__swsetup_r+0xac>
 80079ea:	2000      	movs	r0, #0
 80079ec:	e7f7      	b.n	80079de <__swsetup_r+0xba>
 80079ee:	bf00      	nop
 80079f0:	20000028 	.word	0x20000028
 80079f4:	08007c84 	.word	0x08007c84
 80079f8:	08007ca4 	.word	0x08007ca4
 80079fc:	08007c64 	.word	0x08007c64

08007a00 <_close_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4c06      	ldr	r4, [pc, #24]	; (8007a1c <_close_r+0x1c>)
 8007a04:	2300      	movs	r3, #0
 8007a06:	4605      	mov	r5, r0
 8007a08:	4608      	mov	r0, r1
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	f7f9 fb56 	bl	80010bc <_close>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d102      	bne.n	8007a1a <_close_r+0x1a>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	b103      	cbz	r3, 8007a1a <_close_r+0x1a>
 8007a18:	602b      	str	r3, [r5, #0]
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	20004338 	.word	0x20004338

08007a20 <_fstat_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4c07      	ldr	r4, [pc, #28]	; (8007a40 <_fstat_r+0x20>)
 8007a24:	2300      	movs	r3, #0
 8007a26:	4605      	mov	r5, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	f7f9 fb95 	bl	800115c <_fstat>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	d102      	bne.n	8007a3c <_fstat_r+0x1c>
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	b103      	cbz	r3, 8007a3c <_fstat_r+0x1c>
 8007a3a:	602b      	str	r3, [r5, #0]
 8007a3c:	bd38      	pop	{r3, r4, r5, pc}
 8007a3e:	bf00      	nop
 8007a40:	20004338 	.word	0x20004338

08007a44 <_isatty_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4c06      	ldr	r4, [pc, #24]	; (8007a60 <_isatty_r+0x1c>)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4605      	mov	r5, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	6023      	str	r3, [r4, #0]
 8007a50:	f7f9 faf2 	bl	8001038 <_isatty>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	d102      	bne.n	8007a5e <_isatty_r+0x1a>
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	b103      	cbz	r3, 8007a5e <_isatty_r+0x1a>
 8007a5c:	602b      	str	r3, [r5, #0]
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	20004338 	.word	0x20004338

08007a64 <_lseek_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	4c07      	ldr	r4, [pc, #28]	; (8007a84 <_lseek_r+0x20>)
 8007a68:	4605      	mov	r5, r0
 8007a6a:	4608      	mov	r0, r1
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	2200      	movs	r2, #0
 8007a70:	6022      	str	r2, [r4, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	f7f9 fb39 	bl	80010ea <_lseek>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d102      	bne.n	8007a82 <_lseek_r+0x1e>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	b103      	cbz	r3, 8007a82 <_lseek_r+0x1e>
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	20004338 	.word	0x20004338

08007a88 <memmove>:
 8007a88:	4288      	cmp	r0, r1
 8007a8a:	b510      	push	{r4, lr}
 8007a8c:	eb01 0302 	add.w	r3, r1, r2
 8007a90:	d807      	bhi.n	8007aa2 <memmove+0x1a>
 8007a92:	1e42      	subs	r2, r0, #1
 8007a94:	4299      	cmp	r1, r3
 8007a96:	d00a      	beq.n	8007aae <memmove+0x26>
 8007a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a9c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007aa0:	e7f8      	b.n	8007a94 <memmove+0xc>
 8007aa2:	4283      	cmp	r3, r0
 8007aa4:	d9f5      	bls.n	8007a92 <memmove+0xa>
 8007aa6:	1881      	adds	r1, r0, r2
 8007aa8:	1ad2      	subs	r2, r2, r3
 8007aaa:	42d3      	cmn	r3, r2
 8007aac:	d100      	bne.n	8007ab0 <memmove+0x28>
 8007aae:	bd10      	pop	{r4, pc}
 8007ab0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ab4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007ab8:	e7f7      	b.n	8007aaa <memmove+0x22>

08007aba <__malloc_lock>:
 8007aba:	4770      	bx	lr

08007abc <__malloc_unlock>:
 8007abc:	4770      	bx	lr

08007abe <_realloc_r>:
 8007abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac0:	4607      	mov	r7, r0
 8007ac2:	4614      	mov	r4, r2
 8007ac4:	460e      	mov	r6, r1
 8007ac6:	b921      	cbnz	r1, 8007ad2 <_realloc_r+0x14>
 8007ac8:	4611      	mov	r1, r2
 8007aca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ace:	f7ff b9fd 	b.w	8006ecc <_malloc_r>
 8007ad2:	b922      	cbnz	r2, 8007ade <_realloc_r+0x20>
 8007ad4:	f7ff f9ac 	bl	8006e30 <_free_r>
 8007ad8:	4625      	mov	r5, r4
 8007ada:	4628      	mov	r0, r5
 8007adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ade:	f000 f827 	bl	8007b30 <_malloc_usable_size_r>
 8007ae2:	42a0      	cmp	r0, r4
 8007ae4:	d20f      	bcs.n	8007b06 <_realloc_r+0x48>
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f7ff f9ef 	bl	8006ecc <_malloc_r>
 8007aee:	4605      	mov	r5, r0
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d0f2      	beq.n	8007ada <_realloc_r+0x1c>
 8007af4:	4631      	mov	r1, r6
 8007af6:	4622      	mov	r2, r4
 8007af8:	f7fe feba 	bl	8006870 <memcpy>
 8007afc:	4631      	mov	r1, r6
 8007afe:	4638      	mov	r0, r7
 8007b00:	f7ff f996 	bl	8006e30 <_free_r>
 8007b04:	e7e9      	b.n	8007ada <_realloc_r+0x1c>
 8007b06:	4635      	mov	r5, r6
 8007b08:	e7e7      	b.n	8007ada <_realloc_r+0x1c>
	...

08007b0c <_read_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4c07      	ldr	r4, [pc, #28]	; (8007b2c <_read_r+0x20>)
 8007b10:	4605      	mov	r5, r0
 8007b12:	4608      	mov	r0, r1
 8007b14:	4611      	mov	r1, r2
 8007b16:	2200      	movs	r2, #0
 8007b18:	6022      	str	r2, [r4, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f7f9 faf6 	bl	800110c <_read>
 8007b20:	1c43      	adds	r3, r0, #1
 8007b22:	d102      	bne.n	8007b2a <_read_r+0x1e>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	b103      	cbz	r3, 8007b2a <_read_r+0x1e>
 8007b28:	602b      	str	r3, [r5, #0]
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
 8007b2c:	20004338 	.word	0x20004338

08007b30 <_malloc_usable_size_r>:
 8007b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b34:	1f18      	subs	r0, r3, #4
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	bfbc      	itt	lt
 8007b3a:	580b      	ldrlt	r3, [r1, r0]
 8007b3c:	18c0      	addlt	r0, r0, r3
 8007b3e:	4770      	bx	lr

08007b40 <_sbrk>:
 8007b40:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <_sbrk+0x14>)
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	4602      	mov	r2, r0
 8007b46:	b909      	cbnz	r1, 8007b4c <_sbrk+0xc>
 8007b48:	4903      	ldr	r1, [pc, #12]	; (8007b58 <_sbrk+0x18>)
 8007b4a:	6019      	str	r1, [r3, #0]
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	4402      	add	r2, r0
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	4770      	bx	lr
 8007b54:	20004068 	.word	0x20004068
 8007b58:	20004340 	.word	0x20004340

08007b5c <_init>:
 8007b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5e:	bf00      	nop
 8007b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b62:	bc08      	pop	{r3}
 8007b64:	469e      	mov	lr, r3
 8007b66:	4770      	bx	lr

08007b68 <_fini>:
 8007b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6a:	bf00      	nop
 8007b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6e:	bc08      	pop	{r3}
 8007b70:	469e      	mov	lr, r3
 8007b72:	4770      	bx	lr
