
PM2.5 module RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ec4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800a064  0800a064  0001a064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2b8  0800a2b8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2b8  0800a2b8  0001a2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2c0  0800a2c0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2c0  0800a2c0  0001a2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2c4  0800a2c4  0001a2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a2c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042c0  20000090  0800a358  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004350  0800a358  00024350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d415  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b25  00000000  00000000  0003d4d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001880  00000000  00000000  00041000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016e8  00000000  00000000  00042880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a7b1  00000000  00000000  00043f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013a5d  00000000  00000000  0005e719  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f108  00000000  00000000  00072176  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011127e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007194  00000000  00000000  001112fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a04c 	.word	0x0800a04c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800a04c 	.word	0x0800a04c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__gedf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpdf2+0x4>
 800060e:	bf00      	nop

08000610 <__ledf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpdf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpdf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000628:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800062c:	bf18      	it	ne
 800062e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000632:	d01b      	beq.n	800066c <__cmpdf2+0x54>
 8000634:	b001      	add	sp, #4
 8000636:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800063a:	bf0c      	ite	eq
 800063c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000640:	ea91 0f03 	teqne	r1, r3
 8000644:	bf02      	ittt	eq
 8000646:	ea90 0f02 	teqeq	r0, r2
 800064a:	2000      	moveq	r0, #0
 800064c:	4770      	bxeq	lr
 800064e:	f110 0f00 	cmn.w	r0, #0
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf58      	it	pl
 8000658:	4299      	cmppl	r1, r3
 800065a:	bf08      	it	eq
 800065c:	4290      	cmpeq	r0, r2
 800065e:	bf2c      	ite	cs
 8000660:	17d8      	asrcs	r0, r3, #31
 8000662:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000666:	f040 0001 	orr.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d102      	bne.n	800067c <__cmpdf2+0x64>
 8000676:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800067a:	d107      	bne.n	800068c <__cmpdf2+0x74>
 800067c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000684:	d1d6      	bne.n	8000634 <__cmpdf2+0x1c>
 8000686:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800068a:	d0d3      	beq.n	8000634 <__cmpdf2+0x1c>
 800068c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__aeabi_cdrcmple>:
 8000694:	4684      	mov	ip, r0
 8000696:	4610      	mov	r0, r2
 8000698:	4662      	mov	r2, ip
 800069a:	468c      	mov	ip, r1
 800069c:	4619      	mov	r1, r3
 800069e:	4663      	mov	r3, ip
 80006a0:	e000      	b.n	80006a4 <__aeabi_cdcmpeq>
 80006a2:	bf00      	nop

080006a4 <__aeabi_cdcmpeq>:
 80006a4:	b501      	push	{r0, lr}
 80006a6:	f7ff ffb7 	bl	8000618 <__cmpdf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd01      	pop	{r0, pc}

080006b4 <__aeabi_dcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cdcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_dcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cdcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_dcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cdcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_dcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffce 	bl	8000694 <__aeabi_cdrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_dcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc4 	bl	8000694 <__aeabi_cdrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b972 	b.w	8000a14 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f806 	bl	8000748 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__udivmoddi4>:
 8000748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800074c:	9e08      	ldr	r6, [sp, #32]
 800074e:	4604      	mov	r4, r0
 8000750:	4688      	mov	r8, r1
 8000752:	2b00      	cmp	r3, #0
 8000754:	d14b      	bne.n	80007ee <__udivmoddi4+0xa6>
 8000756:	428a      	cmp	r2, r1
 8000758:	4615      	mov	r5, r2
 800075a:	d967      	bls.n	800082c <__udivmoddi4+0xe4>
 800075c:	fab2 f282 	clz	r2, r2
 8000760:	b14a      	cbz	r2, 8000776 <__udivmoddi4+0x2e>
 8000762:	f1c2 0720 	rsb	r7, r2, #32
 8000766:	fa01 f302 	lsl.w	r3, r1, r2
 800076a:	fa20 f707 	lsr.w	r7, r0, r7
 800076e:	4095      	lsls	r5, r2
 8000770:	ea47 0803 	orr.w	r8, r7, r3
 8000774:	4094      	lsls	r4, r2
 8000776:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800077a:	0c23      	lsrs	r3, r4, #16
 800077c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000780:	fa1f fc85 	uxth.w	ip, r5
 8000784:	fb0e 8817 	mls	r8, lr, r7, r8
 8000788:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800078c:	fb07 f10c 	mul.w	r1, r7, ip
 8000790:	4299      	cmp	r1, r3
 8000792:	d909      	bls.n	80007a8 <__udivmoddi4+0x60>
 8000794:	18eb      	adds	r3, r5, r3
 8000796:	f107 30ff 	add.w	r0, r7, #4294967295
 800079a:	f080 811b 	bcs.w	80009d4 <__udivmoddi4+0x28c>
 800079e:	4299      	cmp	r1, r3
 80007a0:	f240 8118 	bls.w	80009d4 <__udivmoddi4+0x28c>
 80007a4:	3f02      	subs	r7, #2
 80007a6:	442b      	add	r3, r5
 80007a8:	1a5b      	subs	r3, r3, r1
 80007aa:	b2a4      	uxth	r4, r4
 80007ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80007b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80007b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80007bc:	45a4      	cmp	ip, r4
 80007be:	d909      	bls.n	80007d4 <__udivmoddi4+0x8c>
 80007c0:	192c      	adds	r4, r5, r4
 80007c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007c6:	f080 8107 	bcs.w	80009d8 <__udivmoddi4+0x290>
 80007ca:	45a4      	cmp	ip, r4
 80007cc:	f240 8104 	bls.w	80009d8 <__udivmoddi4+0x290>
 80007d0:	3802      	subs	r0, #2
 80007d2:	442c      	add	r4, r5
 80007d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80007d8:	eba4 040c 	sub.w	r4, r4, ip
 80007dc:	2700      	movs	r7, #0
 80007de:	b11e      	cbz	r6, 80007e8 <__udivmoddi4+0xa0>
 80007e0:	40d4      	lsrs	r4, r2
 80007e2:	2300      	movs	r3, #0
 80007e4:	e9c6 4300 	strd	r4, r3, [r6]
 80007e8:	4639      	mov	r1, r7
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d909      	bls.n	8000806 <__udivmoddi4+0xbe>
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	f000 80eb 	beq.w	80009ce <__udivmoddi4+0x286>
 80007f8:	2700      	movs	r7, #0
 80007fa:	e9c6 0100 	strd	r0, r1, [r6]
 80007fe:	4638      	mov	r0, r7
 8000800:	4639      	mov	r1, r7
 8000802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000806:	fab3 f783 	clz	r7, r3
 800080a:	2f00      	cmp	r7, #0
 800080c:	d147      	bne.n	800089e <__udivmoddi4+0x156>
 800080e:	428b      	cmp	r3, r1
 8000810:	d302      	bcc.n	8000818 <__udivmoddi4+0xd0>
 8000812:	4282      	cmp	r2, r0
 8000814:	f200 80fa 	bhi.w	8000a0c <__udivmoddi4+0x2c4>
 8000818:	1a84      	subs	r4, r0, r2
 800081a:	eb61 0303 	sbc.w	r3, r1, r3
 800081e:	2001      	movs	r0, #1
 8000820:	4698      	mov	r8, r3
 8000822:	2e00      	cmp	r6, #0
 8000824:	d0e0      	beq.n	80007e8 <__udivmoddi4+0xa0>
 8000826:	e9c6 4800 	strd	r4, r8, [r6]
 800082a:	e7dd      	b.n	80007e8 <__udivmoddi4+0xa0>
 800082c:	b902      	cbnz	r2, 8000830 <__udivmoddi4+0xe8>
 800082e:	deff      	udf	#255	; 0xff
 8000830:	fab2 f282 	clz	r2, r2
 8000834:	2a00      	cmp	r2, #0
 8000836:	f040 808f 	bne.w	8000958 <__udivmoddi4+0x210>
 800083a:	1b49      	subs	r1, r1, r5
 800083c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000840:	fa1f f885 	uxth.w	r8, r5
 8000844:	2701      	movs	r7, #1
 8000846:	fbb1 fcfe 	udiv	ip, r1, lr
 800084a:	0c23      	lsrs	r3, r4, #16
 800084c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000850:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000854:	fb08 f10c 	mul.w	r1, r8, ip
 8000858:	4299      	cmp	r1, r3
 800085a:	d907      	bls.n	800086c <__udivmoddi4+0x124>
 800085c:	18eb      	adds	r3, r5, r3
 800085e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000862:	d202      	bcs.n	800086a <__udivmoddi4+0x122>
 8000864:	4299      	cmp	r1, r3
 8000866:	f200 80cd 	bhi.w	8000a04 <__udivmoddi4+0x2bc>
 800086a:	4684      	mov	ip, r0
 800086c:	1a59      	subs	r1, r3, r1
 800086e:	b2a3      	uxth	r3, r4
 8000870:	fbb1 f0fe 	udiv	r0, r1, lr
 8000874:	fb0e 1410 	mls	r4, lr, r0, r1
 8000878:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800087c:	fb08 f800 	mul.w	r8, r8, r0
 8000880:	45a0      	cmp	r8, r4
 8000882:	d907      	bls.n	8000894 <__udivmoddi4+0x14c>
 8000884:	192c      	adds	r4, r5, r4
 8000886:	f100 33ff 	add.w	r3, r0, #4294967295
 800088a:	d202      	bcs.n	8000892 <__udivmoddi4+0x14a>
 800088c:	45a0      	cmp	r8, r4
 800088e:	f200 80b6 	bhi.w	80009fe <__udivmoddi4+0x2b6>
 8000892:	4618      	mov	r0, r3
 8000894:	eba4 0408 	sub.w	r4, r4, r8
 8000898:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800089c:	e79f      	b.n	80007de <__udivmoddi4+0x96>
 800089e:	f1c7 0c20 	rsb	ip, r7, #32
 80008a2:	40bb      	lsls	r3, r7
 80008a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80008a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80008ac:	fa01 f407 	lsl.w	r4, r1, r7
 80008b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80008b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80008b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80008bc:	4325      	orrs	r5, r4
 80008be:	fbb3 f9f8 	udiv	r9, r3, r8
 80008c2:	0c2c      	lsrs	r4, r5, #16
 80008c4:	fb08 3319 	mls	r3, r8, r9, r3
 80008c8:	fa1f fa8e 	uxth.w	sl, lr
 80008cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80008d0:	fb09 f40a 	mul.w	r4, r9, sl
 80008d4:	429c      	cmp	r4, r3
 80008d6:	fa02 f207 	lsl.w	r2, r2, r7
 80008da:	fa00 f107 	lsl.w	r1, r0, r7
 80008de:	d90b      	bls.n	80008f8 <__udivmoddi4+0x1b0>
 80008e0:	eb1e 0303 	adds.w	r3, lr, r3
 80008e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80008e8:	f080 8087 	bcs.w	80009fa <__udivmoddi4+0x2b2>
 80008ec:	429c      	cmp	r4, r3
 80008ee:	f240 8084 	bls.w	80009fa <__udivmoddi4+0x2b2>
 80008f2:	f1a9 0902 	sub.w	r9, r9, #2
 80008f6:	4473      	add	r3, lr
 80008f8:	1b1b      	subs	r3, r3, r4
 80008fa:	b2ad      	uxth	r5, r5
 80008fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000900:	fb08 3310 	mls	r3, r8, r0, r3
 8000904:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000908:	fb00 fa0a 	mul.w	sl, r0, sl
 800090c:	45a2      	cmp	sl, r4
 800090e:	d908      	bls.n	8000922 <__udivmoddi4+0x1da>
 8000910:	eb1e 0404 	adds.w	r4, lr, r4
 8000914:	f100 33ff 	add.w	r3, r0, #4294967295
 8000918:	d26b      	bcs.n	80009f2 <__udivmoddi4+0x2aa>
 800091a:	45a2      	cmp	sl, r4
 800091c:	d969      	bls.n	80009f2 <__udivmoddi4+0x2aa>
 800091e:	3802      	subs	r0, #2
 8000920:	4474      	add	r4, lr
 8000922:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000926:	fba0 8902 	umull	r8, r9, r0, r2
 800092a:	eba4 040a 	sub.w	r4, r4, sl
 800092e:	454c      	cmp	r4, r9
 8000930:	46c2      	mov	sl, r8
 8000932:	464b      	mov	r3, r9
 8000934:	d354      	bcc.n	80009e0 <__udivmoddi4+0x298>
 8000936:	d051      	beq.n	80009dc <__udivmoddi4+0x294>
 8000938:	2e00      	cmp	r6, #0
 800093a:	d069      	beq.n	8000a10 <__udivmoddi4+0x2c8>
 800093c:	ebb1 050a 	subs.w	r5, r1, sl
 8000940:	eb64 0403 	sbc.w	r4, r4, r3
 8000944:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000948:	40fd      	lsrs	r5, r7
 800094a:	40fc      	lsrs	r4, r7
 800094c:	ea4c 0505 	orr.w	r5, ip, r5
 8000950:	e9c6 5400 	strd	r5, r4, [r6]
 8000954:	2700      	movs	r7, #0
 8000956:	e747      	b.n	80007e8 <__udivmoddi4+0xa0>
 8000958:	f1c2 0320 	rsb	r3, r2, #32
 800095c:	fa20 f703 	lsr.w	r7, r0, r3
 8000960:	4095      	lsls	r5, r2
 8000962:	fa01 f002 	lsl.w	r0, r1, r2
 8000966:	fa21 f303 	lsr.w	r3, r1, r3
 800096a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800096e:	4338      	orrs	r0, r7
 8000970:	0c01      	lsrs	r1, r0, #16
 8000972:	fbb3 f7fe 	udiv	r7, r3, lr
 8000976:	fa1f f885 	uxth.w	r8, r5
 800097a:	fb0e 3317 	mls	r3, lr, r7, r3
 800097e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000982:	fb07 f308 	mul.w	r3, r7, r8
 8000986:	428b      	cmp	r3, r1
 8000988:	fa04 f402 	lsl.w	r4, r4, r2
 800098c:	d907      	bls.n	800099e <__udivmoddi4+0x256>
 800098e:	1869      	adds	r1, r5, r1
 8000990:	f107 3cff 	add.w	ip, r7, #4294967295
 8000994:	d22f      	bcs.n	80009f6 <__udivmoddi4+0x2ae>
 8000996:	428b      	cmp	r3, r1
 8000998:	d92d      	bls.n	80009f6 <__udivmoddi4+0x2ae>
 800099a:	3f02      	subs	r7, #2
 800099c:	4429      	add	r1, r5
 800099e:	1acb      	subs	r3, r1, r3
 80009a0:	b281      	uxth	r1, r0
 80009a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80009a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80009aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009ae:	fb00 f308 	mul.w	r3, r0, r8
 80009b2:	428b      	cmp	r3, r1
 80009b4:	d907      	bls.n	80009c6 <__udivmoddi4+0x27e>
 80009b6:	1869      	adds	r1, r5, r1
 80009b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80009bc:	d217      	bcs.n	80009ee <__udivmoddi4+0x2a6>
 80009be:	428b      	cmp	r3, r1
 80009c0:	d915      	bls.n	80009ee <__udivmoddi4+0x2a6>
 80009c2:	3802      	subs	r0, #2
 80009c4:	4429      	add	r1, r5
 80009c6:	1ac9      	subs	r1, r1, r3
 80009c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80009cc:	e73b      	b.n	8000846 <__udivmoddi4+0xfe>
 80009ce:	4637      	mov	r7, r6
 80009d0:	4630      	mov	r0, r6
 80009d2:	e709      	b.n	80007e8 <__udivmoddi4+0xa0>
 80009d4:	4607      	mov	r7, r0
 80009d6:	e6e7      	b.n	80007a8 <__udivmoddi4+0x60>
 80009d8:	4618      	mov	r0, r3
 80009da:	e6fb      	b.n	80007d4 <__udivmoddi4+0x8c>
 80009dc:	4541      	cmp	r1, r8
 80009de:	d2ab      	bcs.n	8000938 <__udivmoddi4+0x1f0>
 80009e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80009e4:	eb69 020e 	sbc.w	r2, r9, lr
 80009e8:	3801      	subs	r0, #1
 80009ea:	4613      	mov	r3, r2
 80009ec:	e7a4      	b.n	8000938 <__udivmoddi4+0x1f0>
 80009ee:	4660      	mov	r0, ip
 80009f0:	e7e9      	b.n	80009c6 <__udivmoddi4+0x27e>
 80009f2:	4618      	mov	r0, r3
 80009f4:	e795      	b.n	8000922 <__udivmoddi4+0x1da>
 80009f6:	4667      	mov	r7, ip
 80009f8:	e7d1      	b.n	800099e <__udivmoddi4+0x256>
 80009fa:	4681      	mov	r9, r0
 80009fc:	e77c      	b.n	80008f8 <__udivmoddi4+0x1b0>
 80009fe:	3802      	subs	r0, #2
 8000a00:	442c      	add	r4, r5
 8000a02:	e747      	b.n	8000894 <__udivmoddi4+0x14c>
 8000a04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a08:	442b      	add	r3, r5
 8000a0a:	e72f      	b.n	800086c <__udivmoddi4+0x124>
 8000a0c:	4638      	mov	r0, r7
 8000a0e:	e708      	b.n	8000822 <__udivmoddi4+0xda>
 8000a10:	4637      	mov	r7, r6
 8000a12:	e6e9      	b.n	80007e8 <__udivmoddi4+0xa0>

08000a14 <__aeabi_idiv0>:
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <PMchecksum>:
#include "PMmodule.h"
/*
 * @brief	return 1 if checksum error. return 0 if correct.
 */
uint8_t PMchecksum(uint8_t *buf,uint8_t buflen)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]
	//uint8_t buflen = strlen(buf);
	uint8_t rxerror = 1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	733b      	strb	r3, [r7, #12]
	uint16_t checksum = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	for (i=0;i<(buflen-2);i++){
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	737b      	strb	r3, [r7, #13]
 8000a30:	e00a      	b.n	8000a48 <PMchecksum+0x30>
		checksum = checksum+buf[i];
 8000a32:	7b7b      	ldrb	r3, [r7, #13]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	4413      	add	r3, r2
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	89fb      	ldrh	r3, [r7, #14]
 8000a3e:	4413      	add	r3, r2
 8000a40:	81fb      	strh	r3, [r7, #14]
	for (i=0;i<(buflen-2);i++){
 8000a42:	7b7b      	ldrb	r3, [r7, #13]
 8000a44:	3301      	adds	r3, #1
 8000a46:	737b      	strb	r3, [r7, #13]
 8000a48:	7b7a      	ldrb	r2, [r7, #13]
 8000a4a:	78fb      	ldrb	r3, [r7, #3]
 8000a4c:	3b02      	subs	r3, #2
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	dbef      	blt.n	8000a32 <PMchecksum+0x1a>
	}
	if (buflen ==31){
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	2b1f      	cmp	r3, #31
 8000a56:	d102      	bne.n	8000a5e <PMchecksum+0x46>
		checksum = checksum+0x42; //uncomment if buf does not add 0x42
 8000a58:	89fb      	ldrh	r3, [r7, #14]
 8000a5a:	3342      	adds	r3, #66	; 0x42
 8000a5c:	81fb      	strh	r3, [r7, #14]
	}
	if (checksum==((buf[buflen-2]<<8)+buf[buflen-1]))
 8000a5e:	89fa      	ldrh	r2, [r7, #14]
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	3b02      	subs	r3, #2
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	440b      	add	r3, r1
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	78f9      	ldrb	r1, [r7, #3]
 8000a6e:	3901      	subs	r1, #1
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	4401      	add	r1, r0
 8000a74:	7809      	ldrb	r1, [r1, #0]
 8000a76:	440b      	add	r3, r1
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d103      	bne.n	8000a84 <PMchecksum+0x6c>
	{
		rxerror = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	733b      	strb	r3, [r7, #12]
		return rxerror;
 8000a80:	7b3b      	ldrb	r3, [r7, #12]
 8000a82:	e000      	b.n	8000a86 <PMchecksum+0x6e>
	}
	return rxerror;
 8000a84:	7b3b      	ldrb	r3, [r7, #12]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <transmitPM2_5>:
	return PM01Val;
}

//transmit PM Value to PC
uint16_t transmitPM2_5(uint8_t *thebuf)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
	uint16_t PM2_5Val;
    PM2_5Val=((thebuf[6]<<8) + thebuf[7]);//count PM2.5 value of the air detector module
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3306      	adds	r3, #6
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3307      	adds	r3, #7
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	4413      	add	r3, r2
 8000ab0:	81fb      	strh	r3, [r7, #14]
	return PM2_5Val;
 8000ab2:	89fb      	ldrh	r3, [r7, #14]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4a07      	ldr	r2, [pc, #28]	; (8000aec <vApplicationGetIdleTaskMemory+0x2c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <vApplicationGetIdleTaskMemory+0x30>)
 8000ad6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	200000ac 	.word	0x200000ac
 8000af0:	20000100 	.word	0x20000100

08000af4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000af4:	b5b0      	push	{r4, r5, r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000b02:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000b06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000b0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b0e:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b12:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000b14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b16:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	613b      	str	r3, [r7, #16]

	Lcd_mode_select(&lcd);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f80e 	bl	8000b4a <Lcd_mode_select>

	return lcd;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	461d      	mov	r5, r3
 8000b32:	f107 0410 	add.w	r4, r7, #16
 8000b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b3e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bdb0      	pop	{r4, r5, r7, pc}

08000b4a <Lcd_mode_select>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_mode_select(Lcd_HandleTypeDef * lcd)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7d9b      	ldrb	r3, [r3, #22]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10c      	bne.n	8000b74 <Lcd_mode_select+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000b5a:	2133      	movs	r1, #51	; 0x33
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 f861 	bl	8000c24 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000b62:	2132      	movs	r1, #50	; 0x32
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f000 f85d 	bl	8000c24 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000b6a:	2128      	movs	r1, #40	; 0x28
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 f859 	bl	8000c24 <lcd_write_command>
 8000b72:	e003      	b.n	8000b7c <Lcd_mode_select+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000b74:	2138      	movs	r1, #56	; 0x38
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 f854 	bl	8000c24 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 f850 	bl	8000c24 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000b84:	210c      	movs	r1, #12
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 f84c 	bl	8000c24 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000b8c:	2106      	movs	r1, #6
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 f848 	bl	8000c24 <lcd_write_command>

}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	e00a      	b.n	8000bc2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 f862 	bl	8000c80 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	7bfc      	ldrb	r4, [r7, #15]
 8000bc4:	6838      	ldr	r0, [r7, #0]
 8000bc6:	f7ff fb0b 	bl	80001e0 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d3ed      	bcc.n	8000bac <Lcd_string+0x10>
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd90      	pop	{r4, r7, pc}

08000bd8 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	70fb      	strb	r3, [r7, #3]
 8000be4:	4613      	mov	r3, r2
 8000be6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000be8:	78fb      	ldrb	r3, [r7, #3]
 8000bea:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <Lcd_cursor+0x30>)
 8000bec:	5cd2      	ldrb	r2, [r2, r3]
 8000bee:	78bb      	ldrb	r3, [r7, #2]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	3b80      	subs	r3, #128	; 0x80
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f812 	bl	8000c24 <lcd_write_command>
	#endif
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	0800a1fc 	.word	0x0800a1fc

08000c0c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000c14:	2101      	movs	r1, #1
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f804 	bl	8000c24 <lcd_write_command>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6898      	ldr	r0, [r3, #8]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	899b      	ldrh	r3, [r3, #12]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f002 fa72 	bl	8003124 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7d9b      	ldrb	r3, [r3, #22]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d111      	bne.n	8000c6c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	091b      	lsrs	r3, r3, #4
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2204      	movs	r2, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f842 	bl	8000cdc <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2204      	movs	r2, #4
 8000c62:	4619      	mov	r1, r3
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 f839 	bl	8000cdc <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000c6a:	e005      	b.n	8000c78 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	2208      	movs	r2, #8
 8000c70:	4619      	mov	r1, r3
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 f832 	bl	8000cdc <lcd_write>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6898      	ldr	r0, [r3, #8]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	899b      	ldrh	r3, [r3, #12]
 8000c94:	2201      	movs	r2, #1
 8000c96:	4619      	mov	r1, r3
 8000c98:	f002 fa44 	bl	8003124 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7d9b      	ldrb	r3, [r3, #22]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d111      	bne.n	8000cc8 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	091b      	lsrs	r3, r3, #4
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2204      	movs	r2, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f000 f814 	bl	8000cdc <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f80b 	bl	8000cdc <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000cc6:	e005      	b.n	8000cd4 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	2208      	movs	r2, #8
 8000ccc:	4619      	mov	r1, r3
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 f804 	bl	8000cdc <lcd_write>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	70fb      	strb	r3, [r7, #3]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e019      	b.n	8000d26 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	8819      	ldrh	r1, [r3, #0]
 8000d0a:	78fa      	ldrb	r2, [r7, #3]
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	fa42 f303 	asr.w	r3, r2, r3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f002 fa02 	bl	8003124 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	3301      	adds	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	7bfa      	ldrb	r2, [r7, #15]
 8000d28:	78bb      	ldrb	r3, [r7, #2]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3e1      	bcc.n	8000cf2 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6918      	ldr	r0, [r3, #16]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	8a9b      	ldrh	r3, [r3, #20]
 8000d36:	2201      	movs	r2, #1
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f002 f9f3 	bl	8003124 <HAL_GPIO_WritePin>
	DELAY(1);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f001 f9fe 	bl	8002140 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6918      	ldr	r0, [r3, #16]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	8a9b      	ldrh	r3, [r3, #20]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f002 f9e8 	bl	8003124 <HAL_GPIO_WritePin>
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b5b0      	push	{r4, r5, r7, lr}
 8000d5e:	b0bc      	sub	sp, #240	; 0xf0
 8000d60:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d62:	f001 f9ab 	bl	80020bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d66:	f000 f8f7 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6a:	f000 fa95 	bl	8001298 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d6e:	f000 f953 	bl	8001018 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d72:	f000 f9a3 	bl	80010bc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000d76:	f000 fa05 	bl	8001184 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000d7a:	f000 fa2d 	bl	80011d8 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8000d7e:	f000 f9cb 	bl	8001118 <MX_SPI3_Init>
  MX_DMA_Init();
 8000d82:	f000 fa53 	bl	800122c <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000d86:	485d      	ldr	r0, [pc, #372]	; (8000efc <main+0x1a0>)
 8000d88:	f000 fd28 	bl	80017dc <RetargetInit>


  static Lcd_PortType ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
  static Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2140      	movs	r1, #64	; 0x40
 8000d90:	485b      	ldr	r0, [pc, #364]	; (8000f00 <main+0x1a4>)
 8000d92:	f002 f9c7 	bl	8003124 <HAL_GPIO_WritePin>
  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000d96:	4c5b      	ldr	r4, [pc, #364]	; (8000f04 <main+0x1a8>)
 8000d98:	4638      	mov	r0, r7
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	9303      	str	r3, [sp, #12]
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	9302      	str	r3, [sp, #8]
 8000da2:	4b59      	ldr	r3, [pc, #356]	; (8000f08 <main+0x1ac>)
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	4b57      	ldr	r3, [pc, #348]	; (8000f0c <main+0x1b0>)
 8000dae:	4a58      	ldr	r2, [pc, #352]	; (8000f10 <main+0x1b4>)
 8000db0:	4958      	ldr	r1, [pc, #352]	; (8000f14 <main+0x1b8>)
 8000db2:	f7ff fe9f 	bl	8000af4 <Lcd_create>
 8000db6:	4625      	mov	r5, r4
 8000db8:	463c      	mov	r4, r7
 8000dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dc2:	e885 0003 	stmia.w	r5, {r0, r1}
  Lcd_string(&lcd, "Initialising");
 8000dc6:	4954      	ldr	r1, [pc, #336]	; (8000f18 <main+0x1bc>)
 8000dc8:	484e      	ldr	r0, [pc, #312]	; (8000f04 <main+0x1a8>)
 8000dca:	f7ff fee7 	bl	8000b9c <Lcd_string>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of PMvalue */
  osMessageQDef(PMvalue, 1, uint8_t);
 8000dce:	4b53      	ldr	r3, [pc, #332]	; (8000f1c <main+0x1c0>)
 8000dd0:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000dd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  PMvalueHandle = osMessageCreate(osMessageQ(PMvalue), NULL);
 8000dda:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f005 f9c6 	bl	8006172 <osMessageCreate>
 8000de6:	4602      	mov	r2, r0
 8000de8:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <main+0x1c4>)
 8000dea:	601a      	str	r2, [r3, #0]

  /* definition and creation of RTCvalue */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMailQDef(RTCvalue,1,rtc_HandleTypeDef);
 8000dec:	2301      	movs	r3, #1
 8000dee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000df2:	2308      	movs	r3, #8
 8000df4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000df8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RTCvalueHandle = osMailCreate(osMailQ(RTCvalue),NULL);
 8000e00:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f005 fa12 	bl	8006230 <osMailCreate>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	4b45      	ldr	r3, [pc, #276]	; (8000f24 <main+0x1c8>)
 8000e10:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000e12:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <main+0x1cc>)
 8000e14:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8000e18:	461d      	mov	r5, r3
 8000e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f005 f834 	bl	8005e9a <osThreadCreate>
 8000e32:	4602      	mov	r2, r0
 8000e34:	4b3d      	ldr	r3, [pc, #244]	; (8000f2c <main+0x1d0>)
 8000e36:	601a      	str	r2, [r3, #0]

  /* definition and creation of LCDtask */
  osThreadDef(LCDtask, LCDtask1, osPriorityNormal, 0, 512);
 8000e38:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <main+0x1d4>)
 8000e3a:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8000e3e:	461d      	mov	r5, r3
 8000e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDtaskHandle = osThreadCreate(osThread(LCDtask), NULL);
 8000e4c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f005 f821 	bl	8005e9a <osThreadCreate>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <main+0x1d8>)
 8000e5c:	601a      	str	r2, [r3, #0]

  /* definition and creation of PM2_5 */
  osThreadDef(PM2_5, PM2_5_1, osPriorityNormal, 0, 128);
 8000e5e:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <main+0x1dc>)
 8000e60:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8000e64:	461d      	mov	r5, r3
 8000e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PM2_5Handle = osThreadCreate(osThread(PM2_5), NULL);
 8000e72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f005 f80e 	bl	8005e9a <osThreadCreate>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <main+0x1e0>)
 8000e82:	601a      	str	r2, [r3, #0]

  /* definition and creation of RTCread */
  osThreadDef(RTCread, RTC_1, osPriorityNormal, 0, 128);
 8000e84:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <main+0x1e4>)
 8000e86:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000e8a:	461d      	mov	r5, r3
 8000e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RTCreadHandle = osThreadCreate(osThread(RTCread), NULL);
 8000e98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f004 fffb 	bl	8005e9a <osThreadCreate>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <main+0x1e8>)
 8000ea8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /* definition and creation of LEDtask */
  osThreadDef(LEDtask, LEDtask1, osPriorityNormal, 0, 128);
 8000eaa:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <main+0x1ec>)
 8000eac:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000eb0:	461d      	mov	r5, r3
 8000eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDtaskHandle = osThreadCreate(osThread(LEDtask), NULL);
 8000ebe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 ffe8 	bl	8005e9a <osThreadCreate>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <main+0x1f0>)
 8000ece:	601a      	str	r2, [r3, #0]

  osThreadDef(LEDinit, LEDinit1, osPriorityHigh, 0, 128);
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <main+0x1f4>)
 8000ed2:	f107 0418 	add.w	r4, r7, #24
 8000ed6:	461d      	mov	r5, r3
 8000ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000edc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDinitHandle = osThreadCreate(osThread(LEDinit), NULL);
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 ffd5 	bl	8005e9a <osThreadCreate>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <main+0x1f8>)
 8000ef4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ef6:	f004 ffc9 	bl	8005e8c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <main+0x19e>
 8000efc:	200042c4 	.word	0x200042c4
 8000f00:	40020400 	.word	0x40020400
 8000f04:	20000300 	.word	0x20000300
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	20000014 	.word	0x20000014
 8000f14:	20000004 	.word	0x20000004
 8000f18:	0800a064 	.word	0x0800a064
 8000f1c:	0800a074 	.word	0x0800a074
 8000f20:	20004240 	.word	0x20004240
 8000f24:	200040d4 	.word	0x200040d4
 8000f28:	0800a090 	.word	0x0800a090
 8000f2c:	20004070 	.word	0x20004070
 8000f30:	0800a0b4 	.word	0x0800a0b4
 8000f34:	200040dc 	.word	0x200040dc
 8000f38:	0800a0d8 	.word	0x0800a0d8
 8000f3c:	20004190 	.word	0x20004190
 8000f40:	0800a0fc 	.word	0x0800a0fc
 8000f44:	200040d8 	.word	0x200040d8
 8000f48:	0800a120 	.word	0x0800a120
 8000f4c:	20004134 	.word	0x20004134
 8000f50:	0800a144 	.word	0x0800a144
 8000f54:	200041dc 	.word	0x200041dc

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	; 0x50
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2230      	movs	r2, #48	; 0x30
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f007 ff05 	bl	8008d76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <SystemClock_Config+0xb8>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	4a22      	ldr	r2, [pc, #136]	; (8001010 <SystemClock_Config+0xb8>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8c:	4b20      	ldr	r3, [pc, #128]	; (8001010 <SystemClock_Config+0xb8>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <SystemClock_Config+0xbc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <SystemClock_Config+0xbc>)
 8000fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <SystemClock_Config+0xbc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 f865 	bl	800409c <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000fd8:	f000 fbf8 	bl	80017cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fac0 	bl	800457c <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001002:	f000 fbe3 	bl	80017cc <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3750      	adds	r7, #80	; 0x50
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <MX_ADC1_Init+0x98>)
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <MX_ADC1_Init+0x9c>)
 800102e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_ADC1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_ADC1_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001058:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <MX_ADC1_Init+0xa0>)
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001064:	2201      	movs	r2, #1
 8001066:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_ADC1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001072:	2201      	movs	r2, #1
 8001074:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001078:	f001 f884 	bl	8002184 <HAL_ADC_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 fba3 	bl	80017cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800108a:	2301      	movs	r3, #1
 800108c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001098:	f001 f8b8 	bl	800220c <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010a2:	f000 fb93 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20004194 	.word	0x20004194
 80010b4:	40012000 	.word	0x40012000
 80010b8:	0f000001 	.word	0x0f000001

080010bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_I2C1_Init+0x50>)
 80010c2:	4a13      	ldr	r2, [pc, #76]	; (8001110 <MX_I2C1_Init+0x54>)
 80010c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_I2C1_Init+0x50>)
 80010c8:	4a12      	ldr	r2, [pc, #72]	; (8001114 <MX_I2C1_Init+0x58>)
 80010ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_I2C1_Init+0x50>)
 80010da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_I2C1_Init+0x50>)
 80010fa:	f002 f847 	bl	800318c <HAL_I2C_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001104:	f000 fb62 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200040e0 	.word	0x200040e0
 8001110:	40005400 	.word	0x40005400
 8001114:	000186a0 	.word	0x000186a0

08001118 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_SPI3_Init+0x64>)
 800111e:	4a18      	ldr	r2, [pc, #96]	; (8001180 <MX_SPI3_Init+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_SPI3_Init+0x64>)
 8001124:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001128:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_SPI3_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_SPI3_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_SPI3_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_SPI3_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_SPI3_Init+0x64>)
 8001144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001148:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_SPI3_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_SPI3_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_SPI3_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_SPI3_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_SPI3_Init+0x64>)
 8001164:	220a      	movs	r2, #10
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_SPI3_Init+0x64>)
 800116a:	f003 fc05 	bl	8004978 <HAL_SPI_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001174:	f000 fb2a 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20004138 	.word	0x20004138
 8001180:	40003c00 	.word	0x40003c00

08001184 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <MX_USART2_UART_Init+0x50>)
 800118c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011bc:	f003 fe5e 	bl	8004e7c <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011c6:	f000 fb01 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200042c4 	.word	0x200042c4
 80011d4:	40004400 	.word	0x40004400

080011d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USART6_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <MX_USART6_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_USART6_UART_Init+0x4c>)
 80011e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USART6_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USART6_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USART6_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USART6_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USART6_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USART6_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USART6_UART_Init+0x4c>)
 8001210:	f003 fe34 	bl	8004e7c <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f000 fad7 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20004284 	.word	0x20004284
 8001228:	40011400 	.word	0x40011400

0800122c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_DMA_Init+0x68>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a16      	ldr	r2, [pc, #88]	; (8001294 <MX_DMA_Init+0x68>)
 800123c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_DMA_Init+0x68>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_DMA_Init+0x68>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <MX_DMA_Init+0x68>)
 8001258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <MX_DMA_Init+0x68>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2105      	movs	r1, #5
 800126e:	2011      	movs	r0, #17
 8001270:	f001 faa2 	bl	80027b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001274:	2011      	movs	r0, #17
 8001276:	f001 fabb 	bl	80027f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2105      	movs	r1, #5
 800127e:	2039      	movs	r0, #57	; 0x39
 8001280:	f001 fa9a 	bl	80027b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001284:	2039      	movs	r0, #57	; 0x39
 8001286:	f001 fab3 	bl	80027f0 <HAL_NVIC_EnableIRQ>

}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <MX_GPIO_Init+0x120>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a40      	ldr	r2, [pc, #256]	; (80013b8 <MX_GPIO_Init+0x120>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <MX_GPIO_Init+0x120>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <MX_GPIO_Init+0x120>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a39      	ldr	r2, [pc, #228]	; (80013b8 <MX_GPIO_Init+0x120>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <MX_GPIO_Init+0x120>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <MX_GPIO_Init+0x120>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a32      	ldr	r2, [pc, #200]	; (80013b8 <MX_GPIO_Init+0x120>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <MX_GPIO_Init+0x120>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <MX_GPIO_Init+0x120>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <MX_GPIO_Init+0x120>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <MX_GPIO_Init+0x120>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|D7_LCD_Pin|D8_LCD_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001324:	4825      	ldr	r0, [pc, #148]	; (80013bc <MX_GPIO_Init+0x124>)
 8001326:	f001 fefd 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|LED_Green_Pin|LED_Yellow_Pin|LED_Red_Pin 
 800132a:	2200      	movs	r2, #0
 800132c:	f24e 4170 	movw	r1, #58480	; 0xe470
 8001330:	4823      	ldr	r0, [pc, #140]	; (80013c0 <MX_GPIO_Init+0x128>)
 8001332:	f001 fef7 	bl	8003124 <HAL_GPIO_WritePin>
                          |D5_LCD_Pin|D4_LCD_Pin|D10_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_LCD_GPIO_Port, D9_LCD_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	4822      	ldr	r0, [pc, #136]	; (80013c4 <MX_GPIO_Init+0x12c>)
 800133c:	f001 fef2 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A0_LCD_Pin */
  GPIO_InitStruct.Pin = A0_LCD_Pin;
 8001340:	2301      	movs	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001344:	2303      	movs	r3, #3
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_LCD_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	481a      	ldr	r0, [pc, #104]	; (80013bc <MX_GPIO_Init+0x124>)
 8001354:	f001 fd64 	bl	8002e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 D7_LCD_Pin D8_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|D7_LCD_Pin|D8_LCD_Pin;
 8001358:	f44f 7348 	mov.w	r3, #800	; 0x320
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4812      	ldr	r0, [pc, #72]	; (80013bc <MX_GPIO_Init+0x124>)
 8001372:	f001 fd55 	bl	8002e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin LED_Green_Pin LED_Yellow_Pin LED_Red_Pin 
                           D5_LCD_Pin D4_LCD_Pin D10_LCD_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|LED_Green_Pin|LED_Yellow_Pin|LED_Red_Pin 
 8001376:	f24e 4370 	movw	r3, #58480	; 0xe470
 800137a:	617b      	str	r3, [r7, #20]
                          |D5_LCD_Pin|D4_LCD_Pin|D10_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	480c      	ldr	r0, [pc, #48]	; (80013c0 <MX_GPIO_Init+0x128>)
 8001390:	f001 fd46 	bl	8002e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_LCD_Pin */
  GPIO_InitStruct.Pin = D9_LCD_Pin;
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D9_LCD_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <MX_GPIO_Init+0x12c>)
 80013ac:	f001 fd38 	bl	8002e20 <HAL_GPIO_Init>

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40020800 	.word	0x40020800

080013c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	RxReady = SET;
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_UART_RxCpltCallback+0x1c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000000 	.word	0x20000000

080013e8 <LEDinit1>:
void LEDinit1(void const * argument)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
	osThreadSuspend(LCDtaskHandle);
 80013f4:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <LEDinit1+0xc4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 f84e 	bl	800649a <osThreadSuspend>
	osThreadSuspend(PM2_5Handle);
 80013fe:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <LEDinit1+0xc8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f005 f849 	bl	800649a <osThreadSuspend>
	osThreadSuspend(RTCreadHandle);
 8001408:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <LEDinit1+0xcc>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f005 f844 	bl	800649a <osThreadSuspend>
	osThreadSuspend(LEDtaskHandle);
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <LEDinit1+0xd0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f005 f83f 	bl	800649a <osThreadSuspend>

	for(i=0;i<6;i++)
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e014      	b.n	800144c <LEDinit1+0x64>
	{
		HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8001422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001426:	4825      	ldr	r0, [pc, #148]	; (80014bc <LEDinit1+0xd4>)
 8001428:	f001 fe95 	bl	8003156 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin);
 800142c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001430:	4822      	ldr	r0, [pc, #136]	; (80014bc <LEDinit1+0xd4>)
 8001432:	f001 fe90 	bl	8003156 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 8001436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143a:	4820      	ldr	r0, [pc, #128]	; (80014bc <LEDinit1+0xd4>)
 800143c:	f001 fe8b 	bl	8003156 <HAL_GPIO_TogglePin>
		osDelay(100);
 8001440:	2064      	movs	r0, #100	; 0x64
 8001442:	f004 fd82 	bl	8005f4a <osDelay>
	for(i=0;i<6;i++)
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	3301      	adds	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	2b05      	cmp	r3, #5
 8001450:	d9e7      	bls.n	8001422 <LEDinit1+0x3a>
	}

	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001458:	4818      	ldr	r0, [pc, #96]	; (80014bc <LEDinit1+0xd4>)
 800145a:	f001 fe63 	bl	8003124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001464:	4815      	ldr	r0, [pc, #84]	; (80014bc <LEDinit1+0xd4>)
 8001466:	f001 fe5d 	bl	8003124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <LEDinit1+0xd4>)
 8001472:	f001 fe57 	bl	8003124 <HAL_GPIO_WritePin>

	osThreadResume(LCDtaskHandle);
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <LEDinit1+0xc4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f005 f81a 	bl	80064b4 <osThreadResume>
	osThreadResume(PM2_5Handle);
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <LEDinit1+0xc8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f005 f815 	bl	80064b4 <osThreadResume>
	osThreadResume(RTCreadHandle);
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <LEDinit1+0xcc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f005 f810 	bl	80064b4 <osThreadResume>
	osThreadResume(LEDtaskHandle);
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <LEDinit1+0xd0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f005 f80b 	bl	80064b4 <osThreadResume>

	osThreadTerminate(NULL);
 800149e:	2000      	movs	r0, #0
 80014a0:	f004 fd47 	bl	8005f32 <osThreadTerminate>
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200040dc 	.word	0x200040dc
 80014b0:	20004190 	.word	0x20004190
 80014b4:	200040d8 	.word	0x200040d8
 80014b8:	20004134 	.word	0x20004134
 80014bc:	40020400 	.word	0x40020400

080014c0 <LEDtask1>:
void LEDtask1(void const * argument)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	uint8_t PM2_5;
	osEvent PMevt;
	while(1)
	{
		PMevt = osMessagePeek(PMvalueHandle,osWaitForever);
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <LEDtask1+0xd0>)
 80014ca:	6819      	ldr	r1, [r3, #0]
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 f80f 	bl	80064f8 <osMessagePeek>
		if (PMevt.status == osEventMessage)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b10      	cmp	r3, #16
 80014de:	d14b      	bne.n	8001578 <LEDtask1+0xb8>
		{
		  PM2_5 = PMevt.value.v;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	75fb      	strb	r3, [r7, #23]
		  if (PM2_5<MODERATEAIR)
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	2b0b      	cmp	r3, #11
 80014e8:	d812      	bhi.n	8001510 <LEDtask1+0x50>
		  {
			  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f0:	4828      	ldr	r0, [pc, #160]	; (8001594 <LEDtask1+0xd4>)
 80014f2:	f001 fe17 	bl	8003124 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014fc:	4825      	ldr	r0, [pc, #148]	; (8001594 <LEDtask1+0xd4>)
 80014fe:	f001 fe11 	bl	8003124 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001508:	4822      	ldr	r0, [pc, #136]	; (8001594 <LEDtask1+0xd4>)
 800150a:	f001 fe0b 	bl	8003124 <HAL_GPIO_WritePin>
 800150e:	e033      	b.n	8001578 <LEDtask1+0xb8>
		  }
		  else if((PM2_5<UNHEALTHYAIR) && (PM2_5>MODERATEAIR))
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f80e 	bl	8000534 <__aeabi_i2d>
 8001518:	a31b      	add	r3, pc, #108	; (adr r3, 8001588 <LEDtask1+0xc8>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7ff f8d3 	bl	80006c8 <__aeabi_dcmplt>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d015      	beq.n	8001554 <LEDtask1+0x94>
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d912      	bls.n	8001554 <LEDtask1+0x94>
		  {
			  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001534:	4817      	ldr	r0, [pc, #92]	; (8001594 <LEDtask1+0xd4>)
 8001536:	f001 fdf5 	bl	8003124 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001540:	4814      	ldr	r0, [pc, #80]	; (8001594 <LEDtask1+0xd4>)
 8001542:	f001 fdef 	bl	8003124 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800154c:	4811      	ldr	r0, [pc, #68]	; (8001594 <LEDtask1+0xd4>)
 800154e:	f001 fde9 	bl	8003124 <HAL_GPIO_WritePin>
 8001552:	e011      	b.n	8001578 <LEDtask1+0xb8>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155a:	480e      	ldr	r0, [pc, #56]	; (8001594 <LEDtask1+0xd4>)
 800155c:	f001 fde2 	bl	8003124 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001566:	480b      	ldr	r0, [pc, #44]	; (8001594 <LEDtask1+0xd4>)
 8001568:	f001 fddc 	bl	8003124 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001572:	4808      	ldr	r0, [pc, #32]	; (8001594 <LEDtask1+0xd4>)
 8001574:	f001 fdd6 	bl	8003124 <HAL_GPIO_WritePin>
		  }
		}
	osDelay(500);
 8001578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800157c:	f004 fce5 	bl	8005f4a <osDelay>
		PMevt = osMessagePeek(PMvalueHandle,osWaitForever);
 8001580:	e7a2      	b.n	80014c8 <LEDtask1+0x8>
 8001582:	bf00      	nop
 8001584:	f3af 8000 	nop.w
 8001588:	33333333 	.word	0x33333333
 800158c:	4041b333 	.word	0x4041b333
 8001590:	20004240 	.word	0x20004240
 8001594:	40020400 	.word	0x40020400

08001598 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f004 fcd2 	bl	8005f4a <osDelay>
 80015a6:	e7fb      	b.n	80015a0 <StartDefaultTask+0x8>

080015a8 <LCDtask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCDtask1 */
void LCDtask1(void const * argument)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b0a2      	sub	sp, #136	; 0x88
 80015ac:	af04      	add	r7, sp, #16
 80015ae:	6078      	str	r0, [r7, #4]
		//uint16_t RTCreceive[6];
		//uint16_t *RTCptr;
		osEvent RTCevt;
		osEvent PMevt;
		rtc_HandleTypeDef *rtc_receive;
		uint8_t Months[12][4] = {"Jan\0", "Feb\0", "Mar\0", "Apr\0", "May\0",
 80015b0:	4b45      	ldr	r3, [pc, #276]	; (80016c8 <LCDtask1+0x120>)
 80015b2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80015b6:	461d      	mov	r5, r3
 80015b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				"Jun\0", "Jul\0", "Aug\0", "Sep\0", "Oct\0", "Nov\0", "Dec\0"};
		char date[16];
		char PMtext[16];
		uint8_t LCD_clearflag = 1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  /* Infinite loop */
  for(;;)
  {

	  PMevt = osMessagePeek(PMvalueHandle,osWaitForever);
 80015ce:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <LCDtask1+0x124>)
 80015d0:	6819      	ldr	r1, [r3, #0]
 80015d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015d6:	f04f 32ff 	mov.w	r2, #4294967295
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 ff8c 	bl	80064f8 <osMessagePeek>
	  if (PMevt.status == osEventMessage)
 80015e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015e2:	2b10      	cmp	r3, #16
 80015e4:	d125      	bne.n	8001632 <LCDtask1+0x8a>
	  {
		  PM2_5 = PMevt.value.v;
 80015e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015e8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		  printf("The current PM2.5 is : %d \r\n", PM2_5);
 80015ec:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80015f0:	4619      	mov	r1, r3
 80015f2:	4837      	ldr	r0, [pc, #220]	; (80016d0 <LCDtask1+0x128>)
 80015f4:	f007 fbc8 	bl	8008d88 <iprintf>
		  //Lcd_clear(&lcd);
		  sprintf(PMtext,"PM2.5: %02d ug/m3",PM2_5);
 80015f8:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	4934      	ldr	r1, [pc, #208]	; (80016d4 <LCDtask1+0x12c>)
 8001602:	4618      	mov	r0, r3
 8001604:	f007 fc86 	bl	8008f14 <siprintf>
		  if (LCD_clearflag ==1){
 8001608:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800160c:	2b01      	cmp	r3, #1
 800160e:	d105      	bne.n	800161c <LCDtask1+0x74>
		  		  Lcd_clear(&lcd);
 8001610:	4831      	ldr	r0, [pc, #196]	; (80016d8 <LCDtask1+0x130>)
 8001612:	f7ff fafb 	bl	8000c0c <Lcd_clear>
		  		  LCD_clearflag = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  }
		  Lcd_cursor(&lcd,1,0);
 800161c:	2200      	movs	r2, #0
 800161e:	2101      	movs	r1, #1
 8001620:	482d      	ldr	r0, [pc, #180]	; (80016d8 <LCDtask1+0x130>)
 8001622:	f7ff fad9 	bl	8000bd8 <Lcd_cursor>
		  Lcd_string(&lcd, PMtext);
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	4619      	mov	r1, r3
 800162c:	482a      	ldr	r0, [pc, #168]	; (80016d8 <LCDtask1+0x130>)
 800162e:	f7ff fab5 	bl	8000b9c <Lcd_string>
	  }

	  RTCevt = osMailGet(RTCvalueHandle,osWaitForever);
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <LCDtask1+0x134>)
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800163a:	f04f 32ff 	mov.w	r2, #4294967295
 800163e:	4618      	mov	r0, r3
 8001640:	f004 fea2 	bl	8006388 <osMailGet>
	  if(RTCevt.status == osEventMail)
 8001644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001646:	2b20      	cmp	r3, #32
 8001648:	d139      	bne.n	80016be <LCDtask1+0x116>
	  {
		  rtc_receive =  (rtc_HandleTypeDef*) RTCevt.value.p;
 800164a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800164c:	673b      	str	r3, [r7, #112]	; 0x70
		  printf("year: %d\r\n",rtc_receive->year);
 800164e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	4822      	ldr	r0, [pc, #136]	; (80016e0 <LCDtask1+0x138>)
 8001656:	f007 fb97 	bl	8008d88 <iprintf>
		  printf("day: %d \r\n",rtc_receive->day);
 800165a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800165c:	78db      	ldrb	r3, [r3, #3]
 800165e:	4619      	mov	r1, r3
 8001660:	4820      	ldr	r0, [pc, #128]	; (80016e4 <LCDtask1+0x13c>)
 8001662:	f007 fb91 	bl	8008d88 <iprintf>
		  sprintf(date,"%s-%02d %02d:%02d:%02d",Months[(rtc_receive->month)-1],rtc_receive->day,rtc_receive->hour,rtc_receive->minute,rtc_receive->second);
 8001666:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001668:	789b      	ldrb	r3, [r3, #2]
 800166a:	3b01      	subs	r3, #1
 800166c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	441a      	add	r2, r3
 8001674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001676:	78db      	ldrb	r3, [r3, #3]
 8001678:	461d      	mov	r5, r3
 800167a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800167c:	795b      	ldrb	r3, [r3, #5]
 800167e:	4619      	mov	r1, r3
 8001680:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001682:	799b      	ldrb	r3, [r3, #6]
 8001684:	461c      	mov	r4, r3
 8001686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001688:	79db      	ldrb	r3, [r3, #7]
 800168a:	f107 0018 	add.w	r0, r7, #24
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	9401      	str	r4, [sp, #4]
 8001692:	9100      	str	r1, [sp, #0]
 8001694:	462b      	mov	r3, r5
 8001696:	4914      	ldr	r1, [pc, #80]	; (80016e8 <LCDtask1+0x140>)
 8001698:	f007 fc3c 	bl	8008f14 <siprintf>
		  //Lcd_string(&lcd,Months[(rtc_receive->month)-1]);
		  Lcd_cursor(&lcd,0,0);
 800169c:	2200      	movs	r2, #0
 800169e:	2100      	movs	r1, #0
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <LCDtask1+0x130>)
 80016a2:	f7ff fa99 	bl	8000bd8 <Lcd_cursor>
		  Lcd_string(&lcd,date);
 80016a6:	f107 0318 	add.w	r3, r7, #24
 80016aa:	4619      	mov	r1, r3
 80016ac:	480a      	ldr	r0, [pc, #40]	; (80016d8 <LCDtask1+0x130>)
 80016ae:	f7ff fa75 	bl	8000b9c <Lcd_string>
		  osMailFree(RTCvalueHandle, rtc_receive);
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <LCDtask1+0x134>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80016b8:	4618      	mov	r0, r3
 80016ba:	f004 fed9 	bl	8006470 <osMailFree>
	  }
	  osDelay(100);
 80016be:	2064      	movs	r0, #100	; 0x64
 80016c0:	f004 fc43 	bl	8005f4a <osDelay>
	  PMevt = osMessagePeek(PMvalueHandle,osWaitForever);
 80016c4:	e783      	b.n	80015ce <LCDtask1+0x26>
 80016c6:	bf00      	nop
 80016c8:	0800a1c4 	.word	0x0800a1c4
 80016cc:	20004240 	.word	0x20004240
 80016d0:	0800a160 	.word	0x0800a160
 80016d4:	0800a180 	.word	0x0800a180
 80016d8:	20000300 	.word	0x20000300
 80016dc:	200040d4 	.word	0x200040d4
 80016e0:	0800a194 	.word	0x0800a194
 80016e4:	0800a1a0 	.word	0x0800a1a0
 80016e8:	0800a1ac 	.word	0x0800a1ac

080016ec <PM2_5_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PM2_5_1 */
void PM2_5_1(void const * argument)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PM2_5_1 */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t PM2_5;
	  if (RxReady==SET)
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <PM2_5_1+0x60>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d122      	bne.n	8001742 <PM2_5_1+0x56>
	  {
		  RxReady = RESET;
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <PM2_5_1+0x60>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart6, pmflag, 32); //Read data from PM2.5 module, fixed packet length is 32 bytes.
 8001702:	2220      	movs	r2, #32
 8001704:	4912      	ldr	r1, [pc, #72]	; (8001750 <PM2_5_1+0x64>)
 8001706:	4813      	ldr	r0, [pc, #76]	; (8001754 <PM2_5_1+0x68>)
 8001708:	f003 fd44 	bl	8005194 <HAL_UART_Receive_IT>
		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800170c:	2120      	movs	r1, #32
 800170e:	4812      	ldr	r0, [pc, #72]	; (8001758 <PM2_5_1+0x6c>)
 8001710:	f001 fd21 	bl	8003156 <HAL_GPIO_TogglePin>
		  if(pmflag[0]==0x42) //The correct data start with 0x42.
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <PM2_5_1+0x64>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b42      	cmp	r3, #66	; 0x42
 800171a:	d112      	bne.n	8001742 <PM2_5_1+0x56>
		  {
			  PM2_5 = transmitPM2_5(pmflag);
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <PM2_5_1+0x64>)
 800171e:	f7ff f9b8 	bl	8000a92 <transmitPM2_5>
 8001722:	4603      	mov	r3, r0
 8001724:	73fb      	strb	r3, [r7, #15]
			  if(PMchecksum(pmflag,32)==0)
 8001726:	2120      	movs	r1, #32
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <PM2_5_1+0x64>)
 800172a:	f7ff f975 	bl	8000a18 <PMchecksum>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d106      	bne.n	8001742 <PM2_5_1+0x56>
			  {
				  osMessageOverwrite(PMvalueHandle,PM2_5); //Since CMSIS-RTOS library does not have such function. This is user defined function
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <PM2_5_1+0x70>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f004 fd41 	bl	80061c4 <osMessageOverwrite>
				  //printf("Get PM2.5 value\r\n");
			  }
		  }
	  }
	  //test only
	  osDelay(100);
 8001742:	2064      	movs	r0, #100	; 0x64
 8001744:	f004 fc01 	bl	8005f4a <osDelay>
  {
 8001748:	e7d4      	b.n	80016f4 <PM2_5_1+0x8>
 800174a:	bf00      	nop
 800174c:	20000000 	.word	0x20000000
 8001750:	20004264 	.word	0x20004264
 8001754:	20004284 	.word	0x20004284
 8001758:	40020000 	.word	0x40020000
 800175c:	20004240 	.word	0x20004240

08001760 <RTC_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTC_1 */
void RTC_1(void const * argument)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN RTC_1 */
	rtc_HandleTypeDef *rtc_t;
	rtc_t = (rtc_HandleTypeDef*) osMailAlloc(RTCvalueHandle,osWaitForever);
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <RTC_1+0x44>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	4618      	mov	r0, r3
 8001772:	f004 fdb5 	bl	80062e0 <osMailAlloc>
 8001776:	6178      	str	r0, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  //uint16_t RTCsend[6];
	  *rtc_t = ReadRTC();
 8001778:	697c      	ldr	r4, [r7, #20]
 800177a:	463b      	mov	r3, r7
 800177c:	4618      	mov	r0, r3
 800177e:	f000 f90b 	bl	8001998 <ReadRTC>
 8001782:	4622      	mov	r2, r4
 8001784:	463b      	mov	r3, r7
 8001786:	6819      	ldr	r1, [r3, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	6011      	str	r1, [r2, #0]
 800178c:	6053      	str	r3, [r2, #4]
	  osMailPut(RTCvalueHandle,rtc_t);
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <RTC_1+0x44>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6979      	ldr	r1, [r7, #20]
 8001794:	4618      	mov	r0, r3
 8001796:	f004 fdb9 	bl	800630c <osMailPut>
  	  osDelay(100);
 800179a:	2064      	movs	r0, #100	; 0x64
 800179c:	f004 fbd5 	bl	8005f4a <osDelay>
	  *rtc_t = ReadRTC();
 80017a0:	e7ea      	b.n	8001778 <RTC_1+0x18>
 80017a2:	bf00      	nop
 80017a4:	200040d4 	.word	0x200040d4

080017a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ba:	f000 fca1 	bl	8002100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40000400 	.word	0x40000400

080017cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <RetargetInit+0x28>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <RetargetInit+0x2c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6898      	ldr	r0, [r3, #8]
 80017f0:	2300      	movs	r3, #0
 80017f2:	2202      	movs	r2, #2
 80017f4:	2100      	movs	r1, #0
 80017f6:	f007 fadf 	bl	8008db8 <setvbuf>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20004304 	.word	0x20004304
 8001808:	2000002c 	.word	0x2000002c

0800180c <_isatty>:

int _isatty(int fd) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db04      	blt.n	8001824 <_isatty+0x18>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b02      	cmp	r3, #2
 800181e:	dc01      	bgt.n	8001824 <_isatty+0x18>
    return 1;
 8001820:	2301      	movs	r3, #1
 8001822:	e005      	b.n	8001830 <_isatty+0x24>

  errno = EBADF;
 8001824:	f007 fa72 	bl	8008d0c <__errno>
 8001828:	4602      	mov	r2, r0
 800182a:	2309      	movs	r3, #9
 800182c:	6013      	str	r3, [r2, #0]
  return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_write>:

int _write(int fd, char* ptr, int len) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d002      	beq.n	8001850 <_write+0x18>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d111      	bne.n	8001874 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <_write+0x54>)
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	b29a      	uxth	r2, r3
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	f003 fb5a 	bl	8004f16 <HAL_UART_Transmit>
 8001862:	4603      	mov	r3, r0
 8001864:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <_write+0x38>
      return len;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	e008      	b.n	8001882 <_write+0x4a>
    else
      return EIO;
 8001870:	2305      	movs	r3, #5
 8001872:	e006      	b.n	8001882 <_write+0x4a>
  }
  errno = EBADF;
 8001874:	f007 fa4a 	bl	8008d0c <__errno>
 8001878:	4602      	mov	r2, r0
 800187a:	2309      	movs	r3, #9
 800187c:	6013      	str	r3, [r2, #0]
  return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20004304 	.word	0x20004304

08001890 <_close>:

int _close(int fd) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db04      	blt.n	80018a8 <_close+0x18>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	dc01      	bgt.n	80018a8 <_close+0x18>
    return 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e006      	b.n	80018b6 <_close+0x26>

  errno = EBADF;
 80018a8:	f007 fa30 	bl	8008d0c <__errno>
 80018ac:	4602      	mov	r2, r0
 80018ae:	2309      	movs	r3, #9
 80018b0:	6013      	str	r3, [r2, #0]
  return -1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80018be:	b580      	push	{r7, lr}
 80018c0:	b084      	sub	sp, #16
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80018ca:	f007 fa1f 	bl	8008d0c <__errno>
 80018ce:	4602      	mov	r2, r0
 80018d0:	2309      	movs	r3, #9
 80018d2:	6013      	str	r3, [r2, #0]
  return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_read>:

int _read(int fd, char* ptr, int len) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d110      	bne.n	8001914 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <_read+0x4c>)
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	2201      	movs	r2, #1
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	f003 fba3 	bl	8005048 <HAL_UART_Receive>
 8001902:	4603      	mov	r3, r0
 8001904:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001906:	7dfb      	ldrb	r3, [r7, #23]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <_read+0x30>
      return 1;
 800190c:	2301      	movs	r3, #1
 800190e:	e008      	b.n	8001922 <_read+0x42>
    else
      return EIO;
 8001910:	2305      	movs	r3, #5
 8001912:	e006      	b.n	8001922 <_read+0x42>
  }
  errno = EBADF;
 8001914:	f007 f9fa 	bl	8008d0c <__errno>
 8001918:	4602      	mov	r2, r0
 800191a:	2309      	movs	r3, #9
 800191c:	6013      	str	r3, [r2, #0]
  return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20004304 	.word	0x20004304

08001930 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db08      	blt.n	8001952 <_fstat+0x22>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b02      	cmp	r3, #2
 8001944:	dc05      	bgt.n	8001952 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194c:	605a      	str	r2, [r3, #4]
    return 0;
 800194e:	2300      	movs	r3, #0
 8001950:	e005      	b.n	800195e <_fstat+0x2e>
  }

  errno = EBADF;
 8001952:	f007 f9db 	bl	8008d0c <__errno>
 8001956:	4602      	mov	r2, r0
 8001958:	2309      	movs	r3, #9
 800195a:	6013      	str	r3, [r2, #0]
  return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <BcdToDec>:
	return ((val/10 *16)+(val%10));
}

/* BCD to Decimal*/
uint8_t BcdToDec(uint8_t val)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  return( (val/16*10) + (val%16) );
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	0092      	lsls	r2, r2, #2
 800197a:	4413      	add	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	b2da      	uxtb	r2, r3
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	b2db      	uxtb	r3, r3
 8001988:	4413      	add	r3, r2
 800198a:	b2db      	uxtb	r3, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <ReadRTC>:

/*
 * Read Data from RTC
 */
rtc_HandleTypeDef ReadRTC()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	rtc_HandleTypeDef rtc;
	uint8_t raw_data_from_rtc[7];
	GetRawRTC(&I2CX,raw_data_from_rtc);
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	4619      	mov	r1, r3
 80019a6:	4828      	ldr	r0, [pc, #160]	; (8001a48 <ReadRTC+0xb0>)
 80019a8:	f000 f850 	bl	8001a4c <GetRawRTC>
	rtc.second = BcdToDec(raw_data_from_rtc[0]);
 80019ac:	7a3b      	ldrb	r3, [r7, #8]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ffd9 	bl	8001966 <BcdToDec>
 80019b4:	4603      	mov	r3, r0
 80019b6:	75fb      	strb	r3, [r7, #23]
	rtc.minute = BcdToDec(raw_data_from_rtc[1]);
 80019b8:	7a7b      	ldrb	r3, [r7, #9]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ffd3 	bl	8001966 <BcdToDec>
 80019c0:	4603      	mov	r3, r0
 80019c2:	75bb      	strb	r3, [r7, #22]
	raw_data_from_rtc[2] = (raw_data_from_rtc[2] & 0x7f);
 80019c4:	7abb      	ldrb	r3, [r7, #10]
 80019c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	72bb      	strb	r3, [r7, #10]
	raw_data_from_rtc[2] = (((raw_data_from_rtc[2] & 0xf0) >> 4) * 10) + (raw_data_from_rtc[2] & 0x0f);
 80019ce:	7abb      	ldrb	r3, [r7, #10]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	4413      	add	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	7abb      	ldrb	r3, [r7, #10]
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	72bb      	strb	r3, [r7, #10]
	rtc.hour = raw_data_from_rtc[2];
 80019ec:	7abb      	ldrb	r3, [r7, #10]
 80019ee:	757b      	strb	r3, [r7, #21]
	rtc.week = BcdToDec(raw_data_from_rtc[3])+1;//add 1 since week range from 0-6
 80019f0:	7afb      	ldrb	r3, [r7, #11]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ffb7 	bl	8001966 <BcdToDec>
 80019f8:	4603      	mov	r3, r0
 80019fa:	3301      	adds	r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	753b      	strb	r3, [r7, #20]
	rtc.day = BcdToDec(raw_data_from_rtc[4]);
 8001a00:	7b3b      	ldrb	r3, [r7, #12]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ffaf 	bl	8001966 <BcdToDec>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	74fb      	strb	r3, [r7, #19]
	rtc.month = BcdToDec(raw_data_from_rtc[5]);
 8001a0c:	7b7b      	ldrb	r3, [r7, #13]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ffa9 	bl	8001966 <BcdToDec>
 8001a14:	4603      	mov	r3, r0
 8001a16:	74bb      	strb	r3, [r7, #18]
	rtc.year = (uint16_t) BcdToDec(raw_data_from_rtc[6]);
 8001a18:	7bbb      	ldrb	r3, [r7, #14]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ffa3 	bl	8001966 <BcdToDec>
 8001a20:	4603      	mov	r3, r0
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	823b      	strh	r3, [r7, #16]
	rtc.year += 2000;
 8001a26:	8a3b      	ldrh	r3, [r7, #16]
 8001a28:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	823b      	strh	r3, [r7, #16]
		printf("Month: %d\r\n",rtc.month);
		printf("Year: %d\r\n",rtc.year);
	}
	*/
	//Return rtc handler
	return rtc;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	461a      	mov	r2, r3
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	cb03      	ldmia	r3!, {r0, r1}
 8001a3a:	6010      	str	r0, [r2, #0]
 8001a3c:	6051      	str	r1, [r2, #4]
}
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200040e0 	.word	0x200040e0

08001a4c <GetRawRTC>:
/*
 * Receive Raw Data from RTC.
 */
void GetRawRTC(I2C_HandleTypeDef *i2c,uint8_t* rawdata)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef I2Cflag;
	I2Cflag = HAL_I2C_Master_Transmit(i2c, RTC_ADDR, RTC_READ_ADDR, 1, HAL_MAX_DELAY);
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2164      	movs	r1, #100	; 0x64
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f001 fcca 	bl	80033fc <HAL_I2C_Master_Transmit>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	73fb      	strb	r3, [r7, #15]
	{
		//if(DebugLevel>=DEBUG_MODULE){
		//	printf("RTC Module Writing Error\n\r");
		//}
	}
	I2Cflag = HAL_I2C_Master_Receive(i2c, RTC_ADDR, rawdata, RTC_REG_NUM, HAL_MAX_DELAY);
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2307      	movs	r3, #7
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	2164      	movs	r1, #100	; 0x64
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f001 fdbd 	bl	80035f8 <HAL_I2C_Master_Receive>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	73fb      	strb	r3, [r7, #15]
			}
			printf("\r\n");
		}
		*/
	}
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_MspInit+0x54>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_MspInit+0x54>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_MspInit+0x54>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_MspInit+0x54>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_MspInit+0x54>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_MspInit+0x54>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	210f      	movs	r1, #15
 8001ace:	f06f 0001 	mvn.w	r0, #1
 8001ad2:	f000 fe71 	bl	80027b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <HAL_ADC_MspInit+0x7c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d127      	bne.n	8001b56 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_ADC_MspInit+0x80>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <HAL_ADC_MspInit+0x80>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6453      	str	r3, [r2, #68]	; 0x44
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_ADC_MspInit+0x80>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_ADC_MspInit+0x80>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <HAL_ADC_MspInit+0x80>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_ADC_MspInit+0x80>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = A0_LCD_Pin;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b42:	2303      	movs	r3, #3
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A0_LCD_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <HAL_ADC_MspInit+0x84>)
 8001b52:	f001 f965 	bl	8002e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40012000 	.word	0x40012000
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000

08001b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_I2C_MspInit+0x84>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12c      	bne.n	8001be8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_I2C_MspInit+0x88>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <HAL_I2C_MspInit+0x88>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_I2C_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = RTC_I2C_SCL_Pin|RTC_I2C_SDA_Pin;
 8001baa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb0:	2312      	movs	r3, #18
 8001bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <HAL_I2C_MspInit+0x8c>)
 8001bc8:	f001 f92a 	bl	8002e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_I2C_MspInit+0x88>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <HAL_I2C_MspInit+0x88>)
 8001bd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_I2C_MspInit+0x88>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40005400 	.word	0x40005400
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020400 	.word	0x40020400

08001bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <HAL_SPI_MspInit+0x84>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d12c      	bne.n	8001c78 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_SPI_MspInit+0x88>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <HAL_SPI_MspInit+0x88>)
 8001c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_SPI_MspInit+0x88>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_SPI_MspInit+0x88>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a10      	ldr	r2, [pc, #64]	; (8001c84 <HAL_SPI_MspInit+0x88>)
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_SPI_MspInit+0x88>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c56:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c68:	2306      	movs	r3, #6
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_SPI_MspInit+0x8c>)
 8001c74:	f001 f8d4 	bl	8002e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	; 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40003c00 	.word	0x40003c00
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020800 	.word	0x40020800

08001c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	; 0x30
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a79      	ldr	r2, [pc, #484]	; (8001e90 <HAL_UART_MspInit+0x204>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d163      	bne.n	8001d76 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	4b78      	ldr	r3, [pc, #480]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a77      	ldr	r2, [pc, #476]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b75      	ldr	r3, [pc, #468]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	4b71      	ldr	r3, [pc, #452]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a70      	ldr	r2, [pc, #448]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b6e      	ldr	r3, [pc, #440]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ce6:	230c      	movs	r3, #12
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf6:	2307      	movs	r3, #7
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4865      	ldr	r0, [pc, #404]	; (8001e98 <HAL_UART_MspInit+0x20c>)
 8001d02:	f001 f88d 	bl	8002e20 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001d06:	4b65      	ldr	r3, [pc, #404]	; (8001e9c <HAL_UART_MspInit+0x210>)
 8001d08:	4a65      	ldr	r2, [pc, #404]	; (8001ea0 <HAL_UART_MspInit+0x214>)
 8001d0a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001d0c:	4b63      	ldr	r3, [pc, #396]	; (8001e9c <HAL_UART_MspInit+0x210>)
 8001d0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d12:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d14:	4b61      	ldr	r3, [pc, #388]	; (8001e9c <HAL_UART_MspInit+0x210>)
 8001d16:	2240      	movs	r2, #64	; 0x40
 8001d18:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1a:	4b60      	ldr	r3, [pc, #384]	; (8001e9c <HAL_UART_MspInit+0x210>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d20:	4b5e      	ldr	r3, [pc, #376]	; (8001e9c <HAL_UART_MspInit+0x210>)
 8001d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d26:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d28:	4b5c      	ldr	r3, [pc, #368]	; (8001e9c <HAL_UART_MspInit+0x210>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d2e:	4b5b      	ldr	r3, [pc, #364]	; (8001e9c <HAL_UART_MspInit+0x210>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HAL_UART_MspInit+0x210>)
 8001d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d3c:	4b57      	ldr	r3, [pc, #348]	; (8001e9c <HAL_UART_MspInit+0x210>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d42:	4b56      	ldr	r3, [pc, #344]	; (8001e9c <HAL_UART_MspInit+0x210>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d48:	4854      	ldr	r0, [pc, #336]	; (8001e9c <HAL_UART_MspInit+0x210>)
 8001d4a:	f000 fd5f 	bl	800280c <HAL_DMA_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001d54:	f7ff fd3a 	bl	80017cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a50      	ldr	r2, [pc, #320]	; (8001e9c <HAL_UART_MspInit+0x210>)
 8001d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d5e:	4a4f      	ldr	r2, [pc, #316]	; (8001e9c <HAL_UART_MspInit+0x210>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2105      	movs	r1, #5
 8001d68:	2026      	movs	r0, #38	; 0x26
 8001d6a:	f000 fd25 	bl	80027b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d6e:	2026      	movs	r0, #38	; 0x26
 8001d70:	f000 fd3e 	bl	80027f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d74:	e087      	b.n	8001e86 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART6)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <HAL_UART_MspInit+0x218>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	f040 8082 	bne.w	8001e86 <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a42      	ldr	r2, [pc, #264]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001d8c:	f043 0320 	orr.w	r3, r3, #32
 8001d90:	6453      	str	r3, [r2, #68]	; 0x44
 8001d92:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b3c      	ldr	r3, [pc, #240]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a3b      	ldr	r2, [pc, #236]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b39      	ldr	r3, [pc, #228]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b32      	ldr	r3, [pc, #200]	; (8001e94 <HAL_UART_MspInit+0x208>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PM2_5_UART6_TX_Pin;
 8001dd6:	2340      	movs	r3, #64	; 0x40
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001de6:	2308      	movs	r3, #8
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PM2_5_UART6_TX_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	4619      	mov	r1, r3
 8001df0:	482d      	ldr	r0, [pc, #180]	; (8001ea8 <HAL_UART_MspInit+0x21c>)
 8001df2:	f001 f815 	bl	8002e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PM2_5_UART6_RX_Pin;
 8001df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PM2_5_UART6_RX_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	4619      	mov	r1, r3
 8001e12:	4821      	ldr	r0, [pc, #132]	; (8001e98 <HAL_UART_MspInit+0x20c>)
 8001e14:	f001 f804 	bl	8002e20 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_UART_MspInit+0x220>)
 8001e1a:	4a25      	ldr	r2, [pc, #148]	; (8001eb0 <HAL_UART_MspInit+0x224>)
 8001e1c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_UART_MspInit+0x220>)
 8001e20:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001e24:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <HAL_UART_MspInit+0x220>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <HAL_UART_MspInit+0x220>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_UART_MspInit+0x220>)
 8001e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e38:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <HAL_UART_MspInit+0x220>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_UART_MspInit+0x220>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_UART_MspInit+0x220>)
 8001e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e4c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_UART_MspInit+0x220>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_UART_MspInit+0x220>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001e5a:	4814      	ldr	r0, [pc, #80]	; (8001eac <HAL_UART_MspInit+0x220>)
 8001e5c:	f000 fcd6 	bl	800280c <HAL_DMA_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_UART_MspInit+0x1de>
      Error_Handler();
 8001e66:	f7ff fcb1 	bl	80017cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_UART_MspInit+0x220>)
 8001e6e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e70:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <HAL_UART_MspInit+0x220>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2105      	movs	r1, #5
 8001e7a:	2047      	movs	r0, #71	; 0x47
 8001e7c:	f000 fc9c 	bl	80027b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e80:	2047      	movs	r0, #71	; 0x47
 8001e82:	f000 fcb5 	bl	80027f0 <HAL_NVIC_EnableIRQ>
}
 8001e86:	bf00      	nop
 8001e88:	3730      	adds	r7, #48	; 0x30
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40004400 	.word	0x40004400
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	200041e0 	.word	0x200041e0
 8001ea0:	400260a0 	.word	0x400260a0
 8001ea4:	40011400 	.word	0x40011400
 8001ea8:	40020800 	.word	0x40020800
 8001eac:	20004074 	.word	0x20004074
 8001eb0:	40026428 	.word	0x40026428

08001eb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	; 0x30
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	201d      	movs	r0, #29
 8001eca:	f000 fc75 	bl	80027b8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8001ece:	201d      	movs	r0, #29
 8001ed0:	f000 fc8e 	bl	80027f0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_InitTick+0xa0>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <HAL_InitTick+0xa0>)
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_InitTick+0xa0>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ef0:	f107 0210 	add.w	r2, r7, #16
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f002 fd0a 	bl	8004914 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f00:	f002 fce0 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
 8001f04:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <HAL_InitTick+0xa4>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0c9b      	lsrs	r3, r3, #18
 8001f10:	3b01      	subs	r3, #1
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <HAL_InitTick+0xac>)
 8001f18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f20:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001f22:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001f34:	4809      	ldr	r0, [pc, #36]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f36:	f002 fd83 	bl	8004a40 <HAL_TIM_Base_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d104      	bne.n	8001f4a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001f40:	4806      	ldr	r0, [pc, #24]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f42:	f002 fdb2 	bl	8004aaa <HAL_TIM_Base_Start_IT>
 8001f46:	4603      	mov	r3, r0
 8001f48:	e000      	b.n	8001f4c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3730      	adds	r7, #48	; 0x30
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	431bde83 	.word	0x431bde83
 8001f5c:	20004308 	.word	0x20004308
 8001f60:	40000400 	.word	0x40000400

08001f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <MemManage_Handler+0x4>

08001f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <BusFault_Handler+0x4>

08001f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <UsageFault_Handler+0x4>

08001f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <DMA1_Stream6_IRQHandler+0x10>)
 8001f9e:	f000 fd05 	bl	80029ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200041e0 	.word	0x200041e0

08001fac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <TIM3_IRQHandler+0x10>)
 8001fb2:	f002 fd9e 	bl	8004af2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20004308 	.word	0x20004308

08001fc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <USART2_IRQHandler+0x10>)
 8001fc6:	f003 f93b 	bl	8005240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200042c4 	.word	0x200042c4

08001fd4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <DMA2_Stream1_IRQHandler+0x10>)
 8001fda:	f000 fce7 	bl	80029ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20004074 	.word	0x20004074

08001fe8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <USART6_IRQHandler+0x10>)
 8001fee:	f003 f927 	bl	8005240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20004284 	.word	0x20004284

08001ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <SystemInit+0x60>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	4a15      	ldr	r2, [pc, #84]	; (800205c <SystemInit+0x60>)
 8002008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800200c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <SystemInit+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a12      	ldr	r2, [pc, #72]	; (8002060 <SystemInit+0x64>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <SystemInit+0x64>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <SystemInit+0x64>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <SystemInit+0x64>)
 8002028:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800202c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <SystemInit+0x64>)
 8002034:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <SystemInit+0x68>)
 8002036:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <SystemInit+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a08      	ldr	r2, [pc, #32]	; (8002060 <SystemInit+0x64>)
 800203e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002042:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <SystemInit+0x64>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <SystemInit+0x60>)
 800204c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002050:	609a      	str	r2, [r3, #8]
#endif
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00
 8002060:	40023800 	.word	0x40023800
 8002064:	24003010 	.word	0x24003010

08002068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800206c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800206e:	e003      	b.n	8002078 <LoopCopyDataInit>

08002070 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002072:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002074:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002076:	3104      	adds	r1, #4

08002078 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002078:	480b      	ldr	r0, [pc, #44]	; (80020a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800207c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800207e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002080:	d3f6      	bcc.n	8002070 <CopyDataInit>
  ldr  r2, =_sbss
 8002082:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002084:	e002      	b.n	800208c <LoopFillZerobss>

08002086 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002086:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002088:	f842 3b04 	str.w	r3, [r2], #4

0800208c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800208e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002090:	d3f9      	bcc.n	8002086 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002092:	f7ff ffb3 	bl	8001ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002096:	f006 fe3f 	bl	8008d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800209a:	f7fe fe5f 	bl	8000d5c <main>
  bx  lr    
 800209e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020a0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80020a4:	0800a2c8 	.word	0x0800a2c8
  ldr  r0, =_sdata
 80020a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020ac:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80020b0:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80020b4:	20004350 	.word	0x20004350

080020b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b8:	e7fe      	b.n	80020b8 <ADC_IRQHandler>
	...

080020bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <HAL_Init+0x40>)
 80020c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <HAL_Init+0x40>)
 80020d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <HAL_Init+0x40>)
 80020de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f000 fb5c 	bl	80027a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff fee2 	bl	8001eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f0:	f7ff fccc 	bl	8001a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023c00 	.word	0x40023c00

08002100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_IncTick+0x20>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_IncTick+0x24>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4413      	add	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_IncTick+0x24>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000024 	.word	0x20000024
 8002124:	20004348 	.word	0x20004348

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20004348 	.word	0x20004348

08002140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff ffee 	bl	8002128 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d005      	beq.n	8002166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_Delay+0x40>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002166:	bf00      	nop
 8002168:	f7ff ffde 	bl	8002128 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	429a      	cmp	r2, r3
 8002176:	d8f7      	bhi.n	8002168 <HAL_Delay+0x28>
  {
  }
}
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000024 	.word	0x20000024

08002184 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e033      	b.n	8002202 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fc9e 	bl	8001ae4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021ca:	f023 0302 	bic.w	r3, r3, #2
 80021ce:	f043 0202 	orr.w	r2, r3, #2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f93a 	bl	8002450 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f023 0303 	bic.w	r3, r3, #3
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
 80021f2:	e001      	b.n	80021f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1c>
 8002224:	2302      	movs	r3, #2
 8002226:	e105      	b.n	8002434 <HAL_ADC_ConfigChannel+0x228>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b09      	cmp	r3, #9
 8002236:	d925      	bls.n	8002284 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68d9      	ldr	r1, [r3, #12]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	3b1e      	subs	r3, #30
 800224e:	2207      	movs	r2, #7
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43da      	mvns	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	400a      	ands	r2, r1
 800225c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68d9      	ldr	r1, [r3, #12]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	4618      	mov	r0, r3
 8002270:	4603      	mov	r3, r0
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4403      	add	r3, r0
 8002276:	3b1e      	subs	r3, #30
 8002278:	409a      	lsls	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	e022      	b.n	80022ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6919      	ldr	r1, [r3, #16]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	2207      	movs	r2, #7
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	400a      	ands	r2, r1
 80022a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6919      	ldr	r1, [r3, #16]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	4618      	mov	r0, r3
 80022ba:	4603      	mov	r3, r0
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4403      	add	r3, r0
 80022c0:	409a      	lsls	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d824      	bhi.n	800231c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3b05      	subs	r3, #5
 80022e4:	221f      	movs	r2, #31
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	400a      	ands	r2, r1
 80022f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	4618      	mov	r0, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	3b05      	subs	r3, #5
 800230e:	fa00 f203 	lsl.w	r2, r0, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	635a      	str	r2, [r3, #52]	; 0x34
 800231a:	e04c      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b0c      	cmp	r3, #12
 8002322:	d824      	bhi.n	800236e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	3b23      	subs	r3, #35	; 0x23
 8002336:	221f      	movs	r2, #31
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43da      	mvns	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	400a      	ands	r2, r1
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	b29b      	uxth	r3, r3
 8002352:	4618      	mov	r0, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	3b23      	subs	r3, #35	; 0x23
 8002360:	fa00 f203 	lsl.w	r2, r0, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
 800236c:	e023      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	3b41      	subs	r3, #65	; 0x41
 8002380:	221f      	movs	r2, #31
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	400a      	ands	r2, r1
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	4618      	mov	r0, r3
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	3b41      	subs	r3, #65	; 0x41
 80023aa:	fa00 f203 	lsl.w	r2, r0, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b6:	4b22      	ldr	r3, [pc, #136]	; (8002440 <HAL_ADC_ConfigChannel+0x234>)
 80023b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a21      	ldr	r2, [pc, #132]	; (8002444 <HAL_ADC_ConfigChannel+0x238>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d109      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1cc>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b12      	cmp	r3, #18
 80023ca:	d105      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a19      	ldr	r2, [pc, #100]	; (8002444 <HAL_ADC_ConfigChannel+0x238>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d123      	bne.n	800242a <HAL_ADC_ConfigChannel+0x21e>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d003      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x1e6>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b11      	cmp	r3, #17
 80023f0:	d11b      	bne.n	800242a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b10      	cmp	r3, #16
 8002404:	d111      	bne.n	800242a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_ADC_ConfigChannel+0x23c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a10      	ldr	r2, [pc, #64]	; (800244c <HAL_ADC_ConfigChannel+0x240>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	0c9a      	lsrs	r2, r3, #18
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800241c:	e002      	b.n	8002424 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3b01      	subs	r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f9      	bne.n	800241e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40012300 	.word	0x40012300
 8002444:	40012000 	.word	0x40012000
 8002448:	2000001c 	.word	0x2000001c
 800244c:	431bde83 	.word	0x431bde83

08002450 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002458:	4b79      	ldr	r3, [pc, #484]	; (8002640 <ADC_Init+0x1f0>)
 800245a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	431a      	orrs	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	021a      	lsls	r2, r3, #8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6899      	ldr	r1, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	4a58      	ldr	r2, [pc, #352]	; (8002644 <ADC_Init+0x1f4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d022      	beq.n	800252e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6899      	ldr	r1, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	e00f      	b.n	800254e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800253c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800254c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0202 	bic.w	r2, r2, #2
 800255c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7e1b      	ldrb	r3, [r3, #24]
 8002568:	005a      	lsls	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01b      	beq.n	80025b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800258a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800259a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	3b01      	subs	r3, #1
 80025a8:	035a      	lsls	r2, r3, #13
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	e007      	b.n	80025c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	3b01      	subs	r3, #1
 80025e0:	051a      	lsls	r2, r3, #20
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6899      	ldr	r1, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002606:	025a      	lsls	r2, r3, #9
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6899      	ldr	r1, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	029a      	lsls	r2, r3, #10
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	609a      	str	r2, [r3, #8]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40012300 	.word	0x40012300
 8002644:	0f000001 	.word	0x0f000001

08002648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267a:	4a04      	ldr	r2, [pc, #16]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	60d3      	str	r3, [r2, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 0307 	and.w	r3, r3, #7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	db0b      	blt.n	80026d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	4907      	ldr	r1, [pc, #28]	; (80026e4 <__NVIC_EnableIRQ+0x38>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2001      	movs	r0, #1
 80026ce:	fa00 f202 	lsl.w	r2, r0, r2
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000e100 	.word	0xe000e100

080026e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	db0a      	blt.n	8002712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	490c      	ldr	r1, [pc, #48]	; (8002734 <__NVIC_SetPriority+0x4c>)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	0112      	lsls	r2, r2, #4
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	440b      	add	r3, r1
 800270c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002710:	e00a      	b.n	8002728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4908      	ldr	r1, [pc, #32]	; (8002738 <__NVIC_SetPriority+0x50>)
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	3b04      	subs	r3, #4
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	440b      	add	r3, r1
 8002726:	761a      	strb	r2, [r3, #24]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000e100 	.word	0xe000e100
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f1c3 0307 	rsb	r3, r3, #7
 8002756:	2b04      	cmp	r3, #4
 8002758:	bf28      	it	cs
 800275a:	2304      	movcs	r3, #4
 800275c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3304      	adds	r3, #4
 8002762:	2b06      	cmp	r3, #6
 8002764:	d902      	bls.n	800276c <NVIC_EncodePriority+0x30>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3b03      	subs	r3, #3
 800276a:	e000      	b.n	800276e <NVIC_EncodePriority+0x32>
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	f04f 32ff 	mov.w	r2, #4294967295
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	401a      	ands	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002784:	f04f 31ff 	mov.w	r1, #4294967295
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	43d9      	mvns	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	4313      	orrs	r3, r2
         );
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	; 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ff4c 	bl	8002648 <__NVIC_SetPriorityGrouping>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ca:	f7ff ff61 	bl	8002690 <__NVIC_GetPriorityGrouping>
 80027ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	6978      	ldr	r0, [r7, #20]
 80027d6:	f7ff ffb1 	bl	800273c <NVIC_EncodePriority>
 80027da:	4602      	mov	r2, r0
 80027dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff80 	bl	80026e8 <__NVIC_SetPriority>
}
 80027e8:	bf00      	nop
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff54 	bl	80026ac <__NVIC_EnableIRQ>
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002818:	f7ff fc86 	bl	8002128 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e099      	b.n	800295c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002848:	e00f      	b.n	800286a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800284a:	f7ff fc6d 	bl	8002128 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b05      	cmp	r3, #5
 8002856:	d908      	bls.n	800286a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2203      	movs	r2, #3
 8002862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e078      	b.n	800295c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e8      	bne.n	800284a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4b38      	ldr	r3, [pc, #224]	; (8002964 <HAL_DMA_Init+0x158>)
 8002884:	4013      	ands	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002896:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d107      	bne.n	80028d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	4313      	orrs	r3, r2
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f023 0307 	bic.w	r3, r3, #7
 80028ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d117      	bne.n	800292e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00e      	beq.n	800292e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fa0b 	bl	8002d2c <DMA_CheckFifoParam>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2240      	movs	r2, #64	; 0x40
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800292a:	2301      	movs	r3, #1
 800292c:	e016      	b.n	800295c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f9c2 	bl	8002cc0 <DMA_CalcBaseAndBitshift>
 800293c:	4603      	mov	r3, r0
 800293e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	223f      	movs	r2, #63	; 0x3f
 8002946:	409a      	lsls	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	f010803f 	.word	0xf010803f

08002968 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d004      	beq.n	8002986 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2280      	movs	r2, #128	; 0x80
 8002980:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e00c      	b.n	80029a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2205      	movs	r2, #5
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029b8:	4b92      	ldr	r3, [pc, #584]	; (8002c04 <HAL_DMA_IRQHandler+0x258>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a92      	ldr	r2, [pc, #584]	; (8002c08 <HAL_DMA_IRQHandler+0x25c>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0a9b      	lsrs	r3, r3, #10
 80029c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	2208      	movs	r2, #8
 80029d8:	409a      	lsls	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01a      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d013      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0204 	bic.w	r2, r2, #4
 80029fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	2208      	movs	r2, #8
 8002a06:	409a      	lsls	r2, r3
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	f043 0201 	orr.w	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d012      	beq.n	8002a4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	f043 0202 	orr.w	r2, r3, #2
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	2204      	movs	r2, #4
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d012      	beq.n	8002a84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00b      	beq.n	8002a84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	2204      	movs	r2, #4
 8002a72:	409a      	lsls	r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7c:	f043 0204 	orr.w	r2, r3, #4
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a88:	2210      	movs	r2, #16
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d043      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d03c      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d018      	beq.n	8002aee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d108      	bne.n	8002adc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d024      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
 8002ada:	e01f      	b.n	8002b1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01b      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
 8002aec:	e016      	b.n	8002b1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d107      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0208 	bic.w	r2, r2, #8
 8002b0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b20:	2220      	movs	r2, #32
 8002b22:	409a      	lsls	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 808e 	beq.w	8002c4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8086 	beq.w	8002c4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	2220      	movs	r2, #32
 8002b44:	409a      	lsls	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b05      	cmp	r3, #5
 8002b54:	d136      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0216 	bic.w	r2, r2, #22
 8002b64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <HAL_DMA_IRQHandler+0x1da>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0208 	bic.w	r2, r2, #8
 8002b94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9a:	223f      	movs	r2, #63	; 0x3f
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d07d      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	4798      	blx	r3
        }
        return;
 8002bc2:	e078      	b.n	8002cb6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01c      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d108      	bne.n	8002bf2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d030      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
 8002bf0:	e02b      	b.n	8002c4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d027      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
 8002c02:	e022      	b.n	8002c4a <HAL_DMA_IRQHandler+0x29e>
 8002c04:	2000001c 	.word	0x2000001c
 8002c08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10f      	bne.n	8002c3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0210 	bic.w	r2, r2, #16
 8002c28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d032      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d022      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2205      	movs	r2, #5
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0201 	bic.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d307      	bcc.n	8002c92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f2      	bne.n	8002c76 <HAL_DMA_IRQHandler+0x2ca>
 8002c90:	e000      	b.n	8002c94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
 8002cb4:	e000      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cb6:	bf00      	nop
    }
  }
}
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop

08002cc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	3b10      	subs	r3, #16
 8002cd0:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <DMA_CalcBaseAndBitshift+0x64>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cda:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <DMA_CalcBaseAndBitshift+0x68>)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d909      	bls.n	8002d02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	1d1a      	adds	r2, r3, #4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	659a      	str	r2, [r3, #88]	; 0x58
 8002d00:	e007      	b.n	8002d12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d0a:	f023 0303 	bic.w	r3, r3, #3
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	aaaaaaab 	.word	0xaaaaaaab
 8002d28:	0800a218 	.word	0x0800a218

08002d2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11f      	bne.n	8002d86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d855      	bhi.n	8002df8 <DMA_CheckFifoParam+0xcc>
 8002d4c:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <DMA_CheckFifoParam+0x28>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d77 	.word	0x08002d77
 8002d5c:	08002d65 	.word	0x08002d65
 8002d60:	08002df9 	.word	0x08002df9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d045      	beq.n	8002dfc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d74:	e042      	b.n	8002dfc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d7e:	d13f      	bne.n	8002e00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d84:	e03c      	b.n	8002e00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8e:	d121      	bne.n	8002dd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d836      	bhi.n	8002e04 <DMA_CheckFifoParam+0xd8>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <DMA_CheckFifoParam+0x70>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002dad 	.word	0x08002dad
 8002da0:	08002db3 	.word	0x08002db3
 8002da4:	08002dad 	.word	0x08002dad
 8002da8:	08002dc5 	.word	0x08002dc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      break;
 8002db0:	e02f      	b.n	8002e12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d024      	beq.n	8002e08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc2:	e021      	b.n	8002e08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dcc:	d11e      	bne.n	8002e0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dd2:	e01b      	b.n	8002e0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d902      	bls.n	8002de0 <DMA_CheckFifoParam+0xb4>
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d003      	beq.n	8002de6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dde:	e018      	b.n	8002e12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
      break;
 8002de4:	e015      	b.n	8002e12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00e      	beq.n	8002e10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
      break;
 8002df6:	e00b      	b.n	8002e10 <DMA_CheckFifoParam+0xe4>
      break;
 8002df8:	bf00      	nop
 8002dfa:	e00a      	b.n	8002e12 <DMA_CheckFifoParam+0xe6>
      break;
 8002dfc:	bf00      	nop
 8002dfe:	e008      	b.n	8002e12 <DMA_CheckFifoParam+0xe6>
      break;
 8002e00:	bf00      	nop
 8002e02:	e006      	b.n	8002e12 <DMA_CheckFifoParam+0xe6>
      break;
 8002e04:	bf00      	nop
 8002e06:	e004      	b.n	8002e12 <DMA_CheckFifoParam+0xe6>
      break;
 8002e08:	bf00      	nop
 8002e0a:	e002      	b.n	8002e12 <DMA_CheckFifoParam+0xe6>
      break;   
 8002e0c:	bf00      	nop
 8002e0e:	e000      	b.n	8002e12 <DMA_CheckFifoParam+0xe6>
      break;
 8002e10:	bf00      	nop
    }
  } 
  
  return status; 
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e159      	b.n	80030f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	f040 8148 	bne.w	80030ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d00b      	beq.n	8002e7a <HAL_GPIO_Init+0x5a>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d007      	beq.n	8002e7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e6e:	2b11      	cmp	r3, #17
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b12      	cmp	r3, #18
 8002e78:	d130      	bne.n	8002edc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	2203      	movs	r2, #3
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 0201 	and.w	r2, r3, #1
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0xfc>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b12      	cmp	r3, #18
 8002f1a:	d123      	bne.n	8002f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	08da      	lsrs	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3208      	adds	r2, #8
 8002f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	220f      	movs	r2, #15
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	08da      	lsrs	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3208      	adds	r2, #8
 8002f5e:	69b9      	ldr	r1, [r7, #24]
 8002f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0203 	and.w	r2, r3, #3
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a2 	beq.w	80030ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	4b56      	ldr	r3, [pc, #344]	; (8003104 <HAL_GPIO_Init+0x2e4>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	4a55      	ldr	r2, [pc, #340]	; (8003104 <HAL_GPIO_Init+0x2e4>)
 8002fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb6:	4b53      	ldr	r3, [pc, #332]	; (8003104 <HAL_GPIO_Init+0x2e4>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc2:	4a51      	ldr	r2, [pc, #324]	; (8003108 <HAL_GPIO_Init+0x2e8>)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	220f      	movs	r2, #15
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a48      	ldr	r2, [pc, #288]	; (800310c <HAL_GPIO_Init+0x2ec>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d019      	beq.n	8003022 <HAL_GPIO_Init+0x202>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a47      	ldr	r2, [pc, #284]	; (8003110 <HAL_GPIO_Init+0x2f0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_GPIO_Init+0x1fe>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a46      	ldr	r2, [pc, #280]	; (8003114 <HAL_GPIO_Init+0x2f4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00d      	beq.n	800301a <HAL_GPIO_Init+0x1fa>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a45      	ldr	r2, [pc, #276]	; (8003118 <HAL_GPIO_Init+0x2f8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <HAL_GPIO_Init+0x1f6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a44      	ldr	r2, [pc, #272]	; (800311c <HAL_GPIO_Init+0x2fc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_GPIO_Init+0x1f2>
 800300e:	2304      	movs	r3, #4
 8003010:	e008      	b.n	8003024 <HAL_GPIO_Init+0x204>
 8003012:	2307      	movs	r3, #7
 8003014:	e006      	b.n	8003024 <HAL_GPIO_Init+0x204>
 8003016:	2303      	movs	r3, #3
 8003018:	e004      	b.n	8003024 <HAL_GPIO_Init+0x204>
 800301a:	2302      	movs	r3, #2
 800301c:	e002      	b.n	8003024 <HAL_GPIO_Init+0x204>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_GPIO_Init+0x204>
 8003022:	2300      	movs	r3, #0
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	f002 0203 	and.w	r2, r2, #3
 800302a:	0092      	lsls	r2, r2, #2
 800302c:	4093      	lsls	r3, r2
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003034:	4934      	ldr	r1, [pc, #208]	; (8003108 <HAL_GPIO_Init+0x2e8>)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	3302      	adds	r3, #2
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003042:	4b37      	ldr	r3, [pc, #220]	; (8003120 <HAL_GPIO_Init+0x300>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003066:	4a2e      	ldr	r2, [pc, #184]	; (8003120 <HAL_GPIO_Init+0x300>)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800306c:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <HAL_GPIO_Init+0x300>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003090:	4a23      	ldr	r2, [pc, #140]	; (8003120 <HAL_GPIO_Init+0x300>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <HAL_GPIO_Init+0x300>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ba:	4a19      	ldr	r2, [pc, #100]	; (8003120 <HAL_GPIO_Init+0x300>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_GPIO_Init+0x300>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e4:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_GPIO_Init+0x300>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3301      	adds	r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b0f      	cmp	r3, #15
 80030f4:	f67f aea2 	bls.w	8002e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030f8:	bf00      	nop
 80030fa:	3724      	adds	r7, #36	; 0x24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40023800 	.word	0x40023800
 8003108:	40013800 	.word	0x40013800
 800310c:	40020000 	.word	0x40020000
 8003110:	40020400 	.word	0x40020400
 8003114:	40020800 	.word	0x40020800
 8003118:	40020c00 	.word	0x40020c00
 800311c:	40021000 	.word	0x40021000
 8003120:	40013c00 	.word	0x40013c00

08003124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
 8003130:	4613      	mov	r3, r2
 8003132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003134:	787b      	ldrb	r3, [r7, #1]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003140:	e003      	b.n	800314a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003142:	887b      	ldrh	r3, [r7, #2]
 8003144:	041a      	lsls	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	619a      	str	r2, [r3, #24]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	401a      	ands	r2, r3
 800316a:	887b      	ldrh	r3, [r7, #2]
 800316c:	429a      	cmp	r2, r3
 800316e:	d104      	bne.n	800317a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003170:	887b      	ldrh	r3, [r7, #2]
 8003172:	041a      	lsls	r2, r3, #16
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003178:	e002      	b.n	8003180 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800317a:	887a      	ldrh	r2, [r7, #2]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	619a      	str	r2, [r3, #24]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e11f      	b.n	80033de <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe fcda 	bl	8001b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	; 0x24
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031f0:	f001 fb68 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
 80031f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4a7b      	ldr	r2, [pc, #492]	; (80033e8 <HAL_I2C_Init+0x25c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d807      	bhi.n	8003210 <HAL_I2C_Init+0x84>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4a7a      	ldr	r2, [pc, #488]	; (80033ec <HAL_I2C_Init+0x260>)
 8003204:	4293      	cmp	r3, r2
 8003206:	bf94      	ite	ls
 8003208:	2301      	movls	r3, #1
 800320a:	2300      	movhi	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e006      	b.n	800321e <HAL_I2C_Init+0x92>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a77      	ldr	r2, [pc, #476]	; (80033f0 <HAL_I2C_Init+0x264>)
 8003214:	4293      	cmp	r3, r2
 8003216:	bf94      	ite	ls
 8003218:	2301      	movls	r3, #1
 800321a:	2300      	movhi	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0db      	b.n	80033de <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a72      	ldr	r2, [pc, #456]	; (80033f4 <HAL_I2C_Init+0x268>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0c9b      	lsrs	r3, r3, #18
 8003230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a64      	ldr	r2, [pc, #400]	; (80033e8 <HAL_I2C_Init+0x25c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d802      	bhi.n	8003260 <HAL_I2C_Init+0xd4>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3301      	adds	r3, #1
 800325e:	e009      	b.n	8003274 <HAL_I2C_Init+0xe8>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	4a63      	ldr	r2, [pc, #396]	; (80033f8 <HAL_I2C_Init+0x26c>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	3301      	adds	r3, #1
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	430b      	orrs	r3, r1
 800327a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003286:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4956      	ldr	r1, [pc, #344]	; (80033e8 <HAL_I2C_Init+0x25c>)
 8003290:	428b      	cmp	r3, r1
 8003292:	d80d      	bhi.n	80032b0 <HAL_I2C_Init+0x124>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e59      	subs	r1, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	bf38      	it	cc
 80032ac:	2304      	movcc	r3, #4
 80032ae:	e04f      	b.n	8003350 <HAL_I2C_Init+0x1c4>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d111      	bne.n	80032dc <HAL_I2C_Init+0x150>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e58      	subs	r0, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	440b      	add	r3, r1
 80032c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e012      	b.n	8003302 <HAL_I2C_Init+0x176>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1e58      	subs	r0, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	0099      	lsls	r1, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Init+0x17e>
 8003306:	2301      	movs	r3, #1
 8003308:	e022      	b.n	8003350 <HAL_I2C_Init+0x1c4>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10e      	bne.n	8003330 <HAL_I2C_Init+0x1a4>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1e58      	subs	r0, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	440b      	add	r3, r1
 8003320:	fbb0 f3f3 	udiv	r3, r0, r3
 8003324:	3301      	adds	r3, #1
 8003326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800332e:	e00f      	b.n	8003350 <HAL_I2C_Init+0x1c4>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1e58      	subs	r0, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	0099      	lsls	r1, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	fbb0 f3f3 	udiv	r3, r0, r3
 8003346:	3301      	adds	r3, #1
 8003348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	6809      	ldr	r1, [r1, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69da      	ldr	r2, [r3, #28]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800337e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6911      	ldr	r1, [r2, #16]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68d2      	ldr	r2, [r2, #12]
 800338a:	4311      	orrs	r1, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	430b      	orrs	r3, r1
 8003392:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	000186a0 	.word	0x000186a0
 80033ec:	001e847f 	.word	0x001e847f
 80033f0:	003d08ff 	.word	0x003d08ff
 80033f4:	431bde83 	.word	0x431bde83
 80033f8:	10624dd3 	.word	0x10624dd3

080033fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af02      	add	r7, sp, #8
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	461a      	mov	r2, r3
 8003408:	460b      	mov	r3, r1
 800340a:	817b      	strh	r3, [r7, #10]
 800340c:	4613      	mov	r3, r2
 800340e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003410:	f7fe fe8a 	bl	8002128 <HAL_GetTick>
 8003414:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b20      	cmp	r3, #32
 8003420:	f040 80e0 	bne.w	80035e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2319      	movs	r3, #25
 800342a:	2201      	movs	r2, #1
 800342c:	4970      	ldr	r1, [pc, #448]	; (80035f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fc56 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800343a:	2302      	movs	r3, #2
 800343c:	e0d3      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_I2C_Master_Transmit+0x50>
 8003448:	2302      	movs	r3, #2
 800344a:	e0cc      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d007      	beq.n	8003472 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003480:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2221      	movs	r2, #33	; 0x21
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2210      	movs	r2, #16
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	893a      	ldrh	r2, [r7, #8]
 80034a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a50      	ldr	r2, [pc, #320]	; (80035f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80034b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034b4:	8979      	ldrh	r1, [r7, #10]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	6a3a      	ldr	r2, [r7, #32]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fac2 	bl	8003a44 <I2C_MasterRequestWrite>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e08d      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034e0:	e066      	b.n	80035b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	6a39      	ldr	r1, [r7, #32]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fcd0 	bl	8003e8c <I2C_WaitOnTXEFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00d      	beq.n	800350e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d107      	bne.n	800350a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003508:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e06b      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	781a      	ldrb	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b04      	cmp	r3, #4
 800354a:	d11b      	bne.n	8003584 <HAL_I2C_Master_Transmit+0x188>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	d017      	beq.n	8003584 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	6a39      	ldr	r1, [r7, #32]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fcc0 	bl	8003f0e <I2C_WaitOnBTFFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2b04      	cmp	r3, #4
 800359a:	d107      	bne.n	80035ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e01a      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d194      	bne.n	80034e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	00100002 	.word	0x00100002
 80035f4:	ffff0000 	.word	0xffff0000

080035f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08c      	sub	sp, #48	; 0x30
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	461a      	mov	r2, r3
 8003604:	460b      	mov	r3, r1
 8003606:	817b      	strh	r3, [r7, #10]
 8003608:	4613      	mov	r3, r2
 800360a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800360c:	f7fe fd8c 	bl	8002128 <HAL_GetTick>
 8003610:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	f040 820b 	bne.w	8003a36 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2319      	movs	r3, #25
 8003626:	2201      	movs	r2, #1
 8003628:	497c      	ldr	r1, [pc, #496]	; (800381c <HAL_I2C_Master_Receive+0x224>)
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fb58 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
 8003638:	e1fe      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_I2C_Master_Receive+0x50>
 8003644:	2302      	movs	r3, #2
 8003646:	e1f7      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d007      	beq.n	800366e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800367c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2222      	movs	r2, #34	; 0x22
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2210      	movs	r2, #16
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	893a      	ldrh	r2, [r7, #8]
 800369e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4a5c      	ldr	r2, [pc, #368]	; (8003820 <HAL_I2C_Master_Receive+0x228>)
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036b0:	8979      	ldrh	r1, [r7, #10]
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fa46 	bl	8003b48 <I2C_MasterRequestRead>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e1b8      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d113      	bne.n	80036f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	623b      	str	r3, [r7, #32]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	623b      	str	r3, [r7, #32]
 80036e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	e18c      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d11b      	bne.n	8003736 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e16c      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	2b02      	cmp	r3, #2
 800373c:	d11b      	bne.n	8003776 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800375c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375e:	2300      	movs	r3, #0
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	e14c      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003784:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800379c:	e138      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	f200 80f1 	bhi.w	800398a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d123      	bne.n	80037f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fbeb 	bl	8003f90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e139      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037f6:	e10b      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d14e      	bne.n	800389e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	2200      	movs	r2, #0
 8003808:	4906      	ldr	r1, [pc, #24]	; (8003824 <HAL_I2C_Master_Receive+0x22c>)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fa68 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e10e      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
 800381a:	bf00      	nop
 800381c:	00100002 	.word	0x00100002
 8003820:	ffff0000 	.word	0xffff0000
 8003824:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800389c:	e0b8      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	2200      	movs	r2, #0
 80038a6:	4966      	ldr	r1, [pc, #408]	; (8003a40 <HAL_I2C_Master_Receive+0x448>)
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fa19 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0bf      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	2200      	movs	r2, #0
 8003902:	494f      	ldr	r1, [pc, #316]	; (8003a40 <HAL_I2C_Master_Receive+0x448>)
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f9eb 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e091      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003988:	e042      	b.n	8003a10 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fafe 	bl	8003f90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e04c      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d118      	bne.n	8003a10 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f47f aec2 	bne.w	800379e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e000      	b.n	8003a38 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a36:	2302      	movs	r3, #2
  }
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3728      	adds	r7, #40	; 0x28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	00010004 	.word	0x00010004

08003a44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	460b      	mov	r3, r1
 8003a52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d006      	beq.n	8003a6e <I2C_MasterRequestWrite+0x2a>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d003      	beq.n	8003a6e <I2C_MasterRequestWrite+0x2a>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a6c:	d108      	bne.n	8003a80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e00b      	b.n	8003a98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	2b12      	cmp	r3, #18
 8003a86:	d107      	bne.n	8003a98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f91b 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00c      	beq.n	8003aca <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e035      	b.n	8003b36 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ad2:	d108      	bne.n	8003ae6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ad4:	897b      	ldrh	r3, [r7, #10]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ae2:	611a      	str	r2, [r3, #16]
 8003ae4:	e01b      	b.n	8003b1e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ae6:	897b      	ldrh	r3, [r7, #10]
 8003ae8:	11db      	asrs	r3, r3, #7
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f003 0306 	and.w	r3, r3, #6
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f063 030f 	orn	r3, r3, #15
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	490f      	ldr	r1, [pc, #60]	; (8003b40 <I2C_MasterRequestWrite+0xfc>)
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f942 	bl	8003d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e010      	b.n	8003b36 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b14:	897b      	ldrh	r3, [r7, #10]
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4908      	ldr	r1, [pc, #32]	; (8003b44 <I2C_MasterRequestWrite+0x100>)
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f932 	bl	8003d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	00010008 	.word	0x00010008
 8003b44:	00010002 	.word	0x00010002

08003b48 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	607a      	str	r2, [r7, #4]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	460b      	mov	r3, r1
 8003b56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d006      	beq.n	8003b82 <I2C_MasterRequestRead+0x3a>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d003      	beq.n	8003b82 <I2C_MasterRequestRead+0x3a>
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b80:	d108      	bne.n	8003b94 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e00b      	b.n	8003bac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	2b11      	cmp	r3, #17
 8003b9a:	d107      	bne.n	8003bac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003baa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f891 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00c      	beq.n	8003bde <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e078      	b.n	8003cd0 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be6:	d108      	bne.n	8003bfa <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003be8:	897b      	ldrh	r3, [r7, #10]
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	611a      	str	r2, [r3, #16]
 8003bf8:	e05e      	b.n	8003cb8 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bfa:	897b      	ldrh	r3, [r7, #10]
 8003bfc:	11db      	asrs	r3, r3, #7
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f003 0306 	and.w	r3, r3, #6
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f063 030f 	orn	r3, r3, #15
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	4930      	ldr	r1, [pc, #192]	; (8003cd8 <I2C_MasterRequestRead+0x190>)
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f8b8 	bl	8003d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e053      	b.n	8003cd0 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c28:	897b      	ldrh	r3, [r7, #10]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4929      	ldr	r1, [pc, #164]	; (8003cdc <I2C_MasterRequestRead+0x194>)
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f8a8 	bl	8003d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e043      	b.n	8003cd0 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c6c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f830 	bl	8003ce0 <I2C_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00c      	beq.n	8003ca0 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e017      	b.n	8003cd0 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ca0:	897b      	ldrh	r3, [r7, #10]
 8003ca2:	11db      	asrs	r3, r3, #7
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f003 0306 	and.w	r3, r3, #6
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f063 030e 	orn	r3, r3, #14
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	4907      	ldr	r1, [pc, #28]	; (8003cdc <I2C_MasterRequestRead+0x194>)
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f865 	bl	8003d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	00010008 	.word	0x00010008
 8003cdc:	00010002 	.word	0x00010002

08003ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	4613      	mov	r3, r2
 8003cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cf0:	e025      	b.n	8003d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d021      	beq.n	8003d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfa:	f7fe fa15 	bl	8002128 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d116      	bne.n	8003d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f043 0220 	orr.w	r2, r3, #32
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e023      	b.n	8003d86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10d      	bne.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4013      	ands	r3, r2
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf0c      	ite	eq
 8003d5a:	2301      	moveq	r3, #1
 8003d5c:	2300      	movne	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	e00c      	b.n	8003d7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	43da      	mvns	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf0c      	ite	eq
 8003d76:	2301      	moveq	r3, #1
 8003d78:	2300      	movne	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d0b6      	beq.n	8003cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d9c:	e051      	b.n	8003e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dac:	d123      	bne.n	8003df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f043 0204 	orr.w	r2, r3, #4
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e046      	b.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d021      	beq.n	8003e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfe:	f7fe f993 	bl	8002128 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d116      	bne.n	8003e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f043 0220 	orr.w	r2, r3, #32
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e020      	b.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d10c      	bne.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	43da      	mvns	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4013      	ands	r3, r2
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bf14      	ite	ne
 8003e5e:	2301      	movne	r3, #1
 8003e60:	2300      	moveq	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	e00b      	b.n	8003e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	43da      	mvns	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4013      	ands	r3, r2
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d18d      	bne.n	8003d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e98:	e02d      	b.n	8003ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f8ce 	bl	800403c <I2C_IsAcknowledgeFailed>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e02d      	b.n	8003f06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d021      	beq.n	8003ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb2:	f7fe f939 	bl	8002128 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d302      	bcc.n	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d116      	bne.n	8003ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f043 0220 	orr.w	r2, r3, #32
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e007      	b.n	8003f06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b80      	cmp	r3, #128	; 0x80
 8003f02:	d1ca      	bne.n	8003e9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f1a:	e02d      	b.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f88d 	bl	800403c <I2C_IsAcknowledgeFailed>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e02d      	b.n	8003f88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d021      	beq.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f34:	f7fe f8f8 	bl	8002128 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d302      	bcc.n	8003f4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d116      	bne.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e007      	b.n	8003f88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d1ca      	bne.n	8003f1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f9c:	e042      	b.n	8004024 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d119      	bne.n	8003fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0210 	mvn.w	r2, #16
 8003fb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e029      	b.n	8004034 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe0:	f7fe f8a2 	bl	8002128 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d302      	bcc.n	8003ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d116      	bne.n	8004024 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f043 0220 	orr.w	r2, r3, #32
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e007      	b.n	8004034 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d1b5      	bne.n	8003f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004052:	d11b      	bne.n	800408c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800405c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f043 0204 	orr.w	r2, r3, #4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e25b      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d075      	beq.n	80041a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ba:	4ba3      	ldr	r3, [pc, #652]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d00c      	beq.n	80040e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c6:	4ba0      	ldr	r3, [pc, #640]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d112      	bne.n	80040f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d2:	4b9d      	ldr	r3, [pc, #628]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040de:	d10b      	bne.n	80040f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e0:	4b99      	ldr	r3, [pc, #612]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d05b      	beq.n	80041a4 <HAL_RCC_OscConfig+0x108>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d157      	bne.n	80041a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e236      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004100:	d106      	bne.n	8004110 <HAL_RCC_OscConfig+0x74>
 8004102:	4b91      	ldr	r3, [pc, #580]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a90      	ldr	r2, [pc, #576]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e01d      	b.n	800414c <HAL_RCC_OscConfig+0xb0>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0x98>
 800411a:	4b8b      	ldr	r3, [pc, #556]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a8a      	ldr	r2, [pc, #552]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	4b88      	ldr	r3, [pc, #544]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a87      	ldr	r2, [pc, #540]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e00b      	b.n	800414c <HAL_RCC_OscConfig+0xb0>
 8004134:	4b84      	ldr	r3, [pc, #528]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a83      	ldr	r2, [pc, #524]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 800413a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	4b81      	ldr	r3, [pc, #516]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a80      	ldr	r2, [pc, #512]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d013      	beq.n	800417c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd ffe8 	bl	8002128 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800415c:	f7fd ffe4 	bl	8002128 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	; 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e1fb      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	4b76      	ldr	r3, [pc, #472]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0xc0>
 800417a:	e014      	b.n	80041a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417c:	f7fd ffd4 	bl	8002128 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004184:	f7fd ffd0 	bl	8002128 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	; 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1e7      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	4b6c      	ldr	r3, [pc, #432]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0xe8>
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d063      	beq.n	800427a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041b2:	4b65      	ldr	r3, [pc, #404]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041be:	4b62      	ldr	r3, [pc, #392]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d11c      	bne.n	8004204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ca:	4b5f      	ldr	r3, [pc, #380]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d116      	bne.n	8004204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d6:	4b5c      	ldr	r3, [pc, #368]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_RCC_OscConfig+0x152>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d001      	beq.n	80041ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e1bb      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ee:	4b56      	ldr	r3, [pc, #344]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4952      	ldr	r1, [pc, #328]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	e03a      	b.n	800427a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800420c:	4b4f      	ldr	r3, [pc, #316]	; (800434c <HAL_RCC_OscConfig+0x2b0>)
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004212:	f7fd ff89 	bl	8002128 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421a:	f7fd ff85 	bl	8002128 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e19c      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422c:	4b46      	ldr	r3, [pc, #280]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004238:	4b43      	ldr	r3, [pc, #268]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4940      	ldr	r1, [pc, #256]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]
 800424c:	e015      	b.n	800427a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800424e:	4b3f      	ldr	r3, [pc, #252]	; (800434c <HAL_RCC_OscConfig+0x2b0>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fd ff68 	bl	8002128 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425c:	f7fd ff64 	bl	8002128 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e17b      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426e:	4b36      	ldr	r3, [pc, #216]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d030      	beq.n	80042e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428e:	4b30      	ldr	r3, [pc, #192]	; (8004350 <HAL_RCC_OscConfig+0x2b4>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fd ff48 	bl	8002128 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800429c:	f7fd ff44 	bl	8002128 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e15b      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ae:	4b26      	ldr	r3, [pc, #152]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x200>
 80042ba:	e015      	b.n	80042e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042bc:	4b24      	ldr	r3, [pc, #144]	; (8004350 <HAL_RCC_OscConfig+0x2b4>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c2:	f7fd ff31 	bl	8002128 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ca:	f7fd ff2d 	bl	8002128 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e144      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042dc:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80042de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f0      	bne.n	80042ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80a0 	beq.w	8004436 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fa:	4b13      	ldr	r3, [pc, #76]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10f      	bne.n	8004326 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	4a0e      	ldr	r2, [pc, #56]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004314:	6413      	str	r3, [r2, #64]	; 0x40
 8004316:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004322:	2301      	movs	r3, #1
 8004324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004326:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_OscConfig+0x2b8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d121      	bne.n	8004376 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <HAL_RCC_OscConfig+0x2b8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a07      	ldr	r2, [pc, #28]	; (8004354 <HAL_RCC_OscConfig+0x2b8>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433e:	f7fd fef3 	bl	8002128 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004344:	e011      	b.n	800436a <HAL_RCC_OscConfig+0x2ce>
 8004346:	bf00      	nop
 8004348:	40023800 	.word	0x40023800
 800434c:	42470000 	.word	0x42470000
 8004350:	42470e80 	.word	0x42470e80
 8004354:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004358:	f7fd fee6 	bl	8002128 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e0fd      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436a:	4b81      	ldr	r3, [pc, #516]	; (8004570 <HAL_RCC_OscConfig+0x4d4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d106      	bne.n	800438c <HAL_RCC_OscConfig+0x2f0>
 800437e:	4b7d      	ldr	r3, [pc, #500]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	4a7c      	ldr	r2, [pc, #496]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	6713      	str	r3, [r2, #112]	; 0x70
 800438a:	e01c      	b.n	80043c6 <HAL_RCC_OscConfig+0x32a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b05      	cmp	r3, #5
 8004392:	d10c      	bne.n	80043ae <HAL_RCC_OscConfig+0x312>
 8004394:	4b77      	ldr	r3, [pc, #476]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	4a76      	ldr	r2, [pc, #472]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 800439a:	f043 0304 	orr.w	r3, r3, #4
 800439e:	6713      	str	r3, [r2, #112]	; 0x70
 80043a0:	4b74      	ldr	r3, [pc, #464]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	4a73      	ldr	r2, [pc, #460]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	6713      	str	r3, [r2, #112]	; 0x70
 80043ac:	e00b      	b.n	80043c6 <HAL_RCC_OscConfig+0x32a>
 80043ae:	4b71      	ldr	r3, [pc, #452]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4a70      	ldr	r2, [pc, #448]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ba:	4b6e      	ldr	r3, [pc, #440]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	4a6d      	ldr	r2, [pc, #436]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043c0:	f023 0304 	bic.w	r3, r3, #4
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d015      	beq.n	80043fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ce:	f7fd feab 	bl	8002128 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d4:	e00a      	b.n	80043ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d6:	f7fd fea7 	bl	8002128 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e0bc      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ec:	4b61      	ldr	r3, [pc, #388]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ee      	beq.n	80043d6 <HAL_RCC_OscConfig+0x33a>
 80043f8:	e014      	b.n	8004424 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fa:	f7fd fe95 	bl	8002128 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7fd fe91 	bl	8002128 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e0a6      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004418:	4b56      	ldr	r3, [pc, #344]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ee      	bne.n	8004402 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004424:	7dfb      	ldrb	r3, [r7, #23]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d105      	bne.n	8004436 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442a:	4b52      	ldr	r3, [pc, #328]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	4a51      	ldr	r2, [pc, #324]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004434:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8092 	beq.w	8004564 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004440:	4b4c      	ldr	r3, [pc, #304]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b08      	cmp	r3, #8
 800444a:	d05c      	beq.n	8004506 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d141      	bne.n	80044d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004454:	4b48      	ldr	r3, [pc, #288]	; (8004578 <HAL_RCC_OscConfig+0x4dc>)
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445a:	f7fd fe65 	bl	8002128 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004462:	f7fd fe61 	bl	8002128 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e078      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004474:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f0      	bne.n	8004462 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	019b      	lsls	r3, r3, #6
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	3b01      	subs	r3, #1
 800449a:	041b      	lsls	r3, r3, #16
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	061b      	lsls	r3, r3, #24
 80044a4:	4933      	ldr	r1, [pc, #204]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044aa:	4b33      	ldr	r3, [pc, #204]	; (8004578 <HAL_RCC_OscConfig+0x4dc>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b0:	f7fd fe3a 	bl	8002128 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b8:	f7fd fe36 	bl	8002128 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e04d      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ca:	4b2a      	ldr	r3, [pc, #168]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x41c>
 80044d6:	e045      	b.n	8004564 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d8:	4b27      	ldr	r3, [pc, #156]	; (8004578 <HAL_RCC_OscConfig+0x4dc>)
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044de:	f7fd fe23 	bl	8002128 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e6:	f7fd fe1f 	bl	8002128 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e036      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f8:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f0      	bne.n	80044e6 <HAL_RCC_OscConfig+0x44a>
 8004504:	e02e      	b.n	8004564 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e029      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004512:	4b18      	ldr	r3, [pc, #96]	; (8004574 <HAL_RCC_OscConfig+0x4d8>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	429a      	cmp	r2, r3
 8004524:	d11c      	bne.n	8004560 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d115      	bne.n	8004560 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800453a:	4013      	ands	r3, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004540:	4293      	cmp	r3, r2
 8004542:	d10d      	bne.n	8004560 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d106      	bne.n	8004560 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40007000 	.word	0x40007000
 8004574:	40023800 	.word	0x40023800
 8004578:	42470060 	.word	0x42470060

0800457c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0cc      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004590:	4b68      	ldr	r3, [pc, #416]	; (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d90c      	bls.n	80045b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459e:	4b65      	ldr	r3, [pc, #404]	; (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b63      	ldr	r3, [pc, #396]	; (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0b8      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d020      	beq.n	8004606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d0:	4b59      	ldr	r3, [pc, #356]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4a58      	ldr	r2, [pc, #352]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045e8:	4b53      	ldr	r3, [pc, #332]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a52      	ldr	r2, [pc, #328]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f4:	4b50      	ldr	r3, [pc, #320]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	494d      	ldr	r1, [pc, #308]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d044      	beq.n	800469c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	4b47      	ldr	r3, [pc, #284]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d119      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e07f      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d003      	beq.n	800463a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004636:	2b03      	cmp	r3, #3
 8004638:	d107      	bne.n	800464a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463a:	4b3f      	ldr	r3, [pc, #252]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e06f      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464a:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e067      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800465a:	4b37      	ldr	r3, [pc, #220]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f023 0203 	bic.w	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4934      	ldr	r1, [pc, #208]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	4313      	orrs	r3, r2
 800466a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800466c:	f7fd fd5c 	bl	8002128 <HAL_GetTick>
 8004670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004672:	e00a      	b.n	800468a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004674:	f7fd fd58 	bl	8002128 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e04f      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468a:	4b2b      	ldr	r3, [pc, #172]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 020c 	and.w	r2, r3, #12
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	429a      	cmp	r2, r3
 800469a:	d1eb      	bne.n	8004674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800469c:	4b25      	ldr	r3, [pc, #148]	; (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d20c      	bcs.n	80046c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b22      	ldr	r3, [pc, #136]	; (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b20      	ldr	r3, [pc, #128]	; (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e032      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4916      	ldr	r1, [pc, #88]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ee:	4b12      	ldr	r3, [pc, #72]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	490e      	ldr	r1, [pc, #56]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004702:	f000 f821 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8004706:	4601      	mov	r1, r0
 8004708:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	4a0a      	ldr	r2, [pc, #40]	; (800473c <HAL_RCC_ClockConfig+0x1c0>)
 8004714:	5cd3      	ldrb	r3, [r2, r3]
 8004716:	fa21 f303 	lsr.w	r3, r1, r3
 800471a:	4a09      	ldr	r2, [pc, #36]	; (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 800471c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800471e:	4b09      	ldr	r3, [pc, #36]	; (8004744 <HAL_RCC_ClockConfig+0x1c8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fd fbc6 	bl	8001eb4 <HAL_InitTick>

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40023c00 	.word	0x40023c00
 8004738:	40023800 	.word	0x40023800
 800473c:	0800a200 	.word	0x0800a200
 8004740:	2000001c 	.word	0x2000001c
 8004744:	20000020 	.word	0x20000020

08004748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	2300      	movs	r3, #0
 8004758:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800475e:	4b50      	ldr	r3, [pc, #320]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b04      	cmp	r3, #4
 8004768:	d007      	beq.n	800477a <HAL_RCC_GetSysClockFreq+0x32>
 800476a:	2b08      	cmp	r3, #8
 800476c:	d008      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x38>
 800476e:	2b00      	cmp	r3, #0
 8004770:	f040 808d 	bne.w	800488e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004774:	4b4b      	ldr	r3, [pc, #300]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004776:	60bb      	str	r3, [r7, #8]
       break;
 8004778:	e08c      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800477a:	4b4b      	ldr	r3, [pc, #300]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800477c:	60bb      	str	r3, [r7, #8]
      break;
 800477e:	e089      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004780:	4b47      	ldr	r3, [pc, #284]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004788:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800478a:	4b45      	ldr	r3, [pc, #276]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x158>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d023      	beq.n	80047de <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004796:	4b42      	ldr	r3, [pc, #264]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	099b      	lsrs	r3, r3, #6
 800479c:	f04f 0400 	mov.w	r4, #0
 80047a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	ea03 0501 	and.w	r5, r3, r1
 80047ac:	ea04 0602 	and.w	r6, r4, r2
 80047b0:	4a3d      	ldr	r2, [pc, #244]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80047b2:	fb02 f106 	mul.w	r1, r2, r6
 80047b6:	2200      	movs	r2, #0
 80047b8:	fb02 f205 	mul.w	r2, r2, r5
 80047bc:	440a      	add	r2, r1
 80047be:	493a      	ldr	r1, [pc, #232]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80047c0:	fba5 0101 	umull	r0, r1, r5, r1
 80047c4:	1853      	adds	r3, r2, r1
 80047c6:	4619      	mov	r1, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f04f 0400 	mov.w	r4, #0
 80047ce:	461a      	mov	r2, r3
 80047d0:	4623      	mov	r3, r4
 80047d2:	f7fb ffa1 	bl	8000718 <__aeabi_uldivmod>
 80047d6:	4603      	mov	r3, r0
 80047d8:	460c      	mov	r4, r1
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e049      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047de:	4b30      	ldr	r3, [pc, #192]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x158>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	f04f 0400 	mov.w	r4, #0
 80047e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	ea03 0501 	and.w	r5, r3, r1
 80047f4:	ea04 0602 	and.w	r6, r4, r2
 80047f8:	4629      	mov	r1, r5
 80047fa:	4632      	mov	r2, r6
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	f04f 0400 	mov.w	r4, #0
 8004804:	0154      	lsls	r4, r2, #5
 8004806:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800480a:	014b      	lsls	r3, r1, #5
 800480c:	4619      	mov	r1, r3
 800480e:	4622      	mov	r2, r4
 8004810:	1b49      	subs	r1, r1, r5
 8004812:	eb62 0206 	sbc.w	r2, r2, r6
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	f04f 0400 	mov.w	r4, #0
 800481e:	0194      	lsls	r4, r2, #6
 8004820:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004824:	018b      	lsls	r3, r1, #6
 8004826:	1a5b      	subs	r3, r3, r1
 8004828:	eb64 0402 	sbc.w	r4, r4, r2
 800482c:	f04f 0100 	mov.w	r1, #0
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	00e2      	lsls	r2, r4, #3
 8004836:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800483a:	00d9      	lsls	r1, r3, #3
 800483c:	460b      	mov	r3, r1
 800483e:	4614      	mov	r4, r2
 8004840:	195b      	adds	r3, r3, r5
 8004842:	eb44 0406 	adc.w	r4, r4, r6
 8004846:	f04f 0100 	mov.w	r1, #0
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	02a2      	lsls	r2, r4, #10
 8004850:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004854:	0299      	lsls	r1, r3, #10
 8004856:	460b      	mov	r3, r1
 8004858:	4614      	mov	r4, r2
 800485a:	4618      	mov	r0, r3
 800485c:	4621      	mov	r1, r4
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f04f 0400 	mov.w	r4, #0
 8004864:	461a      	mov	r2, r3
 8004866:	4623      	mov	r3, r4
 8004868:	f7fb ff56 	bl	8000718 <__aeabi_uldivmod>
 800486c:	4603      	mov	r3, r0
 800486e:	460c      	mov	r4, r1
 8004870:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004872:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	0c1b      	lsrs	r3, r3, #16
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	3301      	adds	r3, #1
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	fbb2 f3f3 	udiv	r3, r2, r3
 800488a:	60bb      	str	r3, [r7, #8]
      break;
 800488c:	e002      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800488e:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004890:	60bb      	str	r3, [r7, #8]
      break;
 8004892:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004894:	68bb      	ldr	r3, [r7, #8]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489e:	bf00      	nop
 80048a0:	40023800 	.word	0x40023800
 80048a4:	00f42400 	.word	0x00f42400
 80048a8:	017d7840 	.word	0x017d7840

080048ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048b2:	681b      	ldr	r3, [r3, #0]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	2000001c 	.word	0x2000001c

080048c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048c8:	f7ff fff0 	bl	80048ac <HAL_RCC_GetHCLKFreq>
 80048cc:	4601      	mov	r1, r0
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	0a9b      	lsrs	r3, r3, #10
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	4a03      	ldr	r2, [pc, #12]	; (80048e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048da:	5cd3      	ldrb	r3, [r2, r3]
 80048dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	0800a210 	.word	0x0800a210

080048ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048f0:	f7ff ffdc 	bl	80048ac <HAL_RCC_GetHCLKFreq>
 80048f4:	4601      	mov	r1, r0
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCC_GetPCLK2Freq+0x20>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0b5b      	lsrs	r3, r3, #13
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4a03      	ldr	r2, [pc, #12]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004902:	5cd3      	ldrb	r3, [r2, r3]
 8004904:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40023800 	.word	0x40023800
 8004910:	0800a210 	.word	0x0800a210

08004914 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	220f      	movs	r2, #15
 8004922:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004924:	4b12      	ldr	r3, [pc, #72]	; (8004970 <HAL_RCC_GetClockConfig+0x5c>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0203 	and.w	r2, r3, #3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004930:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <HAL_RCC_GetClockConfig+0x5c>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800493c:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <HAL_RCC_GetClockConfig+0x5c>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <HAL_RCC_GetClockConfig+0x5c>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	08db      	lsrs	r3, r3, #3
 800494e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004956:	4b07      	ldr	r3, [pc, #28]	; (8004974 <HAL_RCC_GetClockConfig+0x60>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 020f 	and.w	r2, r3, #15
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	601a      	str	r2, [r3, #0]
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40023800 	.word	0x40023800
 8004974:	40023c00 	.word	0x40023c00

08004978 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e056      	b.n	8004a38 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fd f929 	bl	8001bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	ea42 0103 	orr.w	r1, r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	0c1b      	lsrs	r3, r3, #16
 8004a08:	f003 0104 	and.w	r1, r3, #4
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69da      	ldr	r2, [r3, #28]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e01d      	b.n	8004a8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f815 	bl	8004a96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f000 f968 	bl	8004d54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b06      	cmp	r3, #6
 8004ad2:	d007      	beq.n	8004ae4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b082      	sub	sp, #8
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d122      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d11b      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f06f 0202 	mvn.w	r2, #2
 8004b1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f8ee 	bl	8004d16 <HAL_TIM_IC_CaptureCallback>
 8004b3a:	e005      	b.n	8004b48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f8e0 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f8f1 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d122      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d11b      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f06f 0204 	mvn.w	r2, #4
 8004b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f8c4 	bl	8004d16 <HAL_TIM_IC_CaptureCallback>
 8004b8e:	e005      	b.n	8004b9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f8b6 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f8c7 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d122      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d11b      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f06f 0208 	mvn.w	r2, #8
 8004bc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2204      	movs	r2, #4
 8004bcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f89a 	bl	8004d16 <HAL_TIM_IC_CaptureCallback>
 8004be2:	e005      	b.n	8004bf0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f88c 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f89d 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d122      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b10      	cmp	r3, #16
 8004c10:	d11b      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f06f 0210 	mvn.w	r2, #16
 8004c1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2208      	movs	r2, #8
 8004c20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f870 	bl	8004d16 <HAL_TIM_IC_CaptureCallback>
 8004c36:	e005      	b.n	8004c44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f862 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f873 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d10e      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d107      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f06f 0201 	mvn.w	r2, #1
 8004c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7fc fd99 	bl	80017a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c80:	2b80      	cmp	r3, #128	; 0x80
 8004c82:	d10e      	bne.n	8004ca2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d107      	bne.n	8004ca2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f8e3 	bl	8004e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d10e      	bne.n	8004cce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d107      	bne.n	8004cce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f838 	bl	8004d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d10e      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d107      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f06f 0220 	mvn.w	r2, #32
 8004cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f8ad 	bl	8004e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a34      	ldr	r2, [pc, #208]	; (8004e38 <TIM_Base_SetConfig+0xe4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00f      	beq.n	8004d8c <TIM_Base_SetConfig+0x38>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d72:	d00b      	beq.n	8004d8c <TIM_Base_SetConfig+0x38>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a31      	ldr	r2, [pc, #196]	; (8004e3c <TIM_Base_SetConfig+0xe8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d007      	beq.n	8004d8c <TIM_Base_SetConfig+0x38>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a30      	ldr	r2, [pc, #192]	; (8004e40 <TIM_Base_SetConfig+0xec>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <TIM_Base_SetConfig+0x38>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a2f      	ldr	r2, [pc, #188]	; (8004e44 <TIM_Base_SetConfig+0xf0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d108      	bne.n	8004d9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a25      	ldr	r2, [pc, #148]	; (8004e38 <TIM_Base_SetConfig+0xe4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01b      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dac:	d017      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a22      	ldr	r2, [pc, #136]	; (8004e3c <TIM_Base_SetConfig+0xe8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a21      	ldr	r2, [pc, #132]	; (8004e40 <TIM_Base_SetConfig+0xec>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00f      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a20      	ldr	r2, [pc, #128]	; (8004e44 <TIM_Base_SetConfig+0xf0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a1f      	ldr	r2, [pc, #124]	; (8004e48 <TIM_Base_SetConfig+0xf4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <TIM_Base_SetConfig+0xf8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	; (8004e50 <TIM_Base_SetConfig+0xfc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d108      	bne.n	8004df0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <TIM_Base_SetConfig+0xe4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d103      	bne.n	8004e24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	615a      	str	r2, [r3, #20]
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40014000 	.word	0x40014000
 8004e4c:	40014400 	.word	0x40014400
 8004e50:	40014800 	.word	0x40014800

08004e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e03f      	b.n	8004f0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fc fef2 	bl	8001c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2224      	movs	r2, #36	; 0x24
 8004eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 fc3d 	bl	8005740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b088      	sub	sp, #32
 8004f1a:	af02      	add	r7, sp, #8
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	603b      	str	r3, [r7, #0]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	f040 8083 	bne.w	800503e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_UART_Transmit+0x2e>
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e07b      	b.n	8005040 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_UART_Transmit+0x40>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e074      	b.n	8005040 <HAL_UART_Transmit+0x12a>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2221      	movs	r2, #33	; 0x21
 8004f68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004f6c:	f7fd f8dc 	bl	8002128 <HAL_GetTick>
 8004f70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004f86:	e042      	b.n	800500e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9e:	d122      	bne.n	8004fe6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2180      	movs	r1, #128	; 0x80
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fa5c 	bl	8005468 <UART_WaitOnFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e042      	b.n	8005040 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fcc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	3302      	adds	r3, #2
 8004fda:	60bb      	str	r3, [r7, #8]
 8004fdc:	e017      	b.n	800500e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	60bb      	str	r3, [r7, #8]
 8004fe4:	e013      	b.n	800500e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2200      	movs	r2, #0
 8004fee:	2180      	movs	r1, #128	; 0x80
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 fa39 	bl	8005468 <UART_WaitOnFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e01f      	b.n	8005040 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	60ba      	str	r2, [r7, #8]
 8005006:	781a      	ldrb	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1b7      	bne.n	8004f88 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2200      	movs	r2, #0
 8005020:	2140      	movs	r1, #64	; 0x40
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fa20 	bl	8005468 <UART_WaitOnFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e006      	b.n	8005040 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	e000      	b.n	8005040 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800503e:	2302      	movs	r3, #2
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	4613      	mov	r3, r2
 8005056:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b20      	cmp	r3, #32
 8005066:	f040 8090 	bne.w	800518a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_UART_Receive+0x2e>
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e088      	b.n	800518c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_UART_Receive+0x40>
 8005084:	2302      	movs	r3, #2
 8005086:	e081      	b.n	800518c <HAL_UART_Receive+0x144>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2222      	movs	r2, #34	; 0x22
 800509a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800509e:	f7fd f843 	bl	8002128 <HAL_GetTick>
 80050a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	88fa      	ldrh	r2, [r7, #6]
 80050a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80050b8:	e05c      	b.n	8005174 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d0:	d12b      	bne.n	800512a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	2120      	movs	r1, #32
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f9c3 	bl	8005468 <UART_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e04f      	b.n	800518c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10c      	bne.n	8005112 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005104:	b29a      	uxth	r2, r3
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	3302      	adds	r3, #2
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	e030      	b.n	8005174 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	b29b      	uxth	r3, r3
 800511a:	b2db      	uxtb	r3, r3
 800511c:	b29a      	uxth	r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	3301      	adds	r3, #1
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	e024      	b.n	8005174 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2200      	movs	r2, #0
 8005132:	2120      	movs	r1, #32
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f997 	bl	8005468 <UART_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e023      	b.n	800518c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d108      	bne.n	800515e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	60ba      	str	r2, [r7, #8]
 8005158:	b2ca      	uxtb	r2, r1
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	e00a      	b.n	8005174 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	b2da      	uxtb	r2, r3
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	1c59      	adds	r1, r3, #1
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d19d      	bne.n	80050ba <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	e000      	b.n	800518c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800518a:	2302      	movs	r3, #2
  }
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	d140      	bne.n	8005230 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <HAL_UART_Receive_IT+0x26>
 80051b4:	88fb      	ldrh	r3, [r7, #6]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e039      	b.n	8005232 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_UART_Receive_IT+0x38>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e032      	b.n	8005232 <HAL_UART_Receive_IT+0x9e>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	88fa      	ldrh	r2, [r7, #6]
 80051de:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	88fa      	ldrh	r2, [r7, #6]
 80051e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2222      	movs	r2, #34	; 0x22
 80051f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800520a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695a      	ldr	r2, [r3, #20]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0220 	orr.w	r2, r2, #32
 800522a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	e000      	b.n	8005232 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10d      	bne.n	8005292 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f003 0320 	and.w	r3, r3, #32
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_UART_IRQHandler+0x52>
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f9d6 	bl	800563c <UART_Receive_IT>
      return;
 8005290:	e0d1      	b.n	8005436 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80b0 	beq.w	80053fa <HAL_UART_IRQHandler+0x1ba>
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d105      	bne.n	80052b0 <HAL_UART_IRQHandler+0x70>
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 80a5 	beq.w	80053fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <HAL_UART_IRQHandler+0x90>
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	f043 0201 	orr.w	r2, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <HAL_UART_IRQHandler+0xb0>
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e8:	f043 0202 	orr.w	r2, r3, #2
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_UART_IRQHandler+0xd0>
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	f043 0204 	orr.w	r2, r3, #4
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00f      	beq.n	800533a <HAL_UART_IRQHandler+0xfa>
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b00      	cmp	r3, #0
 8005322:	d104      	bne.n	800532e <HAL_UART_IRQHandler+0xee>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	f043 0208 	orr.w	r2, r3, #8
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d078      	beq.n	8005434 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d007      	beq.n	800535c <HAL_UART_IRQHandler+0x11c>
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f970 	bl	800563c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	bf0c      	ite	eq
 800536a:	2301      	moveq	r3, #1
 800536c:	2300      	movne	r3, #0
 800536e:	b2db      	uxtb	r3, r3
 8005370:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d102      	bne.n	8005384 <HAL_UART_IRQHandler+0x144>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d031      	beq.n	80053e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f8b9 	bl	80054fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	2b40      	cmp	r3, #64	; 0x40
 8005396:	d123      	bne.n	80053e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d013      	beq.n	80053d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b4:	4a21      	ldr	r2, [pc, #132]	; (800543c <HAL_UART_IRQHandler+0x1fc>)
 80053b6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fd fad3 	bl	8002968 <HAL_DMA_Abort_IT>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d016      	beq.n	80053f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053d2:	4610      	mov	r0, r2
 80053d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d6:	e00e      	b.n	80053f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f83b 	bl	8005454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053de:	e00a      	b.n	80053f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f837 	bl	8005454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e6:	e006      	b.n	80053f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f833 	bl	8005454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80053f4:	e01e      	b.n	8005434 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f6:	bf00      	nop
    return;
 80053f8:	e01c      	b.n	8005434 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005400:	2b00      	cmp	r3, #0
 8005402:	d008      	beq.n	8005416 <HAL_UART_IRQHandler+0x1d6>
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f8a6 	bl	8005560 <UART_Transmit_IT>
    return;
 8005414:	e00f      	b.n	8005436 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_UART_IRQHandler+0x1f6>
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f8ee 	bl	800560c <UART_EndTransmit_IT>
    return;
 8005430:	bf00      	nop
 8005432:	e000      	b.n	8005436 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005434:	bf00      	nop
  }
}
 8005436:	3720      	adds	r7, #32
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	08005539 	.word	0x08005539

08005440 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005478:	e02c      	b.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d028      	beq.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <UART_WaitOnFlagUntilTimeout+0x30>
 8005488:	f7fc fe4e 	bl	8002128 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	429a      	cmp	r2, r3
 8005496:	d21d      	bcs.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0201 	bic.w	r2, r2, #1
 80054b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e00f      	b.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4013      	ands	r3, r2
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d0c3      	beq.n	800547a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005512:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff ff7e 	bl	8005454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b21      	cmp	r3, #33	; 0x21
 8005572:	d144      	bne.n	80055fe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557c:	d11a      	bne.n	80055b4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005592:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d105      	bne.n	80055a8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	1c9a      	adds	r2, r3, #2
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	621a      	str	r2, [r3, #32]
 80055a6:	e00e      	b.n	80055c6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	621a      	str	r2, [r3, #32]
 80055b2:	e008      	b.n	80055c6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	1c59      	adds	r1, r3, #1
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6211      	str	r1, [r2, #32]
 80055be:	781a      	ldrb	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	4619      	mov	r1, r3
 80055d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10f      	bne.n	80055fa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e000      	b.n	8005600 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80055fe:	2302      	movs	r3, #2
  }
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005622:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff ff07 	bl	8005440 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b22      	cmp	r3, #34	; 0x22
 800564e:	d171      	bne.n	8005734 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005658:	d123      	bne.n	80056a2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10e      	bne.n	8005686 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	b29b      	uxth	r3, r3
 8005670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	1c9a      	adds	r2, r3, #2
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	629a      	str	r2, [r3, #40]	; 0x28
 8005684:	e029      	b.n	80056da <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	b29b      	uxth	r3, r3
 800568e:	b2db      	uxtb	r3, r3
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	629a      	str	r2, [r3, #40]	; 0x28
 80056a0:	e01b      	b.n	80056da <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6858      	ldr	r0, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	1c59      	adds	r1, r3, #1
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6291      	str	r1, [r2, #40]	; 0x28
 80056ba:	b2c2      	uxtb	r2, r0
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	e00c      	b.n	80056da <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	1c58      	adds	r0, r3, #1
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	6288      	str	r0, [r1, #40]	; 0x28
 80056d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	4619      	mov	r1, r3
 80056e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d120      	bne.n	8005730 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0220 	bic.w	r2, r2, #32
 80056fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800570c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695a      	ldr	r2, [r3, #20]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0201 	bic.w	r2, r2, #1
 800571c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fb fe4e 	bl	80013c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	e002      	b.n	8005736 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	e000      	b.n	8005736 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005734:	2302      	movs	r3, #2
  }
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005782:	f023 030c 	bic.w	r3, r3, #12
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	68f9      	ldr	r1, [r7, #12]
 800578c:	430b      	orrs	r3, r1
 800578e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ae:	f040 818b 	bne.w	8005ac8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4ac1      	ldr	r2, [pc, #772]	; (8005abc <UART_SetConfig+0x37c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d005      	beq.n	80057c8 <UART_SetConfig+0x88>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4abf      	ldr	r2, [pc, #764]	; (8005ac0 <UART_SetConfig+0x380>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	f040 80bd 	bne.w	8005942 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057c8:	f7ff f890 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 80057cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	461d      	mov	r5, r3
 80057d2:	f04f 0600 	mov.w	r6, #0
 80057d6:	46a8      	mov	r8, r5
 80057d8:	46b1      	mov	r9, r6
 80057da:	eb18 0308 	adds.w	r3, r8, r8
 80057de:	eb49 0409 	adc.w	r4, r9, r9
 80057e2:	4698      	mov	r8, r3
 80057e4:	46a1      	mov	r9, r4
 80057e6:	eb18 0805 	adds.w	r8, r8, r5
 80057ea:	eb49 0906 	adc.w	r9, r9, r6
 80057ee:	f04f 0100 	mov.w	r1, #0
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005802:	4688      	mov	r8, r1
 8005804:	4691      	mov	r9, r2
 8005806:	eb18 0005 	adds.w	r0, r8, r5
 800580a:	eb49 0106 	adc.w	r1, r9, r6
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	461d      	mov	r5, r3
 8005814:	f04f 0600 	mov.w	r6, #0
 8005818:	196b      	adds	r3, r5, r5
 800581a:	eb46 0406 	adc.w	r4, r6, r6
 800581e:	461a      	mov	r2, r3
 8005820:	4623      	mov	r3, r4
 8005822:	f7fa ff79 	bl	8000718 <__aeabi_uldivmod>
 8005826:	4603      	mov	r3, r0
 8005828:	460c      	mov	r4, r1
 800582a:	461a      	mov	r2, r3
 800582c:	4ba5      	ldr	r3, [pc, #660]	; (8005ac4 <UART_SetConfig+0x384>)
 800582e:	fba3 2302 	umull	r2, r3, r3, r2
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	461d      	mov	r5, r3
 800583c:	f04f 0600 	mov.w	r6, #0
 8005840:	46a9      	mov	r9, r5
 8005842:	46b2      	mov	sl, r6
 8005844:	eb19 0309 	adds.w	r3, r9, r9
 8005848:	eb4a 040a 	adc.w	r4, sl, sl
 800584c:	4699      	mov	r9, r3
 800584e:	46a2      	mov	sl, r4
 8005850:	eb19 0905 	adds.w	r9, r9, r5
 8005854:	eb4a 0a06 	adc.w	sl, sl, r6
 8005858:	f04f 0100 	mov.w	r1, #0
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005864:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005868:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800586c:	4689      	mov	r9, r1
 800586e:	4692      	mov	sl, r2
 8005870:	eb19 0005 	adds.w	r0, r9, r5
 8005874:	eb4a 0106 	adc.w	r1, sl, r6
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	461d      	mov	r5, r3
 800587e:	f04f 0600 	mov.w	r6, #0
 8005882:	196b      	adds	r3, r5, r5
 8005884:	eb46 0406 	adc.w	r4, r6, r6
 8005888:	461a      	mov	r2, r3
 800588a:	4623      	mov	r3, r4
 800588c:	f7fa ff44 	bl	8000718 <__aeabi_uldivmod>
 8005890:	4603      	mov	r3, r0
 8005892:	460c      	mov	r4, r1
 8005894:	461a      	mov	r2, r3
 8005896:	4b8b      	ldr	r3, [pc, #556]	; (8005ac4 <UART_SetConfig+0x384>)
 8005898:	fba3 1302 	umull	r1, r3, r3, r2
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	2164      	movs	r1, #100	; 0x64
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	3332      	adds	r3, #50	; 0x32
 80058aa:	4a86      	ldr	r2, [pc, #536]	; (8005ac4 <UART_SetConfig+0x384>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058b8:	4498      	add	r8, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	461d      	mov	r5, r3
 80058be:	f04f 0600 	mov.w	r6, #0
 80058c2:	46a9      	mov	r9, r5
 80058c4:	46b2      	mov	sl, r6
 80058c6:	eb19 0309 	adds.w	r3, r9, r9
 80058ca:	eb4a 040a 	adc.w	r4, sl, sl
 80058ce:	4699      	mov	r9, r3
 80058d0:	46a2      	mov	sl, r4
 80058d2:	eb19 0905 	adds.w	r9, r9, r5
 80058d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80058da:	f04f 0100 	mov.w	r1, #0
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058ee:	4689      	mov	r9, r1
 80058f0:	4692      	mov	sl, r2
 80058f2:	eb19 0005 	adds.w	r0, r9, r5
 80058f6:	eb4a 0106 	adc.w	r1, sl, r6
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	461d      	mov	r5, r3
 8005900:	f04f 0600 	mov.w	r6, #0
 8005904:	196b      	adds	r3, r5, r5
 8005906:	eb46 0406 	adc.w	r4, r6, r6
 800590a:	461a      	mov	r2, r3
 800590c:	4623      	mov	r3, r4
 800590e:	f7fa ff03 	bl	8000718 <__aeabi_uldivmod>
 8005912:	4603      	mov	r3, r0
 8005914:	460c      	mov	r4, r1
 8005916:	461a      	mov	r2, r3
 8005918:	4b6a      	ldr	r3, [pc, #424]	; (8005ac4 <UART_SetConfig+0x384>)
 800591a:	fba3 1302 	umull	r1, r3, r3, r2
 800591e:	095b      	lsrs	r3, r3, #5
 8005920:	2164      	movs	r1, #100	; 0x64
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	3332      	adds	r3, #50	; 0x32
 800592c:	4a65      	ldr	r2, [pc, #404]	; (8005ac4 <UART_SetConfig+0x384>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	095b      	lsrs	r3, r3, #5
 8005934:	f003 0207 	and.w	r2, r3, #7
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4442      	add	r2, r8
 800593e:	609a      	str	r2, [r3, #8]
 8005940:	e26f      	b.n	8005e22 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005942:	f7fe ffbf 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
 8005946:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	461d      	mov	r5, r3
 800594c:	f04f 0600 	mov.w	r6, #0
 8005950:	46a8      	mov	r8, r5
 8005952:	46b1      	mov	r9, r6
 8005954:	eb18 0308 	adds.w	r3, r8, r8
 8005958:	eb49 0409 	adc.w	r4, r9, r9
 800595c:	4698      	mov	r8, r3
 800595e:	46a1      	mov	r9, r4
 8005960:	eb18 0805 	adds.w	r8, r8, r5
 8005964:	eb49 0906 	adc.w	r9, r9, r6
 8005968:	f04f 0100 	mov.w	r1, #0
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005974:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005978:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800597c:	4688      	mov	r8, r1
 800597e:	4691      	mov	r9, r2
 8005980:	eb18 0005 	adds.w	r0, r8, r5
 8005984:	eb49 0106 	adc.w	r1, r9, r6
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	461d      	mov	r5, r3
 800598e:	f04f 0600 	mov.w	r6, #0
 8005992:	196b      	adds	r3, r5, r5
 8005994:	eb46 0406 	adc.w	r4, r6, r6
 8005998:	461a      	mov	r2, r3
 800599a:	4623      	mov	r3, r4
 800599c:	f7fa febc 	bl	8000718 <__aeabi_uldivmod>
 80059a0:	4603      	mov	r3, r0
 80059a2:	460c      	mov	r4, r1
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b47      	ldr	r3, [pc, #284]	; (8005ac4 <UART_SetConfig+0x384>)
 80059a8:	fba3 2302 	umull	r2, r3, r3, r2
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	461d      	mov	r5, r3
 80059b6:	f04f 0600 	mov.w	r6, #0
 80059ba:	46a9      	mov	r9, r5
 80059bc:	46b2      	mov	sl, r6
 80059be:	eb19 0309 	adds.w	r3, r9, r9
 80059c2:	eb4a 040a 	adc.w	r4, sl, sl
 80059c6:	4699      	mov	r9, r3
 80059c8:	46a2      	mov	sl, r4
 80059ca:	eb19 0905 	adds.w	r9, r9, r5
 80059ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80059d2:	f04f 0100 	mov.w	r1, #0
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059e6:	4689      	mov	r9, r1
 80059e8:	4692      	mov	sl, r2
 80059ea:	eb19 0005 	adds.w	r0, r9, r5
 80059ee:	eb4a 0106 	adc.w	r1, sl, r6
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	461d      	mov	r5, r3
 80059f8:	f04f 0600 	mov.w	r6, #0
 80059fc:	196b      	adds	r3, r5, r5
 80059fe:	eb46 0406 	adc.w	r4, r6, r6
 8005a02:	461a      	mov	r2, r3
 8005a04:	4623      	mov	r3, r4
 8005a06:	f7fa fe87 	bl	8000718 <__aeabi_uldivmod>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	461a      	mov	r2, r3
 8005a10:	4b2c      	ldr	r3, [pc, #176]	; (8005ac4 <UART_SetConfig+0x384>)
 8005a12:	fba3 1302 	umull	r1, r3, r3, r2
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	2164      	movs	r1, #100	; 0x64
 8005a1a:	fb01 f303 	mul.w	r3, r1, r3
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	3332      	adds	r3, #50	; 0x32
 8005a24:	4a27      	ldr	r2, [pc, #156]	; (8005ac4 <UART_SetConfig+0x384>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a32:	4498      	add	r8, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	461d      	mov	r5, r3
 8005a38:	f04f 0600 	mov.w	r6, #0
 8005a3c:	46a9      	mov	r9, r5
 8005a3e:	46b2      	mov	sl, r6
 8005a40:	eb19 0309 	adds.w	r3, r9, r9
 8005a44:	eb4a 040a 	adc.w	r4, sl, sl
 8005a48:	4699      	mov	r9, r3
 8005a4a:	46a2      	mov	sl, r4
 8005a4c:	eb19 0905 	adds.w	r9, r9, r5
 8005a50:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a54:	f04f 0100 	mov.w	r1, #0
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a68:	4689      	mov	r9, r1
 8005a6a:	4692      	mov	sl, r2
 8005a6c:	eb19 0005 	adds.w	r0, r9, r5
 8005a70:	eb4a 0106 	adc.w	r1, sl, r6
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	461d      	mov	r5, r3
 8005a7a:	f04f 0600 	mov.w	r6, #0
 8005a7e:	196b      	adds	r3, r5, r5
 8005a80:	eb46 0406 	adc.w	r4, r6, r6
 8005a84:	461a      	mov	r2, r3
 8005a86:	4623      	mov	r3, r4
 8005a88:	f7fa fe46 	bl	8000718 <__aeabi_uldivmod>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	460c      	mov	r4, r1
 8005a90:	461a      	mov	r2, r3
 8005a92:	4b0c      	ldr	r3, [pc, #48]	; (8005ac4 <UART_SetConfig+0x384>)
 8005a94:	fba3 1302 	umull	r1, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	2164      	movs	r1, #100	; 0x64
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	3332      	adds	r3, #50	; 0x32
 8005aa6:	4a07      	ldr	r2, [pc, #28]	; (8005ac4 <UART_SetConfig+0x384>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	f003 0207 	and.w	r2, r3, #7
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4442      	add	r2, r8
 8005ab8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005aba:	e1b2      	b.n	8005e22 <UART_SetConfig+0x6e2>
 8005abc:	40011000 	.word	0x40011000
 8005ac0:	40011400 	.word	0x40011400
 8005ac4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4ad7      	ldr	r2, [pc, #860]	; (8005e2c <UART_SetConfig+0x6ec>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d005      	beq.n	8005ade <UART_SetConfig+0x39e>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4ad6      	ldr	r2, [pc, #856]	; (8005e30 <UART_SetConfig+0x6f0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	f040 80d1 	bne.w	8005c80 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ade:	f7fe ff05 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 8005ae2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	469a      	mov	sl, r3
 8005ae8:	f04f 0b00 	mov.w	fp, #0
 8005aec:	46d0      	mov	r8, sl
 8005aee:	46d9      	mov	r9, fp
 8005af0:	eb18 0308 	adds.w	r3, r8, r8
 8005af4:	eb49 0409 	adc.w	r4, r9, r9
 8005af8:	4698      	mov	r8, r3
 8005afa:	46a1      	mov	r9, r4
 8005afc:	eb18 080a 	adds.w	r8, r8, sl
 8005b00:	eb49 090b 	adc.w	r9, r9, fp
 8005b04:	f04f 0100 	mov.w	r1, #0
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b18:	4688      	mov	r8, r1
 8005b1a:	4691      	mov	r9, r2
 8005b1c:	eb1a 0508 	adds.w	r5, sl, r8
 8005b20:	eb4b 0609 	adc.w	r6, fp, r9
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	f04f 0300 	mov.w	r3, #0
 8005b32:	f04f 0400 	mov.w	r4, #0
 8005b36:	0094      	lsls	r4, r2, #2
 8005b38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b3c:	008b      	lsls	r3, r1, #2
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4623      	mov	r3, r4
 8005b42:	4628      	mov	r0, r5
 8005b44:	4631      	mov	r1, r6
 8005b46:	f7fa fde7 	bl	8000718 <__aeabi_uldivmod>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	460c      	mov	r4, r1
 8005b4e:	461a      	mov	r2, r3
 8005b50:	4bb8      	ldr	r3, [pc, #736]	; (8005e34 <UART_SetConfig+0x6f4>)
 8005b52:	fba3 2302 	umull	r2, r3, r3, r2
 8005b56:	095b      	lsrs	r3, r3, #5
 8005b58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	469b      	mov	fp, r3
 8005b60:	f04f 0c00 	mov.w	ip, #0
 8005b64:	46d9      	mov	r9, fp
 8005b66:	46e2      	mov	sl, ip
 8005b68:	eb19 0309 	adds.w	r3, r9, r9
 8005b6c:	eb4a 040a 	adc.w	r4, sl, sl
 8005b70:	4699      	mov	r9, r3
 8005b72:	46a2      	mov	sl, r4
 8005b74:	eb19 090b 	adds.w	r9, r9, fp
 8005b78:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b7c:	f04f 0100 	mov.w	r1, #0
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b90:	4689      	mov	r9, r1
 8005b92:	4692      	mov	sl, r2
 8005b94:	eb1b 0509 	adds.w	r5, fp, r9
 8005b98:	eb4c 060a 	adc.w	r6, ip, sl
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	f04f 0400 	mov.w	r4, #0
 8005bae:	0094      	lsls	r4, r2, #2
 8005bb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bb4:	008b      	lsls	r3, r1, #2
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	4623      	mov	r3, r4
 8005bba:	4628      	mov	r0, r5
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	f7fa fdab 	bl	8000718 <__aeabi_uldivmod>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	460c      	mov	r4, r1
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4b9a      	ldr	r3, [pc, #616]	; (8005e34 <UART_SetConfig+0x6f4>)
 8005bca:	fba3 1302 	umull	r1, r3, r3, r2
 8005bce:	095b      	lsrs	r3, r3, #5
 8005bd0:	2164      	movs	r1, #100	; 0x64
 8005bd2:	fb01 f303 	mul.w	r3, r1, r3
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	3332      	adds	r3, #50	; 0x32
 8005bdc:	4a95      	ldr	r2, [pc, #596]	; (8005e34 <UART_SetConfig+0x6f4>)
 8005bde:	fba2 2303 	umull	r2, r3, r2, r3
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be8:	4498      	add	r8, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	469b      	mov	fp, r3
 8005bee:	f04f 0c00 	mov.w	ip, #0
 8005bf2:	46d9      	mov	r9, fp
 8005bf4:	46e2      	mov	sl, ip
 8005bf6:	eb19 0309 	adds.w	r3, r9, r9
 8005bfa:	eb4a 040a 	adc.w	r4, sl, sl
 8005bfe:	4699      	mov	r9, r3
 8005c00:	46a2      	mov	sl, r4
 8005c02:	eb19 090b 	adds.w	r9, r9, fp
 8005c06:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c0a:	f04f 0100 	mov.w	r1, #0
 8005c0e:	f04f 0200 	mov.w	r2, #0
 8005c12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c1e:	4689      	mov	r9, r1
 8005c20:	4692      	mov	sl, r2
 8005c22:	eb1b 0509 	adds.w	r5, fp, r9
 8005c26:	eb4c 060a 	adc.w	r6, ip, sl
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	f04f 0400 	mov.w	r4, #0
 8005c3c:	0094      	lsls	r4, r2, #2
 8005c3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c42:	008b      	lsls	r3, r1, #2
 8005c44:	461a      	mov	r2, r3
 8005c46:	4623      	mov	r3, r4
 8005c48:	4628      	mov	r0, r5
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	f7fa fd64 	bl	8000718 <__aeabi_uldivmod>
 8005c50:	4603      	mov	r3, r0
 8005c52:	460c      	mov	r4, r1
 8005c54:	461a      	mov	r2, r3
 8005c56:	4b77      	ldr	r3, [pc, #476]	; (8005e34 <UART_SetConfig+0x6f4>)
 8005c58:	fba3 1302 	umull	r1, r3, r3, r2
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	2164      	movs	r1, #100	; 0x64
 8005c60:	fb01 f303 	mul.w	r3, r1, r3
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	3332      	adds	r3, #50	; 0x32
 8005c6a:	4a72      	ldr	r2, [pc, #456]	; (8005e34 <UART_SetConfig+0x6f4>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	f003 020f 	and.w	r2, r3, #15
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4442      	add	r2, r8
 8005c7c:	609a      	str	r2, [r3, #8]
 8005c7e:	e0d0      	b.n	8005e22 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c80:	f7fe fe20 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
 8005c84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	469a      	mov	sl, r3
 8005c8a:	f04f 0b00 	mov.w	fp, #0
 8005c8e:	46d0      	mov	r8, sl
 8005c90:	46d9      	mov	r9, fp
 8005c92:	eb18 0308 	adds.w	r3, r8, r8
 8005c96:	eb49 0409 	adc.w	r4, r9, r9
 8005c9a:	4698      	mov	r8, r3
 8005c9c:	46a1      	mov	r9, r4
 8005c9e:	eb18 080a 	adds.w	r8, r8, sl
 8005ca2:	eb49 090b 	adc.w	r9, r9, fp
 8005ca6:	f04f 0100 	mov.w	r1, #0
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cb2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cba:	4688      	mov	r8, r1
 8005cbc:	4691      	mov	r9, r2
 8005cbe:	eb1a 0508 	adds.w	r5, sl, r8
 8005cc2:	eb4b 0609 	adc.w	r6, fp, r9
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	f04f 0400 	mov.w	r4, #0
 8005cd8:	0094      	lsls	r4, r2, #2
 8005cda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cde:	008b      	lsls	r3, r1, #2
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4623      	mov	r3, r4
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	f7fa fd16 	bl	8000718 <__aeabi_uldivmod>
 8005cec:	4603      	mov	r3, r0
 8005cee:	460c      	mov	r4, r1
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4b50      	ldr	r3, [pc, #320]	; (8005e34 <UART_SetConfig+0x6f4>)
 8005cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf8:	095b      	lsrs	r3, r3, #5
 8005cfa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	469b      	mov	fp, r3
 8005d02:	f04f 0c00 	mov.w	ip, #0
 8005d06:	46d9      	mov	r9, fp
 8005d08:	46e2      	mov	sl, ip
 8005d0a:	eb19 0309 	adds.w	r3, r9, r9
 8005d0e:	eb4a 040a 	adc.w	r4, sl, sl
 8005d12:	4699      	mov	r9, r3
 8005d14:	46a2      	mov	sl, r4
 8005d16:	eb19 090b 	adds.w	r9, r9, fp
 8005d1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d1e:	f04f 0100 	mov.w	r1, #0
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d32:	4689      	mov	r9, r1
 8005d34:	4692      	mov	sl, r2
 8005d36:	eb1b 0509 	adds.w	r5, fp, r9
 8005d3a:	eb4c 060a 	adc.w	r6, ip, sl
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	4619      	mov	r1, r3
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	f04f 0400 	mov.w	r4, #0
 8005d50:	0094      	lsls	r4, r2, #2
 8005d52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d56:	008b      	lsls	r3, r1, #2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4623      	mov	r3, r4
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	4631      	mov	r1, r6
 8005d60:	f7fa fcda 	bl	8000718 <__aeabi_uldivmod>
 8005d64:	4603      	mov	r3, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4b32      	ldr	r3, [pc, #200]	; (8005e34 <UART_SetConfig+0x6f4>)
 8005d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d70:	095b      	lsrs	r3, r3, #5
 8005d72:	2164      	movs	r1, #100	; 0x64
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	3332      	adds	r3, #50	; 0x32
 8005d7e:	4a2d      	ldr	r2, [pc, #180]	; (8005e34 <UART_SetConfig+0x6f4>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	095b      	lsrs	r3, r3, #5
 8005d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d8a:	4498      	add	r8, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	469b      	mov	fp, r3
 8005d90:	f04f 0c00 	mov.w	ip, #0
 8005d94:	46d9      	mov	r9, fp
 8005d96:	46e2      	mov	sl, ip
 8005d98:	eb19 0309 	adds.w	r3, r9, r9
 8005d9c:	eb4a 040a 	adc.w	r4, sl, sl
 8005da0:	4699      	mov	r9, r3
 8005da2:	46a2      	mov	sl, r4
 8005da4:	eb19 090b 	adds.w	r9, r9, fp
 8005da8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005dac:	f04f 0100 	mov.w	r1, #0
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005db8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dc0:	4689      	mov	r9, r1
 8005dc2:	4692      	mov	sl, r2
 8005dc4:	eb1b 0509 	adds.w	r5, fp, r9
 8005dc8:	eb4c 060a 	adc.w	r6, ip, sl
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	f04f 0400 	mov.w	r4, #0
 8005dde:	0094      	lsls	r4, r2, #2
 8005de0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005de4:	008b      	lsls	r3, r1, #2
 8005de6:	461a      	mov	r2, r3
 8005de8:	4623      	mov	r3, r4
 8005dea:	4628      	mov	r0, r5
 8005dec:	4631      	mov	r1, r6
 8005dee:	f7fa fc93 	bl	8000718 <__aeabi_uldivmod>
 8005df2:	4603      	mov	r3, r0
 8005df4:	460c      	mov	r4, r1
 8005df6:	461a      	mov	r2, r3
 8005df8:	4b0e      	ldr	r3, [pc, #56]	; (8005e34 <UART_SetConfig+0x6f4>)
 8005dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	2164      	movs	r1, #100	; 0x64
 8005e02:	fb01 f303 	mul.w	r3, r1, r3
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	3332      	adds	r3, #50	; 0x32
 8005e0c:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <UART_SetConfig+0x6f4>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	f003 020f 	and.w	r2, r3, #15
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4442      	add	r2, r8
 8005e1e:	609a      	str	r2, [r3, #8]
}
 8005e20:	e7ff      	b.n	8005e22 <UART_SetConfig+0x6e2>
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2c:	40011000 	.word	0x40011000
 8005e30:	40011400 	.word	0x40011400
 8005e34:	51eb851f 	.word	0x51eb851f

08005e38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e4a:	2b84      	cmp	r3, #132	; 0x84
 8005e4c:	d005      	beq.n	8005e5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	3303      	adds	r3, #3
 8005e58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e6e:	f3ef 8305 	mrs	r3, IPSR
 8005e72:	607b      	str	r3, [r7, #4]
  return(result);
 8005e74:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bf14      	ite	ne
 8005e7a:	2301      	movne	r3, #1
 8005e7c:	2300      	moveq	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005e90:	f001 fe1e 	bl	8007ad0 <vTaskStartScheduler>
  
  return osOK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9c:	b089      	sub	sp, #36	; 0x24
 8005e9e:	af04      	add	r7, sp, #16
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d020      	beq.n	8005eee <osThreadCreate+0x54>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01c      	beq.n	8005eee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685c      	ldr	r4, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681d      	ldr	r5, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691e      	ldr	r6, [r3, #16]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff ffb6 	bl	8005e38 <makeFreeRtosPriority>
 8005ecc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ed6:	9202      	str	r2, [sp, #8]
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	9100      	str	r1, [sp, #0]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	4632      	mov	r2, r6
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f001 fa13 	bl	800730e <xTaskCreateStatic>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	e01c      	b.n	8005f28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685c      	ldr	r4, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005efa:	b29e      	uxth	r6, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff ff98 	bl	8005e38 <makeFreeRtosPriority>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	f107 030c 	add.w	r3, r7, #12
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	9200      	str	r2, [sp, #0]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	4632      	mov	r2, r6
 8005f16:	4629      	mov	r1, r5
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f001 fa51 	bl	80073c0 <xTaskCreate>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d001      	beq.n	8005f28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f24:	2300      	movs	r3, #0
 8005f26:	e000      	b.n	8005f2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f28:	68fb      	ldr	r3, [r7, #12]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f32 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f001 fb6e 	bl	800761c <vTaskDelete>
  return osOK;
 8005f40:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <osDelay+0x16>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	e000      	b.n	8005f62 <osDelay+0x18>
 8005f60:	2301      	movs	r3, #1
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 fbe8 	bl	8007738 <vTaskDelay>
  
  return osOK;
 8005f68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b086      	sub	sp, #24
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	3303      	adds	r3, #3
 8005f80:	f023 0303 	bic.w	r3, r3, #3
 8005f84:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8005f86:	2014      	movs	r0, #20
 8005f88:	f002 fcea 	bl	8008960 <pvPortMalloc>
 8005f8c:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d046      	beq.n	8006022 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f002 fcd7 	bl	8008960 <pvPortMalloc>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d02b      	beq.n	8006018 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	fb02 f303 	mul.w	r3, r2, r3
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f002 fcc8 	bl	8008960 <pvPortMalloc>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d011      	beq.n	8006002 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8005fde:	2300      	movs	r3, #0
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	e008      	b.n	8005ff6 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4413      	add	r3, r2
 8005fec:	2200      	movs	r2, #0
 8005fee:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d3f1      	bcc.n	8005fe4 <osPoolCreate+0x72>
 8006000:	e00f      	b.n	8006022 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	4618      	mov	r0, r3
 8006008:	f002 fd6c 	bl	8008ae4 <vPortFree>
        vPortFree(thePool);
 800600c:	6978      	ldr	r0, [r7, #20]
 800600e:	f002 fd69 	bl	8008ae4 <vPortFree>
        thePool = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	e004      	b.n	8006022 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8006018:	6978      	ldr	r0, [r7, #20]
 800601a:	f002 fd63 	bl	8008ae4 <vPortFree>
      thePool = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8006022:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	; 0x28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8006038:	2300      	movs	r3, #0
 800603a:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800603c:	f7ff ff14 	bl	8005e68 <inHandlerMode>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00e      	beq.n	8006064 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006046:	f3ef 8211 	mrs	r2, BASEPRI
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	617a      	str	r2, [r7, #20]
 800605c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800605e:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
 8006062:	e001      	b.n	8006068 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8006064:	f002 fb62 	bl	800872c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8006068:	2300      	movs	r3, #0
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	e029      	b.n	80060c2 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	429a      	cmp	r2, r3
 8006080:	d301      	bcc.n	8006086 <osPoolAlloc+0x5a>
      index = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	4413      	add	r3, r2
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d113      	bne.n	80060bc <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	4413      	add	r3, r2
 800609c:	2201      	movs	r2, #1
 800609e:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4619      	mov	r1, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	fb02 f303 	mul.w	r3, r2, r3
 80060b0:	440b      	add	r3, r1
 80060b2:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	611a      	str	r2, [r3, #16]
      break;
 80060ba:	e007      	b.n	80060cc <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	3301      	adds	r3, #1
 80060c0:	61fb      	str	r3, [r7, #28]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d3d0      	bcc.n	800606e <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80060cc:	f7ff fecc 	bl	8005e68 <inHandlerMode>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	e001      	b.n	80060e6 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80060e2:	f002 fb51 	bl	8008788 <vPortExitCritical>
  }
  
  return p;
 80060e6:	6a3b      	ldr	r3, [r7, #32]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3728      	adds	r7, #40	; 0x28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <osPoolFree+0x14>
    return osErrorParameter;
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	e030      	b.n	8006166 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <osPoolFree+0x1e>
    return osErrorParameter;
 800610a:	2380      	movs	r3, #128	; 0x80
 800610c:	e02b      	b.n	8006166 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d201      	bcs.n	800611c <osPoolFree+0x2c>
    return osErrorParameter;
 8006118:	2380      	movs	r3, #128	; 0x80
 800611a:	e024      	b.n	8006166 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006130:	fb02 f201 	mul.w	r2, r2, r1
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <osPoolFree+0x4e>
    return osErrorParameter;
 800613a:	2380      	movs	r3, #128	; 0x80
 800613c:	e013      	b.n	8006166 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	fbb2 f3f3 	udiv	r3, r2, r3
 8006148:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	429a      	cmp	r2, r3
 8006152:	d301      	bcc.n	8006158 <osPoolFree+0x68>
    return osErrorParameter;
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	e006      	b.n	8006166 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	2200      	movs	r2, #0
 8006162:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006172:	b590      	push	{r4, r7, lr}
 8006174:	b085      	sub	sp, #20
 8006176:	af02      	add	r7, sp, #8
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d012      	beq.n	80061aa <osMessageCreate+0x38>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00e      	beq.n	80061aa <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6859      	ldr	r1, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68dc      	ldr	r4, [r3, #12]
 800619c:	2300      	movs	r3, #0
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	4623      	mov	r3, r4
 80061a2:	f000 fb11 	bl	80067c8 <xQueueGenericCreateStatic>
 80061a6:	4603      	mov	r3, r0
 80061a8:	e008      	b.n	80061bc <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	4619      	mov	r1, r3
 80061b6:	f000 fb79 	bl	80068ac <xQueueGenericCreate>
 80061ba:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80061bc:	4618      	mov	r0, r3
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd90      	pop	{r4, r7, pc}

080061c4 <osMessageOverwrite>:
  
  return osOK;
}

osStatus osMessageOverwrite (osMessageQId queue_id, uint32_t info)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken = pdFALSE;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]

  if (inHandlerMode()) {
 80061d2:	f7ff fe49 	bl	8005e68 <inHandlerMode>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d017      	beq.n	800620c <osMessageOverwrite+0x48>
    if (xQueueOverwriteFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80061dc:	f107 020c 	add.w	r2, r7, #12
 80061e0:	4639      	mov	r1, r7
 80061e2:	2302      	movs	r3, #2
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fcb7 	bl	8006b58 <xQueueGenericSendFromISR>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d001      	beq.n	80061f4 <osMessageOverwrite+0x30>
      return osErrorOS;
 80061f0:	23ff      	movs	r3, #255	; 0xff
 80061f2:	e017      	b.n	8006224 <osMessageOverwrite+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d013      	beq.n	8006222 <osMessageOverwrite+0x5e>
 80061fa:	4b0c      	ldr	r3, [pc, #48]	; (800622c <osMessageOverwrite+0x68>)
 80061fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	e00a      	b.n	8006222 <osMessageOverwrite+0x5e>
  }
  else {
    if (xQueueOverwrite(queue_id, &info) != pdTRUE) {
 800620c:	4639      	mov	r1, r7
 800620e:	2302      	movs	r3, #2
 8006210:	2200      	movs	r2, #0
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fba6 	bl	8006964 <xQueueGenericSend>
 8006218:	4603      	mov	r3, r0
 800621a:	2b01      	cmp	r3, #1
 800621c:	d001      	beq.n	8006222 <osMessageOverwrite+0x5e>
      return osErrorOS;
 800621e:	23ff      	movs	r3, #255	; 0xff
 8006220:	e000      	b.n	8006224 <osMessageOverwrite+0x60>
    }
  }

  return osOK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	e000ed04 	.word	0xe000ed04

08006230 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8006230:	b590      	push	{r4, r7, lr}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	613b      	str	r3, [r7, #16]
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689c      	ldr	r4, [r3, #8]
 800624e:	200c      	movs	r0, #12
 8006250:	f002 fb86 	bl	8008960 <pvPortMalloc>
 8006254:	4603      	mov	r3, r0
 8006256:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <osMailCreate+0x36>
    return NULL;
 8006262:	2300      	movs	r3, #0
 8006264:	e038      	b.n	80062d8 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6818      	ldr	r0, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	681c      	ldr	r4, [r3, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	2104      	movs	r1, #4
 800627e:	f000 fb15 	bl	80068ac <xQueueGenericCreate>
 8006282:	4603      	mov	r3, r0
 8006284:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d107      	bne.n	80062a2 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f002 fc23 	bl	8008ae4 <vPortFree>
    return NULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	e01a      	b.n	80062d8 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	681c      	ldr	r4, [r3, #0]
 80062a8:	f107 030c 	add.w	r3, r7, #12
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff fe60 	bl	8005f72 <osPoolCreate>
 80062b2:	4603      	mov	r3, r0
 80062b4:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d107      	bne.n	80062d2 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f002 fc0b 	bl	8008ae4 <vPortFree>
    return NULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e002      	b.n	80062d8 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80062d8:	4618      	mov	r0, r3
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd90      	pop	{r4, r7, pc}

080062e0 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <osMailAlloc+0x14>
    return NULL;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e006      	b.n	8006302 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff fe97 	bl	800602c <osPoolAlloc>
 80062fe:	60f8      	str	r0, [r7, #12]
  
  return p;
 8006300:	68fb      	ldr	r3, [r7, #12]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <osMailPut+0x14>
    return osErrorParameter;
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	e02c      	b.n	800637a <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8006324:	f7ff fda0 	bl	8005e68 <inHandlerMode>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d018      	beq.n	8006360 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6858      	ldr	r0, [r3, #4]
 8006332:	f107 020c 	add.w	r2, r7, #12
 8006336:	4639      	mov	r1, r7
 8006338:	2300      	movs	r3, #0
 800633a:	f000 fc0d 	bl	8006b58 <xQueueGenericSendFromISR>
 800633e:	4603      	mov	r3, r0
 8006340:	2b01      	cmp	r3, #1
 8006342:	d001      	beq.n	8006348 <osMailPut+0x3c>
      return osErrorOS;
 8006344:	23ff      	movs	r3, #255	; 0xff
 8006346:	e018      	b.n	800637a <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d014      	beq.n	8006378 <osMailPut+0x6c>
 800634e:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <osMailPut+0x78>)
 8006350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	e00b      	b.n	8006378 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6858      	ldr	r0, [r3, #4]
 8006364:	4639      	mov	r1, r7
 8006366:	2300      	movs	r3, #0
 8006368:	2200      	movs	r2, #0
 800636a:	f000 fafb 	bl	8006964 <xQueueGenericSend>
 800636e:	4603      	mov	r3, r0
 8006370:	2b01      	cmp	r3, #1
 8006372:	d001      	beq.n	8006378 <osMailPut+0x6c>
      return osErrorOS;
 8006374:	23ff      	movs	r3, #255	; 0xff
 8006376:	e000      	b.n	800637a <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	e000ed04 	.word	0xe000ed04

08006388 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8006388:	b590      	push	{r4, r7, lr}
 800638a:	b08b      	sub	sp, #44	; 0x2c
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800639e:	2380      	movs	r3, #128	; 0x80
 80063a0:	617b      	str	r3, [r7, #20]
    return event;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	461c      	mov	r4, r3
 80063a6:	f107 0314 	add.w	r3, r7, #20
 80063aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80063ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80063b2:	e056      	b.n	8006462 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80063b4:	2300      	movs	r3, #0
 80063b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d103      	bne.n	80063cc <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80063c4:	f04f 33ff 	mov.w	r3, #4294967295
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ca:	e009      	b.n	80063e0 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d006      	beq.n	80063e0 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <osMailGet+0x58>
      ticks = 1;
 80063dc:	2301      	movs	r3, #1
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80063e0:	f7ff fd42 	bl	8005e68 <inHandlerMode>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d01d      	beq.n	8006426 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6858      	ldr	r0, [r3, #4]
 80063ee:	f107 0220 	add.w	r2, r7, #32
 80063f2:	f107 0314 	add.w	r3, r7, #20
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	f000 fdfb 	bl	8006ff4 <xQueueReceiveFromISR>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b01      	cmp	r3, #1
 8006402:	d102      	bne.n	800640a <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8006404:	2320      	movs	r3, #32
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	e001      	b.n	800640e <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01e      	beq.n	8006452 <osMailGet+0xca>
 8006414:	4b15      	ldr	r3, [pc, #84]	; (800646c <osMailGet+0xe4>)
 8006416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	e015      	b.n	8006452 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6858      	ldr	r0, [r3, #4]
 800642a:	f107 0314 	add.w	r3, r7, #20
 800642e:	3304      	adds	r3, #4
 8006430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006432:	4619      	mov	r1, r3
 8006434:	f000 fc24 	bl	8006c80 <xQueueReceive>
 8006438:	4603      	mov	r3, r0
 800643a:	2b01      	cmp	r3, #1
 800643c:	d102      	bne.n	8006444 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800643e:	2320      	movs	r3, #32
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	e006      	b.n	8006452 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <osMailGet+0xc6>
 800644a:	2300      	movs	r3, #0
 800644c:	e000      	b.n	8006450 <osMailGet+0xc8>
 800644e:	2340      	movs	r3, #64	; 0x40
 8006450:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	461c      	mov	r4, r3
 8006456:	f107 0314 	add.w	r3, r7, #20
 800645a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800645e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	372c      	adds	r7, #44	; 0x2c
 8006466:	46bd      	mov	sp, r7
 8006468:	bd90      	pop	{r4, r7, pc}
 800646a:	bf00      	nop
 800646c:	e000ed04 	.word	0xe000ed04

08006470 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <osMailFree+0x14>
    return osErrorParameter;
 8006480:	2380      	movs	r3, #128	; 0x80
 8006482:	e006      	b.n	8006492 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff fe30 	bl	80060f0 <osPoolFree>
 8006490:	4603      	mov	r3, r0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 f97c 	bl	80077a0 <vTaskSuspend>
  
  return osOK;
 80064a8:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80064bc:	f7ff fcd4 	bl	8005e68 <inHandlerMode>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00e      	beq.n	80064e4 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 fa92 	bl	80079f0 <xTaskResumeFromISR>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d10b      	bne.n	80064ea <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80064d2:	4b08      	ldr	r3, [pc, #32]	; (80064f4 <osThreadResume+0x40>)
 80064d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	e002      	b.n	80064ea <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 fa27 	bl	8007938 <vTaskResume>
  }
  return osOK;
 80064ea:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	e000ed04 	.word	0xe000ed04

080064f8 <osMessagePeek>:
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
*/
osEvent osMessagePeek (osMessageQId queue_id, uint32_t millisec)
{
 80064f8:	b590      	push	{r4, r7, lr}
 80064fa:	b089      	sub	sp, #36	; 0x24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <osMessagePeek+0x2c>
    event.status = osErrorParameter;
 800650e:	2380      	movs	r3, #128	; 0x80
 8006510:	613b      	str	r3, [r7, #16]
    return event;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	461c      	mov	r4, r3
 8006516:	f107 0310 	add.w	r3, r7, #16
 800651a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800651e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006522:	e030      	b.n	8006586 <osMessagePeek+0x8e>
  }
  
  ticks = 0;
 8006524:	2300      	movs	r3, #0
 8006526:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652e:	d103      	bne.n	8006538 <osMessagePeek+0x40>
    ticks = portMAX_DELAY;
 8006530:	f04f 33ff 	mov.w	r3, #4294967295
 8006534:	61fb      	str	r3, [r7, #28]
 8006536:	e009      	b.n	800654c <osMessagePeek+0x54>
  }
  else if (millisec != 0) {
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d006      	beq.n	800654c <osMessagePeek+0x54>
    ticks = millisec / portTICK_PERIOD_MS;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <osMessagePeek+0x54>
      ticks = 1;
 8006548:	2301      	movs	r3, #1
 800654a:	61fb      	str	r3, [r7, #28]
    }
  }
  
  if (xQueuePeek(queue_id, &event.value.v, ticks) == pdTRUE) 
 800654c:	f107 0310 	add.w	r3, r7, #16
 8006550:	3304      	adds	r3, #4
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	4619      	mov	r1, r3
 8006556:	68b8      	ldr	r0, [r7, #8]
 8006558:	f000 fc6e 	bl	8006e38 <xQueuePeek>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d102      	bne.n	8006568 <osMessagePeek+0x70>
  {
    /* We have mail */
    event.status = osEventMessage;
 8006562:	2310      	movs	r3, #16
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	e006      	b.n	8006576 <osMessagePeek+0x7e>
  }
  else 
  {
    event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <osMessagePeek+0x7a>
 800656e:	2300      	movs	r3, #0
 8006570:	e000      	b.n	8006574 <osMessagePeek+0x7c>
 8006572:	2340      	movs	r3, #64	; 0x40
 8006574:	613b      	str	r3, [r7, #16]
  }
  
  return event;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	461c      	mov	r4, r3
 800657a:	f107 0310 	add.w	r3, r7, #16
 800657e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006582:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	3724      	adds	r7, #36	; 0x24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd90      	pop	{r4, r7, pc}

0800658e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f103 0208 	add.w	r2, r3, #8
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f04f 32ff 	mov.w	r2, #4294967295
 80065a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f103 0208 	add.w	r2, r3, #8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f103 0208 	add.w	r2, r3, #8
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	601a      	str	r2, [r3, #0]
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006646:	d103      	bne.n	8006650 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	e00c      	b.n	800666a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3308      	adds	r3, #8
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	e002      	b.n	800665e <vListInsert+0x2e>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	429a      	cmp	r2, r3
 8006668:	d2f6      	bcs.n	8006658 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	601a      	str	r2, [r3, #0]
}
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066a2:	b480      	push	{r7}
 80066a4:	b085      	sub	sp, #20
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6892      	ldr	r2, [r2, #8]
 80066b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6852      	ldr	r2, [r2, #4]
 80066c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d103      	bne.n	80066d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	1e5a      	subs	r2, r3, #1
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
	...

080066f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d109      	bne.n	8006720 <xQueueGenericReset+0x28>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	60bb      	str	r3, [r7, #8]
 800671e:	e7fe      	b.n	800671e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006720:	f002 f804 	bl	800872c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672c:	68f9      	ldr	r1, [r7, #12]
 800672e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006730:	fb01 f303 	mul.w	r3, r1, r3
 8006734:	441a      	add	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006750:	3b01      	subs	r3, #1
 8006752:	68f9      	ldr	r1, [r7, #12]
 8006754:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006756:	fb01 f303 	mul.w	r3, r1, r3
 800675a:	441a      	add	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	22ff      	movs	r2, #255	; 0xff
 8006764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	22ff      	movs	r2, #255	; 0xff
 800676c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d114      	bne.n	80067a0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d01a      	beq.n	80067b4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3310      	adds	r3, #16
 8006782:	4618      	mov	r0, r3
 8006784:	f001 fbe6 	bl	8007f54 <xTaskRemoveFromEventList>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d012      	beq.n	80067b4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800678e:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <xQueueGenericReset+0xcc>)
 8006790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	e009      	b.n	80067b4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	3310      	adds	r3, #16
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff fef2 	bl	800658e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3324      	adds	r3, #36	; 0x24
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff feed 	bl	800658e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067b4:	f001 ffe8 	bl	8008788 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067b8:	2301      	movs	r3, #1
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	e000ed04 	.word	0xe000ed04

080067c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08e      	sub	sp, #56	; 0x38
 80067cc:	af02      	add	r7, sp, #8
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d109      	bne.n	80067f0 <xQueueGenericCreateStatic+0x28>
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ee:	e7fe      	b.n	80067ee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d109      	bne.n	800680a <xQueueGenericCreateStatic+0x42>
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
 8006808:	e7fe      	b.n	8006808 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <xQueueGenericCreateStatic+0x4e>
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <xQueueGenericCreateStatic+0x52>
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <xQueueGenericCreateStatic+0x54>
 800681a:	2300      	movs	r3, #0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d109      	bne.n	8006834 <xQueueGenericCreateStatic+0x6c>
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	623b      	str	r3, [r7, #32]
 8006832:	e7fe      	b.n	8006832 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d102      	bne.n	8006840 <xQueueGenericCreateStatic+0x78>
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <xQueueGenericCreateStatic+0x7c>
 8006840:	2301      	movs	r3, #1
 8006842:	e000      	b.n	8006846 <xQueueGenericCreateStatic+0x7e>
 8006844:	2300      	movs	r3, #0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d109      	bne.n	800685e <xQueueGenericCreateStatic+0x96>
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	61fb      	str	r3, [r7, #28]
 800685c:	e7fe      	b.n	800685c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800685e:	2348      	movs	r3, #72	; 0x48
 8006860:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2b48      	cmp	r3, #72	; 0x48
 8006866:	d009      	beq.n	800687c <xQueueGenericCreateStatic+0xb4>
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	61bb      	str	r3, [r7, #24]
 800687a:	e7fe      	b.n	800687a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00d      	beq.n	80068a2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800688e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	4613      	mov	r3, r2
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	68b9      	ldr	r1, [r7, #8]
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f842 	bl	8006926 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3730      	adds	r7, #48	; 0x30
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08a      	sub	sp, #40	; 0x28
 80068b0:	af02      	add	r7, sp, #8
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <xQueueGenericCreate+0x28>
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	e7fe      	b.n	80068d2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80068da:	2300      	movs	r3, #0
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	e004      	b.n	80068ea <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	fb02 f303 	mul.w	r3, r2, r3
 80068e8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	3348      	adds	r3, #72	; 0x48
 80068ee:	4618      	mov	r0, r3
 80068f0:	f002 f836 	bl	8008960 <pvPortMalloc>
 80068f4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00f      	beq.n	800691c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	3348      	adds	r3, #72	; 0x48
 8006900:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800690a:	79fa      	ldrb	r2, [r7, #7]
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	68b9      	ldr	r1, [r7, #8]
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 f805 	bl	8006926 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800691c:	69bb      	ldr	r3, [r7, #24]
	}
 800691e:	4618      	mov	r0, r3
 8006920:	3720      	adds	r7, #32
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	60f8      	str	r0, [r7, #12]
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	607a      	str	r2, [r7, #4]
 8006932:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d103      	bne.n	8006942 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	e002      	b.n	8006948 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006954:	2101      	movs	r1, #1
 8006956:	69b8      	ldr	r0, [r7, #24]
 8006958:	f7ff fece 	bl	80066f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08e      	sub	sp, #56	; 0x38
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006972:	2300      	movs	r3, #0
 8006974:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <xQueueGenericSend+0x30>
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
 8006992:	e7fe      	b.n	8006992 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d103      	bne.n	80069a2 <xQueueGenericSend+0x3e>
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <xQueueGenericSend+0x42>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <xQueueGenericSend+0x44>
 80069a6:	2300      	movs	r3, #0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d109      	bne.n	80069c0 <xQueueGenericSend+0x5c>
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
 80069be:	e7fe      	b.n	80069be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d103      	bne.n	80069ce <xQueueGenericSend+0x6a>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <xQueueGenericSend+0x6e>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <xQueueGenericSend+0x70>
 80069d2:	2300      	movs	r3, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d109      	bne.n	80069ec <xQueueGenericSend+0x88>
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	623b      	str	r3, [r7, #32]
 80069ea:	e7fe      	b.n	80069ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069ec:	f001 fc6e 	bl	80082cc <xTaskGetSchedulerState>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <xQueueGenericSend+0x98>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <xQueueGenericSend+0x9c>
 80069fc:	2301      	movs	r3, #1
 80069fe:	e000      	b.n	8006a02 <xQueueGenericSend+0x9e>
 8006a00:	2300      	movs	r3, #0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d109      	bne.n	8006a1a <xQueueGenericSend+0xb6>
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	61fb      	str	r3, [r7, #28]
 8006a18:	e7fe      	b.n	8006a18 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a1a:	f001 fe87 	bl	800872c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d302      	bcc.n	8006a30 <xQueueGenericSend+0xcc>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d129      	bne.n	8006a84 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	68b9      	ldr	r1, [r7, #8]
 8006a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a36:	f000 fb5a 	bl	80070ee <prvCopyDataToQueue>
 8006a3a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d010      	beq.n	8006a66 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	3324      	adds	r3, #36	; 0x24
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 fa83 	bl	8007f54 <xTaskRemoveFromEventList>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d013      	beq.n	8006a7c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a54:	4b3f      	ldr	r3, [pc, #252]	; (8006b54 <xQueueGenericSend+0x1f0>)
 8006a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	e00a      	b.n	8006a7c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d007      	beq.n	8006a7c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a6c:	4b39      	ldr	r3, [pc, #228]	; (8006b54 <xQueueGenericSend+0x1f0>)
 8006a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a7c:	f001 fe84 	bl	8008788 <vPortExitCritical>
				return pdPASS;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e063      	b.n	8006b4c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d103      	bne.n	8006a92 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a8a:	f001 fe7d 	bl	8008788 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	e05c      	b.n	8006b4c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d106      	bne.n	8006aa6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a98:	f107 0314 	add.w	r3, r7, #20
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 fabb 	bl	8008018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006aa6:	f001 fe6f 	bl	8008788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aaa:	f001 f86f 	bl	8007b8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006aae:	f001 fe3d 	bl	800872c <vPortEnterCritical>
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ab8:	b25b      	sxtb	r3, r3
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d103      	bne.n	8006ac8 <xQueueGenericSend+0x164>
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ace:	b25b      	sxtb	r3, r3
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad4:	d103      	bne.n	8006ade <xQueueGenericSend+0x17a>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ade:	f001 fe53 	bl	8008788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ae2:	1d3a      	adds	r2, r7, #4
 8006ae4:	f107 0314 	add.w	r3, r7, #20
 8006ae8:	4611      	mov	r1, r2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f001 faaa 	bl	8008044 <xTaskCheckForTimeOut>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d124      	bne.n	8006b40 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006af6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006af8:	f000 fbf1 	bl	80072de <prvIsQueueFull>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d018      	beq.n	8006b34 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	3310      	adds	r3, #16
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	4611      	mov	r1, r2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 f9fe 	bl	8007f0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b12:	f000 fb7c 	bl	800720e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b16:	f001 f847 	bl	8007ba8 <xTaskResumeAll>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f47f af7c 	bne.w	8006a1a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006b22:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <xQueueGenericSend+0x1f0>)
 8006b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	e772      	b.n	8006a1a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b36:	f000 fb6a 	bl	800720e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b3a:	f001 f835 	bl	8007ba8 <xTaskResumeAll>
 8006b3e:	e76c      	b.n	8006a1a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b42:	f000 fb64 	bl	800720e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b46:	f001 f82f 	bl	8007ba8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b4a:	2300      	movs	r3, #0
		}
	}
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3738      	adds	r7, #56	; 0x38
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08e      	sub	sp, #56	; 0x38
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <xQueueGenericSendFromISR+0x2c>
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
 8006b82:	e7fe      	b.n	8006b82 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <xQueueGenericSendFromISR+0x3a>
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <xQueueGenericSendFromISR+0x3e>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <xQueueGenericSendFromISR+0x40>
 8006b96:	2300      	movs	r3, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d109      	bne.n	8006bb0 <xQueueGenericSendFromISR+0x58>
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	623b      	str	r3, [r7, #32]
 8006bae:	e7fe      	b.n	8006bae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d103      	bne.n	8006bbe <xQueueGenericSendFromISR+0x66>
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <xQueueGenericSendFromISR+0x6a>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <xQueueGenericSendFromISR+0x6c>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d109      	bne.n	8006bdc <xQueueGenericSendFromISR+0x84>
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	e7fe      	b.n	8006bda <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bdc:	f001 fe82 	bl	80088e4 <vPortValidateInterruptPriority>
	__asm volatile
 8006be0:	f3ef 8211 	mrs	r2, BASEPRI
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	61ba      	str	r2, [r7, #24]
 8006bf6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d302      	bcc.n	8006c0e <xQueueGenericSendFromISR+0xb6>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d12c      	bne.n	8006c68 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	68b9      	ldr	r1, [r7, #8]
 8006c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c1e:	f000 fa66 	bl	80070ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c22:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2a:	d112      	bne.n	8006c52 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d016      	beq.n	8006c62 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	3324      	adds	r3, #36	; 0x24
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f001 f98b 	bl	8007f54 <xTaskRemoveFromEventList>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00e      	beq.n	8006c62 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00b      	beq.n	8006c62 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	e007      	b.n	8006c62 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c56:	3301      	adds	r3, #1
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	b25a      	sxtb	r2, r3
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c62:	2301      	movs	r3, #1
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006c66:	e001      	b.n	8006c6c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3738      	adds	r7, #56	; 0x38
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08c      	sub	sp, #48	; 0x30
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <xQueueReceive+0x2e>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	623b      	str	r3, [r7, #32]
 8006cac:	e7fe      	b.n	8006cac <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d103      	bne.n	8006cbc <xQueueReceive+0x3c>
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <xQueueReceive+0x40>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e000      	b.n	8006cc2 <xQueueReceive+0x42>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d109      	bne.n	8006cda <xQueueReceive+0x5a>
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	e7fe      	b.n	8006cd8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cda:	f001 faf7 	bl	80082cc <xTaskGetSchedulerState>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <xQueueReceive+0x6a>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <xQueueReceive+0x6e>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <xQueueReceive+0x70>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d109      	bne.n	8006d08 <xQueueReceive+0x88>
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	e7fe      	b.n	8006d06 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d08:	f001 fd10 	bl	800872c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01f      	beq.n	8006d58 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d1c:	f000 fa51 	bl	80071c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	1e5a      	subs	r2, r3, #1
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00f      	beq.n	8006d50 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	3310      	adds	r3, #16
 8006d34:	4618      	mov	r0, r3
 8006d36:	f001 f90d 	bl	8007f54 <xTaskRemoveFromEventList>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d007      	beq.n	8006d50 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d40:	4b3c      	ldr	r3, [pc, #240]	; (8006e34 <xQueueReceive+0x1b4>)
 8006d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d50:	f001 fd1a 	bl	8008788 <vPortExitCritical>
				return pdPASS;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e069      	b.n	8006e2c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d103      	bne.n	8006d66 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d5e:	f001 fd13 	bl	8008788 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e062      	b.n	8006e2c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d106      	bne.n	8006d7a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d6c:	f107 0310 	add.w	r3, r7, #16
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 f951 	bl	8008018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d76:	2301      	movs	r3, #1
 8006d78:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d7a:	f001 fd05 	bl	8008788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d7e:	f000 ff05 	bl	8007b8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d82:	f001 fcd3 	bl	800872c <vPortEnterCritical>
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d8c:	b25b      	sxtb	r3, r3
 8006d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d92:	d103      	bne.n	8006d9c <xQueueReceive+0x11c>
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006da2:	b25b      	sxtb	r3, r3
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da8:	d103      	bne.n	8006db2 <xQueueReceive+0x132>
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006db2:	f001 fce9 	bl	8008788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006db6:	1d3a      	adds	r2, r7, #4
 8006db8:	f107 0310 	add.w	r3, r7, #16
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f001 f940 	bl	8008044 <xTaskCheckForTimeOut>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d123      	bne.n	8006e12 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dcc:	f000 fa71 	bl	80072b2 <prvIsQueueEmpty>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d017      	beq.n	8006e06 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	3324      	adds	r3, #36	; 0x24
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 f894 	bl	8007f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006de6:	f000 fa12 	bl	800720e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006dea:	f000 fedd 	bl	8007ba8 <xTaskResumeAll>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d189      	bne.n	8006d08 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006df4:	4b0f      	ldr	r3, [pc, #60]	; (8006e34 <xQueueReceive+0x1b4>)
 8006df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	e780      	b.n	8006d08 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e08:	f000 fa01 	bl	800720e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e0c:	f000 fecc 	bl	8007ba8 <xTaskResumeAll>
 8006e10:	e77a      	b.n	8006d08 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e14:	f000 f9fb 	bl	800720e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e18:	f000 fec6 	bl	8007ba8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e1e:	f000 fa48 	bl	80072b2 <prvIsQueueEmpty>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f43f af6f 	beq.w	8006d08 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3730      	adds	r7, #48	; 0x30
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	e000ed04 	.word	0xe000ed04

08006e38 <xQueuePeek>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08e      	sub	sp, #56	; 0x38
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e44:	2300      	movs	r3, #0
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d109      	bne.n	8006e66 <xQueuePeek+0x2e>
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
 8006e64:	e7fe      	b.n	8006e64 <xQueuePeek+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d103      	bne.n	8006e74 <xQueuePeek+0x3c>
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <xQueuePeek+0x40>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <xQueuePeek+0x42>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d109      	bne.n	8006e92 <xQueuePeek+0x5a>
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	623b      	str	r3, [r7, #32]
 8006e90:	e7fe      	b.n	8006e90 <xQueuePeek+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e92:	f001 fa1b 	bl	80082cc <xTaskGetSchedulerState>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d102      	bne.n	8006ea2 <xQueuePeek+0x6a>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <xQueuePeek+0x6e>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <xQueuePeek+0x70>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d109      	bne.n	8006ec0 <xQueuePeek+0x88>
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	61fb      	str	r3, [r7, #28]
 8006ebe:	e7fe      	b.n	8006ebe <xQueuePeek+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ec0:	f001 fc34 	bl	800872c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d021      	beq.n	8006f14 <xQueuePeek+0xdc>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eda:	f000 f972 	bl	80071c2 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee2:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00f      	beq.n	8006f0c <xQueuePeek+0xd4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	3324      	adds	r3, #36	; 0x24
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f001 f82f 	bl	8007f54 <xTaskRemoveFromEventList>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <xQueuePeek+0xd4>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8006efc:	4b3c      	ldr	r3, [pc, #240]	; (8006ff0 <xQueuePeek+0x1b8>)
 8006efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f0c:	f001 fc3c 	bl	8008788 <vPortExitCritical>
				return pdPASS;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e069      	b.n	8006fe8 <xQueuePeek+0x1b0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d103      	bne.n	8006f22 <xQueuePeek+0xea>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f1a:	f001 fc35 	bl	8008788 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e062      	b.n	8006fe8 <xQueuePeek+0x1b0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d106      	bne.n	8006f36 <xQueuePeek+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f28:	f107 0314 	add.w	r3, r7, #20
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f001 f873 	bl	8008018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f32:	2301      	movs	r3, #1
 8006f34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f36:	f001 fc27 	bl	8008788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f3a:	f000 fe27 	bl	8007b8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f3e:	f001 fbf5 	bl	800872c <vPortEnterCritical>
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f48:	b25b      	sxtb	r3, r3
 8006f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4e:	d103      	bne.n	8006f58 <xQueuePeek+0x120>
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f5e:	b25b      	sxtb	r3, r3
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d103      	bne.n	8006f6e <xQueuePeek+0x136>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f6e:	f001 fc0b 	bl	8008788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f72:	1d3a      	adds	r2, r7, #4
 8006f74:	f107 0314 	add.w	r3, r7, #20
 8006f78:	4611      	mov	r1, r2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 f862 	bl	8008044 <xTaskCheckForTimeOut>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d123      	bne.n	8006fce <xQueuePeek+0x196>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f88:	f000 f993 	bl	80072b2 <prvIsQueueEmpty>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d017      	beq.n	8006fc2 <xQueuePeek+0x18a>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	3324      	adds	r3, #36	; 0x24
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	4611      	mov	r1, r2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 ffb6 	bl	8007f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fa2:	f000 f934 	bl	800720e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fa6:	f000 fdff 	bl	8007ba8 <xTaskResumeAll>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d187      	bne.n	8006ec0 <xQueuePeek+0x88>
				{
					portYIELD_WITHIN_API();
 8006fb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <xQueuePeek+0x1b8>)
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	e77e      	b.n	8006ec0 <xQueuePeek+0x88>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8006fc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fc4:	f000 f923 	bl	800720e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fc8:	f000 fdee 	bl	8007ba8 <xTaskResumeAll>
 8006fcc:	e778      	b.n	8006ec0 <xQueuePeek+0x88>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8006fce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fd0:	f000 f91d 	bl	800720e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fd4:	f000 fde8 	bl	8007ba8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fda:	f000 f96a 	bl	80072b2 <prvIsQueueEmpty>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f43f af6d 	beq.w	8006ec0 <xQueuePeek+0x88>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fe6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3738      	adds	r7, #56	; 0x38
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	e000ed04 	.word	0xe000ed04

08006ff4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08e      	sub	sp, #56	; 0x38
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <xQueueReceiveFromISR+0x2a>
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	623b      	str	r3, [r7, #32]
 800701c:	e7fe      	b.n	800701c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d103      	bne.n	800702c <xQueueReceiveFromISR+0x38>
 8007024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <xQueueReceiveFromISR+0x3c>
 800702c:	2301      	movs	r3, #1
 800702e:	e000      	b.n	8007032 <xQueueReceiveFromISR+0x3e>
 8007030:	2300      	movs	r3, #0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d109      	bne.n	800704a <xQueueReceiveFromISR+0x56>
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	61fb      	str	r3, [r7, #28]
 8007048:	e7fe      	b.n	8007048 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800704a:	f001 fc4b 	bl	80088e4 <vPortValidateInterruptPriority>
	__asm volatile
 800704e:	f3ef 8211 	mrs	r2, BASEPRI
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	61ba      	str	r2, [r7, #24]
 8007064:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007066:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007068:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	2b00      	cmp	r3, #0
 8007074:	d02f      	beq.n	80070d6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800707c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007084:	f000 f89d 	bl	80071c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	1e5a      	subs	r2, r3, #1
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007090:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007098:	d112      	bne.n	80070c0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d016      	beq.n	80070d0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	3310      	adds	r3, #16
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 ff54 	bl	8007f54 <xTaskRemoveFromEventList>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00e      	beq.n	80070d0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e007      	b.n	80070d0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80070c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070c4:	3301      	adds	r3, #1
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	b25a      	sxtb	r2, r3
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80070d0:	2301      	movs	r3, #1
 80070d2:	637b      	str	r3, [r7, #52]	; 0x34
 80070d4:	e001      	b.n	80070da <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
 80070da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3738      	adds	r7, #56	; 0x38
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b086      	sub	sp, #24
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070fa:	2300      	movs	r3, #0
 80070fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10d      	bne.n	8007128 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d14d      	bne.n	80071b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	4618      	mov	r0, r3
 800711a:	f001 f8f5 	bl	8008308 <xTaskPriorityDisinherit>
 800711e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	605a      	str	r2, [r3, #4]
 8007126:	e043      	b.n	80071b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d119      	bne.n	8007162 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6898      	ldr	r0, [r3, #8]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	461a      	mov	r2, r3
 8007138:	68b9      	ldr	r1, [r7, #8]
 800713a:	f001 fe11 	bl	8008d60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689a      	ldr	r2, [r3, #8]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	441a      	add	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	429a      	cmp	r2, r3
 8007156:	d32b      	bcc.n	80071b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	609a      	str	r2, [r3, #8]
 8007160:	e026      	b.n	80071b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	68d8      	ldr	r0, [r3, #12]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	461a      	mov	r2, r3
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	f001 fdf7 	bl	8008d60 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	425b      	negs	r3, r3
 800717c:	441a      	add	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d207      	bcs.n	800719e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	425b      	negs	r3, r3
 8007198:	441a      	add	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d105      	bne.n	80071b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071b8:	697b      	ldr	r3, [r7, #20]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d018      	beq.n	8007206 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071dc:	441a      	add	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d303      	bcc.n	80071f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68d9      	ldr	r1, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	461a      	mov	r2, r3
 8007200:	6838      	ldr	r0, [r7, #0]
 8007202:	f001 fdad 	bl	8008d60 <memcpy>
	}
}
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007216:	f001 fa89 	bl	800872c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007220:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007222:	e011      	b.n	8007248 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	2b00      	cmp	r3, #0
 800722a:	d012      	beq.n	8007252 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3324      	adds	r3, #36	; 0x24
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fe8f 	bl	8007f54 <xTaskRemoveFromEventList>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800723c:	f000 ff62 	bl	8008104 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	3b01      	subs	r3, #1
 8007244:	b2db      	uxtb	r3, r3
 8007246:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800724c:	2b00      	cmp	r3, #0
 800724e:	dce9      	bgt.n	8007224 <prvUnlockQueue+0x16>
 8007250:	e000      	b.n	8007254 <prvUnlockQueue+0x46>
					break;
 8007252:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	22ff      	movs	r2, #255	; 0xff
 8007258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800725c:	f001 fa94 	bl	8008788 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007260:	f001 fa64 	bl	800872c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800726a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800726c:	e011      	b.n	8007292 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d012      	beq.n	800729c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3310      	adds	r3, #16
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fe6a 	bl	8007f54 <xTaskRemoveFromEventList>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007286:	f000 ff3d 	bl	8008104 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	3b01      	subs	r3, #1
 800728e:	b2db      	uxtb	r3, r3
 8007290:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007296:	2b00      	cmp	r3, #0
 8007298:	dce9      	bgt.n	800726e <prvUnlockQueue+0x60>
 800729a:	e000      	b.n	800729e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800729c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	22ff      	movs	r2, #255	; 0xff
 80072a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072a6:	f001 fa6f 	bl	8008788 <vPortExitCritical>
}
 80072aa:	bf00      	nop
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072ba:	f001 fa37 	bl	800872c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d102      	bne.n	80072cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072c6:	2301      	movs	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	e001      	b.n	80072d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072d0:	f001 fa5a 	bl	8008788 <vPortExitCritical>

	return xReturn;
 80072d4:	68fb      	ldr	r3, [r7, #12]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b084      	sub	sp, #16
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072e6:	f001 fa21 	bl	800872c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d102      	bne.n	80072fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072f6:	2301      	movs	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	e001      	b.n	8007300 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007300:	f001 fa42 	bl	8008788 <vPortExitCritical>

	return xReturn;
 8007304:	68fb      	ldr	r3, [r7, #12]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800730e:	b580      	push	{r7, lr}
 8007310:	b08e      	sub	sp, #56	; 0x38
 8007312:	af04      	add	r7, sp, #16
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
 800731a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800731c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731e:	2b00      	cmp	r3, #0
 8007320:	d109      	bne.n	8007336 <xTaskCreateStatic+0x28>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	623b      	str	r3, [r7, #32]
 8007334:	e7fe      	b.n	8007334 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	2b00      	cmp	r3, #0
 800733a:	d109      	bne.n	8007350 <xTaskCreateStatic+0x42>
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	61fb      	str	r3, [r7, #28]
 800734e:	e7fe      	b.n	800734e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007350:	2354      	movs	r3, #84	; 0x54
 8007352:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2b54      	cmp	r3, #84	; 0x54
 8007358:	d009      	beq.n	800736e <xTaskCreateStatic+0x60>
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	61bb      	str	r3, [r7, #24]
 800736c:	e7fe      	b.n	800736c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01e      	beq.n	80073b2 <xTaskCreateStatic+0xa4>
 8007374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007376:	2b00      	cmp	r3, #0
 8007378:	d01b      	beq.n	80073b2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007382:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	2202      	movs	r2, #2
 8007388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800738c:	2300      	movs	r3, #0
 800738e:	9303      	str	r3, [sp, #12]
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	9302      	str	r3, [sp, #8]
 8007394:	f107 0314 	add.w	r3, r7, #20
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 f850 	bl	800744a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073ac:	f000 f8cc 	bl	8007548 <prvAddNewTaskToReadyList>
 80073b0:	e001      	b.n	80073b6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073b6:	697b      	ldr	r3, [r7, #20]
	}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3728      	adds	r7, #40	; 0x28
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08c      	sub	sp, #48	; 0x30
 80073c4:	af04      	add	r7, sp, #16
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	4613      	mov	r3, r2
 80073ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d0:	88fb      	ldrh	r3, [r7, #6]
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 fac3 	bl	8008960 <pvPortMalloc>
 80073da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00e      	beq.n	8007400 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80073e2:	2054      	movs	r0, #84	; 0x54
 80073e4:	f001 fabc 	bl	8008960 <pvPortMalloc>
 80073e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	631a      	str	r2, [r3, #48]	; 0x30
 80073f6:	e005      	b.n	8007404 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073f8:	6978      	ldr	r0, [r7, #20]
 80073fa:	f001 fb73 	bl	8008ae4 <vPortFree>
 80073fe:	e001      	b.n	8007404 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007400:	2300      	movs	r3, #0
 8007402:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d017      	beq.n	800743a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007412:	88fa      	ldrh	r2, [r7, #6]
 8007414:	2300      	movs	r3, #0
 8007416:	9303      	str	r3, [sp, #12]
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	9302      	str	r3, [sp, #8]
 800741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f80e 	bl	800744a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800742e:	69f8      	ldr	r0, [r7, #28]
 8007430:	f000 f88a 	bl	8007548 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007434:	2301      	movs	r3, #1
 8007436:	61bb      	str	r3, [r7, #24]
 8007438:	e002      	b.n	8007440 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800743a:	f04f 33ff 	mov.w	r3, #4294967295
 800743e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007440:	69bb      	ldr	r3, [r7, #24]
	}
 8007442:	4618      	mov	r0, r3
 8007444:	3720      	adds	r7, #32
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b088      	sub	sp, #32
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	607a      	str	r2, [r7, #4]
 8007456:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007462:	3b01      	subs	r3, #1
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	f023 0307 	bic.w	r3, r3, #7
 8007470:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	f003 0307 	and.w	r3, r3, #7
 8007478:	2b00      	cmp	r3, #0
 800747a:	d009      	beq.n	8007490 <prvInitialiseNewTask+0x46>
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	e7fe      	b.n	800748e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007490:	2300      	movs	r3, #0
 8007492:	61fb      	str	r3, [r7, #28]
 8007494:	e012      	b.n	80074bc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	7819      	ldrb	r1, [r3, #0]
 800749e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	4413      	add	r3, r2
 80074a4:	3334      	adds	r3, #52	; 0x34
 80074a6:	460a      	mov	r2, r1
 80074a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	4413      	add	r3, r2
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d006      	beq.n	80074c4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	3301      	adds	r3, #1
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	2b0f      	cmp	r3, #15
 80074c0:	d9e9      	bls.n	8007496 <prvInitialiseNewTask+0x4c>
 80074c2:	e000      	b.n	80074c6 <prvInitialiseNewTask+0x7c>
		{
			break;
 80074c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	2b06      	cmp	r3, #6
 80074d2:	d901      	bls.n	80074d8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074d4:	2306      	movs	r3, #6
 80074d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	2200      	movs	r2, #0
 80074e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	3304      	adds	r3, #4
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff f86d 	bl	80065ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	3318      	adds	r3, #24
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff f868 	bl	80065ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007502:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	f1c3 0207 	rsb	r2, r3, #7
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007512:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	2200      	movs	r2, #0
 8007518:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	68f9      	ldr	r1, [r7, #12]
 8007526:	69b8      	ldr	r0, [r7, #24]
 8007528:	f000 ffd8 	bl	80084dc <pxPortInitialiseStack>
 800752c:	4602      	mov	r2, r0
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800753c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800753e:	bf00      	nop
 8007540:	3720      	adds	r7, #32
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
	...

08007548 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007550:	f001 f8ec 	bl	800872c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007554:	4b2a      	ldr	r3, [pc, #168]	; (8007600 <prvAddNewTaskToReadyList+0xb8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3301      	adds	r3, #1
 800755a:	4a29      	ldr	r2, [pc, #164]	; (8007600 <prvAddNewTaskToReadyList+0xb8>)
 800755c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800755e:	4b29      	ldr	r3, [pc, #164]	; (8007604 <prvAddNewTaskToReadyList+0xbc>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d109      	bne.n	800757a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007566:	4a27      	ldr	r2, [pc, #156]	; (8007604 <prvAddNewTaskToReadyList+0xbc>)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800756c:	4b24      	ldr	r3, [pc, #144]	; (8007600 <prvAddNewTaskToReadyList+0xb8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d110      	bne.n	8007596 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007574:	f000 fdea 	bl	800814c <prvInitialiseTaskLists>
 8007578:	e00d      	b.n	8007596 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800757a:	4b23      	ldr	r3, [pc, #140]	; (8007608 <prvAddNewTaskToReadyList+0xc0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d109      	bne.n	8007596 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007582:	4b20      	ldr	r3, [pc, #128]	; (8007604 <prvAddNewTaskToReadyList+0xbc>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	429a      	cmp	r2, r3
 800758e:	d802      	bhi.n	8007596 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007590:	4a1c      	ldr	r2, [pc, #112]	; (8007604 <prvAddNewTaskToReadyList+0xbc>)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007596:	4b1d      	ldr	r3, [pc, #116]	; (800760c <prvAddNewTaskToReadyList+0xc4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3301      	adds	r3, #1
 800759c:	4a1b      	ldr	r2, [pc, #108]	; (800760c <prvAddNewTaskToReadyList+0xc4>)
 800759e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a4:	2201      	movs	r2, #1
 80075a6:	409a      	lsls	r2, r3
 80075a8:	4b19      	ldr	r3, [pc, #100]	; (8007610 <prvAddNewTaskToReadyList+0xc8>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	4a18      	ldr	r2, [pc, #96]	; (8007610 <prvAddNewTaskToReadyList+0xc8>)
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4a15      	ldr	r2, [pc, #84]	; (8007614 <prvAddNewTaskToReadyList+0xcc>)
 80075c0:	441a      	add	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3304      	adds	r3, #4
 80075c6:	4619      	mov	r1, r3
 80075c8:	4610      	mov	r0, r2
 80075ca:	f7ff f80d 	bl	80065e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075ce:	f001 f8db 	bl	8008788 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075d2:	4b0d      	ldr	r3, [pc, #52]	; (8007608 <prvAddNewTaskToReadyList+0xc0>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00e      	beq.n	80075f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075da:	4b0a      	ldr	r3, [pc, #40]	; (8007604 <prvAddNewTaskToReadyList+0xbc>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d207      	bcs.n	80075f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075e8:	4b0b      	ldr	r3, [pc, #44]	; (8007618 <prvAddNewTaskToReadyList+0xd0>)
 80075ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075f8:	bf00      	nop
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20000418 	.word	0x20000418
 8007604:	20000318 	.word	0x20000318
 8007608:	20000424 	.word	0x20000424
 800760c:	20000434 	.word	0x20000434
 8007610:	20000420 	.word	0x20000420
 8007614:	2000031c 	.word	0x2000031c
 8007618:	e000ed04 	.word	0xe000ed04

0800761c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007624:	f001 f882 	bl	800872c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <vTaskDelete+0x18>
 800762e:	4b38      	ldr	r3, [pc, #224]	; (8007710 <vTaskDelete+0xf4>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	e000      	b.n	8007636 <vTaskDelete+0x1a>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3304      	adds	r3, #4
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff f830 	bl	80066a2 <uxListRemove>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d115      	bne.n	8007674 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764c:	4931      	ldr	r1, [pc, #196]	; (8007714 <vTaskDelete+0xf8>)
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	440b      	add	r3, r1
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10a      	bne.n	8007674 <vTaskDelete+0x58>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007662:	2201      	movs	r2, #1
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	43da      	mvns	r2, r3
 800766a:	4b2b      	ldr	r3, [pc, #172]	; (8007718 <vTaskDelete+0xfc>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4013      	ands	r3, r2
 8007670:	4a29      	ldr	r2, [pc, #164]	; (8007718 <vTaskDelete+0xfc>)
 8007672:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	2b00      	cmp	r3, #0
 800767a:	d004      	beq.n	8007686 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3318      	adds	r3, #24
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff f80e 	bl	80066a2 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007686:	4b25      	ldr	r3, [pc, #148]	; (800771c <vTaskDelete+0x100>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3301      	adds	r3, #1
 800768c:	4a23      	ldr	r2, [pc, #140]	; (800771c <vTaskDelete+0x100>)
 800768e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007690:	4b1f      	ldr	r3, [pc, #124]	; (8007710 <vTaskDelete+0xf4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	429a      	cmp	r2, r3
 8007698:	d10b      	bne.n	80076b2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3304      	adds	r3, #4
 800769e:	4619      	mov	r1, r3
 80076a0:	481f      	ldr	r0, [pc, #124]	; (8007720 <vTaskDelete+0x104>)
 80076a2:	f7fe ffa1 	bl	80065e8 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80076a6:	4b1f      	ldr	r3, [pc, #124]	; (8007724 <vTaskDelete+0x108>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3301      	adds	r3, #1
 80076ac:	4a1d      	ldr	r2, [pc, #116]	; (8007724 <vTaskDelete+0x108>)
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	e009      	b.n	80076c6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80076b2:	4b1d      	ldr	r3, [pc, #116]	; (8007728 <vTaskDelete+0x10c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	4a1b      	ldr	r2, [pc, #108]	; (8007728 <vTaskDelete+0x10c>)
 80076ba:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 fdb1 	bl	8008224 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80076c2:	f000 fddd 	bl	8008280 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80076c6:	f001 f85f 	bl	8008788 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80076ca:	4b18      	ldr	r3, [pc, #96]	; (800772c <vTaskDelete+0x110>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d01a      	beq.n	8007708 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 80076d2:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <vTaskDelete+0xf4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d115      	bne.n	8007708 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80076dc:	4b14      	ldr	r3, [pc, #80]	; (8007730 <vTaskDelete+0x114>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d009      	beq.n	80076f8 <vTaskDelete+0xdc>
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	60bb      	str	r3, [r7, #8]
 80076f6:	e7fe      	b.n	80076f6 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 80076f8:	4b0e      	ldr	r3, [pc, #56]	; (8007734 <vTaskDelete+0x118>)
 80076fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007708:	bf00      	nop
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20000318 	.word	0x20000318
 8007714:	2000031c 	.word	0x2000031c
 8007718:	20000420 	.word	0x20000420
 800771c:	20000434 	.word	0x20000434
 8007720:	200003ec 	.word	0x200003ec
 8007724:	20000400 	.word	0x20000400
 8007728:	20000418 	.word	0x20000418
 800772c:	20000424 	.word	0x20000424
 8007730:	20000440 	.word	0x20000440
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d016      	beq.n	8007778 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800774a:	4b13      	ldr	r3, [pc, #76]	; (8007798 <vTaskDelay+0x60>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <vTaskDelay+0x2e>
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	60bb      	str	r3, [r7, #8]
 8007764:	e7fe      	b.n	8007764 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007766:	f000 fa11 	bl	8007b8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800776a:	2100      	movs	r1, #0
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fe4f 	bl	8008410 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007772:	f000 fa19 	bl	8007ba8 <xTaskResumeAll>
 8007776:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d107      	bne.n	800778e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800777e:	4b07      	ldr	r3, [pc, #28]	; (800779c <vTaskDelay+0x64>)
 8007780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800778e:	bf00      	nop
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20000440 	.word	0x20000440
 800779c:	e000ed04 	.word	0xe000ed04

080077a0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80077a8:	f000 ffc0 	bl	800872c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d102      	bne.n	80077b8 <vTaskSuspend+0x18>
 80077b2:	4b3c      	ldr	r3, [pc, #240]	; (80078a4 <vTaskSuspend+0x104>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	e000      	b.n	80077ba <vTaskSuspend+0x1a>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3304      	adds	r3, #4
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fe ff6e 	bl	80066a2 <uxListRemove>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d115      	bne.n	80077f8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d0:	4935      	ldr	r1, [pc, #212]	; (80078a8 <vTaskSuspend+0x108>)
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10a      	bne.n	80077f8 <vTaskSuspend+0x58>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	2201      	movs	r2, #1
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	43da      	mvns	r2, r3
 80077ee:	4b2f      	ldr	r3, [pc, #188]	; (80078ac <vTaskSuspend+0x10c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4013      	ands	r3, r2
 80077f4:	4a2d      	ldr	r2, [pc, #180]	; (80078ac <vTaskSuspend+0x10c>)
 80077f6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d004      	beq.n	800780a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3318      	adds	r3, #24
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe ff4c 	bl	80066a2 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3304      	adds	r3, #4
 800780e:	4619      	mov	r1, r3
 8007810:	4827      	ldr	r0, [pc, #156]	; (80078b0 <vTaskSuspend+0x110>)
 8007812:	f7fe fee9 	bl	80065e8 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b01      	cmp	r3, #1
 8007820:	d103      	bne.n	800782a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800782a:	f000 ffad 	bl	8008788 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800782e:	4b21      	ldr	r3, [pc, #132]	; (80078b4 <vTaskSuspend+0x114>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d005      	beq.n	8007842 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007836:	f000 ff79 	bl	800872c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800783a:	f000 fd21 	bl	8008280 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800783e:	f000 ffa3 	bl	8008788 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007842:	4b18      	ldr	r3, [pc, #96]	; (80078a4 <vTaskSuspend+0x104>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	429a      	cmp	r2, r3
 800784a:	d126      	bne.n	800789a <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800784c:	4b19      	ldr	r3, [pc, #100]	; (80078b4 <vTaskSuspend+0x114>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d016      	beq.n	8007882 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007854:	4b18      	ldr	r3, [pc, #96]	; (80078b8 <vTaskSuspend+0x118>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d009      	beq.n	8007870 <vTaskSuspend+0xd0>
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	60bb      	str	r3, [r7, #8]
 800786e:	e7fe      	b.n	800786e <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8007870:	4b12      	ldr	r3, [pc, #72]	; (80078bc <vTaskSuspend+0x11c>)
 8007872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007880:	e00b      	b.n	800789a <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8007882:	4b0b      	ldr	r3, [pc, #44]	; (80078b0 <vTaskSuspend+0x110>)
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <vTaskSuspend+0x120>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	429a      	cmp	r2, r3
 800788c:	d103      	bne.n	8007896 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800788e:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <vTaskSuspend+0x104>)
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
	}
 8007894:	e001      	b.n	800789a <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8007896:	f000 fadf 	bl	8007e58 <vTaskSwitchContext>
	}
 800789a:	bf00      	nop
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20000318 	.word	0x20000318
 80078a8:	2000031c 	.word	0x2000031c
 80078ac:	20000420 	.word	0x20000420
 80078b0:	20000404 	.word	0x20000404
 80078b4:	20000424 	.word	0x20000424
 80078b8:	20000440 	.word	0x20000440
 80078bc:	e000ed04 	.word	0xe000ed04
 80078c0:	20000418 	.word	0x20000418

080078c4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80078cc:	2300      	movs	r3, #0
 80078ce:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <prvTaskIsTaskSuspended+0x2a>
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	e7fe      	b.n	80078ec <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	4a0f      	ldr	r2, [pc, #60]	; (8007930 <prvTaskIsTaskSuspended+0x6c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d101      	bne.n	80078fc <prvTaskIsTaskSuspended+0x38>
 80078f8:	2301      	movs	r3, #1
 80078fa:	e000      	b.n	80078fe <prvTaskIsTaskSuspended+0x3a>
 80078fc:	2300      	movs	r3, #0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00f      	beq.n	8007922 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007906:	4a0b      	ldr	r2, [pc, #44]	; (8007934 <prvTaskIsTaskSuspended+0x70>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d00a      	beq.n	8007922 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <prvTaskIsTaskSuspended+0x54>
 8007914:	2301      	movs	r3, #1
 8007916:	e000      	b.n	800791a <prvTaskIsTaskSuspended+0x56>
 8007918:	2300      	movs	r3, #0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 800791e:	2301      	movs	r3, #1
 8007920:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007922:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007924:	4618      	mov	r0, r3
 8007926:	371c      	adds	r7, #28
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	20000404 	.word	0x20000404
 8007934:	200003d8 	.word	0x200003d8

08007938 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d109      	bne.n	800795e <vTaskResume+0x26>
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	60bb      	str	r3, [r7, #8]
 800795c:	e7fe      	b.n	800795c <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d039      	beq.n	80079d8 <vTaskResume+0xa0>
 8007964:	4b1e      	ldr	r3, [pc, #120]	; (80079e0 <vTaskResume+0xa8>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	429a      	cmp	r2, r3
 800796c:	d034      	beq.n	80079d8 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 800796e:	f000 fedd 	bl	800872c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f7ff ffa6 	bl	80078c4 <prvTaskIsTaskSuspended>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d02a      	beq.n	80079d4 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3304      	adds	r3, #4
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fe8d 	bl	80066a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798c:	2201      	movs	r2, #1
 800798e:	409a      	lsls	r2, r3
 8007990:	4b14      	ldr	r3, [pc, #80]	; (80079e4 <vTaskResume+0xac>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4313      	orrs	r3, r2
 8007996:	4a13      	ldr	r2, [pc, #76]	; (80079e4 <vTaskResume+0xac>)
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4a10      	ldr	r2, [pc, #64]	; (80079e8 <vTaskResume+0xb0>)
 80079a8:	441a      	add	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f7fe fe19 	bl	80065e8 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ba:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <vTaskResume+0xa8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d307      	bcc.n	80079d4 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80079c4:	4b09      	ldr	r3, [pc, #36]	; (80079ec <vTaskResume+0xb4>)
 80079c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80079d4:	f000 fed8 	bl	8008788 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079d8:	bf00      	nop
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20000318 	.word	0x20000318
 80079e4:	20000420 	.word	0x20000420
 80079e8:	2000031c 	.word	0x2000031c
 80079ec:	e000ed04 	.word	0xe000ed04

080079f0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08a      	sub	sp, #40	; 0x28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80079f8:	2300      	movs	r3, #0
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d109      	bne.n	8007a1a <xTaskResumeFromISR+0x2a>
 8007a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	61bb      	str	r3, [r7, #24]
 8007a18:	e7fe      	b.n	8007a18 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a1a:	f000 ff63 	bl	80088e4 <vPortValidateInterruptPriority>
	__asm volatile
 8007a1e:	f3ef 8211 	mrs	r2, BASEPRI
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	617a      	str	r2, [r7, #20]
 8007a34:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007a36:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a38:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007a3a:	6a38      	ldr	r0, [r7, #32]
 8007a3c:	f7ff ff42 	bl	80078c4 <prvTaskIsTaskSuspended>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d02f      	beq.n	8007aa6 <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a46:	4b1d      	ldr	r3, [pc, #116]	; (8007abc <xTaskResumeFromISR+0xcc>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d125      	bne.n	8007a9a <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a52:	4b1b      	ldr	r3, [pc, #108]	; (8007ac0 <xTaskResumeFromISR+0xd0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d301      	bcc.n	8007a60 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	3304      	adds	r3, #4
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fe fe1c 	bl	80066a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6e:	2201      	movs	r2, #1
 8007a70:	409a      	lsls	r2, r3
 8007a72:	4b14      	ldr	r3, [pc, #80]	; (8007ac4 <xTaskResumeFromISR+0xd4>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	4a12      	ldr	r2, [pc, #72]	; (8007ac4 <xTaskResumeFromISR+0xd4>)
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4a0f      	ldr	r2, [pc, #60]	; (8007ac8 <xTaskResumeFromISR+0xd8>)
 8007a8a:	441a      	add	r2, r3
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	4619      	mov	r1, r3
 8007a92:	4610      	mov	r0, r2
 8007a94:	f7fe fda8 	bl	80065e8 <vListInsertEnd>
 8007a98:	e005      	b.n	8007aa6 <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	3318      	adds	r3, #24
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	480a      	ldr	r0, [pc, #40]	; (8007acc <xTaskResumeFromISR+0xdc>)
 8007aa2:	f7fe fda1 	bl	80065e8 <vListInsertEnd>
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3728      	adds	r7, #40	; 0x28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20000440 	.word	0x20000440
 8007ac0:	20000318 	.word	0x20000318
 8007ac4:	20000420 	.word	0x20000420
 8007ac8:	2000031c 	.word	0x2000031c
 8007acc:	200003d8 	.word	0x200003d8

08007ad0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08a      	sub	sp, #40	; 0x28
 8007ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ade:	463a      	mov	r2, r7
 8007ae0:	1d39      	adds	r1, r7, #4
 8007ae2:	f107 0308 	add.w	r3, r7, #8
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7f8 ffea 	bl	8000ac0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	9202      	str	r2, [sp, #8]
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	2300      	movs	r3, #0
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	2300      	movs	r3, #0
 8007afc:	460a      	mov	r2, r1
 8007afe:	491d      	ldr	r1, [pc, #116]	; (8007b74 <vTaskStartScheduler+0xa4>)
 8007b00:	481d      	ldr	r0, [pc, #116]	; (8007b78 <vTaskStartScheduler+0xa8>)
 8007b02:	f7ff fc04 	bl	800730e <xTaskCreateStatic>
 8007b06:	4602      	mov	r2, r0
 8007b08:	4b1c      	ldr	r3, [pc, #112]	; (8007b7c <vTaskStartScheduler+0xac>)
 8007b0a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b0c:	4b1b      	ldr	r3, [pc, #108]	; (8007b7c <vTaskStartScheduler+0xac>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b14:	2301      	movs	r3, #1
 8007b16:	617b      	str	r3, [r7, #20]
 8007b18:	e001      	b.n	8007b1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d115      	bne.n	8007b50 <vTaskStartScheduler+0x80>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b36:	4b12      	ldr	r3, [pc, #72]	; (8007b80 <vTaskStartScheduler+0xb0>)
 8007b38:	f04f 32ff 	mov.w	r2, #4294967295
 8007b3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b3e:	4b11      	ldr	r3, [pc, #68]	; (8007b84 <vTaskStartScheduler+0xb4>)
 8007b40:	2201      	movs	r2, #1
 8007b42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007b44:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <vTaskStartScheduler+0xb8>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b4a:	f000 fd51 	bl	80085f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b4e:	e00d      	b.n	8007b6c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b56:	d109      	bne.n	8007b6c <vTaskStartScheduler+0x9c>
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	e7fe      	b.n	8007b6a <vTaskStartScheduler+0x9a>
}
 8007b6c:	bf00      	nop
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	0800a1f4 	.word	0x0800a1f4
 8007b78:	0800811d 	.word	0x0800811d
 8007b7c:	2000043c 	.word	0x2000043c
 8007b80:	20000438 	.word	0x20000438
 8007b84:	20000424 	.word	0x20000424
 8007b88:	2000041c 	.word	0x2000041c

08007b8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007b90:	4b04      	ldr	r3, [pc, #16]	; (8007ba4 <vTaskSuspendAll+0x18>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3301      	adds	r3, #1
 8007b96:	4a03      	ldr	r2, [pc, #12]	; (8007ba4 <vTaskSuspendAll+0x18>)
 8007b98:	6013      	str	r3, [r2, #0]
}
 8007b9a:	bf00      	nop
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	20000440 	.word	0x20000440

08007ba8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007bb6:	4b41      	ldr	r3, [pc, #260]	; (8007cbc <xTaskResumeAll+0x114>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d109      	bne.n	8007bd2 <xTaskResumeAll+0x2a>
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	603b      	str	r3, [r7, #0]
 8007bd0:	e7fe      	b.n	8007bd0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bd2:	f000 fdab 	bl	800872c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bd6:	4b39      	ldr	r3, [pc, #228]	; (8007cbc <xTaskResumeAll+0x114>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	4a37      	ldr	r2, [pc, #220]	; (8007cbc <xTaskResumeAll+0x114>)
 8007bde:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007be0:	4b36      	ldr	r3, [pc, #216]	; (8007cbc <xTaskResumeAll+0x114>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d161      	bne.n	8007cac <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007be8:	4b35      	ldr	r3, [pc, #212]	; (8007cc0 <xTaskResumeAll+0x118>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d05d      	beq.n	8007cac <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bf0:	e02e      	b.n	8007c50 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007bf2:	4b34      	ldr	r3, [pc, #208]	; (8007cc4 <xTaskResumeAll+0x11c>)
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3318      	adds	r3, #24
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe fd4f 	bl	80066a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3304      	adds	r3, #4
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe fd4a 	bl	80066a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c12:	2201      	movs	r2, #1
 8007c14:	409a      	lsls	r2, r3
 8007c16:	4b2c      	ldr	r3, [pc, #176]	; (8007cc8 <xTaskResumeAll+0x120>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	4a2a      	ldr	r2, [pc, #168]	; (8007cc8 <xTaskResumeAll+0x120>)
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c24:	4613      	mov	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4a27      	ldr	r2, [pc, #156]	; (8007ccc <xTaskResumeAll+0x124>)
 8007c2e:	441a      	add	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f7fe fcd6 	bl	80065e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c40:	4b23      	ldr	r3, [pc, #140]	; (8007cd0 <xTaskResumeAll+0x128>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d302      	bcc.n	8007c50 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007c4a:	4b22      	ldr	r3, [pc, #136]	; (8007cd4 <xTaskResumeAll+0x12c>)
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c50:	4b1c      	ldr	r3, [pc, #112]	; (8007cc4 <xTaskResumeAll+0x11c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1cc      	bne.n	8007bf2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c5e:	f000 fb0f 	bl	8008280 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007c62:	4b1d      	ldr	r3, [pc, #116]	; (8007cd8 <xTaskResumeAll+0x130>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d010      	beq.n	8007c90 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c6e:	f000 f837 	bl	8007ce0 <xTaskIncrementTick>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007c78:	4b16      	ldr	r3, [pc, #88]	; (8007cd4 <xTaskResumeAll+0x12c>)
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1f1      	bne.n	8007c6e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007c8a:	4b13      	ldr	r3, [pc, #76]	; (8007cd8 <xTaskResumeAll+0x130>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c90:	4b10      	ldr	r3, [pc, #64]	; (8007cd4 <xTaskResumeAll+0x12c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d009      	beq.n	8007cac <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c9c:	4b0f      	ldr	r3, [pc, #60]	; (8007cdc <xTaskResumeAll+0x134>)
 8007c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cac:	f000 fd6c 	bl	8008788 <vPortExitCritical>

	return xAlreadyYielded;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	20000440 	.word	0x20000440
 8007cc0:	20000418 	.word	0x20000418
 8007cc4:	200003d8 	.word	0x200003d8
 8007cc8:	20000420 	.word	0x20000420
 8007ccc:	2000031c 	.word	0x2000031c
 8007cd0:	20000318 	.word	0x20000318
 8007cd4:	2000042c 	.word	0x2000042c
 8007cd8:	20000428 	.word	0x20000428
 8007cdc:	e000ed04 	.word	0xe000ed04

08007ce0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cea:	4b50      	ldr	r3, [pc, #320]	; (8007e2c <xTaskIncrementTick+0x14c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f040 808c 	bne.w	8007e0c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007cf4:	4b4e      	ldr	r3, [pc, #312]	; (8007e30 <xTaskIncrementTick+0x150>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007cfc:	4a4c      	ldr	r2, [pc, #304]	; (8007e30 <xTaskIncrementTick+0x150>)
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d11f      	bne.n	8007d48 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d08:	4b4a      	ldr	r3, [pc, #296]	; (8007e34 <xTaskIncrementTick+0x154>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d009      	beq.n	8007d26 <xTaskIncrementTick+0x46>
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	e7fe      	b.n	8007d24 <xTaskIncrementTick+0x44>
 8007d26:	4b43      	ldr	r3, [pc, #268]	; (8007e34 <xTaskIncrementTick+0x154>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	4b42      	ldr	r3, [pc, #264]	; (8007e38 <xTaskIncrementTick+0x158>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a40      	ldr	r2, [pc, #256]	; (8007e34 <xTaskIncrementTick+0x154>)
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	4a40      	ldr	r2, [pc, #256]	; (8007e38 <xTaskIncrementTick+0x158>)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	4b40      	ldr	r3, [pc, #256]	; (8007e3c <xTaskIncrementTick+0x15c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	4a3e      	ldr	r2, [pc, #248]	; (8007e3c <xTaskIncrementTick+0x15c>)
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	f000 fa9c 	bl	8008280 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d48:	4b3d      	ldr	r3, [pc, #244]	; (8007e40 <xTaskIncrementTick+0x160>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d34d      	bcc.n	8007dee <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d52:	4b38      	ldr	r3, [pc, #224]	; (8007e34 <xTaskIncrementTick+0x154>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <xTaskIncrementTick+0x80>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e000      	b.n	8007d62 <xTaskIncrementTick+0x82>
 8007d60:	2300      	movs	r3, #0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d004      	beq.n	8007d70 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d66:	4b36      	ldr	r3, [pc, #216]	; (8007e40 <xTaskIncrementTick+0x160>)
 8007d68:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6c:	601a      	str	r2, [r3, #0]
					break;
 8007d6e:	e03e      	b.n	8007dee <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d70:	4b30      	ldr	r3, [pc, #192]	; (8007e34 <xTaskIncrementTick+0x154>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d203      	bcs.n	8007d90 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d88:	4a2d      	ldr	r2, [pc, #180]	; (8007e40 <xTaskIncrementTick+0x160>)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6013      	str	r3, [r2, #0]
						break;
 8007d8e:	e02e      	b.n	8007dee <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	3304      	adds	r3, #4
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fe fc84 	bl	80066a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d004      	beq.n	8007dac <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	3318      	adds	r3, #24
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fc7b 	bl	80066a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db0:	2201      	movs	r2, #1
 8007db2:	409a      	lsls	r2, r3
 8007db4:	4b23      	ldr	r3, [pc, #140]	; (8007e44 <xTaskIncrementTick+0x164>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	4a22      	ldr	r2, [pc, #136]	; (8007e44 <xTaskIncrementTick+0x164>)
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4a1f      	ldr	r2, [pc, #124]	; (8007e48 <xTaskIncrementTick+0x168>)
 8007dcc:	441a      	add	r2, r3
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	f7fe fc07 	bl	80065e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dde:	4b1b      	ldr	r3, [pc, #108]	; (8007e4c <xTaskIncrementTick+0x16c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d3b4      	bcc.n	8007d52 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007de8:	2301      	movs	r3, #1
 8007dea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dec:	e7b1      	b.n	8007d52 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007dee:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <xTaskIncrementTick+0x16c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df4:	4914      	ldr	r1, [pc, #80]	; (8007e48 <xTaskIncrementTick+0x168>)
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	440b      	add	r3, r1
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d907      	bls.n	8007e16 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007e06:	2301      	movs	r3, #1
 8007e08:	617b      	str	r3, [r7, #20]
 8007e0a:	e004      	b.n	8007e16 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e0c:	4b10      	ldr	r3, [pc, #64]	; (8007e50 <xTaskIncrementTick+0x170>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3301      	adds	r3, #1
 8007e12:	4a0f      	ldr	r2, [pc, #60]	; (8007e50 <xTaskIncrementTick+0x170>)
 8007e14:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <xTaskIncrementTick+0x174>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e22:	697b      	ldr	r3, [r7, #20]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	20000440 	.word	0x20000440
 8007e30:	2000041c 	.word	0x2000041c
 8007e34:	200003d0 	.word	0x200003d0
 8007e38:	200003d4 	.word	0x200003d4
 8007e3c:	20000430 	.word	0x20000430
 8007e40:	20000438 	.word	0x20000438
 8007e44:	20000420 	.word	0x20000420
 8007e48:	2000031c 	.word	0x2000031c
 8007e4c:	20000318 	.word	0x20000318
 8007e50:	20000428 	.word	0x20000428
 8007e54:	2000042c 	.word	0x2000042c

08007e58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e5e:	4b26      	ldr	r3, [pc, #152]	; (8007ef8 <vTaskSwitchContext+0xa0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e66:	4b25      	ldr	r3, [pc, #148]	; (8007efc <vTaskSwitchContext+0xa4>)
 8007e68:	2201      	movs	r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e6c:	e03e      	b.n	8007eec <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007e6e:	4b23      	ldr	r3, [pc, #140]	; (8007efc <vTaskSwitchContext+0xa4>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007e74:	4b22      	ldr	r3, [pc, #136]	; (8007f00 <vTaskSwitchContext+0xa8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	fab3 f383 	clz	r3, r3
 8007e80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007e82:	7afb      	ldrb	r3, [r7, #11]
 8007e84:	f1c3 031f 	rsb	r3, r3, #31
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	491e      	ldr	r1, [pc, #120]	; (8007f04 <vTaskSwitchContext+0xac>)
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	440b      	add	r3, r1
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d109      	bne.n	8007eb2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	607b      	str	r3, [r7, #4]
 8007eb0:	e7fe      	b.n	8007eb0 <vTaskSwitchContext+0x58>
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4a11      	ldr	r2, [pc, #68]	; (8007f04 <vTaskSwitchContext+0xac>)
 8007ebe:	4413      	add	r3, r2
 8007ec0:	613b      	str	r3, [r7, #16]
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	605a      	str	r2, [r3, #4]
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d104      	bne.n	8007ee2 <vTaskSwitchContext+0x8a>
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	605a      	str	r2, [r3, #4]
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	4a07      	ldr	r2, [pc, #28]	; (8007f08 <vTaskSwitchContext+0xb0>)
 8007eea:	6013      	str	r3, [r2, #0]
}
 8007eec:	bf00      	nop
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	20000440 	.word	0x20000440
 8007efc:	2000042c 	.word	0x2000042c
 8007f00:	20000420 	.word	0x20000420
 8007f04:	2000031c 	.word	0x2000031c
 8007f08:	20000318 	.word	0x20000318

08007f0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d109      	bne.n	8007f30 <vTaskPlaceOnEventList+0x24>
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	e7fe      	b.n	8007f2e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <vTaskPlaceOnEventList+0x44>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	3318      	adds	r3, #24
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7fe fb79 	bl	8006630 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f3e:	2101      	movs	r1, #1
 8007f40:	6838      	ldr	r0, [r7, #0]
 8007f42:	f000 fa65 	bl	8008410 <prvAddCurrentTaskToDelayedList>
}
 8007f46:	bf00      	nop
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000318 	.word	0x20000318

08007f54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d109      	bne.n	8007f7e <xTaskRemoveFromEventList+0x2a>
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	e7fe      	b.n	8007f7c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	3318      	adds	r3, #24
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fb8d 	bl	80066a2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f88:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <xTaskRemoveFromEventList+0xac>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d11c      	bne.n	8007fca <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	3304      	adds	r3, #4
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fe fb84 	bl	80066a2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	409a      	lsls	r2, r3
 8007fa2:	4b18      	ldr	r3, [pc, #96]	; (8008004 <xTaskRemoveFromEventList+0xb0>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	4a16      	ldr	r2, [pc, #88]	; (8008004 <xTaskRemoveFromEventList+0xb0>)
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4a13      	ldr	r2, [pc, #76]	; (8008008 <xTaskRemoveFromEventList+0xb4>)
 8007fba:	441a      	add	r2, r3
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	f7fe fb10 	bl	80065e8 <vListInsertEnd>
 8007fc8:	e005      	b.n	8007fd6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	3318      	adds	r3, #24
 8007fce:	4619      	mov	r1, r3
 8007fd0:	480e      	ldr	r0, [pc, #56]	; (800800c <xTaskRemoveFromEventList+0xb8>)
 8007fd2:	f7fe fb09 	bl	80065e8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fda:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <xTaskRemoveFromEventList+0xbc>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d905      	bls.n	8007ff0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fe8:	4b0a      	ldr	r3, [pc, #40]	; (8008014 <xTaskRemoveFromEventList+0xc0>)
 8007fea:	2201      	movs	r2, #1
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	e001      	b.n	8007ff4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007ff4:	697b      	ldr	r3, [r7, #20]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20000440 	.word	0x20000440
 8008004:	20000420 	.word	0x20000420
 8008008:	2000031c 	.word	0x2000031c
 800800c:	200003d8 	.word	0x200003d8
 8008010:	20000318 	.word	0x20000318
 8008014:	2000042c 	.word	0x2000042c

08008018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008020:	4b06      	ldr	r3, [pc, #24]	; (800803c <vTaskInternalSetTimeOutState+0x24>)
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008028:	4b05      	ldr	r3, [pc, #20]	; (8008040 <vTaskInternalSetTimeOutState+0x28>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	605a      	str	r2, [r3, #4]
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	20000430 	.word	0x20000430
 8008040:	2000041c 	.word	0x2000041c

08008044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d109      	bne.n	8008068 <xTaskCheckForTimeOut+0x24>
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	613b      	str	r3, [r7, #16]
 8008066:	e7fe      	b.n	8008066 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <xTaskCheckForTimeOut+0x3e>
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	e7fe      	b.n	8008080 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008082:	f000 fb53 	bl	800872c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008086:	4b1d      	ldr	r3, [pc, #116]	; (80080fc <xTaskCheckForTimeOut+0xb8>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809e:	d102      	bne.n	80080a6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080a0:	2300      	movs	r3, #0
 80080a2:	61fb      	str	r3, [r7, #28]
 80080a4:	e023      	b.n	80080ee <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	4b15      	ldr	r3, [pc, #84]	; (8008100 <xTaskCheckForTimeOut+0xbc>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d007      	beq.n	80080c2 <xTaskCheckForTimeOut+0x7e>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d302      	bcc.n	80080c2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080bc:	2301      	movs	r3, #1
 80080be:	61fb      	str	r3, [r7, #28]
 80080c0:	e015      	b.n	80080ee <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d20b      	bcs.n	80080e4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	1ad2      	subs	r2, r2, r3
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff ff9d 	bl	8008018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080de:	2300      	movs	r3, #0
 80080e0:	61fb      	str	r3, [r7, #28]
 80080e2:	e004      	b.n	80080ee <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080ea:	2301      	movs	r3, #1
 80080ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080ee:	f000 fb4b 	bl	8008788 <vPortExitCritical>

	return xReturn;
 80080f2:	69fb      	ldr	r3, [r7, #28]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3720      	adds	r7, #32
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	2000041c 	.word	0x2000041c
 8008100:	20000430 	.word	0x20000430

08008104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008104:	b480      	push	{r7}
 8008106:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008108:	4b03      	ldr	r3, [pc, #12]	; (8008118 <vTaskMissedYield+0x14>)
 800810a:	2201      	movs	r2, #1
 800810c:	601a      	str	r2, [r3, #0]
}
 800810e:	bf00      	nop
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	2000042c 	.word	0x2000042c

0800811c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008124:	f000 f852 	bl	80081cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008128:	4b06      	ldr	r3, [pc, #24]	; (8008144 <prvIdleTask+0x28>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d9f9      	bls.n	8008124 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008130:	4b05      	ldr	r3, [pc, #20]	; (8008148 <prvIdleTask+0x2c>)
 8008132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008140:	e7f0      	b.n	8008124 <prvIdleTask+0x8>
 8008142:	bf00      	nop
 8008144:	2000031c 	.word	0x2000031c
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008152:	2300      	movs	r3, #0
 8008154:	607b      	str	r3, [r7, #4]
 8008156:	e00c      	b.n	8008172 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4a12      	ldr	r2, [pc, #72]	; (80081ac <prvInitialiseTaskLists+0x60>)
 8008164:	4413      	add	r3, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fa11 	bl	800658e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3301      	adds	r3, #1
 8008170:	607b      	str	r3, [r7, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b06      	cmp	r3, #6
 8008176:	d9ef      	bls.n	8008158 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008178:	480d      	ldr	r0, [pc, #52]	; (80081b0 <prvInitialiseTaskLists+0x64>)
 800817a:	f7fe fa08 	bl	800658e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800817e:	480d      	ldr	r0, [pc, #52]	; (80081b4 <prvInitialiseTaskLists+0x68>)
 8008180:	f7fe fa05 	bl	800658e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008184:	480c      	ldr	r0, [pc, #48]	; (80081b8 <prvInitialiseTaskLists+0x6c>)
 8008186:	f7fe fa02 	bl	800658e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800818a:	480c      	ldr	r0, [pc, #48]	; (80081bc <prvInitialiseTaskLists+0x70>)
 800818c:	f7fe f9ff 	bl	800658e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008190:	480b      	ldr	r0, [pc, #44]	; (80081c0 <prvInitialiseTaskLists+0x74>)
 8008192:	f7fe f9fc 	bl	800658e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008196:	4b0b      	ldr	r3, [pc, #44]	; (80081c4 <prvInitialiseTaskLists+0x78>)
 8008198:	4a05      	ldr	r2, [pc, #20]	; (80081b0 <prvInitialiseTaskLists+0x64>)
 800819a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800819c:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <prvInitialiseTaskLists+0x7c>)
 800819e:	4a05      	ldr	r2, [pc, #20]	; (80081b4 <prvInitialiseTaskLists+0x68>)
 80081a0:	601a      	str	r2, [r3, #0]
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	2000031c 	.word	0x2000031c
 80081b0:	200003a8 	.word	0x200003a8
 80081b4:	200003bc 	.word	0x200003bc
 80081b8:	200003d8 	.word	0x200003d8
 80081bc:	200003ec 	.word	0x200003ec
 80081c0:	20000404 	.word	0x20000404
 80081c4:	200003d0 	.word	0x200003d0
 80081c8:	200003d4 	.word	0x200003d4

080081cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081d2:	e019      	b.n	8008208 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081d4:	f000 faaa 	bl	800872c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80081d8:	4b0f      	ldr	r3, [pc, #60]	; (8008218 <prvCheckTasksWaitingTermination+0x4c>)
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3304      	adds	r3, #4
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fe fa5c 	bl	80066a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081ea:	4b0c      	ldr	r3, [pc, #48]	; (800821c <prvCheckTasksWaitingTermination+0x50>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	4a0a      	ldr	r2, [pc, #40]	; (800821c <prvCheckTasksWaitingTermination+0x50>)
 80081f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081f4:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <prvCheckTasksWaitingTermination+0x54>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3b01      	subs	r3, #1
 80081fa:	4a09      	ldr	r2, [pc, #36]	; (8008220 <prvCheckTasksWaitingTermination+0x54>)
 80081fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081fe:	f000 fac3 	bl	8008788 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f80e 	bl	8008224 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008208:	4b05      	ldr	r3, [pc, #20]	; (8008220 <prvCheckTasksWaitingTermination+0x54>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1e1      	bne.n	80081d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008210:	bf00      	nop
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	200003ec 	.word	0x200003ec
 800821c:	20000418 	.word	0x20000418
 8008220:	20000400 	.word	0x20000400

08008224 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008232:	2b00      	cmp	r3, #0
 8008234:	d108      	bne.n	8008248 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823a:	4618      	mov	r0, r3
 800823c:	f000 fc52 	bl	8008ae4 <vPortFree>
				vPortFree( pxTCB );
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fc4f 	bl	8008ae4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008246:	e017      	b.n	8008278 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800824e:	2b01      	cmp	r3, #1
 8008250:	d103      	bne.n	800825a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fc46 	bl	8008ae4 <vPortFree>
	}
 8008258:	e00e      	b.n	8008278 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008260:	2b02      	cmp	r3, #2
 8008262:	d009      	beq.n	8008278 <prvDeleteTCB+0x54>
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	e7fe      	b.n	8008276 <prvDeleteTCB+0x52>
	}
 8008278:	bf00      	nop
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008286:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <prvResetNextTaskUnblockTime+0x44>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <prvResetNextTaskUnblockTime+0x14>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <prvResetNextTaskUnblockTime+0x16>
 8008294:	2300      	movs	r3, #0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d004      	beq.n	80082a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800829a:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <prvResetNextTaskUnblockTime+0x48>)
 800829c:	f04f 32ff 	mov.w	r2, #4294967295
 80082a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082a2:	e008      	b.n	80082b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80082a4:	4b07      	ldr	r3, [pc, #28]	; (80082c4 <prvResetNextTaskUnblockTime+0x44>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	4a05      	ldr	r2, [pc, #20]	; (80082c8 <prvResetNextTaskUnblockTime+0x48>)
 80082b4:	6013      	str	r3, [r2, #0]
}
 80082b6:	bf00      	nop
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	200003d0 	.word	0x200003d0
 80082c8:	20000438 	.word	0x20000438

080082cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082d2:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <xTaskGetSchedulerState+0x34>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d102      	bne.n	80082e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082da:	2301      	movs	r3, #1
 80082dc:	607b      	str	r3, [r7, #4]
 80082de:	e008      	b.n	80082f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082e0:	4b08      	ldr	r3, [pc, #32]	; (8008304 <xTaskGetSchedulerState+0x38>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d102      	bne.n	80082ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082e8:	2302      	movs	r3, #2
 80082ea:	607b      	str	r3, [r7, #4]
 80082ec:	e001      	b.n	80082f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082ee:	2300      	movs	r3, #0
 80082f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082f2:	687b      	ldr	r3, [r7, #4]
	}
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	20000424 	.word	0x20000424
 8008304:	20000440 	.word	0x20000440

08008308 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008314:	2300      	movs	r3, #0
 8008316:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d06c      	beq.n	80083f8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800831e:	4b39      	ldr	r3, [pc, #228]	; (8008404 <xTaskPriorityDisinherit+0xfc>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	429a      	cmp	r2, r3
 8008326:	d009      	beq.n	800833c <xTaskPriorityDisinherit+0x34>
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	60fb      	str	r3, [r7, #12]
 800833a:	e7fe      	b.n	800833a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008340:	2b00      	cmp	r3, #0
 8008342:	d109      	bne.n	8008358 <xTaskPriorityDisinherit+0x50>
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	60bb      	str	r3, [r7, #8]
 8008356:	e7fe      	b.n	8008356 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800835c:	1e5a      	subs	r2, r3, #1
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800836a:	429a      	cmp	r2, r3
 800836c:	d044      	beq.n	80083f8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008372:	2b00      	cmp	r3, #0
 8008374:	d140      	bne.n	80083f8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	3304      	adds	r3, #4
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe f991 	bl	80066a2 <uxListRemove>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d115      	bne.n	80083b2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838a:	491f      	ldr	r1, [pc, #124]	; (8008408 <xTaskPriorityDisinherit+0x100>)
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10a      	bne.n	80083b2 <xTaskPriorityDisinherit+0xaa>
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	2201      	movs	r2, #1
 80083a2:	fa02 f303 	lsl.w	r3, r2, r3
 80083a6:	43da      	mvns	r2, r3
 80083a8:	4b18      	ldr	r3, [pc, #96]	; (800840c <xTaskPriorityDisinherit+0x104>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4013      	ands	r3, r2
 80083ae:	4a17      	ldr	r2, [pc, #92]	; (800840c <xTaskPriorityDisinherit+0x104>)
 80083b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083be:	f1c3 0207 	rsb	r2, r3, #7
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ca:	2201      	movs	r2, #1
 80083cc:	409a      	lsls	r2, r3
 80083ce:	4b0f      	ldr	r3, [pc, #60]	; (800840c <xTaskPriorityDisinherit+0x104>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	4a0d      	ldr	r2, [pc, #52]	; (800840c <xTaskPriorityDisinherit+0x104>)
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4a08      	ldr	r2, [pc, #32]	; (8008408 <xTaskPriorityDisinherit+0x100>)
 80083e6:	441a      	add	r2, r3
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	3304      	adds	r3, #4
 80083ec:	4619      	mov	r1, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	f7fe f8fa 	bl	80065e8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083f4:	2301      	movs	r3, #1
 80083f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083f8:	697b      	ldr	r3, [r7, #20]
	}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000318 	.word	0x20000318
 8008408:	2000031c 	.word	0x2000031c
 800840c:	20000420 	.word	0x20000420

08008410 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800841a:	4b29      	ldr	r3, [pc, #164]	; (80084c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008420:	4b28      	ldr	r3, [pc, #160]	; (80084c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3304      	adds	r3, #4
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe f93b 	bl	80066a2 <uxListRemove>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10b      	bne.n	800844a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008432:	4b24      	ldr	r3, [pc, #144]	; (80084c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	2201      	movs	r2, #1
 800843a:	fa02 f303 	lsl.w	r3, r2, r3
 800843e:	43da      	mvns	r2, r3
 8008440:	4b21      	ldr	r3, [pc, #132]	; (80084c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4013      	ands	r3, r2
 8008446:	4a20      	ldr	r2, [pc, #128]	; (80084c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008448:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008450:	d10a      	bne.n	8008468 <prvAddCurrentTaskToDelayedList+0x58>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008458:	4b1a      	ldr	r3, [pc, #104]	; (80084c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3304      	adds	r3, #4
 800845e:	4619      	mov	r1, r3
 8008460:	481a      	ldr	r0, [pc, #104]	; (80084cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008462:	f7fe f8c1 	bl	80065e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008466:	e026      	b.n	80084b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4413      	add	r3, r2
 800846e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008470:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	429a      	cmp	r2, r3
 800847e:	d209      	bcs.n	8008494 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008480:	4b13      	ldr	r3, [pc, #76]	; (80084d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3304      	adds	r3, #4
 800848a:	4619      	mov	r1, r3
 800848c:	4610      	mov	r0, r2
 800848e:	f7fe f8cf 	bl	8006630 <vListInsert>
}
 8008492:	e010      	b.n	80084b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008494:	4b0f      	ldr	r3, [pc, #60]	; (80084d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3304      	adds	r3, #4
 800849e:	4619      	mov	r1, r3
 80084a0:	4610      	mov	r0, r2
 80084a2:	f7fe f8c5 	bl	8006630 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084a6:	4b0c      	ldr	r3, [pc, #48]	; (80084d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d202      	bcs.n	80084b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80084b0:	4a09      	ldr	r2, [pc, #36]	; (80084d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	6013      	str	r3, [r2, #0]
}
 80084b6:	bf00      	nop
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	2000041c 	.word	0x2000041c
 80084c4:	20000318 	.word	0x20000318
 80084c8:	20000420 	.word	0x20000420
 80084cc:	20000404 	.word	0x20000404
 80084d0:	200003d4 	.word	0x200003d4
 80084d4:	200003d0 	.word	0x200003d0
 80084d8:	20000438 	.word	0x20000438

080084dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	3b04      	subs	r3, #4
 80084ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3b04      	subs	r3, #4
 80084fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f023 0201 	bic.w	r2, r3, #1
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3b04      	subs	r3, #4
 800850a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800850c:	4a0c      	ldr	r2, [pc, #48]	; (8008540 <pxPortInitialiseStack+0x64>)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3b14      	subs	r3, #20
 8008516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3b04      	subs	r3, #4
 8008522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f06f 0202 	mvn.w	r2, #2
 800852a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3b20      	subs	r3, #32
 8008530:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008532:	68fb      	ldr	r3, [r7, #12]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	08008545 	.word	0x08008545

08008544 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800854e:	4b11      	ldr	r3, [pc, #68]	; (8008594 <prvTaskExitError+0x50>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008556:	d009      	beq.n	800856c <prvTaskExitError+0x28>
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	e7fe      	b.n	800856a <prvTaskExitError+0x26>
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800857e:	bf00      	nop
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0fc      	beq.n	8008580 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008586:	bf00      	nop
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	20000028 	.word	0x20000028
	...

080085a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <pxCurrentTCBConst2>)
 80085a2:	6819      	ldr	r1, [r3, #0]
 80085a4:	6808      	ldr	r0, [r1, #0]
 80085a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085aa:	f380 8809 	msr	PSP, r0
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f04f 0000 	mov.w	r0, #0
 80085b6:	f380 8811 	msr	BASEPRI, r0
 80085ba:	4770      	bx	lr
 80085bc:	f3af 8000 	nop.w

080085c0 <pxCurrentTCBConst2>:
 80085c0:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop

080085c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085c8:	4808      	ldr	r0, [pc, #32]	; (80085ec <prvPortStartFirstTask+0x24>)
 80085ca:	6800      	ldr	r0, [r0, #0]
 80085cc:	6800      	ldr	r0, [r0, #0]
 80085ce:	f380 8808 	msr	MSP, r0
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f380 8814 	msr	CONTROL, r0
 80085da:	b662      	cpsie	i
 80085dc:	b661      	cpsie	f
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	df00      	svc	0
 80085e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085ea:	bf00      	nop
 80085ec:	e000ed08 	.word	0xe000ed08

080085f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085f6:	4b44      	ldr	r3, [pc, #272]	; (8008708 <xPortStartScheduler+0x118>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a44      	ldr	r2, [pc, #272]	; (800870c <xPortStartScheduler+0x11c>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d109      	bne.n	8008614 <xPortStartScheduler+0x24>
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	613b      	str	r3, [r7, #16]
 8008612:	e7fe      	b.n	8008612 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008614:	4b3c      	ldr	r3, [pc, #240]	; (8008708 <xPortStartScheduler+0x118>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a3d      	ldr	r2, [pc, #244]	; (8008710 <xPortStartScheduler+0x120>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d109      	bne.n	8008632 <xPortStartScheduler+0x42>
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	e7fe      	b.n	8008630 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008632:	4b38      	ldr	r3, [pc, #224]	; (8008714 <xPortStartScheduler+0x124>)
 8008634:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	22ff      	movs	r2, #255	; 0xff
 8008642:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	b2db      	uxtb	r3, r3
 800864a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008654:	b2da      	uxtb	r2, r3
 8008656:	4b30      	ldr	r3, [pc, #192]	; (8008718 <xPortStartScheduler+0x128>)
 8008658:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800865a:	4b30      	ldr	r3, [pc, #192]	; (800871c <xPortStartScheduler+0x12c>)
 800865c:	2207      	movs	r2, #7
 800865e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008660:	e009      	b.n	8008676 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008662:	4b2e      	ldr	r3, [pc, #184]	; (800871c <xPortStartScheduler+0x12c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3b01      	subs	r3, #1
 8008668:	4a2c      	ldr	r2, [pc, #176]	; (800871c <xPortStartScheduler+0x12c>)
 800866a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800866c:	78fb      	ldrb	r3, [r7, #3]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	b2db      	uxtb	r3, r3
 8008674:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867e:	2b80      	cmp	r3, #128	; 0x80
 8008680:	d0ef      	beq.n	8008662 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008682:	4b26      	ldr	r3, [pc, #152]	; (800871c <xPortStartScheduler+0x12c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f1c3 0307 	rsb	r3, r3, #7
 800868a:	2b04      	cmp	r3, #4
 800868c:	d009      	beq.n	80086a2 <xPortStartScheduler+0xb2>
 800868e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	60bb      	str	r3, [r7, #8]
 80086a0:	e7fe      	b.n	80086a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086a2:	4b1e      	ldr	r3, [pc, #120]	; (800871c <xPortStartScheduler+0x12c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	021b      	lsls	r3, r3, #8
 80086a8:	4a1c      	ldr	r2, [pc, #112]	; (800871c <xPortStartScheduler+0x12c>)
 80086aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086ac:	4b1b      	ldr	r3, [pc, #108]	; (800871c <xPortStartScheduler+0x12c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086b4:	4a19      	ldr	r2, [pc, #100]	; (800871c <xPortStartScheduler+0x12c>)
 80086b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086c0:	4b17      	ldr	r3, [pc, #92]	; (8008720 <xPortStartScheduler+0x130>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a16      	ldr	r2, [pc, #88]	; (8008720 <xPortStartScheduler+0x130>)
 80086c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086cc:	4b14      	ldr	r3, [pc, #80]	; (8008720 <xPortStartScheduler+0x130>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a13      	ldr	r2, [pc, #76]	; (8008720 <xPortStartScheduler+0x130>)
 80086d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086d8:	f000 f8d6 	bl	8008888 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086dc:	4b11      	ldr	r3, [pc, #68]	; (8008724 <xPortStartScheduler+0x134>)
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086e2:	f000 f8f5 	bl	80088d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086e6:	4b10      	ldr	r3, [pc, #64]	; (8008728 <xPortStartScheduler+0x138>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a0f      	ldr	r2, [pc, #60]	; (8008728 <xPortStartScheduler+0x138>)
 80086ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086f2:	f7ff ff69 	bl	80085c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086f6:	f7ff fbaf 	bl	8007e58 <vTaskSwitchContext>
	prvTaskExitError();
 80086fa:	f7ff ff23 	bl	8008544 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	e000ed00 	.word	0xe000ed00
 800870c:	410fc271 	.word	0x410fc271
 8008710:	410fc270 	.word	0x410fc270
 8008714:	e000e400 	.word	0xe000e400
 8008718:	20000444 	.word	0x20000444
 800871c:	20000448 	.word	0x20000448
 8008720:	e000ed20 	.word	0xe000ed20
 8008724:	20000028 	.word	0x20000028
 8008728:	e000ef34 	.word	0xe000ef34

0800872c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008744:	4b0e      	ldr	r3, [pc, #56]	; (8008780 <vPortEnterCritical+0x54>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3301      	adds	r3, #1
 800874a:	4a0d      	ldr	r2, [pc, #52]	; (8008780 <vPortEnterCritical+0x54>)
 800874c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800874e:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <vPortEnterCritical+0x54>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d10e      	bne.n	8008774 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008756:	4b0b      	ldr	r3, [pc, #44]	; (8008784 <vPortEnterCritical+0x58>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	d009      	beq.n	8008774 <vPortEnterCritical+0x48>
 8008760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	603b      	str	r3, [r7, #0]
 8008772:	e7fe      	b.n	8008772 <vPortEnterCritical+0x46>
	}
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	20000028 	.word	0x20000028
 8008784:	e000ed04 	.word	0xe000ed04

08008788 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800878e:	4b11      	ldr	r3, [pc, #68]	; (80087d4 <vPortExitCritical+0x4c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d109      	bne.n	80087aa <vPortExitCritical+0x22>
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	607b      	str	r3, [r7, #4]
 80087a8:	e7fe      	b.n	80087a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80087aa:	4b0a      	ldr	r3, [pc, #40]	; (80087d4 <vPortExitCritical+0x4c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	4a08      	ldr	r2, [pc, #32]	; (80087d4 <vPortExitCritical+0x4c>)
 80087b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087b4:	4b07      	ldr	r3, [pc, #28]	; (80087d4 <vPortExitCritical+0x4c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <vPortExitCritical+0x3e>
 80087bc:	2300      	movs	r3, #0
 80087be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	20000028 	.word	0x20000028
	...

080087e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087e0:	f3ef 8009 	mrs	r0, PSP
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	4b15      	ldr	r3, [pc, #84]	; (8008840 <pxCurrentTCBConst>)
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	f01e 0f10 	tst.w	lr, #16
 80087f0:	bf08      	it	eq
 80087f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fa:	6010      	str	r0, [r2, #0]
 80087fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008804:	f380 8811 	msr	BASEPRI, r0
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f7ff fb22 	bl	8007e58 <vTaskSwitchContext>
 8008814:	f04f 0000 	mov.w	r0, #0
 8008818:	f380 8811 	msr	BASEPRI, r0
 800881c:	bc09      	pop	{r0, r3}
 800881e:	6819      	ldr	r1, [r3, #0]
 8008820:	6808      	ldr	r0, [r1, #0]
 8008822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008826:	f01e 0f10 	tst.w	lr, #16
 800882a:	bf08      	it	eq
 800882c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008830:	f380 8809 	msr	PSP, r0
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	f3af 8000 	nop.w

08008840 <pxCurrentTCBConst>:
 8008840:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008844:	bf00      	nop
 8008846:	bf00      	nop

08008848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008860:	f7ff fa3e 	bl	8007ce0 <xTaskIncrementTick>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800886a:	4b06      	ldr	r3, [pc, #24]	; (8008884 <SysTick_Handler+0x3c>)
 800886c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	2300      	movs	r3, #0
 8008874:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	e000ed04 	.word	0xe000ed04

08008888 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008888:	b480      	push	{r7}
 800888a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800888c:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <vPortSetupTimerInterrupt+0x34>)
 800888e:	2200      	movs	r2, #0
 8008890:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008892:	4b0b      	ldr	r3, [pc, #44]	; (80088c0 <vPortSetupTimerInterrupt+0x38>)
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008898:	4b0a      	ldr	r3, [pc, #40]	; (80088c4 <vPortSetupTimerInterrupt+0x3c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a0a      	ldr	r2, [pc, #40]	; (80088c8 <vPortSetupTimerInterrupt+0x40>)
 800889e:	fba2 2303 	umull	r2, r3, r2, r3
 80088a2:	099b      	lsrs	r3, r3, #6
 80088a4:	4a09      	ldr	r2, [pc, #36]	; (80088cc <vPortSetupTimerInterrupt+0x44>)
 80088a6:	3b01      	subs	r3, #1
 80088a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088aa:	4b04      	ldr	r3, [pc, #16]	; (80088bc <vPortSetupTimerInterrupt+0x34>)
 80088ac:	2207      	movs	r2, #7
 80088ae:	601a      	str	r2, [r3, #0]
}
 80088b0:	bf00      	nop
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	e000e010 	.word	0xe000e010
 80088c0:	e000e018 	.word	0xe000e018
 80088c4:	2000001c 	.word	0x2000001c
 80088c8:	10624dd3 	.word	0x10624dd3
 80088cc:	e000e014 	.word	0xe000e014

080088d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088e0 <vPortEnableVFP+0x10>
 80088d4:	6801      	ldr	r1, [r0, #0]
 80088d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088da:	6001      	str	r1, [r0, #0]
 80088dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088de:	bf00      	nop
 80088e0:	e000ed88 	.word	0xe000ed88

080088e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088ea:	f3ef 8305 	mrs	r3, IPSR
 80088ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b0f      	cmp	r3, #15
 80088f4:	d913      	bls.n	800891e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088f6:	4a16      	ldr	r2, [pc, #88]	; (8008950 <vPortValidateInterruptPriority+0x6c>)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4413      	add	r3, r2
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008900:	4b14      	ldr	r3, [pc, #80]	; (8008954 <vPortValidateInterruptPriority+0x70>)
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	7afa      	ldrb	r2, [r7, #11]
 8008906:	429a      	cmp	r2, r3
 8008908:	d209      	bcs.n	800891e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	607b      	str	r3, [r7, #4]
 800891c:	e7fe      	b.n	800891c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800891e:	4b0e      	ldr	r3, [pc, #56]	; (8008958 <vPortValidateInterruptPriority+0x74>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008926:	4b0d      	ldr	r3, [pc, #52]	; (800895c <vPortValidateInterruptPriority+0x78>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	429a      	cmp	r2, r3
 800892c:	d909      	bls.n	8008942 <vPortValidateInterruptPriority+0x5e>
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	603b      	str	r3, [r7, #0]
 8008940:	e7fe      	b.n	8008940 <vPortValidateInterruptPriority+0x5c>
	}
 8008942:	bf00      	nop
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	e000e3f0 	.word	0xe000e3f0
 8008954:	20000444 	.word	0x20000444
 8008958:	e000ed0c 	.word	0xe000ed0c
 800895c:	20000448 	.word	0x20000448

08008960 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b08a      	sub	sp, #40	; 0x28
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008968:	2300      	movs	r3, #0
 800896a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800896c:	f7ff f90e 	bl	8007b8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008970:	4b57      	ldr	r3, [pc, #348]	; (8008ad0 <pvPortMalloc+0x170>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008978:	f000 f90c 	bl	8008b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800897c:	4b55      	ldr	r3, [pc, #340]	; (8008ad4 <pvPortMalloc+0x174>)
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4013      	ands	r3, r2
 8008984:	2b00      	cmp	r3, #0
 8008986:	f040 808c 	bne.w	8008aa2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d01c      	beq.n	80089ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008990:	2208      	movs	r2, #8
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4413      	add	r3, r2
 8008996:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d013      	beq.n	80089ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f023 0307 	bic.w	r3, r3, #7
 80089a8:	3308      	adds	r3, #8
 80089aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d009      	beq.n	80089ca <pvPortMalloc+0x6a>
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	e7fe      	b.n	80089c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d068      	beq.n	8008aa2 <pvPortMalloc+0x142>
 80089d0:	4b41      	ldr	r3, [pc, #260]	; (8008ad8 <pvPortMalloc+0x178>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d863      	bhi.n	8008aa2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089da:	4b40      	ldr	r3, [pc, #256]	; (8008adc <pvPortMalloc+0x17c>)
 80089dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089de:	4b3f      	ldr	r3, [pc, #252]	; (8008adc <pvPortMalloc+0x17c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089e4:	e004      	b.n	80089f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d903      	bls.n	8008a02 <pvPortMalloc+0xa2>
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1f1      	bne.n	80089e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a02:	4b33      	ldr	r3, [pc, #204]	; (8008ad0 <pvPortMalloc+0x170>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d04a      	beq.n	8008aa2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2208      	movs	r2, #8
 8008a12:	4413      	add	r3, r2
 8008a14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	1ad2      	subs	r2, r2, r3
 8008a26:	2308      	movs	r3, #8
 8008a28:	005b      	lsls	r3, r3, #1
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d91e      	bls.n	8008a6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4413      	add	r3, r2
 8008a34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	f003 0307 	and.w	r3, r3, #7
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d009      	beq.n	8008a54 <pvPortMalloc+0xf4>
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	613b      	str	r3, [r7, #16]
 8008a52:	e7fe      	b.n	8008a52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	1ad2      	subs	r2, r2, r3
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a66:	69b8      	ldr	r0, [r7, #24]
 8008a68:	f000 f8f6 	bl	8008c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a6c:	4b1a      	ldr	r3, [pc, #104]	; (8008ad8 <pvPortMalloc+0x178>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <pvPortMalloc+0x178>)
 8008a78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a7a:	4b17      	ldr	r3, [pc, #92]	; (8008ad8 <pvPortMalloc+0x178>)
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	4b18      	ldr	r3, [pc, #96]	; (8008ae0 <pvPortMalloc+0x180>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d203      	bcs.n	8008a8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a86:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <pvPortMalloc+0x178>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a15      	ldr	r2, [pc, #84]	; (8008ae0 <pvPortMalloc+0x180>)
 8008a8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <pvPortMalloc+0x174>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	431a      	orrs	r2, r3
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008aa2:	f7ff f881 	bl	8007ba8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	f003 0307 	and.w	r3, r3, #7
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d009      	beq.n	8008ac4 <pvPortMalloc+0x164>
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60fb      	str	r3, [r7, #12]
 8008ac2:	e7fe      	b.n	8008ac2 <pvPortMalloc+0x162>
	return pvReturn;
 8008ac4:	69fb      	ldr	r3, [r7, #28]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3728      	adds	r7, #40	; 0x28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20004054 	.word	0x20004054
 8008ad4:	20004060 	.word	0x20004060
 8008ad8:	20004058 	.word	0x20004058
 8008adc:	2000404c 	.word	0x2000404c
 8008ae0:	2000405c 	.word	0x2000405c

08008ae4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d046      	beq.n	8008b84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008af6:	2308      	movs	r3, #8
 8008af8:	425b      	negs	r3, r3
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4413      	add	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	4b20      	ldr	r3, [pc, #128]	; (8008b8c <vPortFree+0xa8>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d109      	bne.n	8008b26 <vPortFree+0x42>
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	60fb      	str	r3, [r7, #12]
 8008b24:	e7fe      	b.n	8008b24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d009      	beq.n	8008b42 <vPortFree+0x5e>
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	60bb      	str	r3, [r7, #8]
 8008b40:	e7fe      	b.n	8008b40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <vPortFree+0xa8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d019      	beq.n	8008b84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d115      	bne.n	8008b84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	4b0b      	ldr	r3, [pc, #44]	; (8008b8c <vPortFree+0xa8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	43db      	mvns	r3, r3
 8008b62:	401a      	ands	r2, r3
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b68:	f7ff f810 	bl	8007b8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <vPortFree+0xac>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4413      	add	r3, r2
 8008b76:	4a06      	ldr	r2, [pc, #24]	; (8008b90 <vPortFree+0xac>)
 8008b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b7a:	6938      	ldr	r0, [r7, #16]
 8008b7c:	f000 f86c 	bl	8008c58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b80:	f7ff f812 	bl	8007ba8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b84:	bf00      	nop
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20004060 	.word	0x20004060
 8008b90:	20004058 	.word	0x20004058

08008b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ba0:	4b27      	ldr	r3, [pc, #156]	; (8008c40 <prvHeapInit+0xac>)
 8008ba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00c      	beq.n	8008bc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3307      	adds	r3, #7
 8008bb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0307 	bic.w	r3, r3, #7
 8008bba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	4a1f      	ldr	r2, [pc, #124]	; (8008c40 <prvHeapInit+0xac>)
 8008bc4:	4413      	add	r3, r2
 8008bc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	; (8008c44 <prvHeapInit+0xb0>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bd2:	4b1c      	ldr	r3, [pc, #112]	; (8008c44 <prvHeapInit+0xb0>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	4413      	add	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008be0:	2208      	movs	r2, #8
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	1a9b      	subs	r3, r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f023 0307 	bic.w	r3, r3, #7
 8008bee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4a15      	ldr	r2, [pc, #84]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bfe:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <prvHeapInit+0xb4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <prvHeapInit+0xb4>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	4a0a      	ldr	r2, [pc, #40]	; (8008c4c <prvHeapInit+0xb8>)
 8008c22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	4a09      	ldr	r2, [pc, #36]	; (8008c50 <prvHeapInit+0xbc>)
 8008c2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <prvHeapInit+0xc0>)
 8008c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c32:	601a      	str	r2, [r3, #0]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	2000044c 	.word	0x2000044c
 8008c44:	2000404c 	.word	0x2000404c
 8008c48:	20004054 	.word	0x20004054
 8008c4c:	2000405c 	.word	0x2000405c
 8008c50:	20004058 	.word	0x20004058
 8008c54:	20004060 	.word	0x20004060

08008c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c60:	4b28      	ldr	r3, [pc, #160]	; (8008d04 <prvInsertBlockIntoFreeList+0xac>)
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	e002      	b.n	8008c6c <prvInsertBlockIntoFreeList+0x14>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d8f7      	bhi.n	8008c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	4413      	add	r3, r2
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d108      	bne.n	8008c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	441a      	add	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d118      	bne.n	8008ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4b15      	ldr	r3, [pc, #84]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d00d      	beq.n	8008cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	441a      	add	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	e008      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	e003      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d002      	beq.n	8008cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cf6:	bf00      	nop
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	2000404c 	.word	0x2000404c
 8008d08:	20004054 	.word	0x20004054

08008d0c <__errno>:
 8008d0c:	4b01      	ldr	r3, [pc, #4]	; (8008d14 <__errno+0x8>)
 8008d0e:	6818      	ldr	r0, [r3, #0]
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	2000002c 	.word	0x2000002c

08008d18 <__libc_init_array>:
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	4e0d      	ldr	r6, [pc, #52]	; (8008d50 <__libc_init_array+0x38>)
 8008d1c:	4c0d      	ldr	r4, [pc, #52]	; (8008d54 <__libc_init_array+0x3c>)
 8008d1e:	1ba4      	subs	r4, r4, r6
 8008d20:	10a4      	asrs	r4, r4, #2
 8008d22:	2500      	movs	r5, #0
 8008d24:	42a5      	cmp	r5, r4
 8008d26:	d109      	bne.n	8008d3c <__libc_init_array+0x24>
 8008d28:	4e0b      	ldr	r6, [pc, #44]	; (8008d58 <__libc_init_array+0x40>)
 8008d2a:	4c0c      	ldr	r4, [pc, #48]	; (8008d5c <__libc_init_array+0x44>)
 8008d2c:	f001 f98e 	bl	800a04c <_init>
 8008d30:	1ba4      	subs	r4, r4, r6
 8008d32:	10a4      	asrs	r4, r4, #2
 8008d34:	2500      	movs	r5, #0
 8008d36:	42a5      	cmp	r5, r4
 8008d38:	d105      	bne.n	8008d46 <__libc_init_array+0x2e>
 8008d3a:	bd70      	pop	{r4, r5, r6, pc}
 8008d3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d40:	4798      	blx	r3
 8008d42:	3501      	adds	r5, #1
 8008d44:	e7ee      	b.n	8008d24 <__libc_init_array+0xc>
 8008d46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d4a:	4798      	blx	r3
 8008d4c:	3501      	adds	r5, #1
 8008d4e:	e7f2      	b.n	8008d36 <__libc_init_array+0x1e>
 8008d50:	0800a2c0 	.word	0x0800a2c0
 8008d54:	0800a2c0 	.word	0x0800a2c0
 8008d58:	0800a2c0 	.word	0x0800a2c0
 8008d5c:	0800a2c4 	.word	0x0800a2c4

08008d60 <memcpy>:
 8008d60:	b510      	push	{r4, lr}
 8008d62:	1e43      	subs	r3, r0, #1
 8008d64:	440a      	add	r2, r1
 8008d66:	4291      	cmp	r1, r2
 8008d68:	d100      	bne.n	8008d6c <memcpy+0xc>
 8008d6a:	bd10      	pop	{r4, pc}
 8008d6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d74:	e7f7      	b.n	8008d66 <memcpy+0x6>

08008d76 <memset>:
 8008d76:	4402      	add	r2, r0
 8008d78:	4603      	mov	r3, r0
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d100      	bne.n	8008d80 <memset+0xa>
 8008d7e:	4770      	bx	lr
 8008d80:	f803 1b01 	strb.w	r1, [r3], #1
 8008d84:	e7f9      	b.n	8008d7a <memset+0x4>
	...

08008d88 <iprintf>:
 8008d88:	b40f      	push	{r0, r1, r2, r3}
 8008d8a:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <iprintf+0x2c>)
 8008d8c:	b513      	push	{r0, r1, r4, lr}
 8008d8e:	681c      	ldr	r4, [r3, #0]
 8008d90:	b124      	cbz	r4, 8008d9c <iprintf+0x14>
 8008d92:	69a3      	ldr	r3, [r4, #24]
 8008d94:	b913      	cbnz	r3, 8008d9c <iprintf+0x14>
 8008d96:	4620      	mov	r0, r4
 8008d98:	f000 f9cc 	bl	8009134 <__sinit>
 8008d9c:	ab05      	add	r3, sp, #20
 8008d9e:	9a04      	ldr	r2, [sp, #16]
 8008da0:	68a1      	ldr	r1, [r4, #8]
 8008da2:	9301      	str	r3, [sp, #4]
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fcdf 	bl	8009768 <_vfiprintf_r>
 8008daa:	b002      	add	sp, #8
 8008dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008db0:	b004      	add	sp, #16
 8008db2:	4770      	bx	lr
 8008db4:	2000002c 	.word	0x2000002c

08008db8 <setvbuf>:
 8008db8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008dbc:	461d      	mov	r5, r3
 8008dbe:	4b51      	ldr	r3, [pc, #324]	; (8008f04 <setvbuf+0x14c>)
 8008dc0:	681e      	ldr	r6, [r3, #0]
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	460f      	mov	r7, r1
 8008dc6:	4690      	mov	r8, r2
 8008dc8:	b126      	cbz	r6, 8008dd4 <setvbuf+0x1c>
 8008dca:	69b3      	ldr	r3, [r6, #24]
 8008dcc:	b913      	cbnz	r3, 8008dd4 <setvbuf+0x1c>
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f000 f9b0 	bl	8009134 <__sinit>
 8008dd4:	4b4c      	ldr	r3, [pc, #304]	; (8008f08 <setvbuf+0x150>)
 8008dd6:	429c      	cmp	r4, r3
 8008dd8:	d152      	bne.n	8008e80 <setvbuf+0xc8>
 8008dda:	6874      	ldr	r4, [r6, #4]
 8008ddc:	f1b8 0f02 	cmp.w	r8, #2
 8008de0:	d006      	beq.n	8008df0 <setvbuf+0x38>
 8008de2:	f1b8 0f01 	cmp.w	r8, #1
 8008de6:	f200 8089 	bhi.w	8008efc <setvbuf+0x144>
 8008dea:	2d00      	cmp	r5, #0
 8008dec:	f2c0 8086 	blt.w	8008efc <setvbuf+0x144>
 8008df0:	4621      	mov	r1, r4
 8008df2:	4630      	mov	r0, r6
 8008df4:	f000 f934 	bl	8009060 <_fflush_r>
 8008df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dfa:	b141      	cbz	r1, 8008e0e <setvbuf+0x56>
 8008dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e00:	4299      	cmp	r1, r3
 8008e02:	d002      	beq.n	8008e0a <setvbuf+0x52>
 8008e04:	4630      	mov	r0, r6
 8008e06:	f000 fa8b 	bl	8009320 <_free_r>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61a3      	str	r3, [r4, #24]
 8008e12:	6063      	str	r3, [r4, #4]
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	061b      	lsls	r3, r3, #24
 8008e18:	d503      	bpl.n	8008e22 <setvbuf+0x6a>
 8008e1a:	6921      	ldr	r1, [r4, #16]
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f000 fa7f 	bl	8009320 <_free_r>
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008e28:	f023 0303 	bic.w	r3, r3, #3
 8008e2c:	f1b8 0f02 	cmp.w	r8, #2
 8008e30:	81a3      	strh	r3, [r4, #12]
 8008e32:	d05d      	beq.n	8008ef0 <setvbuf+0x138>
 8008e34:	ab01      	add	r3, sp, #4
 8008e36:	466a      	mov	r2, sp
 8008e38:	4621      	mov	r1, r4
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f000 fa04 	bl	8009248 <__swhatbuf_r>
 8008e40:	89a3      	ldrh	r3, [r4, #12]
 8008e42:	4318      	orrs	r0, r3
 8008e44:	81a0      	strh	r0, [r4, #12]
 8008e46:	bb2d      	cbnz	r5, 8008e94 <setvbuf+0xdc>
 8008e48:	9d00      	ldr	r5, [sp, #0]
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f000 fa60 	bl	8009310 <malloc>
 8008e50:	4607      	mov	r7, r0
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d14e      	bne.n	8008ef4 <setvbuf+0x13c>
 8008e56:	f8dd 9000 	ldr.w	r9, [sp]
 8008e5a:	45a9      	cmp	r9, r5
 8008e5c:	d13c      	bne.n	8008ed8 <setvbuf+0x120>
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	f043 0302 	orr.w	r3, r3, #2
 8008e68:	81a3      	strh	r3, [r4, #12]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60a3      	str	r3, [r4, #8]
 8008e6e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e72:	6023      	str	r3, [r4, #0]
 8008e74:	6123      	str	r3, [r4, #16]
 8008e76:	2301      	movs	r3, #1
 8008e78:	6163      	str	r3, [r4, #20]
 8008e7a:	b003      	add	sp, #12
 8008e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e80:	4b22      	ldr	r3, [pc, #136]	; (8008f0c <setvbuf+0x154>)
 8008e82:	429c      	cmp	r4, r3
 8008e84:	d101      	bne.n	8008e8a <setvbuf+0xd2>
 8008e86:	68b4      	ldr	r4, [r6, #8]
 8008e88:	e7a8      	b.n	8008ddc <setvbuf+0x24>
 8008e8a:	4b21      	ldr	r3, [pc, #132]	; (8008f10 <setvbuf+0x158>)
 8008e8c:	429c      	cmp	r4, r3
 8008e8e:	bf08      	it	eq
 8008e90:	68f4      	ldreq	r4, [r6, #12]
 8008e92:	e7a3      	b.n	8008ddc <setvbuf+0x24>
 8008e94:	2f00      	cmp	r7, #0
 8008e96:	d0d8      	beq.n	8008e4a <setvbuf+0x92>
 8008e98:	69b3      	ldr	r3, [r6, #24]
 8008e9a:	b913      	cbnz	r3, 8008ea2 <setvbuf+0xea>
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f000 f949 	bl	8009134 <__sinit>
 8008ea2:	f1b8 0f01 	cmp.w	r8, #1
 8008ea6:	bf08      	it	eq
 8008ea8:	89a3      	ldrheq	r3, [r4, #12]
 8008eaa:	6027      	str	r7, [r4, #0]
 8008eac:	bf04      	itt	eq
 8008eae:	f043 0301 	orreq.w	r3, r3, #1
 8008eb2:	81a3      	strheq	r3, [r4, #12]
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	f013 0008 	ands.w	r0, r3, #8
 8008eba:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8008ebe:	d01b      	beq.n	8008ef8 <setvbuf+0x140>
 8008ec0:	f013 0001 	ands.w	r0, r3, #1
 8008ec4:	bf18      	it	ne
 8008ec6:	426d      	negne	r5, r5
 8008ec8:	f04f 0300 	mov.w	r3, #0
 8008ecc:	bf1d      	ittte	ne
 8008ece:	60a3      	strne	r3, [r4, #8]
 8008ed0:	61a5      	strne	r5, [r4, #24]
 8008ed2:	4618      	movne	r0, r3
 8008ed4:	60a5      	streq	r5, [r4, #8]
 8008ed6:	e7d0      	b.n	8008e7a <setvbuf+0xc2>
 8008ed8:	4648      	mov	r0, r9
 8008eda:	f000 fa19 	bl	8009310 <malloc>
 8008ede:	4607      	mov	r7, r0
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d0bc      	beq.n	8008e5e <setvbuf+0xa6>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eea:	81a3      	strh	r3, [r4, #12]
 8008eec:	464d      	mov	r5, r9
 8008eee:	e7d3      	b.n	8008e98 <setvbuf+0xe0>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	e7b6      	b.n	8008e62 <setvbuf+0xaa>
 8008ef4:	46a9      	mov	r9, r5
 8008ef6:	e7f5      	b.n	8008ee4 <setvbuf+0x12c>
 8008ef8:	60a0      	str	r0, [r4, #8]
 8008efa:	e7be      	b.n	8008e7a <setvbuf+0xc2>
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295
 8008f00:	e7bb      	b.n	8008e7a <setvbuf+0xc2>
 8008f02:	bf00      	nop
 8008f04:	2000002c 	.word	0x2000002c
 8008f08:	0800a244 	.word	0x0800a244
 8008f0c:	0800a264 	.word	0x0800a264
 8008f10:	0800a224 	.word	0x0800a224

08008f14 <siprintf>:
 8008f14:	b40e      	push	{r1, r2, r3}
 8008f16:	b500      	push	{lr}
 8008f18:	b09c      	sub	sp, #112	; 0x70
 8008f1a:	ab1d      	add	r3, sp, #116	; 0x74
 8008f1c:	9002      	str	r0, [sp, #8]
 8008f1e:	9006      	str	r0, [sp, #24]
 8008f20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f24:	4809      	ldr	r0, [pc, #36]	; (8008f4c <siprintf+0x38>)
 8008f26:	9107      	str	r1, [sp, #28]
 8008f28:	9104      	str	r1, [sp, #16]
 8008f2a:	4909      	ldr	r1, [pc, #36]	; (8008f50 <siprintf+0x3c>)
 8008f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f30:	9105      	str	r1, [sp, #20]
 8008f32:	6800      	ldr	r0, [r0, #0]
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	a902      	add	r1, sp, #8
 8008f38:	f000 faf4 	bl	8009524 <_svfiprintf_r>
 8008f3c:	9b02      	ldr	r3, [sp, #8]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	701a      	strb	r2, [r3, #0]
 8008f42:	b01c      	add	sp, #112	; 0x70
 8008f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f48:	b003      	add	sp, #12
 8008f4a:	4770      	bx	lr
 8008f4c:	2000002c 	.word	0x2000002c
 8008f50:	ffff0208 	.word	0xffff0208

08008f54 <__sflush_r>:
 8008f54:	898a      	ldrh	r2, [r1, #12]
 8008f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	0710      	lsls	r0, r2, #28
 8008f5e:	460c      	mov	r4, r1
 8008f60:	d458      	bmi.n	8009014 <__sflush_r+0xc0>
 8008f62:	684b      	ldr	r3, [r1, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dc05      	bgt.n	8008f74 <__sflush_r+0x20>
 8008f68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	dc02      	bgt.n	8008f74 <__sflush_r+0x20>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f76:	2e00      	cmp	r6, #0
 8008f78:	d0f9      	beq.n	8008f6e <__sflush_r+0x1a>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f80:	682f      	ldr	r7, [r5, #0]
 8008f82:	6a21      	ldr	r1, [r4, #32]
 8008f84:	602b      	str	r3, [r5, #0]
 8008f86:	d032      	beq.n	8008fee <__sflush_r+0x9a>
 8008f88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	075a      	lsls	r2, r3, #29
 8008f8e:	d505      	bpl.n	8008f9c <__sflush_r+0x48>
 8008f90:	6863      	ldr	r3, [r4, #4]
 8008f92:	1ac0      	subs	r0, r0, r3
 8008f94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f96:	b10b      	cbz	r3, 8008f9c <__sflush_r+0x48>
 8008f98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f9a:	1ac0      	subs	r0, r0, r3
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fa2:	6a21      	ldr	r1, [r4, #32]
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b0      	blx	r6
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	d106      	bne.n	8008fbc <__sflush_r+0x68>
 8008fae:	6829      	ldr	r1, [r5, #0]
 8008fb0:	291d      	cmp	r1, #29
 8008fb2:	d848      	bhi.n	8009046 <__sflush_r+0xf2>
 8008fb4:	4a29      	ldr	r2, [pc, #164]	; (800905c <__sflush_r+0x108>)
 8008fb6:	40ca      	lsrs	r2, r1
 8008fb8:	07d6      	lsls	r6, r2, #31
 8008fba:	d544      	bpl.n	8009046 <__sflush_r+0xf2>
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	6062      	str	r2, [r4, #4]
 8008fc0:	04d9      	lsls	r1, r3, #19
 8008fc2:	6922      	ldr	r2, [r4, #16]
 8008fc4:	6022      	str	r2, [r4, #0]
 8008fc6:	d504      	bpl.n	8008fd2 <__sflush_r+0x7e>
 8008fc8:	1c42      	adds	r2, r0, #1
 8008fca:	d101      	bne.n	8008fd0 <__sflush_r+0x7c>
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	b903      	cbnz	r3, 8008fd2 <__sflush_r+0x7e>
 8008fd0:	6560      	str	r0, [r4, #84]	; 0x54
 8008fd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fd4:	602f      	str	r7, [r5, #0]
 8008fd6:	2900      	cmp	r1, #0
 8008fd8:	d0c9      	beq.n	8008f6e <__sflush_r+0x1a>
 8008fda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fde:	4299      	cmp	r1, r3
 8008fe0:	d002      	beq.n	8008fe8 <__sflush_r+0x94>
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	f000 f99c 	bl	8009320 <_free_r>
 8008fe8:	2000      	movs	r0, #0
 8008fea:	6360      	str	r0, [r4, #52]	; 0x34
 8008fec:	e7c0      	b.n	8008f70 <__sflush_r+0x1c>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b0      	blx	r6
 8008ff4:	1c41      	adds	r1, r0, #1
 8008ff6:	d1c8      	bne.n	8008f8a <__sflush_r+0x36>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0c5      	beq.n	8008f8a <__sflush_r+0x36>
 8008ffe:	2b1d      	cmp	r3, #29
 8009000:	d001      	beq.n	8009006 <__sflush_r+0xb2>
 8009002:	2b16      	cmp	r3, #22
 8009004:	d101      	bne.n	800900a <__sflush_r+0xb6>
 8009006:	602f      	str	r7, [r5, #0]
 8009008:	e7b1      	b.n	8008f6e <__sflush_r+0x1a>
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009010:	81a3      	strh	r3, [r4, #12]
 8009012:	e7ad      	b.n	8008f70 <__sflush_r+0x1c>
 8009014:	690f      	ldr	r7, [r1, #16]
 8009016:	2f00      	cmp	r7, #0
 8009018:	d0a9      	beq.n	8008f6e <__sflush_r+0x1a>
 800901a:	0793      	lsls	r3, r2, #30
 800901c:	680e      	ldr	r6, [r1, #0]
 800901e:	bf08      	it	eq
 8009020:	694b      	ldreq	r3, [r1, #20]
 8009022:	600f      	str	r7, [r1, #0]
 8009024:	bf18      	it	ne
 8009026:	2300      	movne	r3, #0
 8009028:	eba6 0807 	sub.w	r8, r6, r7
 800902c:	608b      	str	r3, [r1, #8]
 800902e:	f1b8 0f00 	cmp.w	r8, #0
 8009032:	dd9c      	ble.n	8008f6e <__sflush_r+0x1a>
 8009034:	4643      	mov	r3, r8
 8009036:	463a      	mov	r2, r7
 8009038:	6a21      	ldr	r1, [r4, #32]
 800903a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800903c:	4628      	mov	r0, r5
 800903e:	47b0      	blx	r6
 8009040:	2800      	cmp	r0, #0
 8009042:	dc06      	bgt.n	8009052 <__sflush_r+0xfe>
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	f04f 30ff 	mov.w	r0, #4294967295
 8009050:	e78e      	b.n	8008f70 <__sflush_r+0x1c>
 8009052:	4407      	add	r7, r0
 8009054:	eba8 0800 	sub.w	r8, r8, r0
 8009058:	e7e9      	b.n	800902e <__sflush_r+0xda>
 800905a:	bf00      	nop
 800905c:	20400001 	.word	0x20400001

08009060 <_fflush_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	690b      	ldr	r3, [r1, #16]
 8009064:	4605      	mov	r5, r0
 8009066:	460c      	mov	r4, r1
 8009068:	b1db      	cbz	r3, 80090a2 <_fflush_r+0x42>
 800906a:	b118      	cbz	r0, 8009074 <_fflush_r+0x14>
 800906c:	6983      	ldr	r3, [r0, #24]
 800906e:	b90b      	cbnz	r3, 8009074 <_fflush_r+0x14>
 8009070:	f000 f860 	bl	8009134 <__sinit>
 8009074:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <_fflush_r+0x48>)
 8009076:	429c      	cmp	r4, r3
 8009078:	d109      	bne.n	800908e <_fflush_r+0x2e>
 800907a:	686c      	ldr	r4, [r5, #4]
 800907c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009080:	b17b      	cbz	r3, 80090a2 <_fflush_r+0x42>
 8009082:	4621      	mov	r1, r4
 8009084:	4628      	mov	r0, r5
 8009086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800908a:	f7ff bf63 	b.w	8008f54 <__sflush_r>
 800908e:	4b07      	ldr	r3, [pc, #28]	; (80090ac <_fflush_r+0x4c>)
 8009090:	429c      	cmp	r4, r3
 8009092:	d101      	bne.n	8009098 <_fflush_r+0x38>
 8009094:	68ac      	ldr	r4, [r5, #8]
 8009096:	e7f1      	b.n	800907c <_fflush_r+0x1c>
 8009098:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <_fflush_r+0x50>)
 800909a:	429c      	cmp	r4, r3
 800909c:	bf08      	it	eq
 800909e:	68ec      	ldreq	r4, [r5, #12]
 80090a0:	e7ec      	b.n	800907c <_fflush_r+0x1c>
 80090a2:	2000      	movs	r0, #0
 80090a4:	bd38      	pop	{r3, r4, r5, pc}
 80090a6:	bf00      	nop
 80090a8:	0800a244 	.word	0x0800a244
 80090ac:	0800a264 	.word	0x0800a264
 80090b0:	0800a224 	.word	0x0800a224

080090b4 <std>:
 80090b4:	2300      	movs	r3, #0
 80090b6:	b510      	push	{r4, lr}
 80090b8:	4604      	mov	r4, r0
 80090ba:	e9c0 3300 	strd	r3, r3, [r0]
 80090be:	6083      	str	r3, [r0, #8]
 80090c0:	8181      	strh	r1, [r0, #12]
 80090c2:	6643      	str	r3, [r0, #100]	; 0x64
 80090c4:	81c2      	strh	r2, [r0, #14]
 80090c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090ca:	6183      	str	r3, [r0, #24]
 80090cc:	4619      	mov	r1, r3
 80090ce:	2208      	movs	r2, #8
 80090d0:	305c      	adds	r0, #92	; 0x5c
 80090d2:	f7ff fe50 	bl	8008d76 <memset>
 80090d6:	4b05      	ldr	r3, [pc, #20]	; (80090ec <std+0x38>)
 80090d8:	6263      	str	r3, [r4, #36]	; 0x24
 80090da:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <std+0x3c>)
 80090dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <std+0x40>)
 80090e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090e2:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <std+0x44>)
 80090e4:	6224      	str	r4, [r4, #32]
 80090e6:	6323      	str	r3, [r4, #48]	; 0x30
 80090e8:	bd10      	pop	{r4, pc}
 80090ea:	bf00      	nop
 80090ec:	08009cc5 	.word	0x08009cc5
 80090f0:	08009ce7 	.word	0x08009ce7
 80090f4:	08009d1f 	.word	0x08009d1f
 80090f8:	08009d43 	.word	0x08009d43

080090fc <_cleanup_r>:
 80090fc:	4901      	ldr	r1, [pc, #4]	; (8009104 <_cleanup_r+0x8>)
 80090fe:	f000 b885 	b.w	800920c <_fwalk_reent>
 8009102:	bf00      	nop
 8009104:	08009061 	.word	0x08009061

08009108 <__sfmoreglue>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	1e4a      	subs	r2, r1, #1
 800910c:	2568      	movs	r5, #104	; 0x68
 800910e:	4355      	muls	r5, r2
 8009110:	460e      	mov	r6, r1
 8009112:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009116:	f000 f951 	bl	80093bc <_malloc_r>
 800911a:	4604      	mov	r4, r0
 800911c:	b140      	cbz	r0, 8009130 <__sfmoreglue+0x28>
 800911e:	2100      	movs	r1, #0
 8009120:	e9c0 1600 	strd	r1, r6, [r0]
 8009124:	300c      	adds	r0, #12
 8009126:	60a0      	str	r0, [r4, #8]
 8009128:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800912c:	f7ff fe23 	bl	8008d76 <memset>
 8009130:	4620      	mov	r0, r4
 8009132:	bd70      	pop	{r4, r5, r6, pc}

08009134 <__sinit>:
 8009134:	6983      	ldr	r3, [r0, #24]
 8009136:	b510      	push	{r4, lr}
 8009138:	4604      	mov	r4, r0
 800913a:	bb33      	cbnz	r3, 800918a <__sinit+0x56>
 800913c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009140:	6503      	str	r3, [r0, #80]	; 0x50
 8009142:	4b12      	ldr	r3, [pc, #72]	; (800918c <__sinit+0x58>)
 8009144:	4a12      	ldr	r2, [pc, #72]	; (8009190 <__sinit+0x5c>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6282      	str	r2, [r0, #40]	; 0x28
 800914a:	4298      	cmp	r0, r3
 800914c:	bf04      	itt	eq
 800914e:	2301      	moveq	r3, #1
 8009150:	6183      	streq	r3, [r0, #24]
 8009152:	f000 f81f 	bl	8009194 <__sfp>
 8009156:	6060      	str	r0, [r4, #4]
 8009158:	4620      	mov	r0, r4
 800915a:	f000 f81b 	bl	8009194 <__sfp>
 800915e:	60a0      	str	r0, [r4, #8]
 8009160:	4620      	mov	r0, r4
 8009162:	f000 f817 	bl	8009194 <__sfp>
 8009166:	2200      	movs	r2, #0
 8009168:	60e0      	str	r0, [r4, #12]
 800916a:	2104      	movs	r1, #4
 800916c:	6860      	ldr	r0, [r4, #4]
 800916e:	f7ff ffa1 	bl	80090b4 <std>
 8009172:	2201      	movs	r2, #1
 8009174:	2109      	movs	r1, #9
 8009176:	68a0      	ldr	r0, [r4, #8]
 8009178:	f7ff ff9c 	bl	80090b4 <std>
 800917c:	2202      	movs	r2, #2
 800917e:	2112      	movs	r1, #18
 8009180:	68e0      	ldr	r0, [r4, #12]
 8009182:	f7ff ff97 	bl	80090b4 <std>
 8009186:	2301      	movs	r3, #1
 8009188:	61a3      	str	r3, [r4, #24]
 800918a:	bd10      	pop	{r4, pc}
 800918c:	0800a220 	.word	0x0800a220
 8009190:	080090fd 	.word	0x080090fd

08009194 <__sfp>:
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009196:	4b1b      	ldr	r3, [pc, #108]	; (8009204 <__sfp+0x70>)
 8009198:	681e      	ldr	r6, [r3, #0]
 800919a:	69b3      	ldr	r3, [r6, #24]
 800919c:	4607      	mov	r7, r0
 800919e:	b913      	cbnz	r3, 80091a6 <__sfp+0x12>
 80091a0:	4630      	mov	r0, r6
 80091a2:	f7ff ffc7 	bl	8009134 <__sinit>
 80091a6:	3648      	adds	r6, #72	; 0x48
 80091a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	d503      	bpl.n	80091b8 <__sfp+0x24>
 80091b0:	6833      	ldr	r3, [r6, #0]
 80091b2:	b133      	cbz	r3, 80091c2 <__sfp+0x2e>
 80091b4:	6836      	ldr	r6, [r6, #0]
 80091b6:	e7f7      	b.n	80091a8 <__sfp+0x14>
 80091b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091bc:	b16d      	cbz	r5, 80091da <__sfp+0x46>
 80091be:	3468      	adds	r4, #104	; 0x68
 80091c0:	e7f4      	b.n	80091ac <__sfp+0x18>
 80091c2:	2104      	movs	r1, #4
 80091c4:	4638      	mov	r0, r7
 80091c6:	f7ff ff9f 	bl	8009108 <__sfmoreglue>
 80091ca:	6030      	str	r0, [r6, #0]
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d1f1      	bne.n	80091b4 <__sfp+0x20>
 80091d0:	230c      	movs	r3, #12
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	4604      	mov	r4, r0
 80091d6:	4620      	mov	r0, r4
 80091d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091da:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <__sfp+0x74>)
 80091dc:	6665      	str	r5, [r4, #100]	; 0x64
 80091de:	e9c4 5500 	strd	r5, r5, [r4]
 80091e2:	60a5      	str	r5, [r4, #8]
 80091e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80091e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80091ec:	2208      	movs	r2, #8
 80091ee:	4629      	mov	r1, r5
 80091f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091f4:	f7ff fdbf 	bl	8008d76 <memset>
 80091f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009200:	e7e9      	b.n	80091d6 <__sfp+0x42>
 8009202:	bf00      	nop
 8009204:	0800a220 	.word	0x0800a220
 8009208:	ffff0001 	.word	0xffff0001

0800920c <_fwalk_reent>:
 800920c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009210:	4680      	mov	r8, r0
 8009212:	4689      	mov	r9, r1
 8009214:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009218:	2600      	movs	r6, #0
 800921a:	b914      	cbnz	r4, 8009222 <_fwalk_reent+0x16>
 800921c:	4630      	mov	r0, r6
 800921e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009222:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009226:	3f01      	subs	r7, #1
 8009228:	d501      	bpl.n	800922e <_fwalk_reent+0x22>
 800922a:	6824      	ldr	r4, [r4, #0]
 800922c:	e7f5      	b.n	800921a <_fwalk_reent+0xe>
 800922e:	89ab      	ldrh	r3, [r5, #12]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d907      	bls.n	8009244 <_fwalk_reent+0x38>
 8009234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009238:	3301      	adds	r3, #1
 800923a:	d003      	beq.n	8009244 <_fwalk_reent+0x38>
 800923c:	4629      	mov	r1, r5
 800923e:	4640      	mov	r0, r8
 8009240:	47c8      	blx	r9
 8009242:	4306      	orrs	r6, r0
 8009244:	3568      	adds	r5, #104	; 0x68
 8009246:	e7ee      	b.n	8009226 <_fwalk_reent+0x1a>

08009248 <__swhatbuf_r>:
 8009248:	b570      	push	{r4, r5, r6, lr}
 800924a:	460e      	mov	r6, r1
 800924c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009250:	2900      	cmp	r1, #0
 8009252:	b096      	sub	sp, #88	; 0x58
 8009254:	4614      	mov	r4, r2
 8009256:	461d      	mov	r5, r3
 8009258:	da07      	bge.n	800926a <__swhatbuf_r+0x22>
 800925a:	2300      	movs	r3, #0
 800925c:	602b      	str	r3, [r5, #0]
 800925e:	89b3      	ldrh	r3, [r6, #12]
 8009260:	061a      	lsls	r2, r3, #24
 8009262:	d410      	bmi.n	8009286 <__swhatbuf_r+0x3e>
 8009264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009268:	e00e      	b.n	8009288 <__swhatbuf_r+0x40>
 800926a:	466a      	mov	r2, sp
 800926c:	f000 fe50 	bl	8009f10 <_fstat_r>
 8009270:	2800      	cmp	r0, #0
 8009272:	dbf2      	blt.n	800925a <__swhatbuf_r+0x12>
 8009274:	9a01      	ldr	r2, [sp, #4]
 8009276:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800927a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800927e:	425a      	negs	r2, r3
 8009280:	415a      	adcs	r2, r3
 8009282:	602a      	str	r2, [r5, #0]
 8009284:	e7ee      	b.n	8009264 <__swhatbuf_r+0x1c>
 8009286:	2340      	movs	r3, #64	; 0x40
 8009288:	2000      	movs	r0, #0
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	b016      	add	sp, #88	; 0x58
 800928e:	bd70      	pop	{r4, r5, r6, pc}

08009290 <__smakebuf_r>:
 8009290:	898b      	ldrh	r3, [r1, #12]
 8009292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009294:	079d      	lsls	r5, r3, #30
 8009296:	4606      	mov	r6, r0
 8009298:	460c      	mov	r4, r1
 800929a:	d507      	bpl.n	80092ac <__smakebuf_r+0x1c>
 800929c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	6123      	str	r3, [r4, #16]
 80092a4:	2301      	movs	r3, #1
 80092a6:	6163      	str	r3, [r4, #20]
 80092a8:	b002      	add	sp, #8
 80092aa:	bd70      	pop	{r4, r5, r6, pc}
 80092ac:	ab01      	add	r3, sp, #4
 80092ae:	466a      	mov	r2, sp
 80092b0:	f7ff ffca 	bl	8009248 <__swhatbuf_r>
 80092b4:	9900      	ldr	r1, [sp, #0]
 80092b6:	4605      	mov	r5, r0
 80092b8:	4630      	mov	r0, r6
 80092ba:	f000 f87f 	bl	80093bc <_malloc_r>
 80092be:	b948      	cbnz	r0, 80092d4 <__smakebuf_r+0x44>
 80092c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092c4:	059a      	lsls	r2, r3, #22
 80092c6:	d4ef      	bmi.n	80092a8 <__smakebuf_r+0x18>
 80092c8:	f023 0303 	bic.w	r3, r3, #3
 80092cc:	f043 0302 	orr.w	r3, r3, #2
 80092d0:	81a3      	strh	r3, [r4, #12]
 80092d2:	e7e3      	b.n	800929c <__smakebuf_r+0xc>
 80092d4:	4b0d      	ldr	r3, [pc, #52]	; (800930c <__smakebuf_r+0x7c>)
 80092d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	6020      	str	r0, [r4, #0]
 80092dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e0:	81a3      	strh	r3, [r4, #12]
 80092e2:	9b00      	ldr	r3, [sp, #0]
 80092e4:	6163      	str	r3, [r4, #20]
 80092e6:	9b01      	ldr	r3, [sp, #4]
 80092e8:	6120      	str	r0, [r4, #16]
 80092ea:	b15b      	cbz	r3, 8009304 <__smakebuf_r+0x74>
 80092ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092f0:	4630      	mov	r0, r6
 80092f2:	f000 fe1f 	bl	8009f34 <_isatty_r>
 80092f6:	b128      	cbz	r0, 8009304 <__smakebuf_r+0x74>
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	f023 0303 	bic.w	r3, r3, #3
 80092fe:	f043 0301 	orr.w	r3, r3, #1
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	431d      	orrs	r5, r3
 8009308:	81a5      	strh	r5, [r4, #12]
 800930a:	e7cd      	b.n	80092a8 <__smakebuf_r+0x18>
 800930c:	080090fd 	.word	0x080090fd

08009310 <malloc>:
 8009310:	4b02      	ldr	r3, [pc, #8]	; (800931c <malloc+0xc>)
 8009312:	4601      	mov	r1, r0
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	f000 b851 	b.w	80093bc <_malloc_r>
 800931a:	bf00      	nop
 800931c:	2000002c 	.word	0x2000002c

08009320 <_free_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4605      	mov	r5, r0
 8009324:	2900      	cmp	r1, #0
 8009326:	d045      	beq.n	80093b4 <_free_r+0x94>
 8009328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800932c:	1f0c      	subs	r4, r1, #4
 800932e:	2b00      	cmp	r3, #0
 8009330:	bfb8      	it	lt
 8009332:	18e4      	addlt	r4, r4, r3
 8009334:	f000 fe39 	bl	8009faa <__malloc_lock>
 8009338:	4a1f      	ldr	r2, [pc, #124]	; (80093b8 <_free_r+0x98>)
 800933a:	6813      	ldr	r3, [r2, #0]
 800933c:	4610      	mov	r0, r2
 800933e:	b933      	cbnz	r3, 800934e <_free_r+0x2e>
 8009340:	6063      	str	r3, [r4, #4]
 8009342:	6014      	str	r4, [r2, #0]
 8009344:	4628      	mov	r0, r5
 8009346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800934a:	f000 be2f 	b.w	8009fac <__malloc_unlock>
 800934e:	42a3      	cmp	r3, r4
 8009350:	d90c      	bls.n	800936c <_free_r+0x4c>
 8009352:	6821      	ldr	r1, [r4, #0]
 8009354:	1862      	adds	r2, r4, r1
 8009356:	4293      	cmp	r3, r2
 8009358:	bf04      	itt	eq
 800935a:	681a      	ldreq	r2, [r3, #0]
 800935c:	685b      	ldreq	r3, [r3, #4]
 800935e:	6063      	str	r3, [r4, #4]
 8009360:	bf04      	itt	eq
 8009362:	1852      	addeq	r2, r2, r1
 8009364:	6022      	streq	r2, [r4, #0]
 8009366:	6004      	str	r4, [r0, #0]
 8009368:	e7ec      	b.n	8009344 <_free_r+0x24>
 800936a:	4613      	mov	r3, r2
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	b10a      	cbz	r2, 8009374 <_free_r+0x54>
 8009370:	42a2      	cmp	r2, r4
 8009372:	d9fa      	bls.n	800936a <_free_r+0x4a>
 8009374:	6819      	ldr	r1, [r3, #0]
 8009376:	1858      	adds	r0, r3, r1
 8009378:	42a0      	cmp	r0, r4
 800937a:	d10b      	bne.n	8009394 <_free_r+0x74>
 800937c:	6820      	ldr	r0, [r4, #0]
 800937e:	4401      	add	r1, r0
 8009380:	1858      	adds	r0, r3, r1
 8009382:	4282      	cmp	r2, r0
 8009384:	6019      	str	r1, [r3, #0]
 8009386:	d1dd      	bne.n	8009344 <_free_r+0x24>
 8009388:	6810      	ldr	r0, [r2, #0]
 800938a:	6852      	ldr	r2, [r2, #4]
 800938c:	605a      	str	r2, [r3, #4]
 800938e:	4401      	add	r1, r0
 8009390:	6019      	str	r1, [r3, #0]
 8009392:	e7d7      	b.n	8009344 <_free_r+0x24>
 8009394:	d902      	bls.n	800939c <_free_r+0x7c>
 8009396:	230c      	movs	r3, #12
 8009398:	602b      	str	r3, [r5, #0]
 800939a:	e7d3      	b.n	8009344 <_free_r+0x24>
 800939c:	6820      	ldr	r0, [r4, #0]
 800939e:	1821      	adds	r1, r4, r0
 80093a0:	428a      	cmp	r2, r1
 80093a2:	bf04      	itt	eq
 80093a4:	6811      	ldreq	r1, [r2, #0]
 80093a6:	6852      	ldreq	r2, [r2, #4]
 80093a8:	6062      	str	r2, [r4, #4]
 80093aa:	bf04      	itt	eq
 80093ac:	1809      	addeq	r1, r1, r0
 80093ae:	6021      	streq	r1, [r4, #0]
 80093b0:	605c      	str	r4, [r3, #4]
 80093b2:	e7c7      	b.n	8009344 <_free_r+0x24>
 80093b4:	bd38      	pop	{r3, r4, r5, pc}
 80093b6:	bf00      	nop
 80093b8:	20004064 	.word	0x20004064

080093bc <_malloc_r>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	1ccd      	adds	r5, r1, #3
 80093c0:	f025 0503 	bic.w	r5, r5, #3
 80093c4:	3508      	adds	r5, #8
 80093c6:	2d0c      	cmp	r5, #12
 80093c8:	bf38      	it	cc
 80093ca:	250c      	movcc	r5, #12
 80093cc:	2d00      	cmp	r5, #0
 80093ce:	4606      	mov	r6, r0
 80093d0:	db01      	blt.n	80093d6 <_malloc_r+0x1a>
 80093d2:	42a9      	cmp	r1, r5
 80093d4:	d903      	bls.n	80093de <_malloc_r+0x22>
 80093d6:	230c      	movs	r3, #12
 80093d8:	6033      	str	r3, [r6, #0]
 80093da:	2000      	movs	r0, #0
 80093dc:	bd70      	pop	{r4, r5, r6, pc}
 80093de:	f000 fde4 	bl	8009faa <__malloc_lock>
 80093e2:	4a21      	ldr	r2, [pc, #132]	; (8009468 <_malloc_r+0xac>)
 80093e4:	6814      	ldr	r4, [r2, #0]
 80093e6:	4621      	mov	r1, r4
 80093e8:	b991      	cbnz	r1, 8009410 <_malloc_r+0x54>
 80093ea:	4c20      	ldr	r4, [pc, #128]	; (800946c <_malloc_r+0xb0>)
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	b91b      	cbnz	r3, 80093f8 <_malloc_r+0x3c>
 80093f0:	4630      	mov	r0, r6
 80093f2:	f000 fc57 	bl	8009ca4 <_sbrk_r>
 80093f6:	6020      	str	r0, [r4, #0]
 80093f8:	4629      	mov	r1, r5
 80093fa:	4630      	mov	r0, r6
 80093fc:	f000 fc52 	bl	8009ca4 <_sbrk_r>
 8009400:	1c43      	adds	r3, r0, #1
 8009402:	d124      	bne.n	800944e <_malloc_r+0x92>
 8009404:	230c      	movs	r3, #12
 8009406:	6033      	str	r3, [r6, #0]
 8009408:	4630      	mov	r0, r6
 800940a:	f000 fdcf 	bl	8009fac <__malloc_unlock>
 800940e:	e7e4      	b.n	80093da <_malloc_r+0x1e>
 8009410:	680b      	ldr	r3, [r1, #0]
 8009412:	1b5b      	subs	r3, r3, r5
 8009414:	d418      	bmi.n	8009448 <_malloc_r+0x8c>
 8009416:	2b0b      	cmp	r3, #11
 8009418:	d90f      	bls.n	800943a <_malloc_r+0x7e>
 800941a:	600b      	str	r3, [r1, #0]
 800941c:	50cd      	str	r5, [r1, r3]
 800941e:	18cc      	adds	r4, r1, r3
 8009420:	4630      	mov	r0, r6
 8009422:	f000 fdc3 	bl	8009fac <__malloc_unlock>
 8009426:	f104 000b 	add.w	r0, r4, #11
 800942a:	1d23      	adds	r3, r4, #4
 800942c:	f020 0007 	bic.w	r0, r0, #7
 8009430:	1ac3      	subs	r3, r0, r3
 8009432:	d0d3      	beq.n	80093dc <_malloc_r+0x20>
 8009434:	425a      	negs	r2, r3
 8009436:	50e2      	str	r2, [r4, r3]
 8009438:	e7d0      	b.n	80093dc <_malloc_r+0x20>
 800943a:	428c      	cmp	r4, r1
 800943c:	684b      	ldr	r3, [r1, #4]
 800943e:	bf16      	itet	ne
 8009440:	6063      	strne	r3, [r4, #4]
 8009442:	6013      	streq	r3, [r2, #0]
 8009444:	460c      	movne	r4, r1
 8009446:	e7eb      	b.n	8009420 <_malloc_r+0x64>
 8009448:	460c      	mov	r4, r1
 800944a:	6849      	ldr	r1, [r1, #4]
 800944c:	e7cc      	b.n	80093e8 <_malloc_r+0x2c>
 800944e:	1cc4      	adds	r4, r0, #3
 8009450:	f024 0403 	bic.w	r4, r4, #3
 8009454:	42a0      	cmp	r0, r4
 8009456:	d005      	beq.n	8009464 <_malloc_r+0xa8>
 8009458:	1a21      	subs	r1, r4, r0
 800945a:	4630      	mov	r0, r6
 800945c:	f000 fc22 	bl	8009ca4 <_sbrk_r>
 8009460:	3001      	adds	r0, #1
 8009462:	d0cf      	beq.n	8009404 <_malloc_r+0x48>
 8009464:	6025      	str	r5, [r4, #0]
 8009466:	e7db      	b.n	8009420 <_malloc_r+0x64>
 8009468:	20004064 	.word	0x20004064
 800946c:	20004068 	.word	0x20004068

08009470 <__ssputs_r>:
 8009470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009474:	688e      	ldr	r6, [r1, #8]
 8009476:	429e      	cmp	r6, r3
 8009478:	4682      	mov	sl, r0
 800947a:	460c      	mov	r4, r1
 800947c:	4690      	mov	r8, r2
 800947e:	4699      	mov	r9, r3
 8009480:	d837      	bhi.n	80094f2 <__ssputs_r+0x82>
 8009482:	898a      	ldrh	r2, [r1, #12]
 8009484:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009488:	d031      	beq.n	80094ee <__ssputs_r+0x7e>
 800948a:	6825      	ldr	r5, [r4, #0]
 800948c:	6909      	ldr	r1, [r1, #16]
 800948e:	1a6f      	subs	r7, r5, r1
 8009490:	6965      	ldr	r5, [r4, #20]
 8009492:	2302      	movs	r3, #2
 8009494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009498:	fb95 f5f3 	sdiv	r5, r5, r3
 800949c:	f109 0301 	add.w	r3, r9, #1
 80094a0:	443b      	add	r3, r7
 80094a2:	429d      	cmp	r5, r3
 80094a4:	bf38      	it	cc
 80094a6:	461d      	movcc	r5, r3
 80094a8:	0553      	lsls	r3, r2, #21
 80094aa:	d530      	bpl.n	800950e <__ssputs_r+0x9e>
 80094ac:	4629      	mov	r1, r5
 80094ae:	f7ff ff85 	bl	80093bc <_malloc_r>
 80094b2:	4606      	mov	r6, r0
 80094b4:	b950      	cbnz	r0, 80094cc <__ssputs_r+0x5c>
 80094b6:	230c      	movs	r3, #12
 80094b8:	f8ca 3000 	str.w	r3, [sl]
 80094bc:	89a3      	ldrh	r3, [r4, #12]
 80094be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c2:	81a3      	strh	r3, [r4, #12]
 80094c4:	f04f 30ff 	mov.w	r0, #4294967295
 80094c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094cc:	463a      	mov	r2, r7
 80094ce:	6921      	ldr	r1, [r4, #16]
 80094d0:	f7ff fc46 	bl	8008d60 <memcpy>
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094de:	81a3      	strh	r3, [r4, #12]
 80094e0:	6126      	str	r6, [r4, #16]
 80094e2:	6165      	str	r5, [r4, #20]
 80094e4:	443e      	add	r6, r7
 80094e6:	1bed      	subs	r5, r5, r7
 80094e8:	6026      	str	r6, [r4, #0]
 80094ea:	60a5      	str	r5, [r4, #8]
 80094ec:	464e      	mov	r6, r9
 80094ee:	454e      	cmp	r6, r9
 80094f0:	d900      	bls.n	80094f4 <__ssputs_r+0x84>
 80094f2:	464e      	mov	r6, r9
 80094f4:	4632      	mov	r2, r6
 80094f6:	4641      	mov	r1, r8
 80094f8:	6820      	ldr	r0, [r4, #0]
 80094fa:	f000 fd3d 	bl	8009f78 <memmove>
 80094fe:	68a3      	ldr	r3, [r4, #8]
 8009500:	1b9b      	subs	r3, r3, r6
 8009502:	60a3      	str	r3, [r4, #8]
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	441e      	add	r6, r3
 8009508:	6026      	str	r6, [r4, #0]
 800950a:	2000      	movs	r0, #0
 800950c:	e7dc      	b.n	80094c8 <__ssputs_r+0x58>
 800950e:	462a      	mov	r2, r5
 8009510:	f000 fd4d 	bl	8009fae <_realloc_r>
 8009514:	4606      	mov	r6, r0
 8009516:	2800      	cmp	r0, #0
 8009518:	d1e2      	bne.n	80094e0 <__ssputs_r+0x70>
 800951a:	6921      	ldr	r1, [r4, #16]
 800951c:	4650      	mov	r0, sl
 800951e:	f7ff feff 	bl	8009320 <_free_r>
 8009522:	e7c8      	b.n	80094b6 <__ssputs_r+0x46>

08009524 <_svfiprintf_r>:
 8009524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009528:	461d      	mov	r5, r3
 800952a:	898b      	ldrh	r3, [r1, #12]
 800952c:	061f      	lsls	r7, r3, #24
 800952e:	b09d      	sub	sp, #116	; 0x74
 8009530:	4680      	mov	r8, r0
 8009532:	460c      	mov	r4, r1
 8009534:	4616      	mov	r6, r2
 8009536:	d50f      	bpl.n	8009558 <_svfiprintf_r+0x34>
 8009538:	690b      	ldr	r3, [r1, #16]
 800953a:	b96b      	cbnz	r3, 8009558 <_svfiprintf_r+0x34>
 800953c:	2140      	movs	r1, #64	; 0x40
 800953e:	f7ff ff3d 	bl	80093bc <_malloc_r>
 8009542:	6020      	str	r0, [r4, #0]
 8009544:	6120      	str	r0, [r4, #16]
 8009546:	b928      	cbnz	r0, 8009554 <_svfiprintf_r+0x30>
 8009548:	230c      	movs	r3, #12
 800954a:	f8c8 3000 	str.w	r3, [r8]
 800954e:	f04f 30ff 	mov.w	r0, #4294967295
 8009552:	e0c8      	b.n	80096e6 <_svfiprintf_r+0x1c2>
 8009554:	2340      	movs	r3, #64	; 0x40
 8009556:	6163      	str	r3, [r4, #20]
 8009558:	2300      	movs	r3, #0
 800955a:	9309      	str	r3, [sp, #36]	; 0x24
 800955c:	2320      	movs	r3, #32
 800955e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009562:	2330      	movs	r3, #48	; 0x30
 8009564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009568:	9503      	str	r5, [sp, #12]
 800956a:	f04f 0b01 	mov.w	fp, #1
 800956e:	4637      	mov	r7, r6
 8009570:	463d      	mov	r5, r7
 8009572:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009576:	b10b      	cbz	r3, 800957c <_svfiprintf_r+0x58>
 8009578:	2b25      	cmp	r3, #37	; 0x25
 800957a:	d13e      	bne.n	80095fa <_svfiprintf_r+0xd6>
 800957c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009580:	d00b      	beq.n	800959a <_svfiprintf_r+0x76>
 8009582:	4653      	mov	r3, sl
 8009584:	4632      	mov	r2, r6
 8009586:	4621      	mov	r1, r4
 8009588:	4640      	mov	r0, r8
 800958a:	f7ff ff71 	bl	8009470 <__ssputs_r>
 800958e:	3001      	adds	r0, #1
 8009590:	f000 80a4 	beq.w	80096dc <_svfiprintf_r+0x1b8>
 8009594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009596:	4453      	add	r3, sl
 8009598:	9309      	str	r3, [sp, #36]	; 0x24
 800959a:	783b      	ldrb	r3, [r7, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 809d 	beq.w	80096dc <_svfiprintf_r+0x1b8>
 80095a2:	2300      	movs	r3, #0
 80095a4:	f04f 32ff 	mov.w	r2, #4294967295
 80095a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ac:	9304      	str	r3, [sp, #16]
 80095ae:	9307      	str	r3, [sp, #28]
 80095b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095b4:	931a      	str	r3, [sp, #104]	; 0x68
 80095b6:	462f      	mov	r7, r5
 80095b8:	2205      	movs	r2, #5
 80095ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80095be:	4850      	ldr	r0, [pc, #320]	; (8009700 <_svfiprintf_r+0x1dc>)
 80095c0:	f7f6 fe16 	bl	80001f0 <memchr>
 80095c4:	9b04      	ldr	r3, [sp, #16]
 80095c6:	b9d0      	cbnz	r0, 80095fe <_svfiprintf_r+0xda>
 80095c8:	06d9      	lsls	r1, r3, #27
 80095ca:	bf44      	itt	mi
 80095cc:	2220      	movmi	r2, #32
 80095ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095d2:	071a      	lsls	r2, r3, #28
 80095d4:	bf44      	itt	mi
 80095d6:	222b      	movmi	r2, #43	; 0x2b
 80095d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095dc:	782a      	ldrb	r2, [r5, #0]
 80095de:	2a2a      	cmp	r2, #42	; 0x2a
 80095e0:	d015      	beq.n	800960e <_svfiprintf_r+0xea>
 80095e2:	9a07      	ldr	r2, [sp, #28]
 80095e4:	462f      	mov	r7, r5
 80095e6:	2000      	movs	r0, #0
 80095e8:	250a      	movs	r5, #10
 80095ea:	4639      	mov	r1, r7
 80095ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095f0:	3b30      	subs	r3, #48	; 0x30
 80095f2:	2b09      	cmp	r3, #9
 80095f4:	d94d      	bls.n	8009692 <_svfiprintf_r+0x16e>
 80095f6:	b1b8      	cbz	r0, 8009628 <_svfiprintf_r+0x104>
 80095f8:	e00f      	b.n	800961a <_svfiprintf_r+0xf6>
 80095fa:	462f      	mov	r7, r5
 80095fc:	e7b8      	b.n	8009570 <_svfiprintf_r+0x4c>
 80095fe:	4a40      	ldr	r2, [pc, #256]	; (8009700 <_svfiprintf_r+0x1dc>)
 8009600:	1a80      	subs	r0, r0, r2
 8009602:	fa0b f000 	lsl.w	r0, fp, r0
 8009606:	4318      	orrs	r0, r3
 8009608:	9004      	str	r0, [sp, #16]
 800960a:	463d      	mov	r5, r7
 800960c:	e7d3      	b.n	80095b6 <_svfiprintf_r+0x92>
 800960e:	9a03      	ldr	r2, [sp, #12]
 8009610:	1d11      	adds	r1, r2, #4
 8009612:	6812      	ldr	r2, [r2, #0]
 8009614:	9103      	str	r1, [sp, #12]
 8009616:	2a00      	cmp	r2, #0
 8009618:	db01      	blt.n	800961e <_svfiprintf_r+0xfa>
 800961a:	9207      	str	r2, [sp, #28]
 800961c:	e004      	b.n	8009628 <_svfiprintf_r+0x104>
 800961e:	4252      	negs	r2, r2
 8009620:	f043 0302 	orr.w	r3, r3, #2
 8009624:	9207      	str	r2, [sp, #28]
 8009626:	9304      	str	r3, [sp, #16]
 8009628:	783b      	ldrb	r3, [r7, #0]
 800962a:	2b2e      	cmp	r3, #46	; 0x2e
 800962c:	d10c      	bne.n	8009648 <_svfiprintf_r+0x124>
 800962e:	787b      	ldrb	r3, [r7, #1]
 8009630:	2b2a      	cmp	r3, #42	; 0x2a
 8009632:	d133      	bne.n	800969c <_svfiprintf_r+0x178>
 8009634:	9b03      	ldr	r3, [sp, #12]
 8009636:	1d1a      	adds	r2, r3, #4
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	9203      	str	r2, [sp, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	bfb8      	it	lt
 8009640:	f04f 33ff 	movlt.w	r3, #4294967295
 8009644:	3702      	adds	r7, #2
 8009646:	9305      	str	r3, [sp, #20]
 8009648:	4d2e      	ldr	r5, [pc, #184]	; (8009704 <_svfiprintf_r+0x1e0>)
 800964a:	7839      	ldrb	r1, [r7, #0]
 800964c:	2203      	movs	r2, #3
 800964e:	4628      	mov	r0, r5
 8009650:	f7f6 fdce 	bl	80001f0 <memchr>
 8009654:	b138      	cbz	r0, 8009666 <_svfiprintf_r+0x142>
 8009656:	2340      	movs	r3, #64	; 0x40
 8009658:	1b40      	subs	r0, r0, r5
 800965a:	fa03 f000 	lsl.w	r0, r3, r0
 800965e:	9b04      	ldr	r3, [sp, #16]
 8009660:	4303      	orrs	r3, r0
 8009662:	3701      	adds	r7, #1
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	7839      	ldrb	r1, [r7, #0]
 8009668:	4827      	ldr	r0, [pc, #156]	; (8009708 <_svfiprintf_r+0x1e4>)
 800966a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800966e:	2206      	movs	r2, #6
 8009670:	1c7e      	adds	r6, r7, #1
 8009672:	f7f6 fdbd 	bl	80001f0 <memchr>
 8009676:	2800      	cmp	r0, #0
 8009678:	d038      	beq.n	80096ec <_svfiprintf_r+0x1c8>
 800967a:	4b24      	ldr	r3, [pc, #144]	; (800970c <_svfiprintf_r+0x1e8>)
 800967c:	bb13      	cbnz	r3, 80096c4 <_svfiprintf_r+0x1a0>
 800967e:	9b03      	ldr	r3, [sp, #12]
 8009680:	3307      	adds	r3, #7
 8009682:	f023 0307 	bic.w	r3, r3, #7
 8009686:	3308      	adds	r3, #8
 8009688:	9303      	str	r3, [sp, #12]
 800968a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800968c:	444b      	add	r3, r9
 800968e:	9309      	str	r3, [sp, #36]	; 0x24
 8009690:	e76d      	b.n	800956e <_svfiprintf_r+0x4a>
 8009692:	fb05 3202 	mla	r2, r5, r2, r3
 8009696:	2001      	movs	r0, #1
 8009698:	460f      	mov	r7, r1
 800969a:	e7a6      	b.n	80095ea <_svfiprintf_r+0xc6>
 800969c:	2300      	movs	r3, #0
 800969e:	3701      	adds	r7, #1
 80096a0:	9305      	str	r3, [sp, #20]
 80096a2:	4619      	mov	r1, r3
 80096a4:	250a      	movs	r5, #10
 80096a6:	4638      	mov	r0, r7
 80096a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096ac:	3a30      	subs	r2, #48	; 0x30
 80096ae:	2a09      	cmp	r2, #9
 80096b0:	d903      	bls.n	80096ba <_svfiprintf_r+0x196>
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0c8      	beq.n	8009648 <_svfiprintf_r+0x124>
 80096b6:	9105      	str	r1, [sp, #20]
 80096b8:	e7c6      	b.n	8009648 <_svfiprintf_r+0x124>
 80096ba:	fb05 2101 	mla	r1, r5, r1, r2
 80096be:	2301      	movs	r3, #1
 80096c0:	4607      	mov	r7, r0
 80096c2:	e7f0      	b.n	80096a6 <_svfiprintf_r+0x182>
 80096c4:	ab03      	add	r3, sp, #12
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	4622      	mov	r2, r4
 80096ca:	4b11      	ldr	r3, [pc, #68]	; (8009710 <_svfiprintf_r+0x1ec>)
 80096cc:	a904      	add	r1, sp, #16
 80096ce:	4640      	mov	r0, r8
 80096d0:	f3af 8000 	nop.w
 80096d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80096d8:	4681      	mov	r9, r0
 80096da:	d1d6      	bne.n	800968a <_svfiprintf_r+0x166>
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	065b      	lsls	r3, r3, #25
 80096e0:	f53f af35 	bmi.w	800954e <_svfiprintf_r+0x2a>
 80096e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096e6:	b01d      	add	sp, #116	; 0x74
 80096e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ec:	ab03      	add	r3, sp, #12
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	4622      	mov	r2, r4
 80096f2:	4b07      	ldr	r3, [pc, #28]	; (8009710 <_svfiprintf_r+0x1ec>)
 80096f4:	a904      	add	r1, sp, #16
 80096f6:	4640      	mov	r0, r8
 80096f8:	f000 f9c2 	bl	8009a80 <_printf_i>
 80096fc:	e7ea      	b.n	80096d4 <_svfiprintf_r+0x1b0>
 80096fe:	bf00      	nop
 8009700:	0800a284 	.word	0x0800a284
 8009704:	0800a28a 	.word	0x0800a28a
 8009708:	0800a28e 	.word	0x0800a28e
 800970c:	00000000 	.word	0x00000000
 8009710:	08009471 	.word	0x08009471

08009714 <__sfputc_r>:
 8009714:	6893      	ldr	r3, [r2, #8]
 8009716:	3b01      	subs	r3, #1
 8009718:	2b00      	cmp	r3, #0
 800971a:	b410      	push	{r4}
 800971c:	6093      	str	r3, [r2, #8]
 800971e:	da08      	bge.n	8009732 <__sfputc_r+0x1e>
 8009720:	6994      	ldr	r4, [r2, #24]
 8009722:	42a3      	cmp	r3, r4
 8009724:	db01      	blt.n	800972a <__sfputc_r+0x16>
 8009726:	290a      	cmp	r1, #10
 8009728:	d103      	bne.n	8009732 <__sfputc_r+0x1e>
 800972a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800972e:	f000 bb0d 	b.w	8009d4c <__swbuf_r>
 8009732:	6813      	ldr	r3, [r2, #0]
 8009734:	1c58      	adds	r0, r3, #1
 8009736:	6010      	str	r0, [r2, #0]
 8009738:	7019      	strb	r1, [r3, #0]
 800973a:	4608      	mov	r0, r1
 800973c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009740:	4770      	bx	lr

08009742 <__sfputs_r>:
 8009742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009744:	4606      	mov	r6, r0
 8009746:	460f      	mov	r7, r1
 8009748:	4614      	mov	r4, r2
 800974a:	18d5      	adds	r5, r2, r3
 800974c:	42ac      	cmp	r4, r5
 800974e:	d101      	bne.n	8009754 <__sfputs_r+0x12>
 8009750:	2000      	movs	r0, #0
 8009752:	e007      	b.n	8009764 <__sfputs_r+0x22>
 8009754:	463a      	mov	r2, r7
 8009756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975a:	4630      	mov	r0, r6
 800975c:	f7ff ffda 	bl	8009714 <__sfputc_r>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d1f3      	bne.n	800974c <__sfputs_r+0xa>
 8009764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009768 <_vfiprintf_r>:
 8009768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	460c      	mov	r4, r1
 800976e:	b09d      	sub	sp, #116	; 0x74
 8009770:	4617      	mov	r7, r2
 8009772:	461d      	mov	r5, r3
 8009774:	4606      	mov	r6, r0
 8009776:	b118      	cbz	r0, 8009780 <_vfiprintf_r+0x18>
 8009778:	6983      	ldr	r3, [r0, #24]
 800977a:	b90b      	cbnz	r3, 8009780 <_vfiprintf_r+0x18>
 800977c:	f7ff fcda 	bl	8009134 <__sinit>
 8009780:	4b7c      	ldr	r3, [pc, #496]	; (8009974 <_vfiprintf_r+0x20c>)
 8009782:	429c      	cmp	r4, r3
 8009784:	d158      	bne.n	8009838 <_vfiprintf_r+0xd0>
 8009786:	6874      	ldr	r4, [r6, #4]
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	0718      	lsls	r0, r3, #28
 800978c:	d55e      	bpl.n	800984c <_vfiprintf_r+0xe4>
 800978e:	6923      	ldr	r3, [r4, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d05b      	beq.n	800984c <_vfiprintf_r+0xe4>
 8009794:	2300      	movs	r3, #0
 8009796:	9309      	str	r3, [sp, #36]	; 0x24
 8009798:	2320      	movs	r3, #32
 800979a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800979e:	2330      	movs	r3, #48	; 0x30
 80097a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097a4:	9503      	str	r5, [sp, #12]
 80097a6:	f04f 0b01 	mov.w	fp, #1
 80097aa:	46b8      	mov	r8, r7
 80097ac:	4645      	mov	r5, r8
 80097ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097b2:	b10b      	cbz	r3, 80097b8 <_vfiprintf_r+0x50>
 80097b4:	2b25      	cmp	r3, #37	; 0x25
 80097b6:	d154      	bne.n	8009862 <_vfiprintf_r+0xfa>
 80097b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80097bc:	d00b      	beq.n	80097d6 <_vfiprintf_r+0x6e>
 80097be:	4653      	mov	r3, sl
 80097c0:	463a      	mov	r2, r7
 80097c2:	4621      	mov	r1, r4
 80097c4:	4630      	mov	r0, r6
 80097c6:	f7ff ffbc 	bl	8009742 <__sfputs_r>
 80097ca:	3001      	adds	r0, #1
 80097cc:	f000 80c2 	beq.w	8009954 <_vfiprintf_r+0x1ec>
 80097d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d2:	4453      	add	r3, sl
 80097d4:	9309      	str	r3, [sp, #36]	; 0x24
 80097d6:	f898 3000 	ldrb.w	r3, [r8]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 80ba 	beq.w	8009954 <_vfiprintf_r+0x1ec>
 80097e0:	2300      	movs	r3, #0
 80097e2:	f04f 32ff 	mov.w	r2, #4294967295
 80097e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	9307      	str	r3, [sp, #28]
 80097ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097f2:	931a      	str	r3, [sp, #104]	; 0x68
 80097f4:	46a8      	mov	r8, r5
 80097f6:	2205      	movs	r2, #5
 80097f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80097fc:	485e      	ldr	r0, [pc, #376]	; (8009978 <_vfiprintf_r+0x210>)
 80097fe:	f7f6 fcf7 	bl	80001f0 <memchr>
 8009802:	9b04      	ldr	r3, [sp, #16]
 8009804:	bb78      	cbnz	r0, 8009866 <_vfiprintf_r+0xfe>
 8009806:	06d9      	lsls	r1, r3, #27
 8009808:	bf44      	itt	mi
 800980a:	2220      	movmi	r2, #32
 800980c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009810:	071a      	lsls	r2, r3, #28
 8009812:	bf44      	itt	mi
 8009814:	222b      	movmi	r2, #43	; 0x2b
 8009816:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800981a:	782a      	ldrb	r2, [r5, #0]
 800981c:	2a2a      	cmp	r2, #42	; 0x2a
 800981e:	d02a      	beq.n	8009876 <_vfiprintf_r+0x10e>
 8009820:	9a07      	ldr	r2, [sp, #28]
 8009822:	46a8      	mov	r8, r5
 8009824:	2000      	movs	r0, #0
 8009826:	250a      	movs	r5, #10
 8009828:	4641      	mov	r1, r8
 800982a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800982e:	3b30      	subs	r3, #48	; 0x30
 8009830:	2b09      	cmp	r3, #9
 8009832:	d969      	bls.n	8009908 <_vfiprintf_r+0x1a0>
 8009834:	b360      	cbz	r0, 8009890 <_vfiprintf_r+0x128>
 8009836:	e024      	b.n	8009882 <_vfiprintf_r+0x11a>
 8009838:	4b50      	ldr	r3, [pc, #320]	; (800997c <_vfiprintf_r+0x214>)
 800983a:	429c      	cmp	r4, r3
 800983c:	d101      	bne.n	8009842 <_vfiprintf_r+0xda>
 800983e:	68b4      	ldr	r4, [r6, #8]
 8009840:	e7a2      	b.n	8009788 <_vfiprintf_r+0x20>
 8009842:	4b4f      	ldr	r3, [pc, #316]	; (8009980 <_vfiprintf_r+0x218>)
 8009844:	429c      	cmp	r4, r3
 8009846:	bf08      	it	eq
 8009848:	68f4      	ldreq	r4, [r6, #12]
 800984a:	e79d      	b.n	8009788 <_vfiprintf_r+0x20>
 800984c:	4621      	mov	r1, r4
 800984e:	4630      	mov	r0, r6
 8009850:	f000 fae0 	bl	8009e14 <__swsetup_r>
 8009854:	2800      	cmp	r0, #0
 8009856:	d09d      	beq.n	8009794 <_vfiprintf_r+0x2c>
 8009858:	f04f 30ff 	mov.w	r0, #4294967295
 800985c:	b01d      	add	sp, #116	; 0x74
 800985e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009862:	46a8      	mov	r8, r5
 8009864:	e7a2      	b.n	80097ac <_vfiprintf_r+0x44>
 8009866:	4a44      	ldr	r2, [pc, #272]	; (8009978 <_vfiprintf_r+0x210>)
 8009868:	1a80      	subs	r0, r0, r2
 800986a:	fa0b f000 	lsl.w	r0, fp, r0
 800986e:	4318      	orrs	r0, r3
 8009870:	9004      	str	r0, [sp, #16]
 8009872:	4645      	mov	r5, r8
 8009874:	e7be      	b.n	80097f4 <_vfiprintf_r+0x8c>
 8009876:	9a03      	ldr	r2, [sp, #12]
 8009878:	1d11      	adds	r1, r2, #4
 800987a:	6812      	ldr	r2, [r2, #0]
 800987c:	9103      	str	r1, [sp, #12]
 800987e:	2a00      	cmp	r2, #0
 8009880:	db01      	blt.n	8009886 <_vfiprintf_r+0x11e>
 8009882:	9207      	str	r2, [sp, #28]
 8009884:	e004      	b.n	8009890 <_vfiprintf_r+0x128>
 8009886:	4252      	negs	r2, r2
 8009888:	f043 0302 	orr.w	r3, r3, #2
 800988c:	9207      	str	r2, [sp, #28]
 800988e:	9304      	str	r3, [sp, #16]
 8009890:	f898 3000 	ldrb.w	r3, [r8]
 8009894:	2b2e      	cmp	r3, #46	; 0x2e
 8009896:	d10e      	bne.n	80098b6 <_vfiprintf_r+0x14e>
 8009898:	f898 3001 	ldrb.w	r3, [r8, #1]
 800989c:	2b2a      	cmp	r3, #42	; 0x2a
 800989e:	d138      	bne.n	8009912 <_vfiprintf_r+0x1aa>
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	1d1a      	adds	r2, r3, #4
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	9203      	str	r2, [sp, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	bfb8      	it	lt
 80098ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80098b0:	f108 0802 	add.w	r8, r8, #2
 80098b4:	9305      	str	r3, [sp, #20]
 80098b6:	4d33      	ldr	r5, [pc, #204]	; (8009984 <_vfiprintf_r+0x21c>)
 80098b8:	f898 1000 	ldrb.w	r1, [r8]
 80098bc:	2203      	movs	r2, #3
 80098be:	4628      	mov	r0, r5
 80098c0:	f7f6 fc96 	bl	80001f0 <memchr>
 80098c4:	b140      	cbz	r0, 80098d8 <_vfiprintf_r+0x170>
 80098c6:	2340      	movs	r3, #64	; 0x40
 80098c8:	1b40      	subs	r0, r0, r5
 80098ca:	fa03 f000 	lsl.w	r0, r3, r0
 80098ce:	9b04      	ldr	r3, [sp, #16]
 80098d0:	4303      	orrs	r3, r0
 80098d2:	f108 0801 	add.w	r8, r8, #1
 80098d6:	9304      	str	r3, [sp, #16]
 80098d8:	f898 1000 	ldrb.w	r1, [r8]
 80098dc:	482a      	ldr	r0, [pc, #168]	; (8009988 <_vfiprintf_r+0x220>)
 80098de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098e2:	2206      	movs	r2, #6
 80098e4:	f108 0701 	add.w	r7, r8, #1
 80098e8:	f7f6 fc82 	bl	80001f0 <memchr>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d037      	beq.n	8009960 <_vfiprintf_r+0x1f8>
 80098f0:	4b26      	ldr	r3, [pc, #152]	; (800998c <_vfiprintf_r+0x224>)
 80098f2:	bb1b      	cbnz	r3, 800993c <_vfiprintf_r+0x1d4>
 80098f4:	9b03      	ldr	r3, [sp, #12]
 80098f6:	3307      	adds	r3, #7
 80098f8:	f023 0307 	bic.w	r3, r3, #7
 80098fc:	3308      	adds	r3, #8
 80098fe:	9303      	str	r3, [sp, #12]
 8009900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009902:	444b      	add	r3, r9
 8009904:	9309      	str	r3, [sp, #36]	; 0x24
 8009906:	e750      	b.n	80097aa <_vfiprintf_r+0x42>
 8009908:	fb05 3202 	mla	r2, r5, r2, r3
 800990c:	2001      	movs	r0, #1
 800990e:	4688      	mov	r8, r1
 8009910:	e78a      	b.n	8009828 <_vfiprintf_r+0xc0>
 8009912:	2300      	movs	r3, #0
 8009914:	f108 0801 	add.w	r8, r8, #1
 8009918:	9305      	str	r3, [sp, #20]
 800991a:	4619      	mov	r1, r3
 800991c:	250a      	movs	r5, #10
 800991e:	4640      	mov	r0, r8
 8009920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009924:	3a30      	subs	r2, #48	; 0x30
 8009926:	2a09      	cmp	r2, #9
 8009928:	d903      	bls.n	8009932 <_vfiprintf_r+0x1ca>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d0c3      	beq.n	80098b6 <_vfiprintf_r+0x14e>
 800992e:	9105      	str	r1, [sp, #20]
 8009930:	e7c1      	b.n	80098b6 <_vfiprintf_r+0x14e>
 8009932:	fb05 2101 	mla	r1, r5, r1, r2
 8009936:	2301      	movs	r3, #1
 8009938:	4680      	mov	r8, r0
 800993a:	e7f0      	b.n	800991e <_vfiprintf_r+0x1b6>
 800993c:	ab03      	add	r3, sp, #12
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	4622      	mov	r2, r4
 8009942:	4b13      	ldr	r3, [pc, #76]	; (8009990 <_vfiprintf_r+0x228>)
 8009944:	a904      	add	r1, sp, #16
 8009946:	4630      	mov	r0, r6
 8009948:	f3af 8000 	nop.w
 800994c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009950:	4681      	mov	r9, r0
 8009952:	d1d5      	bne.n	8009900 <_vfiprintf_r+0x198>
 8009954:	89a3      	ldrh	r3, [r4, #12]
 8009956:	065b      	lsls	r3, r3, #25
 8009958:	f53f af7e 	bmi.w	8009858 <_vfiprintf_r+0xf0>
 800995c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800995e:	e77d      	b.n	800985c <_vfiprintf_r+0xf4>
 8009960:	ab03      	add	r3, sp, #12
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	4622      	mov	r2, r4
 8009966:	4b0a      	ldr	r3, [pc, #40]	; (8009990 <_vfiprintf_r+0x228>)
 8009968:	a904      	add	r1, sp, #16
 800996a:	4630      	mov	r0, r6
 800996c:	f000 f888 	bl	8009a80 <_printf_i>
 8009970:	e7ec      	b.n	800994c <_vfiprintf_r+0x1e4>
 8009972:	bf00      	nop
 8009974:	0800a244 	.word	0x0800a244
 8009978:	0800a284 	.word	0x0800a284
 800997c:	0800a264 	.word	0x0800a264
 8009980:	0800a224 	.word	0x0800a224
 8009984:	0800a28a 	.word	0x0800a28a
 8009988:	0800a28e 	.word	0x0800a28e
 800998c:	00000000 	.word	0x00000000
 8009990:	08009743 	.word	0x08009743

08009994 <_printf_common>:
 8009994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009998:	4691      	mov	r9, r2
 800999a:	461f      	mov	r7, r3
 800999c:	688a      	ldr	r2, [r1, #8]
 800999e:	690b      	ldr	r3, [r1, #16]
 80099a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099a4:	4293      	cmp	r3, r2
 80099a6:	bfb8      	it	lt
 80099a8:	4613      	movlt	r3, r2
 80099aa:	f8c9 3000 	str.w	r3, [r9]
 80099ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099b2:	4606      	mov	r6, r0
 80099b4:	460c      	mov	r4, r1
 80099b6:	b112      	cbz	r2, 80099be <_printf_common+0x2a>
 80099b8:	3301      	adds	r3, #1
 80099ba:	f8c9 3000 	str.w	r3, [r9]
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	0699      	lsls	r1, r3, #26
 80099c2:	bf42      	ittt	mi
 80099c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80099c8:	3302      	addmi	r3, #2
 80099ca:	f8c9 3000 	strmi.w	r3, [r9]
 80099ce:	6825      	ldr	r5, [r4, #0]
 80099d0:	f015 0506 	ands.w	r5, r5, #6
 80099d4:	d107      	bne.n	80099e6 <_printf_common+0x52>
 80099d6:	f104 0a19 	add.w	sl, r4, #25
 80099da:	68e3      	ldr	r3, [r4, #12]
 80099dc:	f8d9 2000 	ldr.w	r2, [r9]
 80099e0:	1a9b      	subs	r3, r3, r2
 80099e2:	42ab      	cmp	r3, r5
 80099e4:	dc28      	bgt.n	8009a38 <_printf_common+0xa4>
 80099e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80099ea:	6822      	ldr	r2, [r4, #0]
 80099ec:	3300      	adds	r3, #0
 80099ee:	bf18      	it	ne
 80099f0:	2301      	movne	r3, #1
 80099f2:	0692      	lsls	r2, r2, #26
 80099f4:	d42d      	bmi.n	8009a52 <_printf_common+0xbe>
 80099f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099fa:	4639      	mov	r1, r7
 80099fc:	4630      	mov	r0, r6
 80099fe:	47c0      	blx	r8
 8009a00:	3001      	adds	r0, #1
 8009a02:	d020      	beq.n	8009a46 <_printf_common+0xb2>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	68e5      	ldr	r5, [r4, #12]
 8009a08:	f8d9 2000 	ldr.w	r2, [r9]
 8009a0c:	f003 0306 	and.w	r3, r3, #6
 8009a10:	2b04      	cmp	r3, #4
 8009a12:	bf08      	it	eq
 8009a14:	1aad      	subeq	r5, r5, r2
 8009a16:	68a3      	ldr	r3, [r4, #8]
 8009a18:	6922      	ldr	r2, [r4, #16]
 8009a1a:	bf0c      	ite	eq
 8009a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a20:	2500      	movne	r5, #0
 8009a22:	4293      	cmp	r3, r2
 8009a24:	bfc4      	itt	gt
 8009a26:	1a9b      	subgt	r3, r3, r2
 8009a28:	18ed      	addgt	r5, r5, r3
 8009a2a:	f04f 0900 	mov.w	r9, #0
 8009a2e:	341a      	adds	r4, #26
 8009a30:	454d      	cmp	r5, r9
 8009a32:	d11a      	bne.n	8009a6a <_printf_common+0xd6>
 8009a34:	2000      	movs	r0, #0
 8009a36:	e008      	b.n	8009a4a <_printf_common+0xb6>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	4652      	mov	r2, sl
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	4630      	mov	r0, r6
 8009a40:	47c0      	blx	r8
 8009a42:	3001      	adds	r0, #1
 8009a44:	d103      	bne.n	8009a4e <_printf_common+0xba>
 8009a46:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a4e:	3501      	adds	r5, #1
 8009a50:	e7c3      	b.n	80099da <_printf_common+0x46>
 8009a52:	18e1      	adds	r1, r4, r3
 8009a54:	1c5a      	adds	r2, r3, #1
 8009a56:	2030      	movs	r0, #48	; 0x30
 8009a58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a5c:	4422      	add	r2, r4
 8009a5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a66:	3302      	adds	r3, #2
 8009a68:	e7c5      	b.n	80099f6 <_printf_common+0x62>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	4639      	mov	r1, r7
 8009a70:	4630      	mov	r0, r6
 8009a72:	47c0      	blx	r8
 8009a74:	3001      	adds	r0, #1
 8009a76:	d0e6      	beq.n	8009a46 <_printf_common+0xb2>
 8009a78:	f109 0901 	add.w	r9, r9, #1
 8009a7c:	e7d8      	b.n	8009a30 <_printf_common+0x9c>
	...

08009a80 <_printf_i>:
 8009a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009a88:	460c      	mov	r4, r1
 8009a8a:	7e09      	ldrb	r1, [r1, #24]
 8009a8c:	b085      	sub	sp, #20
 8009a8e:	296e      	cmp	r1, #110	; 0x6e
 8009a90:	4617      	mov	r7, r2
 8009a92:	4606      	mov	r6, r0
 8009a94:	4698      	mov	r8, r3
 8009a96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a98:	f000 80b3 	beq.w	8009c02 <_printf_i+0x182>
 8009a9c:	d822      	bhi.n	8009ae4 <_printf_i+0x64>
 8009a9e:	2963      	cmp	r1, #99	; 0x63
 8009aa0:	d036      	beq.n	8009b10 <_printf_i+0x90>
 8009aa2:	d80a      	bhi.n	8009aba <_printf_i+0x3a>
 8009aa4:	2900      	cmp	r1, #0
 8009aa6:	f000 80b9 	beq.w	8009c1c <_printf_i+0x19c>
 8009aaa:	2958      	cmp	r1, #88	; 0x58
 8009aac:	f000 8083 	beq.w	8009bb6 <_printf_i+0x136>
 8009ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ab4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009ab8:	e032      	b.n	8009b20 <_printf_i+0xa0>
 8009aba:	2964      	cmp	r1, #100	; 0x64
 8009abc:	d001      	beq.n	8009ac2 <_printf_i+0x42>
 8009abe:	2969      	cmp	r1, #105	; 0x69
 8009ac0:	d1f6      	bne.n	8009ab0 <_printf_i+0x30>
 8009ac2:	6820      	ldr	r0, [r4, #0]
 8009ac4:	6813      	ldr	r3, [r2, #0]
 8009ac6:	0605      	lsls	r5, r0, #24
 8009ac8:	f103 0104 	add.w	r1, r3, #4
 8009acc:	d52a      	bpl.n	8009b24 <_printf_i+0xa4>
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6011      	str	r1, [r2, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	da03      	bge.n	8009ade <_printf_i+0x5e>
 8009ad6:	222d      	movs	r2, #45	; 0x2d
 8009ad8:	425b      	negs	r3, r3
 8009ada:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009ade:	486f      	ldr	r0, [pc, #444]	; (8009c9c <_printf_i+0x21c>)
 8009ae0:	220a      	movs	r2, #10
 8009ae2:	e039      	b.n	8009b58 <_printf_i+0xd8>
 8009ae4:	2973      	cmp	r1, #115	; 0x73
 8009ae6:	f000 809d 	beq.w	8009c24 <_printf_i+0x1a4>
 8009aea:	d808      	bhi.n	8009afe <_printf_i+0x7e>
 8009aec:	296f      	cmp	r1, #111	; 0x6f
 8009aee:	d020      	beq.n	8009b32 <_printf_i+0xb2>
 8009af0:	2970      	cmp	r1, #112	; 0x70
 8009af2:	d1dd      	bne.n	8009ab0 <_printf_i+0x30>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	f043 0320 	orr.w	r3, r3, #32
 8009afa:	6023      	str	r3, [r4, #0]
 8009afc:	e003      	b.n	8009b06 <_printf_i+0x86>
 8009afe:	2975      	cmp	r1, #117	; 0x75
 8009b00:	d017      	beq.n	8009b32 <_printf_i+0xb2>
 8009b02:	2978      	cmp	r1, #120	; 0x78
 8009b04:	d1d4      	bne.n	8009ab0 <_printf_i+0x30>
 8009b06:	2378      	movs	r3, #120	; 0x78
 8009b08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b0c:	4864      	ldr	r0, [pc, #400]	; (8009ca0 <_printf_i+0x220>)
 8009b0e:	e055      	b.n	8009bbc <_printf_i+0x13c>
 8009b10:	6813      	ldr	r3, [r2, #0]
 8009b12:	1d19      	adds	r1, r3, #4
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6011      	str	r1, [r2, #0]
 8009b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b20:	2301      	movs	r3, #1
 8009b22:	e08c      	b.n	8009c3e <_printf_i+0x1be>
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6011      	str	r1, [r2, #0]
 8009b28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b2c:	bf18      	it	ne
 8009b2e:	b21b      	sxthne	r3, r3
 8009b30:	e7cf      	b.n	8009ad2 <_printf_i+0x52>
 8009b32:	6813      	ldr	r3, [r2, #0]
 8009b34:	6825      	ldr	r5, [r4, #0]
 8009b36:	1d18      	adds	r0, r3, #4
 8009b38:	6010      	str	r0, [r2, #0]
 8009b3a:	0628      	lsls	r0, r5, #24
 8009b3c:	d501      	bpl.n	8009b42 <_printf_i+0xc2>
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	e002      	b.n	8009b48 <_printf_i+0xc8>
 8009b42:	0668      	lsls	r0, r5, #25
 8009b44:	d5fb      	bpl.n	8009b3e <_printf_i+0xbe>
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	4854      	ldr	r0, [pc, #336]	; (8009c9c <_printf_i+0x21c>)
 8009b4a:	296f      	cmp	r1, #111	; 0x6f
 8009b4c:	bf14      	ite	ne
 8009b4e:	220a      	movne	r2, #10
 8009b50:	2208      	moveq	r2, #8
 8009b52:	2100      	movs	r1, #0
 8009b54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b58:	6865      	ldr	r5, [r4, #4]
 8009b5a:	60a5      	str	r5, [r4, #8]
 8009b5c:	2d00      	cmp	r5, #0
 8009b5e:	f2c0 8095 	blt.w	8009c8c <_printf_i+0x20c>
 8009b62:	6821      	ldr	r1, [r4, #0]
 8009b64:	f021 0104 	bic.w	r1, r1, #4
 8009b68:	6021      	str	r1, [r4, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d13d      	bne.n	8009bea <_printf_i+0x16a>
 8009b6e:	2d00      	cmp	r5, #0
 8009b70:	f040 808e 	bne.w	8009c90 <_printf_i+0x210>
 8009b74:	4665      	mov	r5, ip
 8009b76:	2a08      	cmp	r2, #8
 8009b78:	d10b      	bne.n	8009b92 <_printf_i+0x112>
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	07db      	lsls	r3, r3, #31
 8009b7e:	d508      	bpl.n	8009b92 <_printf_i+0x112>
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	6862      	ldr	r2, [r4, #4]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	bfde      	ittt	le
 8009b88:	2330      	movle	r3, #48	; 0x30
 8009b8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b92:	ebac 0305 	sub.w	r3, ip, r5
 8009b96:	6123      	str	r3, [r4, #16]
 8009b98:	f8cd 8000 	str.w	r8, [sp]
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	aa03      	add	r2, sp, #12
 8009ba0:	4621      	mov	r1, r4
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f7ff fef6 	bl	8009994 <_printf_common>
 8009ba8:	3001      	adds	r0, #1
 8009baa:	d14d      	bne.n	8009c48 <_printf_i+0x1c8>
 8009bac:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb0:	b005      	add	sp, #20
 8009bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bb6:	4839      	ldr	r0, [pc, #228]	; (8009c9c <_printf_i+0x21c>)
 8009bb8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009bbc:	6813      	ldr	r3, [r2, #0]
 8009bbe:	6821      	ldr	r1, [r4, #0]
 8009bc0:	1d1d      	adds	r5, r3, #4
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6015      	str	r5, [r2, #0]
 8009bc6:	060a      	lsls	r2, r1, #24
 8009bc8:	d50b      	bpl.n	8009be2 <_printf_i+0x162>
 8009bca:	07ca      	lsls	r2, r1, #31
 8009bcc:	bf44      	itt	mi
 8009bce:	f041 0120 	orrmi.w	r1, r1, #32
 8009bd2:	6021      	strmi	r1, [r4, #0]
 8009bd4:	b91b      	cbnz	r3, 8009bde <_printf_i+0x15e>
 8009bd6:	6822      	ldr	r2, [r4, #0]
 8009bd8:	f022 0220 	bic.w	r2, r2, #32
 8009bdc:	6022      	str	r2, [r4, #0]
 8009bde:	2210      	movs	r2, #16
 8009be0:	e7b7      	b.n	8009b52 <_printf_i+0xd2>
 8009be2:	064d      	lsls	r5, r1, #25
 8009be4:	bf48      	it	mi
 8009be6:	b29b      	uxthmi	r3, r3
 8009be8:	e7ef      	b.n	8009bca <_printf_i+0x14a>
 8009bea:	4665      	mov	r5, ip
 8009bec:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bf0:	fb02 3311 	mls	r3, r2, r1, r3
 8009bf4:	5cc3      	ldrb	r3, [r0, r3]
 8009bf6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	2900      	cmp	r1, #0
 8009bfe:	d1f5      	bne.n	8009bec <_printf_i+0x16c>
 8009c00:	e7b9      	b.n	8009b76 <_printf_i+0xf6>
 8009c02:	6813      	ldr	r3, [r2, #0]
 8009c04:	6825      	ldr	r5, [r4, #0]
 8009c06:	6961      	ldr	r1, [r4, #20]
 8009c08:	1d18      	adds	r0, r3, #4
 8009c0a:	6010      	str	r0, [r2, #0]
 8009c0c:	0628      	lsls	r0, r5, #24
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	d501      	bpl.n	8009c16 <_printf_i+0x196>
 8009c12:	6019      	str	r1, [r3, #0]
 8009c14:	e002      	b.n	8009c1c <_printf_i+0x19c>
 8009c16:	066a      	lsls	r2, r5, #25
 8009c18:	d5fb      	bpl.n	8009c12 <_printf_i+0x192>
 8009c1a:	8019      	strh	r1, [r3, #0]
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	6123      	str	r3, [r4, #16]
 8009c20:	4665      	mov	r5, ip
 8009c22:	e7b9      	b.n	8009b98 <_printf_i+0x118>
 8009c24:	6813      	ldr	r3, [r2, #0]
 8009c26:	1d19      	adds	r1, r3, #4
 8009c28:	6011      	str	r1, [r2, #0]
 8009c2a:	681d      	ldr	r5, [r3, #0]
 8009c2c:	6862      	ldr	r2, [r4, #4]
 8009c2e:	2100      	movs	r1, #0
 8009c30:	4628      	mov	r0, r5
 8009c32:	f7f6 fadd 	bl	80001f0 <memchr>
 8009c36:	b108      	cbz	r0, 8009c3c <_printf_i+0x1bc>
 8009c38:	1b40      	subs	r0, r0, r5
 8009c3a:	6060      	str	r0, [r4, #4]
 8009c3c:	6863      	ldr	r3, [r4, #4]
 8009c3e:	6123      	str	r3, [r4, #16]
 8009c40:	2300      	movs	r3, #0
 8009c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c46:	e7a7      	b.n	8009b98 <_printf_i+0x118>
 8009c48:	6923      	ldr	r3, [r4, #16]
 8009c4a:	462a      	mov	r2, r5
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	4630      	mov	r0, r6
 8009c50:	47c0      	blx	r8
 8009c52:	3001      	adds	r0, #1
 8009c54:	d0aa      	beq.n	8009bac <_printf_i+0x12c>
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	079b      	lsls	r3, r3, #30
 8009c5a:	d413      	bmi.n	8009c84 <_printf_i+0x204>
 8009c5c:	68e0      	ldr	r0, [r4, #12]
 8009c5e:	9b03      	ldr	r3, [sp, #12]
 8009c60:	4298      	cmp	r0, r3
 8009c62:	bfb8      	it	lt
 8009c64:	4618      	movlt	r0, r3
 8009c66:	e7a3      	b.n	8009bb0 <_printf_i+0x130>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	464a      	mov	r2, r9
 8009c6c:	4639      	mov	r1, r7
 8009c6e:	4630      	mov	r0, r6
 8009c70:	47c0      	blx	r8
 8009c72:	3001      	adds	r0, #1
 8009c74:	d09a      	beq.n	8009bac <_printf_i+0x12c>
 8009c76:	3501      	adds	r5, #1
 8009c78:	68e3      	ldr	r3, [r4, #12]
 8009c7a:	9a03      	ldr	r2, [sp, #12]
 8009c7c:	1a9b      	subs	r3, r3, r2
 8009c7e:	42ab      	cmp	r3, r5
 8009c80:	dcf2      	bgt.n	8009c68 <_printf_i+0x1e8>
 8009c82:	e7eb      	b.n	8009c5c <_printf_i+0x1dc>
 8009c84:	2500      	movs	r5, #0
 8009c86:	f104 0919 	add.w	r9, r4, #25
 8009c8a:	e7f5      	b.n	8009c78 <_printf_i+0x1f8>
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1ac      	bne.n	8009bea <_printf_i+0x16a>
 8009c90:	7803      	ldrb	r3, [r0, #0]
 8009c92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c9a:	e76c      	b.n	8009b76 <_printf_i+0xf6>
 8009c9c:	0800a295 	.word	0x0800a295
 8009ca0:	0800a2a6 	.word	0x0800a2a6

08009ca4 <_sbrk_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	4c06      	ldr	r4, [pc, #24]	; (8009cc0 <_sbrk_r+0x1c>)
 8009ca8:	2300      	movs	r3, #0
 8009caa:	4605      	mov	r5, r0
 8009cac:	4608      	mov	r0, r1
 8009cae:	6023      	str	r3, [r4, #0]
 8009cb0:	f000 f9be 	bl	800a030 <_sbrk>
 8009cb4:	1c43      	adds	r3, r0, #1
 8009cb6:	d102      	bne.n	8009cbe <_sbrk_r+0x1a>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	b103      	cbz	r3, 8009cbe <_sbrk_r+0x1a>
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	2000434c 	.word	0x2000434c

08009cc4 <__sread>:
 8009cc4:	b510      	push	{r4, lr}
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ccc:	f000 f996 	bl	8009ffc <_read_r>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	bfab      	itete	ge
 8009cd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8009cd8:	181b      	addge	r3, r3, r0
 8009cda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cde:	bfac      	ite	ge
 8009ce0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ce2:	81a3      	strhlt	r3, [r4, #12]
 8009ce4:	bd10      	pop	{r4, pc}

08009ce6 <__swrite>:
 8009ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cea:	461f      	mov	r7, r3
 8009cec:	898b      	ldrh	r3, [r1, #12]
 8009cee:	05db      	lsls	r3, r3, #23
 8009cf0:	4605      	mov	r5, r0
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	4616      	mov	r6, r2
 8009cf6:	d505      	bpl.n	8009d04 <__swrite+0x1e>
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d00:	f000 f928 	bl	8009f54 <_lseek_r>
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d0e:	81a3      	strh	r3, [r4, #12]
 8009d10:	4632      	mov	r2, r6
 8009d12:	463b      	mov	r3, r7
 8009d14:	4628      	mov	r0, r5
 8009d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1a:	f000 b869 	b.w	8009df0 <_write_r>

08009d1e <__sseek>:
 8009d1e:	b510      	push	{r4, lr}
 8009d20:	460c      	mov	r4, r1
 8009d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d26:	f000 f915 	bl	8009f54 <_lseek_r>
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	bf15      	itete	ne
 8009d30:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d3a:	81a3      	strheq	r3, [r4, #12]
 8009d3c:	bf18      	it	ne
 8009d3e:	81a3      	strhne	r3, [r4, #12]
 8009d40:	bd10      	pop	{r4, pc}

08009d42 <__sclose>:
 8009d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d46:	f000 b8d3 	b.w	8009ef0 <_close_r>
	...

08009d4c <__swbuf_r>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	460e      	mov	r6, r1
 8009d50:	4614      	mov	r4, r2
 8009d52:	4605      	mov	r5, r0
 8009d54:	b118      	cbz	r0, 8009d5e <__swbuf_r+0x12>
 8009d56:	6983      	ldr	r3, [r0, #24]
 8009d58:	b90b      	cbnz	r3, 8009d5e <__swbuf_r+0x12>
 8009d5a:	f7ff f9eb 	bl	8009134 <__sinit>
 8009d5e:	4b21      	ldr	r3, [pc, #132]	; (8009de4 <__swbuf_r+0x98>)
 8009d60:	429c      	cmp	r4, r3
 8009d62:	d12a      	bne.n	8009dba <__swbuf_r+0x6e>
 8009d64:	686c      	ldr	r4, [r5, #4]
 8009d66:	69a3      	ldr	r3, [r4, #24]
 8009d68:	60a3      	str	r3, [r4, #8]
 8009d6a:	89a3      	ldrh	r3, [r4, #12]
 8009d6c:	071a      	lsls	r2, r3, #28
 8009d6e:	d52e      	bpl.n	8009dce <__swbuf_r+0x82>
 8009d70:	6923      	ldr	r3, [r4, #16]
 8009d72:	b363      	cbz	r3, 8009dce <__swbuf_r+0x82>
 8009d74:	6923      	ldr	r3, [r4, #16]
 8009d76:	6820      	ldr	r0, [r4, #0]
 8009d78:	1ac0      	subs	r0, r0, r3
 8009d7a:	6963      	ldr	r3, [r4, #20]
 8009d7c:	b2f6      	uxtb	r6, r6
 8009d7e:	4283      	cmp	r3, r0
 8009d80:	4637      	mov	r7, r6
 8009d82:	dc04      	bgt.n	8009d8e <__swbuf_r+0x42>
 8009d84:	4621      	mov	r1, r4
 8009d86:	4628      	mov	r0, r5
 8009d88:	f7ff f96a 	bl	8009060 <_fflush_r>
 8009d8c:	bb28      	cbnz	r0, 8009dda <__swbuf_r+0x8e>
 8009d8e:	68a3      	ldr	r3, [r4, #8]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	60a3      	str	r3, [r4, #8]
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	6022      	str	r2, [r4, #0]
 8009d9a:	701e      	strb	r6, [r3, #0]
 8009d9c:	6963      	ldr	r3, [r4, #20]
 8009d9e:	3001      	adds	r0, #1
 8009da0:	4283      	cmp	r3, r0
 8009da2:	d004      	beq.n	8009dae <__swbuf_r+0x62>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	07db      	lsls	r3, r3, #31
 8009da8:	d519      	bpl.n	8009dde <__swbuf_r+0x92>
 8009daa:	2e0a      	cmp	r6, #10
 8009dac:	d117      	bne.n	8009dde <__swbuf_r+0x92>
 8009dae:	4621      	mov	r1, r4
 8009db0:	4628      	mov	r0, r5
 8009db2:	f7ff f955 	bl	8009060 <_fflush_r>
 8009db6:	b190      	cbz	r0, 8009dde <__swbuf_r+0x92>
 8009db8:	e00f      	b.n	8009dda <__swbuf_r+0x8e>
 8009dba:	4b0b      	ldr	r3, [pc, #44]	; (8009de8 <__swbuf_r+0x9c>)
 8009dbc:	429c      	cmp	r4, r3
 8009dbe:	d101      	bne.n	8009dc4 <__swbuf_r+0x78>
 8009dc0:	68ac      	ldr	r4, [r5, #8]
 8009dc2:	e7d0      	b.n	8009d66 <__swbuf_r+0x1a>
 8009dc4:	4b09      	ldr	r3, [pc, #36]	; (8009dec <__swbuf_r+0xa0>)
 8009dc6:	429c      	cmp	r4, r3
 8009dc8:	bf08      	it	eq
 8009dca:	68ec      	ldreq	r4, [r5, #12]
 8009dcc:	e7cb      	b.n	8009d66 <__swbuf_r+0x1a>
 8009dce:	4621      	mov	r1, r4
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f000 f81f 	bl	8009e14 <__swsetup_r>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d0cc      	beq.n	8009d74 <__swbuf_r+0x28>
 8009dda:	f04f 37ff 	mov.w	r7, #4294967295
 8009dde:	4638      	mov	r0, r7
 8009de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009de2:	bf00      	nop
 8009de4:	0800a244 	.word	0x0800a244
 8009de8:	0800a264 	.word	0x0800a264
 8009dec:	0800a224 	.word	0x0800a224

08009df0 <_write_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4c07      	ldr	r4, [pc, #28]	; (8009e10 <_write_r+0x20>)
 8009df4:	4605      	mov	r5, r0
 8009df6:	4608      	mov	r0, r1
 8009df8:	4611      	mov	r1, r2
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	6022      	str	r2, [r4, #0]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	f7f7 fd1a 	bl	8001838 <_write>
 8009e04:	1c43      	adds	r3, r0, #1
 8009e06:	d102      	bne.n	8009e0e <_write_r+0x1e>
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	b103      	cbz	r3, 8009e0e <_write_r+0x1e>
 8009e0c:	602b      	str	r3, [r5, #0]
 8009e0e:	bd38      	pop	{r3, r4, r5, pc}
 8009e10:	2000434c 	.word	0x2000434c

08009e14 <__swsetup_r>:
 8009e14:	4b32      	ldr	r3, [pc, #200]	; (8009ee0 <__swsetup_r+0xcc>)
 8009e16:	b570      	push	{r4, r5, r6, lr}
 8009e18:	681d      	ldr	r5, [r3, #0]
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	460c      	mov	r4, r1
 8009e1e:	b125      	cbz	r5, 8009e2a <__swsetup_r+0x16>
 8009e20:	69ab      	ldr	r3, [r5, #24]
 8009e22:	b913      	cbnz	r3, 8009e2a <__swsetup_r+0x16>
 8009e24:	4628      	mov	r0, r5
 8009e26:	f7ff f985 	bl	8009134 <__sinit>
 8009e2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ee4 <__swsetup_r+0xd0>)
 8009e2c:	429c      	cmp	r4, r3
 8009e2e:	d10f      	bne.n	8009e50 <__swsetup_r+0x3c>
 8009e30:	686c      	ldr	r4, [r5, #4]
 8009e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	0715      	lsls	r5, r2, #28
 8009e3a:	d42c      	bmi.n	8009e96 <__swsetup_r+0x82>
 8009e3c:	06d0      	lsls	r0, r2, #27
 8009e3e:	d411      	bmi.n	8009e64 <__swsetup_r+0x50>
 8009e40:	2209      	movs	r2, #9
 8009e42:	6032      	str	r2, [r6, #0]
 8009e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e48:	81a3      	strh	r3, [r4, #12]
 8009e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4e:	e03e      	b.n	8009ece <__swsetup_r+0xba>
 8009e50:	4b25      	ldr	r3, [pc, #148]	; (8009ee8 <__swsetup_r+0xd4>)
 8009e52:	429c      	cmp	r4, r3
 8009e54:	d101      	bne.n	8009e5a <__swsetup_r+0x46>
 8009e56:	68ac      	ldr	r4, [r5, #8]
 8009e58:	e7eb      	b.n	8009e32 <__swsetup_r+0x1e>
 8009e5a:	4b24      	ldr	r3, [pc, #144]	; (8009eec <__swsetup_r+0xd8>)
 8009e5c:	429c      	cmp	r4, r3
 8009e5e:	bf08      	it	eq
 8009e60:	68ec      	ldreq	r4, [r5, #12]
 8009e62:	e7e6      	b.n	8009e32 <__swsetup_r+0x1e>
 8009e64:	0751      	lsls	r1, r2, #29
 8009e66:	d512      	bpl.n	8009e8e <__swsetup_r+0x7a>
 8009e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e6a:	b141      	cbz	r1, 8009e7e <__swsetup_r+0x6a>
 8009e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e70:	4299      	cmp	r1, r3
 8009e72:	d002      	beq.n	8009e7a <__swsetup_r+0x66>
 8009e74:	4630      	mov	r0, r6
 8009e76:	f7ff fa53 	bl	8009320 <_free_r>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e84:	81a3      	strh	r3, [r4, #12]
 8009e86:	2300      	movs	r3, #0
 8009e88:	6063      	str	r3, [r4, #4]
 8009e8a:	6923      	ldr	r3, [r4, #16]
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	89a3      	ldrh	r3, [r4, #12]
 8009e90:	f043 0308 	orr.w	r3, r3, #8
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	6923      	ldr	r3, [r4, #16]
 8009e98:	b94b      	cbnz	r3, 8009eae <__swsetup_r+0x9a>
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea4:	d003      	beq.n	8009eae <__swsetup_r+0x9a>
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f7ff f9f1 	bl	8009290 <__smakebuf_r>
 8009eae:	89a2      	ldrh	r2, [r4, #12]
 8009eb0:	f012 0301 	ands.w	r3, r2, #1
 8009eb4:	d00c      	beq.n	8009ed0 <__swsetup_r+0xbc>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	60a3      	str	r3, [r4, #8]
 8009eba:	6963      	ldr	r3, [r4, #20]
 8009ebc:	425b      	negs	r3, r3
 8009ebe:	61a3      	str	r3, [r4, #24]
 8009ec0:	6923      	ldr	r3, [r4, #16]
 8009ec2:	b953      	cbnz	r3, 8009eda <__swsetup_r+0xc6>
 8009ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ec8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009ecc:	d1ba      	bne.n	8009e44 <__swsetup_r+0x30>
 8009ece:	bd70      	pop	{r4, r5, r6, pc}
 8009ed0:	0792      	lsls	r2, r2, #30
 8009ed2:	bf58      	it	pl
 8009ed4:	6963      	ldrpl	r3, [r4, #20]
 8009ed6:	60a3      	str	r3, [r4, #8]
 8009ed8:	e7f2      	b.n	8009ec0 <__swsetup_r+0xac>
 8009eda:	2000      	movs	r0, #0
 8009edc:	e7f7      	b.n	8009ece <__swsetup_r+0xba>
 8009ede:	bf00      	nop
 8009ee0:	2000002c 	.word	0x2000002c
 8009ee4:	0800a244 	.word	0x0800a244
 8009ee8:	0800a264 	.word	0x0800a264
 8009eec:	0800a224 	.word	0x0800a224

08009ef0 <_close_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4c06      	ldr	r4, [pc, #24]	; (8009f0c <_close_r+0x1c>)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	4608      	mov	r0, r1
 8009efa:	6023      	str	r3, [r4, #0]
 8009efc:	f7f7 fcc8 	bl	8001890 <_close>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	d102      	bne.n	8009f0a <_close_r+0x1a>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	b103      	cbz	r3, 8009f0a <_close_r+0x1a>
 8009f08:	602b      	str	r3, [r5, #0]
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}
 8009f0c:	2000434c 	.word	0x2000434c

08009f10 <_fstat_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4c07      	ldr	r4, [pc, #28]	; (8009f30 <_fstat_r+0x20>)
 8009f14:	2300      	movs	r3, #0
 8009f16:	4605      	mov	r5, r0
 8009f18:	4608      	mov	r0, r1
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	f7f7 fd07 	bl	8001930 <_fstat>
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	d102      	bne.n	8009f2c <_fstat_r+0x1c>
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	b103      	cbz	r3, 8009f2c <_fstat_r+0x1c>
 8009f2a:	602b      	str	r3, [r5, #0]
 8009f2c:	bd38      	pop	{r3, r4, r5, pc}
 8009f2e:	bf00      	nop
 8009f30:	2000434c 	.word	0x2000434c

08009f34 <_isatty_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4c06      	ldr	r4, [pc, #24]	; (8009f50 <_isatty_r+0x1c>)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	6023      	str	r3, [r4, #0]
 8009f40:	f7f7 fc64 	bl	800180c <_isatty>
 8009f44:	1c43      	adds	r3, r0, #1
 8009f46:	d102      	bne.n	8009f4e <_isatty_r+0x1a>
 8009f48:	6823      	ldr	r3, [r4, #0]
 8009f4a:	b103      	cbz	r3, 8009f4e <_isatty_r+0x1a>
 8009f4c:	602b      	str	r3, [r5, #0]
 8009f4e:	bd38      	pop	{r3, r4, r5, pc}
 8009f50:	2000434c 	.word	0x2000434c

08009f54 <_lseek_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	4c07      	ldr	r4, [pc, #28]	; (8009f74 <_lseek_r+0x20>)
 8009f58:	4605      	mov	r5, r0
 8009f5a:	4608      	mov	r0, r1
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	2200      	movs	r2, #0
 8009f60:	6022      	str	r2, [r4, #0]
 8009f62:	461a      	mov	r2, r3
 8009f64:	f7f7 fcab 	bl	80018be <_lseek>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d102      	bne.n	8009f72 <_lseek_r+0x1e>
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	b103      	cbz	r3, 8009f72 <_lseek_r+0x1e>
 8009f70:	602b      	str	r3, [r5, #0]
 8009f72:	bd38      	pop	{r3, r4, r5, pc}
 8009f74:	2000434c 	.word	0x2000434c

08009f78 <memmove>:
 8009f78:	4288      	cmp	r0, r1
 8009f7a:	b510      	push	{r4, lr}
 8009f7c:	eb01 0302 	add.w	r3, r1, r2
 8009f80:	d807      	bhi.n	8009f92 <memmove+0x1a>
 8009f82:	1e42      	subs	r2, r0, #1
 8009f84:	4299      	cmp	r1, r3
 8009f86:	d00a      	beq.n	8009f9e <memmove+0x26>
 8009f88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009f90:	e7f8      	b.n	8009f84 <memmove+0xc>
 8009f92:	4283      	cmp	r3, r0
 8009f94:	d9f5      	bls.n	8009f82 <memmove+0xa>
 8009f96:	1881      	adds	r1, r0, r2
 8009f98:	1ad2      	subs	r2, r2, r3
 8009f9a:	42d3      	cmn	r3, r2
 8009f9c:	d100      	bne.n	8009fa0 <memmove+0x28>
 8009f9e:	bd10      	pop	{r4, pc}
 8009fa0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009fa4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009fa8:	e7f7      	b.n	8009f9a <memmove+0x22>

08009faa <__malloc_lock>:
 8009faa:	4770      	bx	lr

08009fac <__malloc_unlock>:
 8009fac:	4770      	bx	lr

08009fae <_realloc_r>:
 8009fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb0:	4607      	mov	r7, r0
 8009fb2:	4614      	mov	r4, r2
 8009fb4:	460e      	mov	r6, r1
 8009fb6:	b921      	cbnz	r1, 8009fc2 <_realloc_r+0x14>
 8009fb8:	4611      	mov	r1, r2
 8009fba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fbe:	f7ff b9fd 	b.w	80093bc <_malloc_r>
 8009fc2:	b922      	cbnz	r2, 8009fce <_realloc_r+0x20>
 8009fc4:	f7ff f9ac 	bl	8009320 <_free_r>
 8009fc8:	4625      	mov	r5, r4
 8009fca:	4628      	mov	r0, r5
 8009fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fce:	f000 f827 	bl	800a020 <_malloc_usable_size_r>
 8009fd2:	42a0      	cmp	r0, r4
 8009fd4:	d20f      	bcs.n	8009ff6 <_realloc_r+0x48>
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4638      	mov	r0, r7
 8009fda:	f7ff f9ef 	bl	80093bc <_malloc_r>
 8009fde:	4605      	mov	r5, r0
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d0f2      	beq.n	8009fca <_realloc_r+0x1c>
 8009fe4:	4631      	mov	r1, r6
 8009fe6:	4622      	mov	r2, r4
 8009fe8:	f7fe feba 	bl	8008d60 <memcpy>
 8009fec:	4631      	mov	r1, r6
 8009fee:	4638      	mov	r0, r7
 8009ff0:	f7ff f996 	bl	8009320 <_free_r>
 8009ff4:	e7e9      	b.n	8009fca <_realloc_r+0x1c>
 8009ff6:	4635      	mov	r5, r6
 8009ff8:	e7e7      	b.n	8009fca <_realloc_r+0x1c>
	...

08009ffc <_read_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4c07      	ldr	r4, [pc, #28]	; (800a01c <_read_r+0x20>)
 800a000:	4605      	mov	r5, r0
 800a002:	4608      	mov	r0, r1
 800a004:	4611      	mov	r1, r2
 800a006:	2200      	movs	r2, #0
 800a008:	6022      	str	r2, [r4, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	f7f7 fc68 	bl	80018e0 <_read>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d102      	bne.n	800a01a <_read_r+0x1e>
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	b103      	cbz	r3, 800a01a <_read_r+0x1e>
 800a018:	602b      	str	r3, [r5, #0]
 800a01a:	bd38      	pop	{r3, r4, r5, pc}
 800a01c:	2000434c 	.word	0x2000434c

0800a020 <_malloc_usable_size_r>:
 800a020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a024:	1f18      	subs	r0, r3, #4
 800a026:	2b00      	cmp	r3, #0
 800a028:	bfbc      	itt	lt
 800a02a:	580b      	ldrlt	r3, [r1, r0]
 800a02c:	18c0      	addlt	r0, r0, r3
 800a02e:	4770      	bx	lr

0800a030 <_sbrk>:
 800a030:	4b04      	ldr	r3, [pc, #16]	; (800a044 <_sbrk+0x14>)
 800a032:	6819      	ldr	r1, [r3, #0]
 800a034:	4602      	mov	r2, r0
 800a036:	b909      	cbnz	r1, 800a03c <_sbrk+0xc>
 800a038:	4903      	ldr	r1, [pc, #12]	; (800a048 <_sbrk+0x18>)
 800a03a:	6019      	str	r1, [r3, #0]
 800a03c:	6818      	ldr	r0, [r3, #0]
 800a03e:	4402      	add	r2, r0
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	4770      	bx	lr
 800a044:	2000406c 	.word	0x2000406c
 800a048:	20004350 	.word	0x20004350

0800a04c <_init>:
 800a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04e:	bf00      	nop
 800a050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a052:	bc08      	pop	{r3}
 800a054:	469e      	mov	lr, r3
 800a056:	4770      	bx	lr

0800a058 <_fini>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	bf00      	nop
 800a05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05e:	bc08      	pop	{r3}
 800a060:	469e      	mov	lr, r3
 800a062:	4770      	bx	lr
