
PM2.5 module RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009354  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  080094f4  080094f4  000194f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009700  08009700  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009700  08009700  00019700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009708  08009708  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009708  08009708  00019708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800970c  0800970c  0001970c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042b8  20000090  080097a0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004348  080097a0  00024348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d34f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b16  00000000  00000000  0003d40f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001870  00000000  00000000  00040f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d8  00000000  00000000  00042798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b1f9  00000000  00000000  00043e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000139f2  00000000  00000000  0005f069  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f075  00000000  00000000  00072a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111ad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fe0  00000000  00000000  00111b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094dc 	.word	0x080094dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	080094dc 	.word	0x080094dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <PMchecksum>:
#include "PMmodule.h"
/*
 * @brief	return 1 if checksum error. return 0 if correct.
 */
uint8_t PMchecksum(uint8_t *buf,uint8_t buflen)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
	//uint8_t buflen = strlen(buf);
	uint8_t rxerror = 1;
 800059c:	2301      	movs	r3, #1
 800059e:	733b      	strb	r3, [r7, #12]
	uint16_t checksum = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	for (i=0;i<(buflen-2);i++){
 80005a4:	2300      	movs	r3, #0
 80005a6:	737b      	strb	r3, [r7, #13]
 80005a8:	e00a      	b.n	80005c0 <PMchecksum+0x30>
		checksum = checksum+buf[i];
 80005aa:	7b7b      	ldrb	r3, [r7, #13]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	89fb      	ldrh	r3, [r7, #14]
 80005b6:	4413      	add	r3, r2
 80005b8:	81fb      	strh	r3, [r7, #14]
	for (i=0;i<(buflen-2);i++){
 80005ba:	7b7b      	ldrb	r3, [r7, #13]
 80005bc:	3301      	adds	r3, #1
 80005be:	737b      	strb	r3, [r7, #13]
 80005c0:	7b7a      	ldrb	r2, [r7, #13]
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	3b02      	subs	r3, #2
 80005c6:	429a      	cmp	r2, r3
 80005c8:	dbef      	blt.n	80005aa <PMchecksum+0x1a>
	}
	if (buflen ==31){
 80005ca:	78fb      	ldrb	r3, [r7, #3]
 80005cc:	2b1f      	cmp	r3, #31
 80005ce:	d102      	bne.n	80005d6 <PMchecksum+0x46>
		checksum = checksum+0x42; //uncomment if buf does not add 0x42
 80005d0:	89fb      	ldrh	r3, [r7, #14]
 80005d2:	3342      	adds	r3, #66	; 0x42
 80005d4:	81fb      	strh	r3, [r7, #14]
	}
	if (checksum==((buf[buflen-2]<<8)+buf[buflen-1]))
 80005d6:	89fa      	ldrh	r2, [r7, #14]
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	3b02      	subs	r3, #2
 80005dc:	6879      	ldr	r1, [r7, #4]
 80005de:	440b      	add	r3, r1
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	021b      	lsls	r3, r3, #8
 80005e4:	78f9      	ldrb	r1, [r7, #3]
 80005e6:	3901      	subs	r1, #1
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	4401      	add	r1, r0
 80005ec:	7809      	ldrb	r1, [r1, #0]
 80005ee:	440b      	add	r3, r1
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d103      	bne.n	80005fc <PMchecksum+0x6c>
	{
		rxerror = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	733b      	strb	r3, [r7, #12]
		return rxerror;
 80005f8:	7b3b      	ldrb	r3, [r7, #12]
 80005fa:	e000      	b.n	80005fe <PMchecksum+0x6e>
	}
	return rxerror;
 80005fc:	7b3b      	ldrb	r3, [r7, #12]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <transmitPM2_5>:
	return PM01Val;
}

//transmit PM Value to PC
uint16_t transmitPM2_5(uint8_t *thebuf)
{
 800060a:	b480      	push	{r7}
 800060c:	b085      	sub	sp, #20
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
	uint16_t PM2_5Val;
    PM2_5Val=((thebuf[6]<<8) + thebuf[7]);//count PM2.5 value of the air detector module
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3306      	adds	r3, #6
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b29b      	uxth	r3, r3
 800061a:	021b      	lsls	r3, r3, #8
 800061c:	b29a      	uxth	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3307      	adds	r3, #7
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b29b      	uxth	r3, r3
 8000626:	4413      	add	r3, r2
 8000628:	81fb      	strh	r3, [r7, #14]
	return PM2_5Val;
 800062a:	89fb      	ldrh	r3, [r7, #14]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4a07      	ldr	r2, [pc, #28]	; (8000664 <vApplicationGetIdleTaskMemory+0x2c>)
 8000648:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <vApplicationGetIdleTaskMemory+0x30>)
 800064e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200000ac 	.word	0x200000ac
 8000668:	20000100 	.word	0x20000100

0800066c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800067a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800067e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000682:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000686:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800068a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800068c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800068e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	613b      	str	r3, [r7, #16]

	Lcd_mode_select(&lcd);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f80e 	bl	80006c2 <Lcd_mode_select>

	return lcd;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	461d      	mov	r5, r3
 80006aa:	f107 0410 	add.w	r4, r7, #16
 80006ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006b6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bdb0      	pop	{r4, r5, r7, pc}

080006c2 <Lcd_mode_select>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_mode_select(Lcd_HandleTypeDef * lcd)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7d9b      	ldrb	r3, [r3, #22]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d10c      	bne.n	80006ec <Lcd_mode_select+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80006d2:	2133      	movs	r1, #51	; 0x33
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f861 	bl	800079c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80006da:	2132      	movs	r1, #50	; 0x32
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f85d 	bl	800079c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80006e2:	2128      	movs	r1, #40	; 0x28
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 f859 	bl	800079c <lcd_write_command>
 80006ea:	e003      	b.n	80006f4 <Lcd_mode_select+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80006ec:	2138      	movs	r1, #56	; 0x38
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f854 	bl	800079c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80006f4:	2101      	movs	r1, #1
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 f850 	bl	800079c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80006fc:	210c      	movs	r1, #12
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f84c 	bl	800079c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000704:	2106      	movs	r1, #6
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f848 	bl	800079c <lcd_write_command>

}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
 8000722:	e00a      	b.n	800073a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	4413      	add	r3, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 f862 	bl	80007f8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	3301      	adds	r3, #1
 8000738:	73fb      	strb	r3, [r7, #15]
 800073a:	7bfc      	ldrb	r4, [r7, #15]
 800073c:	6838      	ldr	r0, [r7, #0]
 800073e:	f7ff fd4f 	bl	80001e0 <strlen>
 8000742:	4603      	mov	r3, r0
 8000744:	429c      	cmp	r4, r3
 8000746:	d3ed      	bcc.n	8000724 <Lcd_string+0x10>
	}
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}

08000750 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
 800075c:	4613      	mov	r3, r2
 800075e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	4a07      	ldr	r2, [pc, #28]	; (8000780 <Lcd_cursor+0x30>)
 8000764:	5cd2      	ldrb	r2, [r2, r3]
 8000766:	78bb      	ldrb	r3, [r7, #2]
 8000768:	4413      	add	r3, r2
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b80      	subs	r3, #128	; 0x80
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4619      	mov	r1, r3
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f000 f812 	bl	800079c <lcd_write_command>
	#endif
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	08009644 	.word	0x08009644

08000784 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800078c:	2101      	movs	r1, #1
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 f804 	bl	800079c <lcd_write_command>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6898      	ldr	r0, [r3, #8]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	899b      	ldrh	r3, [r3, #12]
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	f002 f962 	bl	8002a7c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7d9b      	ldrb	r3, [r3, #22]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d111      	bne.n	80007e4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	091b      	lsrs	r3, r3, #4
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2204      	movs	r2, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f842 	bl	8000854 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2204      	movs	r2, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f839 	bl	8000854 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80007e2:	e005      	b.n	80007f0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2208      	movs	r2, #8
 80007e8:	4619      	mov	r1, r3
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 f832 	bl	8000854 <lcd_write>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6898      	ldr	r0, [r3, #8]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	899b      	ldrh	r3, [r3, #12]
 800080c:	2201      	movs	r2, #1
 800080e:	4619      	mov	r1, r3
 8000810:	f002 f934 	bl	8002a7c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7d9b      	ldrb	r3, [r3, #22]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d111      	bne.n	8000840 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	091b      	lsrs	r3, r3, #4
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2204      	movs	r2, #4
 8000824:	4619      	mov	r1, r3
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f000 f814 	bl	8000854 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2204      	movs	r2, #4
 8000836:	4619      	mov	r1, r3
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 f80b 	bl	8000854 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800083e:	e005      	b.n	800084c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	2208      	movs	r2, #8
 8000844:	4619      	mov	r1, r3
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f804 	bl	8000854 <lcd_write>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
 8000860:	4613      	mov	r3, r2
 8000862:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000864:	2300      	movs	r3, #0
 8000866:	73fb      	strb	r3, [r7, #15]
 8000868:	e019      	b.n	800089e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	4413      	add	r3, r2
 8000880:	8819      	ldrh	r1, [r3, #0]
 8000882:	78fa      	ldrb	r2, [r7, #3]
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	fa42 f303 	asr.w	r3, r2, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	b2db      	uxtb	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	f002 f8f2 	bl	8002a7c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	3301      	adds	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	7bfa      	ldrb	r2, [r7, #15]
 80008a0:	78bb      	ldrb	r3, [r7, #2]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d3e1      	bcc.n	800086a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6918      	ldr	r0, [r3, #16]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	8a9b      	ldrh	r3, [r3, #20]
 80008ae:	2201      	movs	r2, #1
 80008b0:	4619      	mov	r1, r3
 80008b2:	f002 f8e3 	bl	8002a7c <HAL_GPIO_WritePin>
	DELAY(1);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f001 f8ee 	bl	8001a98 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6918      	ldr	r0, [r3, #16]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	8a9b      	ldrh	r3, [r3, #20]
 80008c4:	2200      	movs	r2, #0
 80008c6:	4619      	mov	r1, r3
 80008c8:	f002 f8d8 	bl	8002a7c <HAL_GPIO_WritePin>
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b5b0      	push	{r4, r5, r7, lr}
 80008d6:	b0ae      	sub	sp, #184	; 0xb8
 80008d8:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f001 f89b 	bl	8001a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 f8c9 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e2:	f000 fa67 	bl	8000db4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008e6:	f000 f925 	bl	8000b34 <MX_ADC1_Init>
  MX_I2C1_Init();
 80008ea:	f000 f975 	bl	8000bd8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80008ee:	f000 f9d7 	bl	8000ca0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80008f2:	f000 f9ff 	bl	8000cf4 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 80008f6:	f000 f99d 	bl	8000c34 <MX_SPI3_Init>
  MX_DMA_Init();
 80008fa:	f000 fa25 	bl	8000d48 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80008fe:	484a      	ldr	r0, [pc, #296]	; (8000a28 <main+0x154>)
 8000900:	f000 fc18 	bl	8001134 <RetargetInit>


  static Lcd_PortType ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
  static Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2140      	movs	r1, #64	; 0x40
 8000908:	4848      	ldr	r0, [pc, #288]	; (8000a2c <main+0x158>)
 800090a:	f002 f8b7 	bl	8002a7c <HAL_GPIO_WritePin>
  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 800090e:	4c48      	ldr	r4, [pc, #288]	; (8000a30 <main+0x15c>)
 8000910:	4638      	mov	r0, r7
 8000912:	2300      	movs	r3, #0
 8000914:	9303      	str	r3, [sp, #12]
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	9302      	str	r3, [sp, #8]
 800091a:	4b46      	ldr	r3, [pc, #280]	; (8000a34 <main+0x160>)
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <main+0x164>)
 8000926:	4a45      	ldr	r2, [pc, #276]	; (8000a3c <main+0x168>)
 8000928:	4945      	ldr	r1, [pc, #276]	; (8000a40 <main+0x16c>)
 800092a:	f7ff fe9f 	bl	800066c <Lcd_create>
 800092e:	4625      	mov	r5, r4
 8000930:	463c      	mov	r4, r7
 8000932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000936:	e894 0003 	ldmia.w	r4, {r0, r1}
 800093a:	e885 0003 	stmia.w	r5, {r0, r1}
  Lcd_string(&lcd, "Initialising");
 800093e:	4941      	ldr	r1, [pc, #260]	; (8000a44 <main+0x170>)
 8000940:	483b      	ldr	r0, [pc, #236]	; (8000a30 <main+0x15c>)
 8000942:	f7ff fee7 	bl	8000714 <Lcd_string>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of PMvalue */
  osMessageQDef(PMvalue, 1, uint8_t);
 8000946:	4b40      	ldr	r3, [pc, #256]	; (8000a48 <main+0x174>)
 8000948:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800094c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800094e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  PMvalueHandle = osMessageCreate(osMessageQ(PMvalue), NULL);
 8000952:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f005 f8aa 	bl	8005ab2 <osMessageCreate>
 800095e:	4602      	mov	r2, r0
 8000960:	4b3a      	ldr	r3, [pc, #232]	; (8000a4c <main+0x178>)
 8000962:	601a      	str	r2, [r3, #0]
  //osMessageQDef(RTCvalue, 1, uint16_t*);
  //RTCvalueHandle = osMessageCreate(osMessageQ(RTCvalue), NULL);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMailQDef(RTCvalue,1,rtc_HandleTypeDef);
 8000964:	2301      	movs	r3, #1
 8000966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800096a:	2308      	movs	r3, #8
 800096c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000970:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000974:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RTCvalueHandle = osMailCreate(osMailQ(RTCvalue),NULL);
 8000978:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f005 f8f6 	bl	8005b70 <osMailCreate>
 8000984:	4602      	mov	r2, r0
 8000986:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <main+0x17c>)
 8000988:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <main+0x180>)
 800098c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8000990:	461d      	mov	r5, r3
 8000992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000996:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800099a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800099e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f004 ff24 	bl	80057f2 <osThreadCreate>
 80009aa:	4602      	mov	r2, r0
 80009ac:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <main+0x184>)
 80009ae:	601a      	str	r2, [r3, #0]

  /* definition and creation of LCDtask */
  osThreadDef(LCDtask, LCDtask1, osPriorityIdle, 0, 512);
 80009b0:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <main+0x188>)
 80009b2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80009b6:	461d      	mov	r5, r3
 80009b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDtaskHandle = osThreadCreate(osThread(LCDtask), NULL);
 80009c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f004 ff11 	bl	80057f2 <osThreadCreate>
 80009d0:	4602      	mov	r2, r0
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <main+0x18c>)
 80009d4:	601a      	str	r2, [r3, #0]

  /* definition and creation of PM2_5 */
  osThreadDef(PM2_5, PM2_5_1, osPriorityIdle, 0, 128);
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <main+0x190>)
 80009d8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80009dc:	461d      	mov	r5, r3
 80009de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PM2_5Handle = osThreadCreate(osThread(PM2_5), NULL);
 80009ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f004 fefe 	bl	80057f2 <osThreadCreate>
 80009f6:	4602      	mov	r2, r0
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <main+0x194>)
 80009fa:	601a      	str	r2, [r3, #0]

  /* definition and creation of RTCread */
  osThreadDef(RTCread, RTC_1, osPriorityIdle, 0, 128);
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <main+0x198>)
 80009fe:	f107 0418 	add.w	r4, r7, #24
 8000a02:	461d      	mov	r5, r3
 8000a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RTCreadHandle = osThreadCreate(osThread(RTCread), NULL);
 8000a10:	f107 0318 	add.w	r3, r7, #24
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 feeb 	bl	80057f2 <osThreadCreate>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <main+0x19c>)
 8000a20:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a22:	f004 fedf 	bl	80057e4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <main+0x152>
 8000a28:	200042bc 	.word	0x200042bc
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	20000300 	.word	0x20000300
 8000a34:	40020800 	.word	0x40020800
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	20000014 	.word	0x20000014
 8000a40:	20000004 	.word	0x20000004
 8000a44:	080094f4 	.word	0x080094f4
 8000a48:	08009504 	.word	0x08009504
 8000a4c:	20004238 	.word	0x20004238
 8000a50:	200040d4 	.word	0x200040d4
 8000a54:	08009520 	.word	0x08009520
 8000a58:	20004070 	.word	0x20004070
 8000a5c:	08009544 	.word	0x08009544
 8000a60:	200040dc 	.word	0x200040dc
 8000a64:	08009568 	.word	0x08009568
 8000a68:	2000418c 	.word	0x2000418c
 8000a6c:	0800958c 	.word	0x0800958c
 8000a70:	200040d8 	.word	0x200040d8

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b094      	sub	sp, #80	; 0x50
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	2230      	movs	r2, #48	; 0x30
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f007 fbbf 	bl	8008206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <SystemClock_Config+0xb8>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <SystemClock_Config+0xb8>)
 8000aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <SystemClock_Config+0xb8>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <SystemClock_Config+0xbc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <SystemClock_Config+0xbc>)
 8000ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <SystemClock_Config+0xbc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000adc:	2310      	movs	r3, #16
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 0320 	add.w	r3, r7, #32
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 ff83 	bl	80039f4 <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000af4:	f000 fb16 	bl	8001124 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	230f      	movs	r3, #15
 8000afa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 f9de 	bl	8003ed4 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b1e:	f000 fb01 	bl	8001124 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3750      	adds	r7, #80	; 0x50
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40007000 	.word	0x40007000

08000b34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000b48:	4a21      	ldr	r2, [pc, #132]	; (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b52:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b58:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <MX_ADC1_Init+0xa0>)
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b92:	480e      	ldr	r0, [pc, #56]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000b94:	f000 ffa2 	bl	8001adc <HAL_ADC_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b9e:	f000 fac1 	bl	8001124 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bae:	463b      	mov	r3, r7
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4806      	ldr	r0, [pc, #24]	; (8000bcc <MX_ADC1_Init+0x98>)
 8000bb4:	f000 ffd6 	bl	8001b64 <HAL_ADC_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bbe:	f000 fab1 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20004190 	.word	0x20004190
 8000bd0:	40012000 	.word	0x40012000
 8000bd4:	0f000001 	.word	0x0f000001

08000bd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000bde:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <MX_I2C1_Init+0x54>)
 8000be0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000be4:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <MX_I2C1_Init+0x58>)
 8000be6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000bf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_I2C1_Init+0x50>)
 8000c16:	f001 ff65 	bl	8002ae4 <HAL_I2C_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c20:	f000 fa80 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200040e0 	.word	0x200040e0
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	000186a0 	.word	0x000186a0

08000c34 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_SPI3_Init+0x64>)
 8000c3a:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <MX_SPI3_Init+0x64>)
 8000c40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_SPI3_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_SPI3_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_SPI3_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_SPI3_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_SPI3_Init+0x64>)
 8000c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_SPI3_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <MX_SPI3_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_SPI3_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <MX_SPI3_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_SPI3_Init+0x64>)
 8000c80:	220a      	movs	r2, #10
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_SPI3_Init+0x64>)
 8000c86:	f003 fb23 	bl	80042d0 <HAL_SPI_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000c90:	f000 fa48 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20004134 	.word	0x20004134
 8000c9c:	40003c00 	.word	0x40003c00

08000ca0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000ca6:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <MX_USART2_UART_Init+0x50>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_USART2_UART_Init+0x4c>)
 8000cd8:	f003 fd7c 	bl	80047d4 <HAL_UART_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ce2:	f000 fa1f 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200042bc 	.word	0x200042bc
 8000cf0:	40004400 	.word	0x40004400

08000cf4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USART6_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_USART6_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_USART6_UART_Init+0x4c>)
 8000d00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d04:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_USART6_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USART6_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_USART6_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USART6_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_USART6_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USART6_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART6_UART_Init+0x4c>)
 8000d2c:	f003 fd52 	bl	80047d4 <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d36:	f000 f9f5 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000427c 	.word	0x2000427c
 8000d44:	40011400 	.word	0x40011400

08000d48 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_DMA_Init+0x68>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <MX_DMA_Init+0x68>)
 8000d58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_DMA_Init+0x68>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_DMA_Init+0x68>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <MX_DMA_Init+0x68>)
 8000d74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <MX_DMA_Init+0x68>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2105      	movs	r1, #5
 8000d8a:	2011      	movs	r0, #17
 8000d8c:	f001 f9c0 	bl	8002110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d90:	2011      	movs	r0, #17
 8000d92:	f001 f9d9 	bl	8002148 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2105      	movs	r1, #5
 8000d9a:	2039      	movs	r0, #57	; 0x39
 8000d9c:	f001 f9b8 	bl	8002110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000da0:	2039      	movs	r0, #57	; 0x39
 8000da2:	f001 f9d1 	bl	8002148 <HAL_NVIC_EnableIRQ>

}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <MX_GPIO_Init+0x120>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a40      	ldr	r2, [pc, #256]	; (8000ed4 <MX_GPIO_Init+0x120>)
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <MX_GPIO_Init+0x120>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b3a      	ldr	r3, [pc, #232]	; (8000ed4 <MX_GPIO_Init+0x120>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a39      	ldr	r2, [pc, #228]	; (8000ed4 <MX_GPIO_Init+0x120>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <MX_GPIO_Init+0x120>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <MX_GPIO_Init+0x120>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a32      	ldr	r2, [pc, #200]	; (8000ed4 <MX_GPIO_Init+0x120>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <MX_GPIO_Init+0x120>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <MX_GPIO_Init+0x120>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a2b      	ldr	r2, [pc, #172]	; (8000ed4 <MX_GPIO_Init+0x120>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <MX_GPIO_Init+0x120>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|D7_LCD_Pin|D8_LCD_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000e40:	4825      	ldr	r0, [pc, #148]	; (8000ed8 <MX_GPIO_Init+0x124>)
 8000e42:	f001 fe1b 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|LED_Green_Pin|LED_Yellow_Pin|LED_Red_Pin 
 8000e46:	2200      	movs	r2, #0
 8000e48:	f24e 4170 	movw	r1, #58480	; 0xe470
 8000e4c:	4823      	ldr	r0, [pc, #140]	; (8000edc <MX_GPIO_Init+0x128>)
 8000e4e:	f001 fe15 	bl	8002a7c <HAL_GPIO_WritePin>
                          |D5_LCD_Pin|D4_LCD_Pin|D10_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_LCD_GPIO_Port, D9_LCD_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	4822      	ldr	r0, [pc, #136]	; (8000ee0 <MX_GPIO_Init+0x12c>)
 8000e58:	f001 fe10 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A0_LCD_Pin */
  GPIO_InitStruct.Pin = A0_LCD_Pin;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e60:	2303      	movs	r3, #3
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_LCD_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	481a      	ldr	r0, [pc, #104]	; (8000ed8 <MX_GPIO_Init+0x124>)
 8000e70:	f001 fc82 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 D7_LCD_Pin D8_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|D7_LCD_Pin|D8_LCD_Pin;
 8000e74:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4812      	ldr	r0, [pc, #72]	; (8000ed8 <MX_GPIO_Init+0x124>)
 8000e8e:	f001 fc73 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin LED_Green_Pin LED_Yellow_Pin LED_Red_Pin 
                           D5_LCD_Pin D4_LCD_Pin D10_LCD_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|LED_Green_Pin|LED_Yellow_Pin|LED_Red_Pin 
 8000e92:	f24e 4370 	movw	r3, #58480	; 0xe470
 8000e96:	617b      	str	r3, [r7, #20]
                          |D5_LCD_Pin|D4_LCD_Pin|D10_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_GPIO_Init+0x128>)
 8000eac:	f001 fc64 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_LCD_Pin */
  GPIO_InitStruct.Pin = D9_LCD_Pin;
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D9_LCD_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_GPIO_Init+0x12c>)
 8000ec8:	f001 fc56 	bl	8002778 <HAL_GPIO_Init>

}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	40020800 	.word	0x40020800

08000ee4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	RxReady = SET;
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <HAL_UART_RxCpltCallback+0x1c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000000 	.word	0x20000000

08000f04 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f004 fcbc 	bl	800588a <osDelay>
 8000f12:	e7fb      	b.n	8000f0c <StartDefaultTask+0x8>

08000f14 <LCDtask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCDtask1 */
void LCDtask1(void const * argument)
{
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b0a2      	sub	sp, #136	; 0x88
 8000f18:	af04      	add	r7, sp, #16
 8000f1a:	6078      	str	r0, [r7, #4]
		//uint16_t RTCreceive[6];
		//uint16_t *RTCptr;
		osEvent RTCevt;
		osEvent PMevt;
		rtc_HandleTypeDef *rtc_receive;
		uint8_t Months[12][4] = {"Jan\0", "Feb\0", "Mar\0", "Apr\0", "May\0",
 8000f1c:	4b40      	ldr	r3, [pc, #256]	; (8001020 <LCDtask1+0x10c>)
 8000f1e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000f22:	461d      	mov	r5, r3
 8000f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				"Jun\0", "Jul\0", "Aug\0", "Sep\0", "Oct\0", "Nov\0", "Dec\0"};
		char date[16];
		char PMtext[16];
		Lcd_clear(&lcd);
 8000f34:	483b      	ldr	r0, [pc, #236]	; (8001024 <LCDtask1+0x110>)
 8000f36:	f7ff fc25 	bl	8000784 <Lcd_clear>
  /* Infinite loop */
  for(;;)
  {
	  PMevt = osMessagePeek(PMvalueHandle,osWaitForever);
 8000f3a:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <LCDtask1+0x114>)
 8000f3c:	6819      	ldr	r1, [r3, #0]
 8000f3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f42:	f04f 32ff 	mov.w	r2, #4294967295
 8000f46:	4618      	mov	r0, r3
 8000f48:	f004 ff47 	bl	8005dda <osMessagePeek>
	  if (PMevt.status == osEventMessage)
 8000f4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f4e:	2b10      	cmp	r3, #16
 8000f50:	d11b      	bne.n	8000f8a <LCDtask1+0x76>
	  {
		  PM2_5 = PMevt.value.v;
 8000f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  printf("The current PM2.5 is : %d \r\n", PM2_5);
 8000f58:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4833      	ldr	r0, [pc, #204]	; (800102c <LCDtask1+0x118>)
 8000f60:	f007 f95a 	bl	8008218 <iprintf>
		  //Lcd_clear(&lcd);
		  sprintf(PMtext,"PM2.5: %02d ug/m3",PM2_5);
 8000f64:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	4930      	ldr	r1, [pc, #192]	; (8001030 <LCDtask1+0x11c>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f007 fa18 	bl	80083a4 <siprintf>
		  Lcd_cursor(&lcd,1,0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2101      	movs	r1, #1
 8000f78:	482a      	ldr	r0, [pc, #168]	; (8001024 <LCDtask1+0x110>)
 8000f7a:	f7ff fbe9 	bl	8000750 <Lcd_cursor>
		  Lcd_string(&lcd, PMtext);
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4619      	mov	r1, r3
 8000f84:	4827      	ldr	r0, [pc, #156]	; (8001024 <LCDtask1+0x110>)
 8000f86:	f7ff fbc5 	bl	8000714 <Lcd_string>
	  }

	  RTCevt = osMailGet(RTCvalueHandle,osWaitForever);
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <LCDtask1+0x120>)
 8000f8c:	6819      	ldr	r1, [r3, #0]
 8000f8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f92:	f04f 32ff 	mov.w	r2, #4294967295
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 fe96 	bl	8005cc8 <osMailGet>
	  if(RTCevt.status == osEventMail)
 8000f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f9e:	2b20      	cmp	r3, #32
 8000fa0:	d139      	bne.n	8001016 <LCDtask1+0x102>
	  {
		  rtc_receive =  (rtc_HandleTypeDef*) RTCevt.value.p;
 8000fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fa4:	673b      	str	r3, [r7, #112]	; 0x70
		  printf("year: %d\r\n",rtc_receive->year);
 8000fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4822      	ldr	r0, [pc, #136]	; (8001038 <LCDtask1+0x124>)
 8000fae:	f007 f933 	bl	8008218 <iprintf>
		  printf("day: %d \r\n",rtc_receive->day);
 8000fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fb4:	78db      	ldrb	r3, [r3, #3]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4820      	ldr	r0, [pc, #128]	; (800103c <LCDtask1+0x128>)
 8000fba:	f007 f92d 	bl	8008218 <iprintf>
		  sprintf(date,"%s-%02d %02d:%02d:%02d",Months[(rtc_receive->month)-1],rtc_receive->day,rtc_receive->hour,rtc_receive->minute,rtc_receive->second);
 8000fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fc0:	789b      	ldrb	r3, [r3, #2]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	441a      	add	r2, r3
 8000fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fce:	78db      	ldrb	r3, [r3, #3]
 8000fd0:	461d      	mov	r5, r3
 8000fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fd4:	795b      	ldrb	r3, [r3, #5]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fda:	799b      	ldrb	r3, [r3, #6]
 8000fdc:	461c      	mov	r4, r3
 8000fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fe0:	79db      	ldrb	r3, [r3, #7]
 8000fe2:	f107 0018 	add.w	r0, r7, #24
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	9401      	str	r4, [sp, #4]
 8000fea:	9100      	str	r1, [sp, #0]
 8000fec:	462b      	mov	r3, r5
 8000fee:	4914      	ldr	r1, [pc, #80]	; (8001040 <LCDtask1+0x12c>)
 8000ff0:	f007 f9d8 	bl	80083a4 <siprintf>
		  //Lcd_string(&lcd,Months[(rtc_receive->month)-1]);
		  Lcd_cursor(&lcd,0,0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <LCDtask1+0x110>)
 8000ffa:	f7ff fba9 	bl	8000750 <Lcd_cursor>
		  Lcd_string(&lcd,date);
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	4619      	mov	r1, r3
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <LCDtask1+0x110>)
 8001006:	f7ff fb85 	bl	8000714 <Lcd_string>
		  osMailFree(RTCvalueHandle, rtc_receive);
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <LCDtask1+0x120>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001010:	4618      	mov	r0, r3
 8001012:	f004 fecd 	bl	8005db0 <osMailFree>
	  }


	  osDelay(1000);
 8001016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800101a:	f004 fc36 	bl	800588a <osDelay>
	  PMevt = osMessagePeek(PMvalueHandle,osWaitForever);
 800101e:	e78c      	b.n	8000f3a <LCDtask1+0x26>
 8001020:	0800960c 	.word	0x0800960c
 8001024:	20000300 	.word	0x20000300
 8001028:	20004238 	.word	0x20004238
 800102c:	080095a8 	.word	0x080095a8
 8001030:	080095c8 	.word	0x080095c8
 8001034:	200040d4 	.word	0x200040d4
 8001038:	080095dc 	.word	0x080095dc
 800103c:	080095e8 	.word	0x080095e8
 8001040:	080095f4 	.word	0x080095f4

08001044 <PM2_5_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PM2_5_1 */
void PM2_5_1(void const * argument)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PM2_5_1 */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t PM2_5;
	  if (RxReady==SET)
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <PM2_5_1+0x60>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d122      	bne.n	800109a <PM2_5_1+0x56>
	  {
		  RxReady = RESET;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <PM2_5_1+0x60>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart6, pmflag, 32); //Read data from PM2.5 module, fixed packet length is 32 bytes.
 800105a:	2220      	movs	r2, #32
 800105c:	4912      	ldr	r1, [pc, #72]	; (80010a8 <PM2_5_1+0x64>)
 800105e:	4813      	ldr	r0, [pc, #76]	; (80010ac <PM2_5_1+0x68>)
 8001060:	f003 fd44 	bl	8004aec <HAL_UART_Receive_IT>
		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001064:	2120      	movs	r1, #32
 8001066:	4812      	ldr	r0, [pc, #72]	; (80010b0 <PM2_5_1+0x6c>)
 8001068:	f001 fd21 	bl	8002aae <HAL_GPIO_TogglePin>
		  if(pmflag[0]==0x42) //The correct data start with 0x42.
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <PM2_5_1+0x64>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b42      	cmp	r3, #66	; 0x42
 8001072:	d112      	bne.n	800109a <PM2_5_1+0x56>
		  {
			  PM2_5 = transmitPM2_5(pmflag);
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <PM2_5_1+0x64>)
 8001076:	f7ff fac8 	bl	800060a <transmitPM2_5>
 800107a:	4603      	mov	r3, r0
 800107c:	73fb      	strb	r3, [r7, #15]
			  if(PMchecksum(pmflag,32)==0)
 800107e:	2120      	movs	r1, #32
 8001080:	4809      	ldr	r0, [pc, #36]	; (80010a8 <PM2_5_1+0x64>)
 8001082:	f7ff fa85 	bl	8000590 <PMchecksum>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d106      	bne.n	800109a <PM2_5_1+0x56>
			  {
				  osMessageOverwrite(PMvalueHandle,PM2_5); //Since CMSIS-RTOS library does not have such function. This is user defined function
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <PM2_5_1+0x70>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f004 fd35 	bl	8005b04 <osMessageOverwrite>
				  //printf("Get PM2.5 value\r\n");
			  }
		  }
	  }
	  //test only
	  osDelay(500);
 800109a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109e:	f004 fbf4 	bl	800588a <osDelay>
  {
 80010a2:	e7d3      	b.n	800104c <PM2_5_1+0x8>
 80010a4:	20000000 	.word	0x20000000
 80010a8:	2000425c 	.word	0x2000425c
 80010ac:	2000427c 	.word	0x2000427c
 80010b0:	40020000 	.word	0x40020000
 80010b4:	20004238 	.word	0x20004238

080010b8 <RTC_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTC_1 */
void RTC_1(void const * argument)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN RTC_1 */
	rtc_HandleTypeDef *rtc_t;
	rtc_t = (rtc_HandleTypeDef*) osMailAlloc(RTCvalueHandle,osWaitForever);
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <RTC_1+0x44>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	4618      	mov	r0, r3
 80010ca:	f004 fda9 	bl	8005c20 <osMailAlloc>
 80010ce:	6178      	str	r0, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  //uint16_t RTCsend[6];
	  *rtc_t = ReadRTC();
 80010d0:	697c      	ldr	r4, [r7, #20]
 80010d2:	463b      	mov	r3, r7
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f90b 	bl	80012f0 <ReadRTC>
 80010da:	4622      	mov	r2, r4
 80010dc:	463b      	mov	r3, r7
 80010de:	6819      	ldr	r1, [r3, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	6011      	str	r1, [r2, #0]
 80010e4:	6053      	str	r3, [r2, #4]
	  RTCsend[4] = rtc_t.minute;
	  RTCsend[5] = rtc_t.second;
	  osMessageOverwrite(RTCvalueHandle,*RTCsend);
	  */
	  //xQueueOverwrite(RTCqueue,(void*)&rtc_t);
	  osMailPut(RTCvalueHandle,rtc_t);
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <RTC_1+0x44>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6979      	ldr	r1, [r7, #20]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 fdad 	bl	8005c4c <osMailPut>
  	  osDelay(1000);
 80010f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f6:	f004 fbc8 	bl	800588a <osDelay>
	  *rtc_t = ReadRTC();
 80010fa:	e7e9      	b.n	80010d0 <RTC_1+0x18>
 80010fc:	200040d4 	.word	0x200040d4

08001100 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001112:	f000 fca1 	bl	8001a58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40000400 	.word	0x40000400

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <RetargetInit+0x28>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <RetargetInit+0x2c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6898      	ldr	r0, [r3, #8]
 8001148:	2300      	movs	r3, #0
 800114a:	2202      	movs	r2, #2
 800114c:	2100      	movs	r1, #0
 800114e:	f007 f87b 	bl	8008248 <setvbuf>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200042fc 	.word	0x200042fc
 8001160:	2000002c 	.word	0x2000002c

08001164 <_isatty>:

int _isatty(int fd) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db04      	blt.n	800117c <_isatty+0x18>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b02      	cmp	r3, #2
 8001176:	dc01      	bgt.n	800117c <_isatty+0x18>
    return 1;
 8001178:	2301      	movs	r3, #1
 800117a:	e005      	b.n	8001188 <_isatty+0x24>

  errno = EBADF;
 800117c:	f007 f80e 	bl	800819c <__errno>
 8001180:	4602      	mov	r2, r0
 8001182:	2309      	movs	r3, #9
 8001184:	6013      	str	r3, [r2, #0]
  return 0;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_write>:

int _write(int fd, char* ptr, int len) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d002      	beq.n	80011a8 <_write+0x18>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d111      	bne.n	80011cc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <_write+0x54>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	f003 fb5a 	bl	800486e <HAL_UART_Transmit>
 80011ba:	4603      	mov	r3, r0
 80011bc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <_write+0x38>
      return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	e008      	b.n	80011da <_write+0x4a>
    else
      return EIO;
 80011c8:	2305      	movs	r3, #5
 80011ca:	e006      	b.n	80011da <_write+0x4a>
  }
  errno = EBADF;
 80011cc:	f006 ffe6 	bl	800819c <__errno>
 80011d0:	4602      	mov	r2, r0
 80011d2:	2309      	movs	r3, #9
 80011d4:	6013      	str	r3, [r2, #0]
  return -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200042fc 	.word	0x200042fc

080011e8 <_close>:

int _close(int fd) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db04      	blt.n	8001200 <_close+0x18>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	dc01      	bgt.n	8001200 <_close+0x18>
    return 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	e006      	b.n	800120e <_close+0x26>

  errno = EBADF;
 8001200:	f006 ffcc 	bl	800819c <__errno>
 8001204:	4602      	mov	r2, r0
 8001206:	2309      	movs	r3, #9
 8001208:	6013      	str	r3, [r2, #0]
  return -1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001222:	f006 ffbb 	bl	800819c <__errno>
 8001226:	4602      	mov	r2, r0
 8001228:	2309      	movs	r3, #9
 800122a:	6013      	str	r3, [r2, #0]
  return -1;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_read>:

int _read(int fd, char* ptr, int len) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d110      	bne.n	800126c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <_read+0x4c>)
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	2201      	movs	r2, #1
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	f003 fba3 	bl	80049a0 <HAL_UART_Receive>
 800125a:	4603      	mov	r3, r0
 800125c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800125e:	7dfb      	ldrb	r3, [r7, #23]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <_read+0x30>
      return 1;
 8001264:	2301      	movs	r3, #1
 8001266:	e008      	b.n	800127a <_read+0x42>
    else
      return EIO;
 8001268:	2305      	movs	r3, #5
 800126a:	e006      	b.n	800127a <_read+0x42>
  }
  errno = EBADF;
 800126c:	f006 ff96 	bl	800819c <__errno>
 8001270:	4602      	mov	r2, r0
 8001272:	2309      	movs	r3, #9
 8001274:	6013      	str	r3, [r2, #0]
  return -1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200042fc 	.word	0x200042fc

08001288 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db08      	blt.n	80012aa <_fstat+0x22>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b02      	cmp	r3, #2
 800129c:	dc05      	bgt.n	80012aa <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a4:	605a      	str	r2, [r3, #4]
    return 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e005      	b.n	80012b6 <_fstat+0x2e>
  }

  errno = EBADF;
 80012aa:	f006 ff77 	bl	800819c <__errno>
 80012ae:	4602      	mov	r2, r0
 80012b0:	2309      	movs	r3, #9
 80012b2:	6013      	str	r3, [r2, #0]
  return 0;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <BcdToDec>:
	return ((val/10 *16)+(val%10));
}

/* BCD to Decimal*/
uint8_t BcdToDec(uint8_t val)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
  return( (val/16*10) + (val%16) );
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	0092      	lsls	r2, r2, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <ReadRTC>:

/*
 * Read Data from RTC
 */
rtc_HandleTypeDef ReadRTC()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	rtc_HandleTypeDef rtc;
	uint8_t raw_data_from_rtc[7];
	GetRawRTC(&I2CX,raw_data_from_rtc);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4619      	mov	r1, r3
 80012fe:	4828      	ldr	r0, [pc, #160]	; (80013a0 <ReadRTC+0xb0>)
 8001300:	f000 f850 	bl	80013a4 <GetRawRTC>
	rtc.second = BcdToDec(raw_data_from_rtc[0]);
 8001304:	7a3b      	ldrb	r3, [r7, #8]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ffd9 	bl	80012be <BcdToDec>
 800130c:	4603      	mov	r3, r0
 800130e:	75fb      	strb	r3, [r7, #23]
	rtc.minute = BcdToDec(raw_data_from_rtc[1]);
 8001310:	7a7b      	ldrb	r3, [r7, #9]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffd3 	bl	80012be <BcdToDec>
 8001318:	4603      	mov	r3, r0
 800131a:	75bb      	strb	r3, [r7, #22]
	raw_data_from_rtc[2] = (raw_data_from_rtc[2] & 0x7f);
 800131c:	7abb      	ldrb	r3, [r7, #10]
 800131e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001322:	b2db      	uxtb	r3, r3
 8001324:	72bb      	strb	r3, [r7, #10]
	raw_data_from_rtc[2] = (((raw_data_from_rtc[2] & 0xf0) >> 4) * 10) + (raw_data_from_rtc[2] & 0x0f);
 8001326:	7abb      	ldrb	r3, [r7, #10]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	b2db      	uxtb	r3, r3
 800132c:	461a      	mov	r2, r3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4413      	add	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	b2da      	uxtb	r2, r3
 8001336:	7abb      	ldrb	r3, [r7, #10]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4413      	add	r3, r2
 8001340:	b2db      	uxtb	r3, r3
 8001342:	72bb      	strb	r3, [r7, #10]
	rtc.hour = raw_data_from_rtc[2];
 8001344:	7abb      	ldrb	r3, [r7, #10]
 8001346:	757b      	strb	r3, [r7, #21]
	rtc.week = BcdToDec(raw_data_from_rtc[3])+1;//add 1 since week range from 0-6
 8001348:	7afb      	ldrb	r3, [r7, #11]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ffb7 	bl	80012be <BcdToDec>
 8001350:	4603      	mov	r3, r0
 8001352:	3301      	adds	r3, #1
 8001354:	b2db      	uxtb	r3, r3
 8001356:	753b      	strb	r3, [r7, #20]
	rtc.day = BcdToDec(raw_data_from_rtc[4]);
 8001358:	7b3b      	ldrb	r3, [r7, #12]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ffaf 	bl	80012be <BcdToDec>
 8001360:	4603      	mov	r3, r0
 8001362:	74fb      	strb	r3, [r7, #19]
	rtc.month = BcdToDec(raw_data_from_rtc[5]);
 8001364:	7b7b      	ldrb	r3, [r7, #13]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ffa9 	bl	80012be <BcdToDec>
 800136c:	4603      	mov	r3, r0
 800136e:	74bb      	strb	r3, [r7, #18]
	rtc.year = (uint16_t) BcdToDec(raw_data_from_rtc[6]);
 8001370:	7bbb      	ldrb	r3, [r7, #14]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ffa3 	bl	80012be <BcdToDec>
 8001378:	4603      	mov	r3, r0
 800137a:	b29b      	uxth	r3, r3
 800137c:	823b      	strh	r3, [r7, #16]
	rtc.year += 2000;
 800137e:	8a3b      	ldrh	r3, [r7, #16]
 8001380:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001384:	b29b      	uxth	r3, r3
 8001386:	823b      	strh	r3, [r7, #16]
		printf("Month: %d\r\n",rtc.month);
		printf("Year: %d\r\n",rtc.year);
	}
	*/
	//Return rtc handler
	return rtc;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	461a      	mov	r2, r3
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	cb03      	ldmia	r3!, {r0, r1}
 8001392:	6010      	str	r0, [r2, #0]
 8001394:	6051      	str	r1, [r2, #4]
}
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200040e0 	.word	0x200040e0

080013a4 <GetRawRTC>:
/*
 * Receive Raw Data from RTC.
 */
void GetRawRTC(I2C_HandleTypeDef *i2c,uint8_t* rawdata)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef I2Cflag;
	I2Cflag = HAL_I2C_Master_Transmit(i2c, RTC_ADDR, RTC_READ_ADDR, 1, HAL_MAX_DELAY);
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2301      	movs	r3, #1
 80013b6:	2200      	movs	r2, #0
 80013b8:	2164      	movs	r1, #100	; 0x64
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f001 fcca 	bl	8002d54 <HAL_I2C_Master_Transmit>
 80013c0:	4603      	mov	r3, r0
 80013c2:	73fb      	strb	r3, [r7, #15]
	{
		//if(DebugLevel>=DEBUG_MODULE){
		//	printf("RTC Module Writing Error\n\r");
		//}
	}
	I2Cflag = HAL_I2C_Master_Receive(i2c, RTC_ADDR, rawdata, RTC_REG_NUM, HAL_MAX_DELAY);
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2307      	movs	r3, #7
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	2164      	movs	r1, #100	; 0x64
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f001 fdbd 	bl	8002f50 <HAL_I2C_Master_Receive>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
			}
			printf("\r\n");
		}
		*/
	}
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_MspInit+0x54>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_MspInit+0x54>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_MspInit+0x54>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_MspInit+0x54>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_MspInit+0x54>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_MspInit+0x54>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	210f      	movs	r1, #15
 8001426:	f06f 0001 	mvn.w	r0, #1
 800142a:	f000 fe71 	bl	8002110 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <HAL_ADC_MspInit+0x7c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d127      	bne.n	80014ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_ADC_MspInit+0x80>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a15      	ldr	r2, [pc, #84]	; (80014bc <HAL_ADC_MspInit+0x80>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_ADC_MspInit+0x80>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_ADC_MspInit+0x80>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_ADC_MspInit+0x80>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_ADC_MspInit+0x80>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = A0_LCD_Pin;
 8001496:	2301      	movs	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A0_LCD_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_ADC_MspInit+0x84>)
 80014aa:	f001 f965 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40012000 	.word	0x40012000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000

080014c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_I2C_MspInit+0x84>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d12c      	bne.n	8001540 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_I2C_MspInit+0x88>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a17      	ldr	r2, [pc, #92]	; (800154c <HAL_I2C_MspInit+0x88>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_I2C_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = RTC_I2C_SCL_Pin|RTC_I2C_SDA_Pin;
 8001502:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001508:	2312      	movs	r3, #18
 800150a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150c:	2301      	movs	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001514:	2304      	movs	r3, #4
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	480c      	ldr	r0, [pc, #48]	; (8001550 <HAL_I2C_MspInit+0x8c>)
 8001520:	f001 f92a 	bl	8002778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_I2C_MspInit+0x88>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_I2C_MspInit+0x88>)
 800152e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001532:	6413      	str	r3, [r2, #64]	; 0x40
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_I2C_MspInit+0x88>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40005400 	.word	0x40005400
 800154c:	40023800 	.word	0x40023800
 8001550:	40020400 	.word	0x40020400

08001554 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_SPI_MspInit+0x84>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d12c      	bne.n	80015d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_SPI_MspInit+0x88>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_SPI_MspInit+0x88>)
 8001580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_SPI_MspInit+0x88>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_SPI_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a10      	ldr	r2, [pc, #64]	; (80015dc <HAL_SPI_MspInit+0x88>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_SPI_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015c0:	2306      	movs	r3, #6
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <HAL_SPI_MspInit+0x8c>)
 80015cc:	f001 f8d4 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40003c00 	.word	0x40003c00
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020800 	.word	0x40020800

080015e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08c      	sub	sp, #48	; 0x30
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a79      	ldr	r2, [pc, #484]	; (80017e8 <HAL_UART_MspInit+0x204>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d163      	bne.n	80016ce <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	4b78      	ldr	r3, [pc, #480]	; (80017ec <HAL_UART_MspInit+0x208>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a77      	ldr	r2, [pc, #476]	; (80017ec <HAL_UART_MspInit+0x208>)
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b75      	ldr	r3, [pc, #468]	; (80017ec <HAL_UART_MspInit+0x208>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	61bb      	str	r3, [r7, #24]
 8001620:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	4b71      	ldr	r3, [pc, #452]	; (80017ec <HAL_UART_MspInit+0x208>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a70      	ldr	r2, [pc, #448]	; (80017ec <HAL_UART_MspInit+0x208>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b6e      	ldr	r3, [pc, #440]	; (80017ec <HAL_UART_MspInit+0x208>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800163e:	230c      	movs	r3, #12
 8001640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800164e:	2307      	movs	r3, #7
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	4865      	ldr	r0, [pc, #404]	; (80017f0 <HAL_UART_MspInit+0x20c>)
 800165a:	f001 f88d 	bl	8002778 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800165e:	4b65      	ldr	r3, [pc, #404]	; (80017f4 <HAL_UART_MspInit+0x210>)
 8001660:	4a65      	ldr	r2, [pc, #404]	; (80017f8 <HAL_UART_MspInit+0x214>)
 8001662:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001664:	4b63      	ldr	r3, [pc, #396]	; (80017f4 <HAL_UART_MspInit+0x210>)
 8001666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800166a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800166c:	4b61      	ldr	r3, [pc, #388]	; (80017f4 <HAL_UART_MspInit+0x210>)
 800166e:	2240      	movs	r2, #64	; 0x40
 8001670:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001672:	4b60      	ldr	r3, [pc, #384]	; (80017f4 <HAL_UART_MspInit+0x210>)
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001678:	4b5e      	ldr	r3, [pc, #376]	; (80017f4 <HAL_UART_MspInit+0x210>)
 800167a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800167e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001680:	4b5c      	ldr	r3, [pc, #368]	; (80017f4 <HAL_UART_MspInit+0x210>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001686:	4b5b      	ldr	r3, [pc, #364]	; (80017f4 <HAL_UART_MspInit+0x210>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800168c:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <HAL_UART_MspInit+0x210>)
 800168e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001692:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001694:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <HAL_UART_MspInit+0x210>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800169a:	4b56      	ldr	r3, [pc, #344]	; (80017f4 <HAL_UART_MspInit+0x210>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016a0:	4854      	ldr	r0, [pc, #336]	; (80017f4 <HAL_UART_MspInit+0x210>)
 80016a2:	f000 fd5f 	bl	8002164 <HAL_DMA_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80016ac:	f7ff fd3a 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a50      	ldr	r2, [pc, #320]	; (80017f4 <HAL_UART_MspInit+0x210>)
 80016b4:	631a      	str	r2, [r3, #48]	; 0x30
 80016b6:	4a4f      	ldr	r2, [pc, #316]	; (80017f4 <HAL_UART_MspInit+0x210>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2105      	movs	r1, #5
 80016c0:	2026      	movs	r0, #38	; 0x26
 80016c2:	f000 fd25 	bl	8002110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016c6:	2026      	movs	r0, #38	; 0x26
 80016c8:	f000 fd3e 	bl	8002148 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80016cc:	e087      	b.n	80017de <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART6)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a4a      	ldr	r2, [pc, #296]	; (80017fc <HAL_UART_MspInit+0x218>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f040 8082 	bne.w	80017de <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <HAL_UART_MspInit+0x208>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a42      	ldr	r2, [pc, #264]	; (80017ec <HAL_UART_MspInit+0x208>)
 80016e4:	f043 0320 	orr.w	r3, r3, #32
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b40      	ldr	r3, [pc, #256]	; (80017ec <HAL_UART_MspInit+0x208>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f003 0320 	and.w	r3, r3, #32
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <HAL_UART_MspInit+0x208>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a3b      	ldr	r2, [pc, #236]	; (80017ec <HAL_UART_MspInit+0x208>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_UART_MspInit+0x208>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_UART_MspInit+0x208>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a34      	ldr	r2, [pc, #208]	; (80017ec <HAL_UART_MspInit+0x208>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b32      	ldr	r3, [pc, #200]	; (80017ec <HAL_UART_MspInit+0x208>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PM2_5_UART6_TX_Pin;
 800172e:	2340      	movs	r3, #64	; 0x40
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800173e:	2308      	movs	r3, #8
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PM2_5_UART6_TX_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	482d      	ldr	r0, [pc, #180]	; (8001800 <HAL_UART_MspInit+0x21c>)
 800174a:	f001 f815 	bl	8002778 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PM2_5_UART6_RX_Pin;
 800174e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001760:	2308      	movs	r3, #8
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PM2_5_UART6_RX_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4821      	ldr	r0, [pc, #132]	; (80017f0 <HAL_UART_MspInit+0x20c>)
 800176c:	f001 f804 	bl	8002778 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_UART_MspInit+0x220>)
 8001772:	4a25      	ldr	r2, [pc, #148]	; (8001808 <HAL_UART_MspInit+0x224>)
 8001774:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_UART_MspInit+0x220>)
 8001778:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800177c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_UART_MspInit+0x220>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <HAL_UART_MspInit+0x220>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_UART_MspInit+0x220>)
 800178c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001790:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001792:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <HAL_UART_MspInit+0x220>)
 8001794:	2200      	movs	r2, #0
 8001796:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_UART_MspInit+0x220>)
 800179a:	2200      	movs	r2, #0
 800179c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800179e:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_UART_MspInit+0x220>)
 80017a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_UART_MspInit+0x220>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_UART_MspInit+0x220>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80017b2:	4814      	ldr	r0, [pc, #80]	; (8001804 <HAL_UART_MspInit+0x220>)
 80017b4:	f000 fcd6 	bl	8002164 <HAL_DMA_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_UART_MspInit+0x1de>
      Error_Handler();
 80017be:	f7ff fcb1 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_UART_MspInit+0x220>)
 80017c6:	635a      	str	r2, [r3, #52]	; 0x34
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <HAL_UART_MspInit+0x220>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2105      	movs	r1, #5
 80017d2:	2047      	movs	r0, #71	; 0x47
 80017d4:	f000 fc9c 	bl	8002110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80017d8:	2047      	movs	r0, #71	; 0x47
 80017da:	f000 fcb5 	bl	8002148 <HAL_NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3730      	adds	r7, #48	; 0x30
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40004400 	.word	0x40004400
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	200041d8 	.word	0x200041d8
 80017f8:	400260a0 	.word	0x400260a0
 80017fc:	40011400 	.word	0x40011400
 8001800:	40020800 	.word	0x40020800
 8001804:	20004074 	.word	0x20004074
 8001808:	40026428 	.word	0x40026428

0800180c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 800181c:	2200      	movs	r2, #0
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	201d      	movs	r0, #29
 8001822:	f000 fc75 	bl	8002110 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8001826:	201d      	movs	r0, #29
 8001828:	f000 fc8e 	bl	8002148 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_InitTick+0xa0>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	4a1d      	ldr	r2, [pc, #116]	; (80018ac <HAL_InitTick+0xa0>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	6413      	str	r3, [r2, #64]	; 0x40
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_InitTick+0xa0>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001848:	f107 0210 	add.w	r2, r7, #16
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f002 fd0a 	bl	800426c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001858:	f002 fce0 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 800185c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001860:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <HAL_InitTick+0xa4>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0c9b      	lsrs	r3, r3, #18
 8001868:	3b01      	subs	r3, #1
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_InitTick+0xa8>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <HAL_InitTick+0xac>)
 8001870:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_InitTick+0xa8>)
 8001874:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001878:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800187a:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_InitTick+0xa8>)
 800187c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_InitTick+0xa8>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_InitTick+0xa8>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800188c:	4809      	ldr	r0, [pc, #36]	; (80018b4 <HAL_InitTick+0xa8>)
 800188e:	f002 fd83 	bl	8004398 <HAL_TIM_Base_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d104      	bne.n	80018a2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001898:	4806      	ldr	r0, [pc, #24]	; (80018b4 <HAL_InitTick+0xa8>)
 800189a:	f002 fdb2 	bl	8004402 <HAL_TIM_Base_Start_IT>
 800189e:	4603      	mov	r3, r0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3730      	adds	r7, #48	; 0x30
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	431bde83 	.word	0x431bde83
 80018b4:	20004300 	.word	0x20004300
 80018b8:	40000400 	.word	0x40000400

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler+0x4>

080018d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <DMA1_Stream6_IRQHandler+0x10>)
 80018f6:	f000 fd05 	bl	8002304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200041d8 	.word	0x200041d8

08001904 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <TIM3_IRQHandler+0x10>)
 800190a:	f002 fd9e 	bl	800444a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20004300 	.word	0x20004300

08001918 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <USART2_IRQHandler+0x10>)
 800191e:	f003 f93b 	bl	8004b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200042bc 	.word	0x200042bc

0800192c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <DMA2_Stream1_IRQHandler+0x10>)
 8001932:	f000 fce7 	bl	8002304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20004074 	.word	0x20004074

08001940 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <USART6_IRQHandler+0x10>)
 8001946:	f003 f927 	bl	8004b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000427c 	.word	0x2000427c

08001954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <SystemInit+0x60>)
 800195a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195e:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <SystemInit+0x60>)
 8001960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <SystemInit+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <SystemInit+0x64>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001974:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <SystemInit+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <SystemInit+0x64>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <SystemInit+0x64>)
 8001980:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001988:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <SystemInit+0x64>)
 800198c:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <SystemInit+0x68>)
 800198e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <SystemInit+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <SystemInit+0x64>)
 8001996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <SystemInit+0x64>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SystemInit+0x60>)
 80019a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019a8:	609a      	str	r2, [r3, #8]
#endif
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00
 80019b8:	40023800 	.word	0x40023800
 80019bc:	24003010 	.word	0x24003010

080019c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019c6:	e003      	b.n	80019d0 <LoopCopyDataInit>

080019c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019ce:	3104      	adds	r1, #4

080019d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019d0:	480b      	ldr	r0, [pc, #44]	; (8001a00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019d8:	d3f6      	bcc.n	80019c8 <CopyDataInit>
  ldr  r2, =_sbss
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019dc:	e002      	b.n	80019e4 <LoopFillZerobss>

080019de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019e0:	f842 3b04 	str.w	r3, [r2], #4

080019e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019e8:	d3f9      	bcc.n	80019de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ea:	f7ff ffb3 	bl	8001954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ee:	f006 fbdb 	bl	80081a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f2:	f7fe ff6f 	bl	80008d4 <main>
  bx  lr    
 80019f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80019fc:	08009710 	.word	0x08009710
  ldr  r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a04:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001a08:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001a0c:	20004348 	.word	0x20004348

08001a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC_IRQHandler>
	...

08001a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <HAL_Init+0x40>)
 8001a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_Init+0x40>)
 8001a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_Init+0x40>)
 8001a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	f000 fb5c 	bl	80020fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff fee2 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a48:	f7ff fccc 	bl	80013e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023c00 	.word	0x40023c00

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000024 	.word	0x20000024
 8001a7c:	20004340 	.word	0x20004340

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20004340 	.word	0x20004340

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_Delay+0x40>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000024 	.word	0x20000024

08001adc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e033      	b.n	8001b5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fc9e 	bl	800143c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d118      	bne.n	8001b4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b22:	f023 0302 	bic.w	r3, r3, #2
 8001b26:	f043 0202 	orr.w	r2, r3, #2
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f93a 	bl	8001da8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f023 0303 	bic.w	r3, r3, #3
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
 8001b4a:	e001      	b.n	8001b50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x1c>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e105      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x228>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b09      	cmp	r3, #9
 8001b8e:	d925      	bls.n	8001bdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68d9      	ldr	r1, [r3, #12]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b1e      	subs	r3, #30
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43da      	mvns	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68d9      	ldr	r1, [r3, #12]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	4603      	mov	r3, r0
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4403      	add	r3, r0
 8001bce:	3b1e      	subs	r3, #30
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	e022      	b.n	8001c22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6919      	ldr	r1, [r3, #16]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6919      	ldr	r1, [r3, #16]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4403      	add	r3, r0
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d824      	bhi.n	8001c74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	3b05      	subs	r3, #5
 8001c3c:	221f      	movs	r2, #31
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	400a      	ands	r2, r1
 8001c4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	3b05      	subs	r3, #5
 8001c66:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
 8001c72:	e04c      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	d824      	bhi.n	8001cc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3b23      	subs	r3, #35	; 0x23
 8001c8e:	221f      	movs	r2, #31
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43da      	mvns	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3b23      	subs	r3, #35	; 0x23
 8001cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc4:	e023      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b41      	subs	r3, #65	; 0x41
 8001cd8:	221f      	movs	r2, #31
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b41      	subs	r3, #65	; 0x41
 8001d02:	fa00 f203 	lsl.w	r2, r0, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <HAL_ADC_ConfigChannel+0x234>)
 8001d10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <HAL_ADC_ConfigChannel+0x238>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d109      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1cc>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b12      	cmp	r3, #18
 8001d22:	d105      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_ADC_ConfigChannel+0x238>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d123      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d003      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x1e6>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b11      	cmp	r3, #17
 8001d48:	d11b      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d111      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_ADC_ConfigChannel+0x23c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <HAL_ADC_ConfigChannel+0x240>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	0c9a      	lsrs	r2, r3, #18
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d74:	e002      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f9      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	40012000 	.word	0x40012000
 8001da0:	2000001c 	.word	0x2000001c
 8001da4:	431bde83 	.word	0x431bde83

08001da8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db0:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <ADC_Init+0x1f0>)
 8001db2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ddc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	021a      	lsls	r2, r3, #8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6899      	ldr	r1, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	4a58      	ldr	r2, [pc, #352]	; (8001f9c <ADC_Init+0x1f4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d022      	beq.n	8001e86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6899      	ldr	r1, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	e00f      	b.n	8001ea6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ea4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0202 	bic.w	r2, r2, #2
 8001eb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
 8001ec0:	005a      	lsls	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ef2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6859      	ldr	r1, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	3b01      	subs	r3, #1
 8001f00:	035a      	lsls	r2, r3, #13
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	e007      	b.n	8001f1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	051a      	lsls	r2, r3, #20
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f5e:	025a      	lsls	r2, r3, #9
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	029a      	lsls	r2, r3, #10
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	609a      	str	r2, [r3, #8]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40012300 	.word	0x40012300
 8001f9c:	0f000001 	.word	0x0f000001

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff4c 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002122:	f7ff ff61 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 8002126:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	6978      	ldr	r0, [r7, #20]
 800212e:	f7ff ffb1 	bl	8002094 <NVIC_EncodePriority>
 8002132:	4602      	mov	r2, r0
 8002134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff80 	bl	8002040 <__NVIC_SetPriority>
}
 8002140:	bf00      	nop
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff54 	bl	8002004 <__NVIC_EnableIRQ>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff fc86 	bl	8001a80 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e099      	b.n	80022b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a0:	e00f      	b.n	80021c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a2:	f7ff fc6d 	bl	8001a80 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d908      	bls.n	80021c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e078      	b.n	80022b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1e8      	bne.n	80021a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_DMA_Init+0x158>)
 80021dc:	4013      	ands	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b04      	cmp	r3, #4
 800221a:	d107      	bne.n	800222c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	4313      	orrs	r3, r2
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f023 0307 	bic.w	r3, r3, #7
 8002242:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	2b04      	cmp	r3, #4
 8002254:	d117      	bne.n	8002286 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fa0b 	bl	8002684 <DMA_CheckFifoParam>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2240      	movs	r2, #64	; 0x40
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002282:	2301      	movs	r3, #1
 8002284:	e016      	b.n	80022b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f9c2 	bl	8002618 <DMA_CalcBaseAndBitshift>
 8002294:	4603      	mov	r3, r0
 8002296:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	223f      	movs	r2, #63	; 0x3f
 800229e:	409a      	lsls	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	f010803f 	.word	0xf010803f

080022c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d004      	beq.n	80022de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e00c      	b.n	80022f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2205      	movs	r2, #5
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0201 	bic.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002310:	4b92      	ldr	r3, [pc, #584]	; (800255c <HAL_DMA_IRQHandler+0x258>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a92      	ldr	r2, [pc, #584]	; (8002560 <HAL_DMA_IRQHandler+0x25c>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0a9b      	lsrs	r3, r3, #10
 800231c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	2208      	movs	r2, #8
 8002330:	409a      	lsls	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d01a      	beq.n	8002370 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0204 	bic.w	r2, r2, #4
 8002356:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	2208      	movs	r2, #8
 800235e:	409a      	lsls	r2, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002368:	f043 0201 	orr.w	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	2201      	movs	r2, #1
 8002376:	409a      	lsls	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d012      	beq.n	80023a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	2201      	movs	r2, #1
 8002394:	409a      	lsls	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	f043 0202 	orr.w	r2, r3, #2
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023aa:	2204      	movs	r2, #4
 80023ac:	409a      	lsls	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d012      	beq.n	80023dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00b      	beq.n	80023dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c8:	2204      	movs	r2, #4
 80023ca:	409a      	lsls	r2, r3
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d4:	f043 0204 	orr.w	r2, r3, #4
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	2210      	movs	r2, #16
 80023e2:	409a      	lsls	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d043      	beq.n	8002474 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d03c      	beq.n	8002474 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fe:	2210      	movs	r2, #16
 8002400:	409a      	lsls	r2, r3
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d018      	beq.n	8002446 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d108      	bne.n	8002434 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d024      	beq.n	8002474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	4798      	blx	r3
 8002432:	e01f      	b.n	8002474 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01b      	beq.n	8002474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
 8002444:	e016      	b.n	8002474 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d107      	bne.n	8002464 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0208 	bic.w	r2, r2, #8
 8002462:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	2220      	movs	r2, #32
 800247a:	409a      	lsls	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 808e 	beq.w	80025a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0310 	and.w	r3, r3, #16
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8086 	beq.w	80025a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	2220      	movs	r2, #32
 800249c:	409a      	lsls	r2, r3
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d136      	bne.n	800251c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0216 	bic.w	r2, r2, #22
 80024bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <HAL_DMA_IRQHandler+0x1da>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0208 	bic.w	r2, r2, #8
 80024ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	223f      	movs	r2, #63	; 0x3f
 80024f4:	409a      	lsls	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250e:	2b00      	cmp	r3, #0
 8002510:	d07d      	beq.n	800260e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	4798      	blx	r3
        }
        return;
 800251a:	e078      	b.n	800260e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01c      	beq.n	8002564 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d108      	bne.n	800254a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	2b00      	cmp	r3, #0
 800253e:	d030      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
 8002548:	e02b      	b.n	80025a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d027      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
 800255a:	e022      	b.n	80025a2 <HAL_DMA_IRQHandler+0x29e>
 800255c:	2000001c 	.word	0x2000001c
 8002560:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0210 	bic.w	r2, r2, #16
 8002580:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d032      	beq.n	8002610 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d022      	beq.n	80025fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2205      	movs	r2, #5
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0201 	bic.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3301      	adds	r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d307      	bcc.n	80025ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f2      	bne.n	80025ce <HAL_DMA_IRQHandler+0x2ca>
 80025e8:	e000      	b.n	80025ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80025ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4798      	blx	r3
 800260c:	e000      	b.n	8002610 <HAL_DMA_IRQHandler+0x30c>
        return;
 800260e:	bf00      	nop
    }
  }
}
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop

08002618 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	3b10      	subs	r3, #16
 8002628:	4a14      	ldr	r2, [pc, #80]	; (800267c <DMA_CalcBaseAndBitshift+0x64>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002632:	4a13      	ldr	r2, [pc, #76]	; (8002680 <DMA_CalcBaseAndBitshift+0x68>)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d909      	bls.n	800265a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800264e:	f023 0303 	bic.w	r3, r3, #3
 8002652:	1d1a      	adds	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	659a      	str	r2, [r3, #88]	; 0x58
 8002658:	e007      	b.n	800266a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	aaaaaaab 	.word	0xaaaaaaab
 8002680:	08009660 	.word	0x08009660

08002684 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11f      	bne.n	80026de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d855      	bhi.n	8002750 <DMA_CheckFifoParam+0xcc>
 80026a4:	a201      	add	r2, pc, #4	; (adr r2, 80026ac <DMA_CheckFifoParam+0x28>)
 80026a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026aa:	bf00      	nop
 80026ac:	080026bd 	.word	0x080026bd
 80026b0:	080026cf 	.word	0x080026cf
 80026b4:	080026bd 	.word	0x080026bd
 80026b8:	08002751 	.word	0x08002751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d045      	beq.n	8002754 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026cc:	e042      	b.n	8002754 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026d6:	d13f      	bne.n	8002758 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026dc:	e03c      	b.n	8002758 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e6:	d121      	bne.n	800272c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d836      	bhi.n	800275c <DMA_CheckFifoParam+0xd8>
 80026ee:	a201      	add	r2, pc, #4	; (adr r2, 80026f4 <DMA_CheckFifoParam+0x70>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	08002705 	.word	0x08002705
 80026f8:	0800270b 	.word	0x0800270b
 80026fc:	08002705 	.word	0x08002705
 8002700:	0800271d 	.word	0x0800271d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      break;
 8002708:	e02f      	b.n	800276a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d024      	beq.n	8002760 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271a:	e021      	b.n	8002760 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002724:	d11e      	bne.n	8002764 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800272a:	e01b      	b.n	8002764 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d902      	bls.n	8002738 <DMA_CheckFifoParam+0xb4>
 8002732:	2b03      	cmp	r3, #3
 8002734:	d003      	beq.n	800273e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002736:	e018      	b.n	800276a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
      break;
 800273c:	e015      	b.n	800276a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00e      	beq.n	8002768 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
      break;
 800274e:	e00b      	b.n	8002768 <DMA_CheckFifoParam+0xe4>
      break;
 8002750:	bf00      	nop
 8002752:	e00a      	b.n	800276a <DMA_CheckFifoParam+0xe6>
      break;
 8002754:	bf00      	nop
 8002756:	e008      	b.n	800276a <DMA_CheckFifoParam+0xe6>
      break;
 8002758:	bf00      	nop
 800275a:	e006      	b.n	800276a <DMA_CheckFifoParam+0xe6>
      break;
 800275c:	bf00      	nop
 800275e:	e004      	b.n	800276a <DMA_CheckFifoParam+0xe6>
      break;
 8002760:	bf00      	nop
 8002762:	e002      	b.n	800276a <DMA_CheckFifoParam+0xe6>
      break;   
 8002764:	bf00      	nop
 8002766:	e000      	b.n	800276a <DMA_CheckFifoParam+0xe6>
      break;
 8002768:	bf00      	nop
    }
  } 
  
  return status; 
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	e159      	b.n	8002a48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002794:	2201      	movs	r2, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	f040 8148 	bne.w	8002a42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d00b      	beq.n	80027d2 <HAL_GPIO_Init+0x5a>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d007      	beq.n	80027d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027c6:	2b11      	cmp	r3, #17
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b12      	cmp	r3, #18
 80027d0:	d130      	bne.n	8002834 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	2203      	movs	r2, #3
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002808:	2201      	movs	r2, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f003 0201 	and.w	r2, r3, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	2203      	movs	r2, #3
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0xfc>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b12      	cmp	r3, #18
 8002872:	d123      	bne.n	80028bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	220f      	movs	r2, #15
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	08da      	lsrs	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3208      	adds	r2, #8
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0203 	and.w	r2, r3, #3
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a2 	beq.w	8002a42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b56      	ldr	r3, [pc, #344]	; (8002a5c <HAL_GPIO_Init+0x2e4>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a55      	ldr	r2, [pc, #340]	; (8002a5c <HAL_GPIO_Init+0x2e4>)
 8002908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <HAL_GPIO_Init+0x2e4>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291a:	4a51      	ldr	r2, [pc, #324]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a48      	ldr	r2, [pc, #288]	; (8002a64 <HAL_GPIO_Init+0x2ec>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_GPIO_Init+0x202>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a47      	ldr	r2, [pc, #284]	; (8002a68 <HAL_GPIO_Init+0x2f0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x1fe>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a46      	ldr	r2, [pc, #280]	; (8002a6c <HAL_GPIO_Init+0x2f4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x1fa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a45      	ldr	r2, [pc, #276]	; (8002a70 <HAL_GPIO_Init+0x2f8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x1f6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a44      	ldr	r2, [pc, #272]	; (8002a74 <HAL_GPIO_Init+0x2fc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x1f2>
 8002966:	2304      	movs	r3, #4
 8002968:	e008      	b.n	800297c <HAL_GPIO_Init+0x204>
 800296a:	2307      	movs	r3, #7
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x204>
 800296e:	2303      	movs	r3, #3
 8002970:	e004      	b.n	800297c <HAL_GPIO_Init+0x204>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_Init+0x204>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x204>
 800297a:	2300      	movs	r3, #0
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f002 0203 	and.w	r2, r2, #3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4093      	lsls	r3, r2
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298c:	4934      	ldr	r1, [pc, #208]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800299a:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <HAL_GPIO_Init+0x300>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029be:	4a2e      	ldr	r2, [pc, #184]	; (8002a78 <HAL_GPIO_Init+0x300>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029c4:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <HAL_GPIO_Init+0x300>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e8:	4a23      	ldr	r2, [pc, #140]	; (8002a78 <HAL_GPIO_Init+0x300>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_GPIO_Init+0x300>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a12:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <HAL_GPIO_Init+0x300>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a18:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <HAL_GPIO_Init+0x300>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a3c:	4a0e      	ldr	r2, [pc, #56]	; (8002a78 <HAL_GPIO_Init+0x300>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3301      	adds	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	f67f aea2 	bls.w	8002794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	3724      	adds	r7, #36	; 0x24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40013800 	.word	0x40013800
 8002a64:	40020000 	.word	0x40020000
 8002a68:	40020400 	.word	0x40020400
 8002a6c:	40020800 	.word	0x40020800
 8002a70:	40020c00 	.word	0x40020c00
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40013c00 	.word	0x40013c00

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a98:	e003      	b.n	8002aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	887b      	ldrh	r3, [r7, #2]
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d104      	bne.n	8002ad2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	041a      	lsls	r2, r3, #16
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002ad0:	e002      	b.n	8002ad8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	619a      	str	r2, [r3, #24]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e11f      	b.n	8002d36 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe fcda 	bl	80014c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b48:	f001 fb68 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 8002b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a7b      	ldr	r2, [pc, #492]	; (8002d40 <HAL_I2C_Init+0x25c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d807      	bhi.n	8002b68 <HAL_I2C_Init+0x84>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4a7a      	ldr	r2, [pc, #488]	; (8002d44 <HAL_I2C_Init+0x260>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	bf94      	ite	ls
 8002b60:	2301      	movls	r3, #1
 8002b62:	2300      	movhi	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e006      	b.n	8002b76 <HAL_I2C_Init+0x92>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a77      	ldr	r2, [pc, #476]	; (8002d48 <HAL_I2C_Init+0x264>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	bf94      	ite	ls
 8002b70:	2301      	movls	r3, #1
 8002b72:	2300      	movhi	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0db      	b.n	8002d36 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a72      	ldr	r2, [pc, #456]	; (8002d4c <HAL_I2C_Init+0x268>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0c9b      	lsrs	r3, r3, #18
 8002b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a64      	ldr	r2, [pc, #400]	; (8002d40 <HAL_I2C_Init+0x25c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d802      	bhi.n	8002bb8 <HAL_I2C_Init+0xd4>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	e009      	b.n	8002bcc <HAL_I2C_Init+0xe8>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	4a63      	ldr	r2, [pc, #396]	; (8002d50 <HAL_I2C_Init+0x26c>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	3301      	adds	r3, #1
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4956      	ldr	r1, [pc, #344]	; (8002d40 <HAL_I2C_Init+0x25c>)
 8002be8:	428b      	cmp	r3, r1
 8002bea:	d80d      	bhi.n	8002c08 <HAL_I2C_Init+0x124>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e59      	subs	r1, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	bf38      	it	cc
 8002c04:	2304      	movcc	r3, #4
 8002c06:	e04f      	b.n	8002ca8 <HAL_I2C_Init+0x1c4>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d111      	bne.n	8002c34 <HAL_I2C_Init+0x150>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1e58      	subs	r0, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	440b      	add	r3, r1
 8002c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e012      	b.n	8002c5a <HAL_I2C_Init+0x176>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1e58      	subs	r0, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	0099      	lsls	r1, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Init+0x17e>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e022      	b.n	8002ca8 <HAL_I2C_Init+0x1c4>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10e      	bne.n	8002c88 <HAL_I2C_Init+0x1a4>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1e58      	subs	r0, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6859      	ldr	r1, [r3, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	440b      	add	r3, r1
 8002c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c86:	e00f      	b.n	8002ca8 <HAL_I2C_Init+0x1c4>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1e58      	subs	r0, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	0099      	lsls	r1, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	6809      	ldr	r1, [r1, #0]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6911      	ldr	r1, [r2, #16]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68d2      	ldr	r2, [r2, #12]
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	000186a0 	.word	0x000186a0
 8002d44:	001e847f 	.word	0x001e847f
 8002d48:	003d08ff 	.word	0x003d08ff
 8002d4c:	431bde83 	.word	0x431bde83
 8002d50:	10624dd3 	.word	0x10624dd3

08002d54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	460b      	mov	r3, r1
 8002d62:	817b      	strh	r3, [r7, #10]
 8002d64:	4613      	mov	r3, r2
 8002d66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d68:	f7fe fe8a 	bl	8001a80 <HAL_GetTick>
 8002d6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	f040 80e0 	bne.w	8002f3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	2319      	movs	r3, #25
 8002d82:	2201      	movs	r2, #1
 8002d84:	4970      	ldr	r1, [pc, #448]	; (8002f48 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 fc56 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
 8002d94:	e0d3      	b.n	8002f3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_I2C_Master_Transmit+0x50>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e0cc      	b.n	8002f3e <HAL_I2C_Master_Transmit+0x1ea>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d007      	beq.n	8002dca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0201 	orr.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2221      	movs	r2, #33	; 0x21
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2210      	movs	r2, #16
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	893a      	ldrh	r2, [r7, #8]
 8002dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4a50      	ldr	r2, [pc, #320]	; (8002f4c <HAL_I2C_Master_Transmit+0x1f8>)
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e0c:	8979      	ldrh	r1, [r7, #10]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fac2 	bl	800339c <I2C_MasterRequestWrite>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e08d      	b.n	8002f3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e38:	e066      	b.n	8002f08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	6a39      	ldr	r1, [r7, #32]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fcd0 	bl	80037e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00d      	beq.n	8002e66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d107      	bne.n	8002e62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e06b      	b.n	8002f3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d11b      	bne.n	8002edc <HAL_I2C_Master_Transmit+0x188>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d017      	beq.n	8002edc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	6a39      	ldr	r1, [r7, #32]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fcc0 	bl	8003866 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00d      	beq.n	8002f08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d107      	bne.n	8002f04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e01a      	b.n	8002f3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d194      	bne.n	8002e3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	00100002 	.word	0x00100002
 8002f4c:	ffff0000 	.word	0xffff0000

08002f50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08c      	sub	sp, #48	; 0x30
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	817b      	strh	r3, [r7, #10]
 8002f60:	4613      	mov	r3, r2
 8002f62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f64:	f7fe fd8c 	bl	8001a80 <HAL_GetTick>
 8002f68:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	f040 820b 	bne.w	800338e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2319      	movs	r3, #25
 8002f7e:	2201      	movs	r2, #1
 8002f80:	497c      	ldr	r1, [pc, #496]	; (8003174 <HAL_I2C_Master_Receive+0x224>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fb58 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e1fe      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_I2C_Master_Receive+0x50>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e1f7      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d007      	beq.n	8002fc6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2222      	movs	r2, #34	; 0x22
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	893a      	ldrh	r2, [r7, #8]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a5c      	ldr	r2, [pc, #368]	; (8003178 <HAL_I2C_Master_Receive+0x228>)
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003008:	8979      	ldrh	r1, [r7, #10]
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fa46 	bl	80034a0 <I2C_MasterRequestRead>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e1b8      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	2b00      	cmp	r3, #0
 8003024:	d113      	bne.n	800304e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003026:	2300      	movs	r3, #0
 8003028:	623b      	str	r3, [r7, #32]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	623b      	str	r3, [r7, #32]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	e18c      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003052:	2b01      	cmp	r3, #1
 8003054:	d11b      	bne.n	800308e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003064:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e16c      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	2b02      	cmp	r3, #2
 8003094:	d11b      	bne.n	80030ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	e14c      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030f4:	e138      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	f200 80f1 	bhi.w	80032e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	2b01      	cmp	r3, #1
 8003106:	d123      	bne.n	8003150 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fbeb 	bl	80038e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e139      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800314e:	e10b      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	2b02      	cmp	r3, #2
 8003156:	d14e      	bne.n	80031f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	2200      	movs	r2, #0
 8003160:	4906      	ldr	r1, [pc, #24]	; (800317c <HAL_I2C_Master_Receive+0x22c>)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fa68 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e10e      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
 8003172:	bf00      	nop
 8003174:	00100002 	.word	0x00100002
 8003178:	ffff0000 	.word	0xffff0000
 800317c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031f4:	e0b8      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	2200      	movs	r2, #0
 80031fe:	4966      	ldr	r1, [pc, #408]	; (8003398 <HAL_I2C_Master_Receive+0x448>)
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fa19 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0bf      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	2200      	movs	r2, #0
 800325a:	494f      	ldr	r1, [pc, #316]	; (8003398 <HAL_I2C_Master_Receive+0x448>)
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f9eb 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e091      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032e0:	e042      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fafe 	bl	80038e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e04c      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b04      	cmp	r3, #4
 8003334:	d118      	bne.n	8003368 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	f47f aec2 	bne.w	80030f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	3728      	adds	r7, #40	; 0x28
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	00010004 	.word	0x00010004

0800339c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	460b      	mov	r3, r1
 80033aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d006      	beq.n	80033c6 <I2C_MasterRequestWrite+0x2a>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d003      	beq.n	80033c6 <I2C_MasterRequestWrite+0x2a>
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033c4:	d108      	bne.n	80033d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e00b      	b.n	80033f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	2b12      	cmp	r3, #18
 80033de:	d107      	bne.n	80033f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f91b 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00c      	beq.n	8003422 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e035      	b.n	800348e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800342a:	d108      	bne.n	800343e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800342c:	897b      	ldrh	r3, [r7, #10]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800343a:	611a      	str	r2, [r3, #16]
 800343c:	e01b      	b.n	8003476 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800343e:	897b      	ldrh	r3, [r7, #10]
 8003440:	11db      	asrs	r3, r3, #7
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f003 0306 	and.w	r3, r3, #6
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f063 030f 	orn	r3, r3, #15
 800344e:	b2da      	uxtb	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	490f      	ldr	r1, [pc, #60]	; (8003498 <I2C_MasterRequestWrite+0xfc>)
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f942 	bl	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e010      	b.n	800348e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800346c:	897b      	ldrh	r3, [r7, #10]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4908      	ldr	r1, [pc, #32]	; (800349c <I2C_MasterRequestWrite+0x100>)
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f932 	bl	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	00010008 	.word	0x00010008
 800349c:	00010002 	.word	0x00010002

080034a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	460b      	mov	r3, r1
 80034ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d006      	beq.n	80034da <I2C_MasterRequestRead+0x3a>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d003      	beq.n	80034da <I2C_MasterRequestRead+0x3a>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034d8:	d108      	bne.n	80034ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e00b      	b.n	8003504 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	2b11      	cmp	r3, #17
 80034f2:	d107      	bne.n	8003504 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f891 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00c      	beq.n	8003536 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e078      	b.n	8003628 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800353e:	d108      	bne.n	8003552 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003540:	897b      	ldrh	r3, [r7, #10]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	611a      	str	r2, [r3, #16]
 8003550:	e05e      	b.n	8003610 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003552:	897b      	ldrh	r3, [r7, #10]
 8003554:	11db      	asrs	r3, r3, #7
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f003 0306 	and.w	r3, r3, #6
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f063 030f 	orn	r3, r3, #15
 8003562:	b2da      	uxtb	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4930      	ldr	r1, [pc, #192]	; (8003630 <I2C_MasterRequestRead+0x190>)
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f8b8 	bl	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e053      	b.n	8003628 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003580:	897b      	ldrh	r3, [r7, #10]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	4929      	ldr	r1, [pc, #164]	; (8003634 <I2C_MasterRequestRead+0x194>)
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f8a8 	bl	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e043      	b.n	8003628 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c4:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f830 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00c      	beq.n	80035f8 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e017      	b.n	8003628 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80035f8:	897b      	ldrh	r3, [r7, #10]
 80035fa:	11db      	asrs	r3, r3, #7
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f003 0306 	and.w	r3, r3, #6
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f063 030e 	orn	r3, r3, #14
 8003608:	b2da      	uxtb	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	4907      	ldr	r1, [pc, #28]	; (8003634 <I2C_MasterRequestRead+0x194>)
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f865 	bl	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	00010008 	.word	0x00010008
 8003634:	00010002 	.word	0x00010002

08003638 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003648:	e025      	b.n	8003696 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d021      	beq.n	8003696 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fe fa15 	bl	8001a80 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d116      	bne.n	8003696 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f043 0220 	orr.w	r2, r3, #32
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e023      	b.n	80036de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d10d      	bne.n	80036bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bf0c      	ite	eq
 80036b2:	2301      	moveq	r3, #1
 80036b4:	2300      	movne	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	e00c      	b.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4013      	ands	r3, r2
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf0c      	ite	eq
 80036ce:	2301      	moveq	r3, #1
 80036d0:	2300      	movne	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d0b6      	beq.n	800364a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036f4:	e051      	b.n	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003704:	d123      	bne.n	800374e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003714:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800371e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f043 0204 	orr.w	r2, r3, #4
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e046      	b.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003754:	d021      	beq.n	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003756:	f7fe f993 	bl	8001a80 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d302      	bcc.n	800376c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d116      	bne.n	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e020      	b.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d10c      	bne.n	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bf14      	ite	ne
 80037b6:	2301      	movne	r3, #1
 80037b8:	2300      	moveq	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	e00b      	b.n	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	43da      	mvns	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4013      	ands	r3, r2
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf14      	ite	ne
 80037d0:	2301      	movne	r3, #1
 80037d2:	2300      	moveq	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d18d      	bne.n	80036f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f0:	e02d      	b.n	800384e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f8ce 	bl	8003994 <I2C_IsAcknowledgeFailed>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e02d      	b.n	800385e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d021      	beq.n	800384e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fe f939 	bl	8001a80 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d116      	bne.n	800384e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e007      	b.n	800385e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003858:	2b80      	cmp	r3, #128	; 0x80
 800385a:	d1ca      	bne.n	80037f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003872:	e02d      	b.n	80038d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f88d 	bl	8003994 <I2C_IsAcknowledgeFailed>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e02d      	b.n	80038e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388a:	d021      	beq.n	80038d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388c:	f7fe f8f8 	bl	8001a80 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	429a      	cmp	r2, r3
 800389a:	d302      	bcc.n	80038a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d116      	bne.n	80038d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f043 0220 	orr.w	r2, r3, #32
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e007      	b.n	80038e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d1ca      	bne.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038f4:	e042      	b.n	800397c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b10      	cmp	r3, #16
 8003902:	d119      	bne.n	8003938 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0210 	mvn.w	r2, #16
 800390c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e029      	b.n	800398c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003938:	f7fe f8a2 	bl	8001a80 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	429a      	cmp	r2, r3
 8003946:	d302      	bcc.n	800394e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d116      	bne.n	800397c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	f043 0220 	orr.w	r2, r3, #32
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e007      	b.n	800398c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	2b40      	cmp	r3, #64	; 0x40
 8003988:	d1b5      	bne.n	80038f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039aa:	d11b      	bne.n	80039e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f043 0204 	orr.w	r2, r3, #4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e25b      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d075      	beq.n	8003afe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a12:	4ba3      	ldr	r3, [pc, #652]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d00c      	beq.n	8003a38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1e:	4ba0      	ldr	r3, [pc, #640]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d112      	bne.n	8003a50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a2a:	4b9d      	ldr	r3, [pc, #628]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a36:	d10b      	bne.n	8003a50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a38:	4b99      	ldr	r3, [pc, #612]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d05b      	beq.n	8003afc <HAL_RCC_OscConfig+0x108>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d157      	bne.n	8003afc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e236      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a58:	d106      	bne.n	8003a68 <HAL_RCC_OscConfig+0x74>
 8003a5a:	4b91      	ldr	r3, [pc, #580]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a90      	ldr	r2, [pc, #576]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	e01d      	b.n	8003aa4 <HAL_RCC_OscConfig+0xb0>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x98>
 8003a72:	4b8b      	ldr	r3, [pc, #556]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a8a      	ldr	r2, [pc, #552]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b88      	ldr	r3, [pc, #544]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a87      	ldr	r2, [pc, #540]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e00b      	b.n	8003aa4 <HAL_RCC_OscConfig+0xb0>
 8003a8c:	4b84      	ldr	r3, [pc, #528]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a83      	ldr	r2, [pc, #524]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	4b81      	ldr	r3, [pc, #516]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a80      	ldr	r2, [pc, #512]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d013      	beq.n	8003ad4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fd ffe8 	bl	8001a80 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7fd ffe4 	bl	8001a80 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e1fb      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac6:	4b76      	ldr	r3, [pc, #472]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0xc0>
 8003ad2:	e014      	b.n	8003afe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fd ffd4 	bl	8001a80 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003adc:	f7fd ffd0 	bl	8001a80 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e1e7      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aee:	4b6c      	ldr	r3, [pc, #432]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0xe8>
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d063      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b0a:	4b65      	ldr	r3, [pc, #404]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b16:	4b62      	ldr	r3, [pc, #392]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d11c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b22:	4b5f      	ldr	r3, [pc, #380]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d116      	bne.n	8003b5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2e:	4b5c      	ldr	r3, [pc, #368]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_RCC_OscConfig+0x152>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d001      	beq.n	8003b46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e1bb      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b46:	4b56      	ldr	r3, [pc, #344]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4952      	ldr	r1, [pc, #328]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5a:	e03a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b64:	4b4f      	ldr	r3, [pc, #316]	; (8003ca4 <HAL_RCC_OscConfig+0x2b0>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fd ff89 	bl	8001a80 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b72:	f7fd ff85 	bl	8001a80 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e19c      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b84:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b90:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4940      	ldr	r1, [pc, #256]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]
 8003ba4:	e015      	b.n	8003bd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba6:	4b3f      	ldr	r3, [pc, #252]	; (8003ca4 <HAL_RCC_OscConfig+0x2b0>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fd ff68 	bl	8001a80 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb4:	f7fd ff64 	bl	8001a80 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e17b      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc6:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d030      	beq.n	8003c40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d016      	beq.n	8003c14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be6:	4b30      	ldr	r3, [pc, #192]	; (8003ca8 <HAL_RCC_OscConfig+0x2b4>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bec:	f7fd ff48 	bl	8001a80 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf4:	f7fd ff44 	bl	8001a80 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e15b      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c06:	4b26      	ldr	r3, [pc, #152]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x200>
 8003c12:	e015      	b.n	8003c40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c14:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_RCC_OscConfig+0x2b4>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1a:	f7fd ff31 	bl	8001a80 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c22:	f7fd ff2d 	bl	8001a80 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e144      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80a0 	beq.w	8003d8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c52:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10f      	bne.n	8003c7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	4a0e      	ldr	r2, [pc, #56]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_OscConfig+0x2b8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d121      	bne.n	8003cce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <HAL_RCC_OscConfig+0x2b8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a07      	ldr	r2, [pc, #28]	; (8003cac <HAL_RCC_OscConfig+0x2b8>)
 8003c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c96:	f7fd fef3 	bl	8001a80 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9c:	e011      	b.n	8003cc2 <HAL_RCC_OscConfig+0x2ce>
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	42470000 	.word	0x42470000
 8003ca8:	42470e80 	.word	0x42470e80
 8003cac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb0:	f7fd fee6 	bl	8001a80 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e0fd      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc2:	4b81      	ldr	r3, [pc, #516]	; (8003ec8 <HAL_RCC_OscConfig+0x4d4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d106      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x2f0>
 8003cd6:	4b7d      	ldr	r3, [pc, #500]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	4a7c      	ldr	r2, [pc, #496]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce2:	e01c      	b.n	8003d1e <HAL_RCC_OscConfig+0x32a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	d10c      	bne.n	8003d06 <HAL_RCC_OscConfig+0x312>
 8003cec:	4b77      	ldr	r3, [pc, #476]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a76      	ldr	r2, [pc, #472]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003cf2:	f043 0304 	orr.w	r3, r3, #4
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf8:	4b74      	ldr	r3, [pc, #464]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfc:	4a73      	ldr	r2, [pc, #460]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6713      	str	r3, [r2, #112]	; 0x70
 8003d04:	e00b      	b.n	8003d1e <HAL_RCC_OscConfig+0x32a>
 8003d06:	4b71      	ldr	r3, [pc, #452]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	4a70      	ldr	r2, [pc, #448]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	6713      	str	r3, [r2, #112]	; 0x70
 8003d12:	4b6e      	ldr	r3, [pc, #440]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	4a6d      	ldr	r2, [pc, #436]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003d18:	f023 0304 	bic.w	r3, r3, #4
 8003d1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d015      	beq.n	8003d52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d26:	f7fd feab 	bl	8001a80 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2e:	f7fd fea7 	bl	8001a80 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e0bc      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d44:	4b61      	ldr	r3, [pc, #388]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ee      	beq.n	8003d2e <HAL_RCC_OscConfig+0x33a>
 8003d50:	e014      	b.n	8003d7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d52:	f7fd fe95 	bl	8001a80 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d5a:	f7fd fe91 	bl	8001a80 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e0a6      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d70:	4b56      	ldr	r3, [pc, #344]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ee      	bne.n	8003d5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d105      	bne.n	8003d8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d82:	4b52      	ldr	r3, [pc, #328]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	4a51      	ldr	r2, [pc, #324]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8092 	beq.w	8003ebc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d98:	4b4c      	ldr	r3, [pc, #304]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d05c      	beq.n	8003e5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d141      	bne.n	8003e30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dac:	4b48      	ldr	r3, [pc, #288]	; (8003ed0 <HAL_RCC_OscConfig+0x4dc>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fd fe65 	bl	8001a80 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fd fe61 	bl	8001a80 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e078      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	019b      	lsls	r3, r3, #6
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	3b01      	subs	r3, #1
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	061b      	lsls	r3, r3, #24
 8003dfc:	4933      	ldr	r1, [pc, #204]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e02:	4b33      	ldr	r3, [pc, #204]	; (8003ed0 <HAL_RCC_OscConfig+0x4dc>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fd fe3a 	bl	8001a80 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fd fe36 	bl	8001a80 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e04d      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e22:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0x41c>
 8003e2e:	e045      	b.n	8003ebc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e30:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <HAL_RCC_OscConfig+0x4dc>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e36:	f7fd fe23 	bl	8001a80 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3e:	f7fd fe1f 	bl	8001a80 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e036      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e50:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f0      	bne.n	8003e3e <HAL_RCC_OscConfig+0x44a>
 8003e5c:	e02e      	b.n	8003ebc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e029      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <HAL_RCC_OscConfig+0x4d8>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d11c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d115      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e92:	4013      	ands	r3, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d10d      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d106      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	42470060 	.word	0x42470060

08003ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0cc      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b68      	ldr	r3, [pc, #416]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d90c      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b65      	ldr	r3, [pc, #404]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b63      	ldr	r3, [pc, #396]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0b8      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	4b59      	ldr	r3, [pc, #356]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a58      	ldr	r2, [pc, #352]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b50      	ldr	r3, [pc, #320]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	494d      	ldr	r1, [pc, #308]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d044      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d119      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e06f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e067      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4934      	ldr	r1, [pc, #208]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc4:	f7fd fd5c 	bl	8001a80 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fcc:	f7fd fd58 	bl	8001a80 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e04f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 020c 	and.w	r2, r3, #12
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1eb      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d20c      	bcs.n	800401c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4916      	ldr	r1, [pc, #88]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	490e      	ldr	r1, [pc, #56]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405a:	f000 f821 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 800405e:	4601      	mov	r1, r0
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 800406c:	5cd3      	ldrb	r3, [r2, r3]
 800406e:	fa21 f303 	lsr.w	r3, r1, r3
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fd fbc6 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023c00 	.word	0x40023c00
 8004090:	40023800 	.word	0x40023800
 8004094:	08009648 	.word	0x08009648
 8004098:	2000001c 	.word	0x2000001c
 800409c:	20000020 	.word	0x20000020

080040a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	607b      	str	r3, [r7, #4]
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	2300      	movs	r3, #0
 80040b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b6:	4b50      	ldr	r3, [pc, #320]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d007      	beq.n	80040d2 <HAL_RCC_GetSysClockFreq+0x32>
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d008      	beq.n	80040d8 <HAL_RCC_GetSysClockFreq+0x38>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f040 808d 	bne.w	80041e6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040cc:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <HAL_RCC_GetSysClockFreq+0x15c>)
 80040ce:	60bb      	str	r3, [r7, #8]
       break;
 80040d0:	e08c      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040d2:	4b4b      	ldr	r3, [pc, #300]	; (8004200 <HAL_RCC_GetSysClockFreq+0x160>)
 80040d4:	60bb      	str	r3, [r7, #8]
      break;
 80040d6:	e089      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040d8:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040e2:	4b45      	ldr	r3, [pc, #276]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d023      	beq.n	8004136 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ee:	4b42      	ldr	r3, [pc, #264]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	099b      	lsrs	r3, r3, #6
 80040f4:	f04f 0400 	mov.w	r4, #0
 80040f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	ea03 0501 	and.w	r5, r3, r1
 8004104:	ea04 0602 	and.w	r6, r4, r2
 8004108:	4a3d      	ldr	r2, [pc, #244]	; (8004200 <HAL_RCC_GetSysClockFreq+0x160>)
 800410a:	fb02 f106 	mul.w	r1, r2, r6
 800410e:	2200      	movs	r2, #0
 8004110:	fb02 f205 	mul.w	r2, r2, r5
 8004114:	440a      	add	r2, r1
 8004116:	493a      	ldr	r1, [pc, #232]	; (8004200 <HAL_RCC_GetSysClockFreq+0x160>)
 8004118:	fba5 0101 	umull	r0, r1, r5, r1
 800411c:	1853      	adds	r3, r2, r1
 800411e:	4619      	mov	r1, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f04f 0400 	mov.w	r4, #0
 8004126:	461a      	mov	r2, r3
 8004128:	4623      	mov	r3, r4
 800412a:	f7fc f8b1 	bl	8000290 <__aeabi_uldivmod>
 800412e:	4603      	mov	r3, r0
 8004130:	460c      	mov	r4, r1
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e049      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004136:	4b30      	ldr	r3, [pc, #192]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	099b      	lsrs	r3, r3, #6
 800413c:	f04f 0400 	mov.w	r4, #0
 8004140:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	ea03 0501 	and.w	r5, r3, r1
 800414c:	ea04 0602 	and.w	r6, r4, r2
 8004150:	4629      	mov	r1, r5
 8004152:	4632      	mov	r2, r6
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	f04f 0400 	mov.w	r4, #0
 800415c:	0154      	lsls	r4, r2, #5
 800415e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004162:	014b      	lsls	r3, r1, #5
 8004164:	4619      	mov	r1, r3
 8004166:	4622      	mov	r2, r4
 8004168:	1b49      	subs	r1, r1, r5
 800416a:	eb62 0206 	sbc.w	r2, r2, r6
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	f04f 0400 	mov.w	r4, #0
 8004176:	0194      	lsls	r4, r2, #6
 8004178:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800417c:	018b      	lsls	r3, r1, #6
 800417e:	1a5b      	subs	r3, r3, r1
 8004180:	eb64 0402 	sbc.w	r4, r4, r2
 8004184:	f04f 0100 	mov.w	r1, #0
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	00e2      	lsls	r2, r4, #3
 800418e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004192:	00d9      	lsls	r1, r3, #3
 8004194:	460b      	mov	r3, r1
 8004196:	4614      	mov	r4, r2
 8004198:	195b      	adds	r3, r3, r5
 800419a:	eb44 0406 	adc.w	r4, r4, r6
 800419e:	f04f 0100 	mov.w	r1, #0
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	02a2      	lsls	r2, r4, #10
 80041a8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041ac:	0299      	lsls	r1, r3, #10
 80041ae:	460b      	mov	r3, r1
 80041b0:	4614      	mov	r4, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	4621      	mov	r1, r4
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f04f 0400 	mov.w	r4, #0
 80041bc:	461a      	mov	r2, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	f7fc f866 	bl	8000290 <__aeabi_uldivmod>
 80041c4:	4603      	mov	r3, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041ca:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	0c1b      	lsrs	r3, r3, #16
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	3301      	adds	r3, #1
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e2:	60bb      	str	r3, [r7, #8]
      break;
 80041e4:	e002      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_RCC_GetSysClockFreq+0x15c>)
 80041e8:	60bb      	str	r3, [r7, #8]
      break;
 80041ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ec:	68bb      	ldr	r3, [r7, #8]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40023800 	.word	0x40023800
 80041fc:	00f42400 	.word	0x00f42400
 8004200:	017d7840 	.word	0x017d7840

08004204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004208:	4b03      	ldr	r3, [pc, #12]	; (8004218 <HAL_RCC_GetHCLKFreq+0x14>)
 800420a:	681b      	ldr	r3, [r3, #0]
}
 800420c:	4618      	mov	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	2000001c 	.word	0x2000001c

0800421c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004220:	f7ff fff0 	bl	8004204 <HAL_RCC_GetHCLKFreq>
 8004224:	4601      	mov	r1, r0
 8004226:	4b05      	ldr	r3, [pc, #20]	; (800423c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	0a9b      	lsrs	r3, r3, #10
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	4a03      	ldr	r2, [pc, #12]	; (8004240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004232:	5cd3      	ldrb	r3, [r2, r3]
 8004234:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004238:	4618      	mov	r0, r3
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40023800 	.word	0x40023800
 8004240:	08009658 	.word	0x08009658

08004244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004248:	f7ff ffdc 	bl	8004204 <HAL_RCC_GetHCLKFreq>
 800424c:	4601      	mov	r1, r0
 800424e:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	0b5b      	lsrs	r3, r3, #13
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	4a03      	ldr	r2, [pc, #12]	; (8004268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800425a:	5cd3      	ldrb	r3, [r2, r3]
 800425c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004260:	4618      	mov	r0, r3
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40023800 	.word	0x40023800
 8004268:	08009658 	.word	0x08009658

0800426c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	220f      	movs	r2, #15
 800427a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800427c:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <HAL_RCC_GetClockConfig+0x5c>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 0203 	and.w	r2, r3, #3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <HAL_RCC_GetClockConfig+0x5c>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <HAL_RCC_GetClockConfig+0x5c>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <HAL_RCC_GetClockConfig+0x5c>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	08db      	lsrs	r3, r3, #3
 80042a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042ae:	4b07      	ldr	r3, [pc, #28]	; (80042cc <HAL_RCC_GetClockConfig+0x60>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 020f 	and.w	r2, r3, #15
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	601a      	str	r2, [r3, #0]
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40023c00 	.word	0x40023c00

080042d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e056      	b.n	8004390 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fd f929 	bl	8001554 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2202      	movs	r2, #2
 8004306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004318:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	ea42 0103 	orr.w	r1, r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	f003 0104 	and.w	r1, r3, #4
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800437e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e01d      	b.n	80043e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f815 	bl	80043ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f000 f968 	bl	80046ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0201 	orr.w	r2, r2, #1
 8004418:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b06      	cmp	r3, #6
 800442a:	d007      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b02      	cmp	r3, #2
 800445e:	d122      	bne.n	80044a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d11b      	bne.n	80044a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f06f 0202 	mvn.w	r2, #2
 8004476:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f8ee 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 8004492:	e005      	b.n	80044a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f8e0 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f8f1 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d122      	bne.n	80044fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d11b      	bne.n	80044fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f06f 0204 	mvn.w	r2, #4
 80044ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f8c4 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 80044e6:	e005      	b.n	80044f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f8b6 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f8c7 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b08      	cmp	r3, #8
 8004506:	d122      	bne.n	800454e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b08      	cmp	r3, #8
 8004514:	d11b      	bne.n	800454e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f06f 0208 	mvn.w	r2, #8
 800451e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2204      	movs	r2, #4
 8004524:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f89a 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 800453a:	e005      	b.n	8004548 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f88c 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f89d 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d122      	bne.n	80045a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b10      	cmp	r3, #16
 8004568:	d11b      	bne.n	80045a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f06f 0210 	mvn.w	r2, #16
 8004572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2208      	movs	r2, #8
 8004578:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f870 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 800458e:	e005      	b.n	800459c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f862 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f873 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d10e      	bne.n	80045ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d107      	bne.n	80045ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f06f 0201 	mvn.w	r2, #1
 80045c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7fc fd99 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d8:	2b80      	cmp	r3, #128	; 0x80
 80045da:	d10e      	bne.n	80045fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e6:	2b80      	cmp	r3, #128	; 0x80
 80045e8:	d107      	bne.n	80045fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f8e3 	bl	80047c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d10e      	bne.n	8004626 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d107      	bne.n	8004626 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800461e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f838 	bl	8004696 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b20      	cmp	r3, #32
 8004632:	d10e      	bne.n	8004652 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b20      	cmp	r3, #32
 8004640:	d107      	bne.n	8004652 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f06f 0220 	mvn.w	r2, #32
 800464a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f8ad 	bl	80047ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a34      	ldr	r2, [pc, #208]	; (8004790 <TIM_Base_SetConfig+0xe4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00f      	beq.n	80046e4 <TIM_Base_SetConfig+0x38>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ca:	d00b      	beq.n	80046e4 <TIM_Base_SetConfig+0x38>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a31      	ldr	r2, [pc, #196]	; (8004794 <TIM_Base_SetConfig+0xe8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_Base_SetConfig+0x38>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a30      	ldr	r2, [pc, #192]	; (8004798 <TIM_Base_SetConfig+0xec>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_Base_SetConfig+0x38>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a2f      	ldr	r2, [pc, #188]	; (800479c <TIM_Base_SetConfig+0xf0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d108      	bne.n	80046f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a25      	ldr	r2, [pc, #148]	; (8004790 <TIM_Base_SetConfig+0xe4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01b      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004704:	d017      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a22      	ldr	r2, [pc, #136]	; (8004794 <TIM_Base_SetConfig+0xe8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a21      	ldr	r2, [pc, #132]	; (8004798 <TIM_Base_SetConfig+0xec>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00f      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a20      	ldr	r2, [pc, #128]	; (800479c <TIM_Base_SetConfig+0xf0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <TIM_Base_SetConfig+0xf4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <TIM_Base_SetConfig+0xf8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <TIM_Base_SetConfig+0xfc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d108      	bne.n	8004748 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a08      	ldr	r2, [pc, #32]	; (8004790 <TIM_Base_SetConfig+0xe4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d103      	bne.n	800477c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	615a      	str	r2, [r3, #20]
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40014000 	.word	0x40014000
 80047a4:	40014400 	.word	0x40014400
 80047a8:	40014800 	.word	0x40014800

080047ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e03f      	b.n	8004866 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fc fef2 	bl	80015e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2224      	movs	r2, #36	; 0x24
 8004804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fc3d 	bl	8005098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800482c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800483c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800484c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b088      	sub	sp, #32
 8004872:	af02      	add	r7, sp, #8
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	4613      	mov	r3, r2
 800487c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b20      	cmp	r3, #32
 800488c:	f040 8083 	bne.w	8004996 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_UART_Transmit+0x2e>
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e07b      	b.n	8004998 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Transmit+0x40>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e074      	b.n	8004998 <HAL_UART_Transmit+0x12a>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2221      	movs	r2, #33	; 0x21
 80048c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80048c4:	f7fd f8dc 	bl	8001a80 <HAL_GetTick>
 80048c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	88fa      	ldrh	r2, [r7, #6]
 80048ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	88fa      	ldrh	r2, [r7, #6]
 80048d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80048de:	e042      	b.n	8004966 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f6:	d122      	bne.n	800493e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2200      	movs	r2, #0
 8004900:	2180      	movs	r1, #128	; 0x80
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fa5c 	bl	8004dc0 <UART_WaitOnFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e042      	b.n	8004998 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004924:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	3302      	adds	r3, #2
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	e017      	b.n	8004966 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	3301      	adds	r3, #1
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	e013      	b.n	8004966 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2200      	movs	r2, #0
 8004946:	2180      	movs	r1, #128	; 0x80
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fa39 	bl	8004dc0 <UART_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e01f      	b.n	8004998 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	60ba      	str	r2, [r7, #8]
 800495e:	781a      	ldrb	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1b7      	bne.n	80048e0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2200      	movs	r2, #0
 8004978:	2140      	movs	r1, #64	; 0x40
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fa20 	bl	8004dc0 <UART_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e006      	b.n	8004998 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004996:	2302      	movs	r3, #2
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b20      	cmp	r3, #32
 80049be:	f040 8090 	bne.w	8004ae2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_UART_Receive+0x2e>
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e088      	b.n	8004ae4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_UART_Receive+0x40>
 80049dc:	2302      	movs	r3, #2
 80049de:	e081      	b.n	8004ae4 <HAL_UART_Receive+0x144>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2222      	movs	r2, #34	; 0x22
 80049f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80049f6:	f7fd f843 	bl	8001a80 <HAL_GetTick>
 80049fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	88fa      	ldrh	r2, [r7, #6]
 8004a06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004a10:	e05c      	b.n	8004acc <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a28:	d12b      	bne.n	8004a82 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2200      	movs	r2, #0
 8004a32:	2120      	movs	r1, #32
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f9c3 	bl	8004dc0 <UART_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e04f      	b.n	8004ae4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10c      	bne.n	8004a6a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	3302      	adds	r3, #2
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	e030      	b.n	8004acc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	e024      	b.n	8004acc <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2120      	movs	r1, #32
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f997 	bl	8004dc0 <UART_WaitOnFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e023      	b.n	8004ae4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d108      	bne.n	8004ab6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	60ba      	str	r2, [r7, #8]
 8004ab0:	b2ca      	uxtb	r2, r1
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e00a      	b.n	8004acc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	1c59      	adds	r1, r3, #1
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d19d      	bne.n	8004a12 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e000      	b.n	8004ae4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004ae2:	2302      	movs	r3, #2
  }
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d140      	bne.n	8004b88 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_UART_Receive_IT+0x26>
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e039      	b.n	8004b8a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_UART_Receive_IT+0x38>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e032      	b.n	8004b8a <HAL_UART_Receive_IT+0x9e>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	88fa      	ldrh	r2, [r7, #6]
 8004b36:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	88fa      	ldrh	r2, [r7, #6]
 8004b3c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2222      	movs	r2, #34	; 0x22
 8004b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b62:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695a      	ldr	r2, [r3, #20]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0220 	orr.w	r2, r2, #32
 8004b82:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e000      	b.n	8004b8a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b88:	2302      	movs	r3, #2
  }
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10d      	bne.n	8004bea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d008      	beq.n	8004bea <HAL_UART_IRQHandler+0x52>
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f9d6 	bl	8004f94 <UART_Receive_IT>
      return;
 8004be8:	e0d1      	b.n	8004d8e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 80b0 	beq.w	8004d52 <HAL_UART_IRQHandler+0x1ba>
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d105      	bne.n	8004c08 <HAL_UART_IRQHandler+0x70>
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 80a5 	beq.w	8004d52 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_UART_IRQHandler+0x90>
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c20:	f043 0201 	orr.w	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_UART_IRQHandler+0xb0>
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c40:	f043 0202 	orr.w	r2, r3, #2
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_UART_IRQHandler+0xd0>
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c60:	f043 0204 	orr.w	r2, r3, #4
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00f      	beq.n	8004c92 <HAL_UART_IRQHandler+0xfa>
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d104      	bne.n	8004c86 <HAL_UART_IRQHandler+0xee>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	f043 0208 	orr.w	r2, r3, #8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d078      	beq.n	8004d8c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <HAL_UART_IRQHandler+0x11c>
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f970 	bl	8004f94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	bf0c      	ite	eq
 8004cc2:	2301      	moveq	r3, #1
 8004cc4:	2300      	movne	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d102      	bne.n	8004cdc <HAL_UART_IRQHandler+0x144>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d031      	beq.n	8004d40 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f8b9 	bl	8004e54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	d123      	bne.n	8004d38 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d013      	beq.n	8004d30 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0c:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <HAL_UART_IRQHandler+0x1fc>)
 8004d0e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fd fad3 	bl	80022c0 <HAL_DMA_Abort_IT>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d016      	beq.n	8004d4e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2e:	e00e      	b.n	8004d4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f83b 	bl	8004dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d36:	e00a      	b.n	8004d4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f837 	bl	8004dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3e:	e006      	b.n	8004d4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f833 	bl	8004dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004d4c:	e01e      	b.n	8004d8c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4e:	bf00      	nop
    return;
 8004d50:	e01c      	b.n	8004d8c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_UART_IRQHandler+0x1d6>
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f8a6 	bl	8004eb8 <UART_Transmit_IT>
    return;
 8004d6c:	e00f      	b.n	8004d8e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_UART_IRQHandler+0x1f6>
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f8ee 	bl	8004f64 <UART_EndTransmit_IT>
    return;
 8004d88:	bf00      	nop
 8004d8a:	e000      	b.n	8004d8e <HAL_UART_IRQHandler+0x1f6>
    return;
 8004d8c:	bf00      	nop
  }
}
 8004d8e:	3720      	adds	r7, #32
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	08004e91 	.word	0x08004e91

08004d98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd0:	e02c      	b.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d028      	beq.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004de0:	f7fc fe4e 	bl	8001a80 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d21d      	bcs.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dfe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695a      	ldr	r2, [r3, #20]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e00f      	b.n	8004e4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4013      	ands	r3, r2
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d0c3      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695a      	ldr	r2, [r3, #20]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0201 	bic.w	r2, r2, #1
 8004e7a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f7ff ff7e 	bl	8004dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eb0:	bf00      	nop
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b21      	cmp	r3, #33	; 0x21
 8004eca:	d144      	bne.n	8004f56 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed4:	d11a      	bne.n	8004f0c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	1c9a      	adds	r2, r3, #2
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	621a      	str	r2, [r3, #32]
 8004efe:	e00e      	b.n	8004f1e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	621a      	str	r2, [r3, #32]
 8004f0a:	e008      	b.n	8004f1e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	1c59      	adds	r1, r3, #1
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6211      	str	r1, [r2, #32]
 8004f16:	781a      	ldrb	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10f      	bne.n	8004f52 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e000      	b.n	8004f58 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004f56:	2302      	movs	r3, #2
  }
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ff07 	bl	8004d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b22      	cmp	r3, #34	; 0x22
 8004fa6:	d171      	bne.n	800508c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb0:	d123      	bne.n	8004ffa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10e      	bne.n	8004fde <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	1c9a      	adds	r2, r3, #2
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28
 8004fdc:	e029      	b.n	8005032 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ff8:	e01b      	b.n	8005032 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6858      	ldr	r0, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	1c59      	adds	r1, r3, #1
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6291      	str	r1, [r2, #40]	; 0x28
 8005012:	b2c2      	uxtb	r2, r0
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e00c      	b.n	8005032 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	b2da      	uxtb	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	1c58      	adds	r0, r3, #1
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	6288      	str	r0, [r1, #40]	; 0x28
 800502a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29b      	uxth	r3, r3
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	4619      	mov	r1, r3
 8005040:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005042:	2b00      	cmp	r3, #0
 8005044:	d120      	bne.n	8005088 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0220 	bic.w	r2, r2, #32
 8005054:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005064:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695a      	ldr	r2, [r3, #20]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fb ff30 	bl	8000ee4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	e002      	b.n	800508e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	e000      	b.n	800508e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800508c:	2302      	movs	r3, #2
  }
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80050da:	f023 030c 	bic.w	r3, r3, #12
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	68f9      	ldr	r1, [r7, #12]
 80050e4:	430b      	orrs	r3, r1
 80050e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005106:	f040 818b 	bne.w	8005420 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4ac1      	ldr	r2, [pc, #772]	; (8005414 <UART_SetConfig+0x37c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d005      	beq.n	8005120 <UART_SetConfig+0x88>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4abf      	ldr	r2, [pc, #764]	; (8005418 <UART_SetConfig+0x380>)
 800511a:	4293      	cmp	r3, r2
 800511c:	f040 80bd 	bne.w	800529a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005120:	f7ff f890 	bl	8004244 <HAL_RCC_GetPCLK2Freq>
 8005124:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	461d      	mov	r5, r3
 800512a:	f04f 0600 	mov.w	r6, #0
 800512e:	46a8      	mov	r8, r5
 8005130:	46b1      	mov	r9, r6
 8005132:	eb18 0308 	adds.w	r3, r8, r8
 8005136:	eb49 0409 	adc.w	r4, r9, r9
 800513a:	4698      	mov	r8, r3
 800513c:	46a1      	mov	r9, r4
 800513e:	eb18 0805 	adds.w	r8, r8, r5
 8005142:	eb49 0906 	adc.w	r9, r9, r6
 8005146:	f04f 0100 	mov.w	r1, #0
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005152:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005156:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800515a:	4688      	mov	r8, r1
 800515c:	4691      	mov	r9, r2
 800515e:	eb18 0005 	adds.w	r0, r8, r5
 8005162:	eb49 0106 	adc.w	r1, r9, r6
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	461d      	mov	r5, r3
 800516c:	f04f 0600 	mov.w	r6, #0
 8005170:	196b      	adds	r3, r5, r5
 8005172:	eb46 0406 	adc.w	r4, r6, r6
 8005176:	461a      	mov	r2, r3
 8005178:	4623      	mov	r3, r4
 800517a:	f7fb f889 	bl	8000290 <__aeabi_uldivmod>
 800517e:	4603      	mov	r3, r0
 8005180:	460c      	mov	r4, r1
 8005182:	461a      	mov	r2, r3
 8005184:	4ba5      	ldr	r3, [pc, #660]	; (800541c <UART_SetConfig+0x384>)
 8005186:	fba3 2302 	umull	r2, r3, r3, r2
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	461d      	mov	r5, r3
 8005194:	f04f 0600 	mov.w	r6, #0
 8005198:	46a9      	mov	r9, r5
 800519a:	46b2      	mov	sl, r6
 800519c:	eb19 0309 	adds.w	r3, r9, r9
 80051a0:	eb4a 040a 	adc.w	r4, sl, sl
 80051a4:	4699      	mov	r9, r3
 80051a6:	46a2      	mov	sl, r4
 80051a8:	eb19 0905 	adds.w	r9, r9, r5
 80051ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051c4:	4689      	mov	r9, r1
 80051c6:	4692      	mov	sl, r2
 80051c8:	eb19 0005 	adds.w	r0, r9, r5
 80051cc:	eb4a 0106 	adc.w	r1, sl, r6
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	461d      	mov	r5, r3
 80051d6:	f04f 0600 	mov.w	r6, #0
 80051da:	196b      	adds	r3, r5, r5
 80051dc:	eb46 0406 	adc.w	r4, r6, r6
 80051e0:	461a      	mov	r2, r3
 80051e2:	4623      	mov	r3, r4
 80051e4:	f7fb f854 	bl	8000290 <__aeabi_uldivmod>
 80051e8:	4603      	mov	r3, r0
 80051ea:	460c      	mov	r4, r1
 80051ec:	461a      	mov	r2, r3
 80051ee:	4b8b      	ldr	r3, [pc, #556]	; (800541c <UART_SetConfig+0x384>)
 80051f0:	fba3 1302 	umull	r1, r3, r3, r2
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	2164      	movs	r1, #100	; 0x64
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	3332      	adds	r3, #50	; 0x32
 8005202:	4a86      	ldr	r2, [pc, #536]	; (800541c <UART_SetConfig+0x384>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005210:	4498      	add	r8, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	461d      	mov	r5, r3
 8005216:	f04f 0600 	mov.w	r6, #0
 800521a:	46a9      	mov	r9, r5
 800521c:	46b2      	mov	sl, r6
 800521e:	eb19 0309 	adds.w	r3, r9, r9
 8005222:	eb4a 040a 	adc.w	r4, sl, sl
 8005226:	4699      	mov	r9, r3
 8005228:	46a2      	mov	sl, r4
 800522a:	eb19 0905 	adds.w	r9, r9, r5
 800522e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800523e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005242:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005246:	4689      	mov	r9, r1
 8005248:	4692      	mov	sl, r2
 800524a:	eb19 0005 	adds.w	r0, r9, r5
 800524e:	eb4a 0106 	adc.w	r1, sl, r6
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	461d      	mov	r5, r3
 8005258:	f04f 0600 	mov.w	r6, #0
 800525c:	196b      	adds	r3, r5, r5
 800525e:	eb46 0406 	adc.w	r4, r6, r6
 8005262:	461a      	mov	r2, r3
 8005264:	4623      	mov	r3, r4
 8005266:	f7fb f813 	bl	8000290 <__aeabi_uldivmod>
 800526a:	4603      	mov	r3, r0
 800526c:	460c      	mov	r4, r1
 800526e:	461a      	mov	r2, r3
 8005270:	4b6a      	ldr	r3, [pc, #424]	; (800541c <UART_SetConfig+0x384>)
 8005272:	fba3 1302 	umull	r1, r3, r3, r2
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	2164      	movs	r1, #100	; 0x64
 800527a:	fb01 f303 	mul.w	r3, r1, r3
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	3332      	adds	r3, #50	; 0x32
 8005284:	4a65      	ldr	r2, [pc, #404]	; (800541c <UART_SetConfig+0x384>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	f003 0207 	and.w	r2, r3, #7
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4442      	add	r2, r8
 8005296:	609a      	str	r2, [r3, #8]
 8005298:	e26f      	b.n	800577a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800529a:	f7fe ffbf 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 800529e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	461d      	mov	r5, r3
 80052a4:	f04f 0600 	mov.w	r6, #0
 80052a8:	46a8      	mov	r8, r5
 80052aa:	46b1      	mov	r9, r6
 80052ac:	eb18 0308 	adds.w	r3, r8, r8
 80052b0:	eb49 0409 	adc.w	r4, r9, r9
 80052b4:	4698      	mov	r8, r3
 80052b6:	46a1      	mov	r9, r4
 80052b8:	eb18 0805 	adds.w	r8, r8, r5
 80052bc:	eb49 0906 	adc.w	r9, r9, r6
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052d4:	4688      	mov	r8, r1
 80052d6:	4691      	mov	r9, r2
 80052d8:	eb18 0005 	adds.w	r0, r8, r5
 80052dc:	eb49 0106 	adc.w	r1, r9, r6
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	461d      	mov	r5, r3
 80052e6:	f04f 0600 	mov.w	r6, #0
 80052ea:	196b      	adds	r3, r5, r5
 80052ec:	eb46 0406 	adc.w	r4, r6, r6
 80052f0:	461a      	mov	r2, r3
 80052f2:	4623      	mov	r3, r4
 80052f4:	f7fa ffcc 	bl	8000290 <__aeabi_uldivmod>
 80052f8:	4603      	mov	r3, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	461a      	mov	r2, r3
 80052fe:	4b47      	ldr	r3, [pc, #284]	; (800541c <UART_SetConfig+0x384>)
 8005300:	fba3 2302 	umull	r2, r3, r3, r2
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	461d      	mov	r5, r3
 800530e:	f04f 0600 	mov.w	r6, #0
 8005312:	46a9      	mov	r9, r5
 8005314:	46b2      	mov	sl, r6
 8005316:	eb19 0309 	adds.w	r3, r9, r9
 800531a:	eb4a 040a 	adc.w	r4, sl, sl
 800531e:	4699      	mov	r9, r3
 8005320:	46a2      	mov	sl, r4
 8005322:	eb19 0905 	adds.w	r9, r9, r5
 8005326:	eb4a 0a06 	adc.w	sl, sl, r6
 800532a:	f04f 0100 	mov.w	r1, #0
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005336:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800533a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800533e:	4689      	mov	r9, r1
 8005340:	4692      	mov	sl, r2
 8005342:	eb19 0005 	adds.w	r0, r9, r5
 8005346:	eb4a 0106 	adc.w	r1, sl, r6
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	461d      	mov	r5, r3
 8005350:	f04f 0600 	mov.w	r6, #0
 8005354:	196b      	adds	r3, r5, r5
 8005356:	eb46 0406 	adc.w	r4, r6, r6
 800535a:	461a      	mov	r2, r3
 800535c:	4623      	mov	r3, r4
 800535e:	f7fa ff97 	bl	8000290 <__aeabi_uldivmod>
 8005362:	4603      	mov	r3, r0
 8005364:	460c      	mov	r4, r1
 8005366:	461a      	mov	r2, r3
 8005368:	4b2c      	ldr	r3, [pc, #176]	; (800541c <UART_SetConfig+0x384>)
 800536a:	fba3 1302 	umull	r1, r3, r3, r2
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	2164      	movs	r1, #100	; 0x64
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	3332      	adds	r3, #50	; 0x32
 800537c:	4a27      	ldr	r2, [pc, #156]	; (800541c <UART_SetConfig+0x384>)
 800537e:	fba2 2303 	umull	r2, r3, r2, r3
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800538a:	4498      	add	r8, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	461d      	mov	r5, r3
 8005390:	f04f 0600 	mov.w	r6, #0
 8005394:	46a9      	mov	r9, r5
 8005396:	46b2      	mov	sl, r6
 8005398:	eb19 0309 	adds.w	r3, r9, r9
 800539c:	eb4a 040a 	adc.w	r4, sl, sl
 80053a0:	4699      	mov	r9, r3
 80053a2:	46a2      	mov	sl, r4
 80053a4:	eb19 0905 	adds.w	r9, r9, r5
 80053a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80053ac:	f04f 0100 	mov.w	r1, #0
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053c0:	4689      	mov	r9, r1
 80053c2:	4692      	mov	sl, r2
 80053c4:	eb19 0005 	adds.w	r0, r9, r5
 80053c8:	eb4a 0106 	adc.w	r1, sl, r6
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	461d      	mov	r5, r3
 80053d2:	f04f 0600 	mov.w	r6, #0
 80053d6:	196b      	adds	r3, r5, r5
 80053d8:	eb46 0406 	adc.w	r4, r6, r6
 80053dc:	461a      	mov	r2, r3
 80053de:	4623      	mov	r3, r4
 80053e0:	f7fa ff56 	bl	8000290 <__aeabi_uldivmod>
 80053e4:	4603      	mov	r3, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	461a      	mov	r2, r3
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <UART_SetConfig+0x384>)
 80053ec:	fba3 1302 	umull	r1, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	2164      	movs	r1, #100	; 0x64
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	3332      	adds	r3, #50	; 0x32
 80053fe:	4a07      	ldr	r2, [pc, #28]	; (800541c <UART_SetConfig+0x384>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 0207 	and.w	r2, r3, #7
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4442      	add	r2, r8
 8005410:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005412:	e1b2      	b.n	800577a <UART_SetConfig+0x6e2>
 8005414:	40011000 	.word	0x40011000
 8005418:	40011400 	.word	0x40011400
 800541c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4ad7      	ldr	r2, [pc, #860]	; (8005784 <UART_SetConfig+0x6ec>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d005      	beq.n	8005436 <UART_SetConfig+0x39e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4ad6      	ldr	r2, [pc, #856]	; (8005788 <UART_SetConfig+0x6f0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	f040 80d1 	bne.w	80055d8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005436:	f7fe ff05 	bl	8004244 <HAL_RCC_GetPCLK2Freq>
 800543a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	469a      	mov	sl, r3
 8005440:	f04f 0b00 	mov.w	fp, #0
 8005444:	46d0      	mov	r8, sl
 8005446:	46d9      	mov	r9, fp
 8005448:	eb18 0308 	adds.w	r3, r8, r8
 800544c:	eb49 0409 	adc.w	r4, r9, r9
 8005450:	4698      	mov	r8, r3
 8005452:	46a1      	mov	r9, r4
 8005454:	eb18 080a 	adds.w	r8, r8, sl
 8005458:	eb49 090b 	adc.w	r9, r9, fp
 800545c:	f04f 0100 	mov.w	r1, #0
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005468:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800546c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005470:	4688      	mov	r8, r1
 8005472:	4691      	mov	r9, r2
 8005474:	eb1a 0508 	adds.w	r5, sl, r8
 8005478:	eb4b 0609 	adc.w	r6, fp, r9
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	4619      	mov	r1, r3
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	f04f 0400 	mov.w	r4, #0
 800548e:	0094      	lsls	r4, r2, #2
 8005490:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005494:	008b      	lsls	r3, r1, #2
 8005496:	461a      	mov	r2, r3
 8005498:	4623      	mov	r3, r4
 800549a:	4628      	mov	r0, r5
 800549c:	4631      	mov	r1, r6
 800549e:	f7fa fef7 	bl	8000290 <__aeabi_uldivmod>
 80054a2:	4603      	mov	r3, r0
 80054a4:	460c      	mov	r4, r1
 80054a6:	461a      	mov	r2, r3
 80054a8:	4bb8      	ldr	r3, [pc, #736]	; (800578c <UART_SetConfig+0x6f4>)
 80054aa:	fba3 2302 	umull	r2, r3, r3, r2
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	469b      	mov	fp, r3
 80054b8:	f04f 0c00 	mov.w	ip, #0
 80054bc:	46d9      	mov	r9, fp
 80054be:	46e2      	mov	sl, ip
 80054c0:	eb19 0309 	adds.w	r3, r9, r9
 80054c4:	eb4a 040a 	adc.w	r4, sl, sl
 80054c8:	4699      	mov	r9, r3
 80054ca:	46a2      	mov	sl, r4
 80054cc:	eb19 090b 	adds.w	r9, r9, fp
 80054d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054d4:	f04f 0100 	mov.w	r1, #0
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054e8:	4689      	mov	r9, r1
 80054ea:	4692      	mov	sl, r2
 80054ec:	eb1b 0509 	adds.w	r5, fp, r9
 80054f0:	eb4c 060a 	adc.w	r6, ip, sl
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4619      	mov	r1, r3
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	f04f 0400 	mov.w	r4, #0
 8005506:	0094      	lsls	r4, r2, #2
 8005508:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800550c:	008b      	lsls	r3, r1, #2
 800550e:	461a      	mov	r2, r3
 8005510:	4623      	mov	r3, r4
 8005512:	4628      	mov	r0, r5
 8005514:	4631      	mov	r1, r6
 8005516:	f7fa febb 	bl	8000290 <__aeabi_uldivmod>
 800551a:	4603      	mov	r3, r0
 800551c:	460c      	mov	r4, r1
 800551e:	461a      	mov	r2, r3
 8005520:	4b9a      	ldr	r3, [pc, #616]	; (800578c <UART_SetConfig+0x6f4>)
 8005522:	fba3 1302 	umull	r1, r3, r3, r2
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	2164      	movs	r1, #100	; 0x64
 800552a:	fb01 f303 	mul.w	r3, r1, r3
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	3332      	adds	r3, #50	; 0x32
 8005534:	4a95      	ldr	r2, [pc, #596]	; (800578c <UART_SetConfig+0x6f4>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005540:	4498      	add	r8, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	469b      	mov	fp, r3
 8005546:	f04f 0c00 	mov.w	ip, #0
 800554a:	46d9      	mov	r9, fp
 800554c:	46e2      	mov	sl, ip
 800554e:	eb19 0309 	adds.w	r3, r9, r9
 8005552:	eb4a 040a 	adc.w	r4, sl, sl
 8005556:	4699      	mov	r9, r3
 8005558:	46a2      	mov	sl, r4
 800555a:	eb19 090b 	adds.w	r9, r9, fp
 800555e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005562:	f04f 0100 	mov.w	r1, #0
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800556e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005572:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005576:	4689      	mov	r9, r1
 8005578:	4692      	mov	sl, r2
 800557a:	eb1b 0509 	adds.w	r5, fp, r9
 800557e:	eb4c 060a 	adc.w	r6, ip, sl
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4619      	mov	r1, r3
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	f04f 0400 	mov.w	r4, #0
 8005594:	0094      	lsls	r4, r2, #2
 8005596:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800559a:	008b      	lsls	r3, r1, #2
 800559c:	461a      	mov	r2, r3
 800559e:	4623      	mov	r3, r4
 80055a0:	4628      	mov	r0, r5
 80055a2:	4631      	mov	r1, r6
 80055a4:	f7fa fe74 	bl	8000290 <__aeabi_uldivmod>
 80055a8:	4603      	mov	r3, r0
 80055aa:	460c      	mov	r4, r1
 80055ac:	461a      	mov	r2, r3
 80055ae:	4b77      	ldr	r3, [pc, #476]	; (800578c <UART_SetConfig+0x6f4>)
 80055b0:	fba3 1302 	umull	r1, r3, r3, r2
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	2164      	movs	r1, #100	; 0x64
 80055b8:	fb01 f303 	mul.w	r3, r1, r3
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	3332      	adds	r3, #50	; 0x32
 80055c2:	4a72      	ldr	r2, [pc, #456]	; (800578c <UART_SetConfig+0x6f4>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	f003 020f 	and.w	r2, r3, #15
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4442      	add	r2, r8
 80055d4:	609a      	str	r2, [r3, #8]
 80055d6:	e0d0      	b.n	800577a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80055d8:	f7fe fe20 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 80055dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	469a      	mov	sl, r3
 80055e2:	f04f 0b00 	mov.w	fp, #0
 80055e6:	46d0      	mov	r8, sl
 80055e8:	46d9      	mov	r9, fp
 80055ea:	eb18 0308 	adds.w	r3, r8, r8
 80055ee:	eb49 0409 	adc.w	r4, r9, r9
 80055f2:	4698      	mov	r8, r3
 80055f4:	46a1      	mov	r9, r4
 80055f6:	eb18 080a 	adds.w	r8, r8, sl
 80055fa:	eb49 090b 	adc.w	r9, r9, fp
 80055fe:	f04f 0100 	mov.w	r1, #0
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800560a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800560e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005612:	4688      	mov	r8, r1
 8005614:	4691      	mov	r9, r2
 8005616:	eb1a 0508 	adds.w	r5, sl, r8
 800561a:	eb4b 0609 	adc.w	r6, fp, r9
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4619      	mov	r1, r3
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	f04f 0400 	mov.w	r4, #0
 8005630:	0094      	lsls	r4, r2, #2
 8005632:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005636:	008b      	lsls	r3, r1, #2
 8005638:	461a      	mov	r2, r3
 800563a:	4623      	mov	r3, r4
 800563c:	4628      	mov	r0, r5
 800563e:	4631      	mov	r1, r6
 8005640:	f7fa fe26 	bl	8000290 <__aeabi_uldivmod>
 8005644:	4603      	mov	r3, r0
 8005646:	460c      	mov	r4, r1
 8005648:	461a      	mov	r2, r3
 800564a:	4b50      	ldr	r3, [pc, #320]	; (800578c <UART_SetConfig+0x6f4>)
 800564c:	fba3 2302 	umull	r2, r3, r3, r2
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	469b      	mov	fp, r3
 800565a:	f04f 0c00 	mov.w	ip, #0
 800565e:	46d9      	mov	r9, fp
 8005660:	46e2      	mov	sl, ip
 8005662:	eb19 0309 	adds.w	r3, r9, r9
 8005666:	eb4a 040a 	adc.w	r4, sl, sl
 800566a:	4699      	mov	r9, r3
 800566c:	46a2      	mov	sl, r4
 800566e:	eb19 090b 	adds.w	r9, r9, fp
 8005672:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005676:	f04f 0100 	mov.w	r1, #0
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005682:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005686:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800568a:	4689      	mov	r9, r1
 800568c:	4692      	mov	sl, r2
 800568e:	eb1b 0509 	adds.w	r5, fp, r9
 8005692:	eb4c 060a 	adc.w	r6, ip, sl
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	4619      	mov	r1, r3
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	f04f 0400 	mov.w	r4, #0
 80056a8:	0094      	lsls	r4, r2, #2
 80056aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056ae:	008b      	lsls	r3, r1, #2
 80056b0:	461a      	mov	r2, r3
 80056b2:	4623      	mov	r3, r4
 80056b4:	4628      	mov	r0, r5
 80056b6:	4631      	mov	r1, r6
 80056b8:	f7fa fdea 	bl	8000290 <__aeabi_uldivmod>
 80056bc:	4603      	mov	r3, r0
 80056be:	460c      	mov	r4, r1
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b32      	ldr	r3, [pc, #200]	; (800578c <UART_SetConfig+0x6f4>)
 80056c4:	fba3 1302 	umull	r1, r3, r3, r2
 80056c8:	095b      	lsrs	r3, r3, #5
 80056ca:	2164      	movs	r1, #100	; 0x64
 80056cc:	fb01 f303 	mul.w	r3, r1, r3
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	3332      	adds	r3, #50	; 0x32
 80056d6:	4a2d      	ldr	r2, [pc, #180]	; (800578c <UART_SetConfig+0x6f4>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056e2:	4498      	add	r8, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	469b      	mov	fp, r3
 80056e8:	f04f 0c00 	mov.w	ip, #0
 80056ec:	46d9      	mov	r9, fp
 80056ee:	46e2      	mov	sl, ip
 80056f0:	eb19 0309 	adds.w	r3, r9, r9
 80056f4:	eb4a 040a 	adc.w	r4, sl, sl
 80056f8:	4699      	mov	r9, r3
 80056fa:	46a2      	mov	sl, r4
 80056fc:	eb19 090b 	adds.w	r9, r9, fp
 8005700:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005704:	f04f 0100 	mov.w	r1, #0
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005710:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005714:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005718:	4689      	mov	r9, r1
 800571a:	4692      	mov	sl, r2
 800571c:	eb1b 0509 	adds.w	r5, fp, r9
 8005720:	eb4c 060a 	adc.w	r6, ip, sl
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	4619      	mov	r1, r3
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	f04f 0400 	mov.w	r4, #0
 8005736:	0094      	lsls	r4, r2, #2
 8005738:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800573c:	008b      	lsls	r3, r1, #2
 800573e:	461a      	mov	r2, r3
 8005740:	4623      	mov	r3, r4
 8005742:	4628      	mov	r0, r5
 8005744:	4631      	mov	r1, r6
 8005746:	f7fa fda3 	bl	8000290 <__aeabi_uldivmod>
 800574a:	4603      	mov	r3, r0
 800574c:	460c      	mov	r4, r1
 800574e:	461a      	mov	r2, r3
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <UART_SetConfig+0x6f4>)
 8005752:	fba3 1302 	umull	r1, r3, r3, r2
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	2164      	movs	r1, #100	; 0x64
 800575a:	fb01 f303 	mul.w	r3, r1, r3
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	3332      	adds	r3, #50	; 0x32
 8005764:	4a09      	ldr	r2, [pc, #36]	; (800578c <UART_SetConfig+0x6f4>)
 8005766:	fba2 2303 	umull	r2, r3, r2, r3
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	f003 020f 	and.w	r2, r3, #15
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4442      	add	r2, r8
 8005776:	609a      	str	r2, [r3, #8]
}
 8005778:	e7ff      	b.n	800577a <UART_SetConfig+0x6e2>
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005784:	40011000 	.word	0x40011000
 8005788:	40011400 	.word	0x40011400
 800578c:	51eb851f 	.word	0x51eb851f

08005790 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800579e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057a2:	2b84      	cmp	r3, #132	; 0x84
 80057a4:	d005      	beq.n	80057b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80057a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4413      	add	r3, r2
 80057ae:	3303      	adds	r3, #3
 80057b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80057b2:	68fb      	ldr	r3, [r7, #12]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c6:	f3ef 8305 	mrs	r3, IPSR
 80057ca:	607b      	str	r3, [r7, #4]
  return(result);
 80057cc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	bf14      	ite	ne
 80057d2:	2301      	movne	r3, #1
 80057d4:	2300      	moveq	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
}
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80057e8:	f001 fbbc 	bl	8006f64 <vTaskStartScheduler>
  
  return osOK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057f4:	b089      	sub	sp, #36	; 0x24
 80057f6:	af04      	add	r7, sp, #16
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d020      	beq.n	8005846 <osThreadCreate+0x54>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01c      	beq.n	8005846 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685c      	ldr	r4, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681d      	ldr	r5, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691e      	ldr	r6, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff ffb6 	bl	8005790 <makeFreeRtosPriority>
 8005824:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800582e:	9202      	str	r2, [sp, #8]
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	9100      	str	r1, [sp, #0]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	4632      	mov	r2, r6
 8005838:	4629      	mov	r1, r5
 800583a:	4620      	mov	r0, r4
 800583c:	f001 f9d7 	bl	8006bee <xTaskCreateStatic>
 8005840:	4603      	mov	r3, r0
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	e01c      	b.n	8005880 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685c      	ldr	r4, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005852:	b29e      	uxth	r6, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff ff98 	bl	8005790 <makeFreeRtosPriority>
 8005860:	4602      	mov	r2, r0
 8005862:	f107 030c 	add.w	r3, r7, #12
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	9200      	str	r2, [sp, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	4632      	mov	r2, r6
 800586e:	4629      	mov	r1, r5
 8005870:	4620      	mov	r0, r4
 8005872:	f001 fa15 	bl	8006ca0 <xTaskCreate>
 8005876:	4603      	mov	r3, r0
 8005878:	2b01      	cmp	r3, #1
 800587a:	d001      	beq.n	8005880 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800587c:	2300      	movs	r3, #0
 800587e:	e000      	b.n	8005882 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005880:	68fb      	ldr	r3, [r7, #12]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800588a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <osDelay+0x16>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	e000      	b.n	80058a2 <osDelay+0x18>
 80058a0:	2301      	movs	r3, #1
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 fb2a 	bl	8006efc <vTaskDelay>
  
  return osOK;
 80058a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b086      	sub	sp, #24
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	3303      	adds	r3, #3
 80058c0:	f023 0303 	bic.w	r3, r3, #3
 80058c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80058c6:	2014      	movs	r0, #20
 80058c8:	f002 fa92 	bl	8007df0 <pvPortMalloc>
 80058cc:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d046      	beq.n	8005962 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f002 fa7f 	bl	8007df0 <pvPortMalloc>
 80058f2:	4602      	mov	r2, r0
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d02b      	beq.n	8005958 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	fb02 f303 	mul.w	r3, r2, r3
 800590a:	4618      	mov	r0, r3
 800590c:	f002 fa70 	bl	8007df0 <pvPortMalloc>
 8005910:	4602      	mov	r2, r0
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d011      	beq.n	8005942 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	e008      	b.n	8005936 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	2200      	movs	r2, #0
 800592e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	3301      	adds	r3, #1
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	429a      	cmp	r2, r3
 800593e:	d3f1      	bcc.n	8005924 <osPoolCreate+0x72>
 8005940:	e00f      	b.n	8005962 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	4618      	mov	r0, r3
 8005948:	f002 fb14 	bl	8007f74 <vPortFree>
        vPortFree(thePool);
 800594c:	6978      	ldr	r0, [r7, #20]
 800594e:	f002 fb11 	bl	8007f74 <vPortFree>
        thePool = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	e004      	b.n	8005962 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8005958:	6978      	ldr	r0, [r7, #20]
 800595a:	f002 fb0b 	bl	8007f74 <vPortFree>
      thePool = NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8005962:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08a      	sub	sp, #40	; 0x28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8005978:	2300      	movs	r3, #0
 800597a:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800597c:	f7ff ff20 	bl	80057c0 <inHandlerMode>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00e      	beq.n	80059a4 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005986:	f3ef 8211 	mrs	r2, BASEPRI
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	617a      	str	r2, [r7, #20]
 800599c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800599e:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
 80059a2:	e001      	b.n	80059a8 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80059a4:	f002 f90a 	bl	8007bbc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80059a8:	2300      	movs	r3, #0
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	e029      	b.n	8005a02 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d301      	bcc.n	80059c6 <osPoolAlloc+0x5a>
      index = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	4413      	add	r3, r2
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d113      	bne.n	80059fc <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	4413      	add	r3, r2
 80059dc:	2201      	movs	r2, #1
 80059de:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4619      	mov	r1, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	fb02 f303 	mul.w	r3, r2, r3
 80059f0:	440b      	add	r3, r1
 80059f2:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	611a      	str	r2, [r3, #16]
      break;
 80059fa:	e007      	b.n	8005a0c <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	3301      	adds	r3, #1
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d3d0      	bcc.n	80059ae <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8005a0c:	f7ff fed8 	bl	80057c0 <inHandlerMode>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	e001      	b.n	8005a26 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8005a22:	f002 f8f9 	bl	8007c18 <vPortExitCritical>
  }
  
  return p;
 8005a26:	6a3b      	ldr	r3, [r7, #32]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3728      	adds	r7, #40	; 0x28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <osPoolFree+0x14>
    return osErrorParameter;
 8005a40:	2380      	movs	r3, #128	; 0x80
 8005a42:	e030      	b.n	8005aa6 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <osPoolFree+0x1e>
    return osErrorParameter;
 8005a4a:	2380      	movs	r3, #128	; 0x80
 8005a4c:	e02b      	b.n	8005aa6 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d201      	bcs.n	8005a5c <osPoolFree+0x2c>
    return osErrorParameter;
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	e024      	b.n	8005aa6 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6812      	ldr	r2, [r2, #0]
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a70:	fb02 f201 	mul.w	r2, r2, r1
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <osPoolFree+0x4e>
    return osErrorParameter;
 8005a7a:	2380      	movs	r3, #128	; 0x80
 8005a7c:	e013      	b.n	8005aa6 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d301      	bcc.n	8005a98 <osPoolFree+0x68>
    return osErrorParameter;
 8005a94:	2380      	movs	r3, #128	; 0x80
 8005a96:	e006      	b.n	8005aa6 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005ab2:	b590      	push	{r4, r7, lr}
 8005ab4:	b085      	sub	sp, #20
 8005ab6:	af02      	add	r7, sp, #8
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d012      	beq.n	8005aea <osMessageCreate+0x38>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00e      	beq.n	8005aea <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6818      	ldr	r0, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6859      	ldr	r1, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68dc      	ldr	r4, [r3, #12]
 8005adc:	2300      	movs	r3, #0
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	4623      	mov	r3, r4
 8005ae2:	f000 fae1 	bl	80060a8 <xQueueGenericCreateStatic>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	e008      	b.n	8005afc <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	4619      	mov	r1, r3
 8005af6:	f000 fb49 	bl	800618c <xQueueGenericCreate>
 8005afa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd90      	pop	{r4, r7, pc}

08005b04 <osMessageOverwrite>:
  
  return osOK;
}

osStatus osMessageOverwrite (osMessageQId queue_id, uint32_t info)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken = pdFALSE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]

  if (inHandlerMode()) {
 8005b12:	f7ff fe55 	bl	80057c0 <inHandlerMode>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d017      	beq.n	8005b4c <osMessageOverwrite+0x48>
    if (xQueueOverwriteFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005b1c:	f107 020c 	add.w	r2, r7, #12
 8005b20:	4639      	mov	r1, r7
 8005b22:	2302      	movs	r3, #2
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fc87 	bl	8006438 <xQueueGenericSendFromISR>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d001      	beq.n	8005b34 <osMessageOverwrite+0x30>
      return osErrorOS;
 8005b30:	23ff      	movs	r3, #255	; 0xff
 8005b32:	e017      	b.n	8005b64 <osMessageOverwrite+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d013      	beq.n	8005b62 <osMessageOverwrite+0x5e>
 8005b3a:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <osMessageOverwrite+0x68>)
 8005b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	e00a      	b.n	8005b62 <osMessageOverwrite+0x5e>
  }
  else {
    if (xQueueOverwrite(queue_id, &info) != pdTRUE) {
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	2302      	movs	r3, #2
 8005b50:	2200      	movs	r2, #0
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fb76 	bl	8006244 <xQueueGenericSend>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d001      	beq.n	8005b62 <osMessageOverwrite+0x5e>
      return osErrorOS;
 8005b5e:	23ff      	movs	r3, #255	; 0xff
 8005b60:	e000      	b.n	8005b64 <osMessageOverwrite+0x60>
    }
  }

  return osOK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	e000ed04 	.word	0xe000ed04

08005b70 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689c      	ldr	r4, [r3, #8]
 8005b8e:	200c      	movs	r0, #12
 8005b90:	f002 f92e 	bl	8007df0 <pvPortMalloc>
 8005b94:	4603      	mov	r3, r0
 8005b96:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <osMailCreate+0x36>
    return NULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e038      	b.n	8005c18 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6818      	ldr	r0, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	681c      	ldr	r4, [r3, #0]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2104      	movs	r1, #4
 8005bbe:	f000 fae5 	bl	800618c <xQueueGenericCreate>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d107      	bne.n	8005be2 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f002 f9cb 	bl	8007f74 <vPortFree>
    return NULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e01a      	b.n	8005c18 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	681c      	ldr	r4, [r3, #0]
 8005be8:	f107 030c 	add.w	r3, r7, #12
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff fe60 	bl	80058b2 <osPoolCreate>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f002 f9b3 	bl	8007f74 <vPortFree>
    return NULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e002      	b.n	8005c18 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd90      	pop	{r4, r7, pc}

08005c20 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <osMailAlloc+0x14>
    return NULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	e006      	b.n	8005c42 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff fe97 	bl	800596c <osPoolAlloc>
 8005c3e:	60f8      	str	r0, [r7, #12]
  
  return p;
 8005c40:	68fb      	ldr	r3, [r7, #12]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <osMailPut+0x14>
    return osErrorParameter;
 8005c5c:	2380      	movs	r3, #128	; 0x80
 8005c5e:	e02c      	b.n	8005cba <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8005c64:	f7ff fdac 	bl	80057c0 <inHandlerMode>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d018      	beq.n	8005ca0 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6858      	ldr	r0, [r3, #4]
 8005c72:	f107 020c 	add.w	r2, r7, #12
 8005c76:	4639      	mov	r1, r7
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f000 fbdd 	bl	8006438 <xQueueGenericSendFromISR>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d001      	beq.n	8005c88 <osMailPut+0x3c>
      return osErrorOS;
 8005c84:	23ff      	movs	r3, #255	; 0xff
 8005c86:	e018      	b.n	8005cba <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d014      	beq.n	8005cb8 <osMailPut+0x6c>
 8005c8e:	4b0d      	ldr	r3, [pc, #52]	; (8005cc4 <osMailPut+0x78>)
 8005c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	e00b      	b.n	8005cb8 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6858      	ldr	r0, [r3, #4]
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f000 facb 	bl	8006244 <xQueueGenericSend>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d001      	beq.n	8005cb8 <osMailPut+0x6c>
      return osErrorOS;
 8005cb4:	23ff      	movs	r3, #255	; 0xff
 8005cb6:	e000      	b.n	8005cba <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	e000ed04 	.word	0xe000ed04

08005cc8 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8005cc8:	b590      	push	{r4, r7, lr}
 8005cca:	b08b      	sub	sp, #44	; 0x2c
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8005cde:	2380      	movs	r3, #128	; 0x80
 8005ce0:	617b      	str	r3, [r7, #20]
    return event;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	461c      	mov	r4, r3
 8005ce6:	f107 0314 	add.w	r3, r7, #20
 8005cea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005cf2:	e056      	b.n	8005da2 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d103      	bne.n	8005d0c <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8005d04:	f04f 33ff 	mov.w	r3, #4294967295
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0a:	e009      	b.n	8005d20 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d006      	beq.n	8005d20 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <osMailGet+0x58>
      ticks = 1;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005d20:	f7ff fd4e 	bl	80057c0 <inHandlerMode>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01d      	beq.n	8005d66 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6858      	ldr	r0, [r3, #4]
 8005d2e:	f107 0220 	add.w	r2, r7, #32
 8005d32:	f107 0314 	add.w	r3, r7, #20
 8005d36:	3304      	adds	r3, #4
 8005d38:	4619      	mov	r1, r3
 8005d3a:	f000 fdcb 	bl	80068d4 <xQueueReceiveFromISR>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d102      	bne.n	8005d4a <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8005d44:	2320      	movs	r3, #32
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	e001      	b.n	8005d4e <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01e      	beq.n	8005d92 <osMailGet+0xca>
 8005d54:	4b15      	ldr	r3, [pc, #84]	; (8005dac <osMailGet+0xe4>)
 8005d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	e015      	b.n	8005d92 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	6858      	ldr	r0, [r3, #4]
 8005d6a:	f107 0314 	add.w	r3, r7, #20
 8005d6e:	3304      	adds	r3, #4
 8005d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d72:	4619      	mov	r1, r3
 8005d74:	f000 fbf4 	bl	8006560 <xQueueReceive>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d102      	bne.n	8005d84 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8005d7e:	2320      	movs	r3, #32
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e006      	b.n	8005d92 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <osMailGet+0xc6>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e000      	b.n	8005d90 <osMailGet+0xc8>
 8005d8e:	2340      	movs	r3, #64	; 0x40
 8005d90:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	461c      	mov	r4, r3
 8005d96:	f107 0314 	add.w	r3, r7, #20
 8005d9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	372c      	adds	r7, #44	; 0x2c
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd90      	pop	{r4, r7, pc}
 8005daa:	bf00      	nop
 8005dac:	e000ed04 	.word	0xe000ed04

08005db0 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <osMailFree+0x14>
    return osErrorParameter;
 8005dc0:	2380      	movs	r3, #128	; 0x80
 8005dc2:	e006      	b.n	8005dd2 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fe30 	bl	8005a30 <osPoolFree>
 8005dd0:	4603      	mov	r3, r0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <osMessagePeek>:
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
*/
osEvent osMessagePeek (osMessageQId queue_id, uint32_t millisec)
{
 8005dda:	b590      	push	{r4, r7, lr}
 8005ddc:	b089      	sub	sp, #36	; 0x24
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	607a      	str	r2, [r7, #4]
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <osMessagePeek+0x2c>
    event.status = osErrorParameter;
 8005df0:	2380      	movs	r3, #128	; 0x80
 8005df2:	613b      	str	r3, [r7, #16]
    return event;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	461c      	mov	r4, r3
 8005df8:	f107 0310 	add.w	r3, r7, #16
 8005dfc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e04:	e030      	b.n	8005e68 <osMessagePeek+0x8e>
  }
  
  ticks = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d103      	bne.n	8005e1a <osMessagePeek+0x40>
    ticks = portMAX_DELAY;
 8005e12:	f04f 33ff 	mov.w	r3, #4294967295
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	e009      	b.n	8005e2e <osMessagePeek+0x54>
  }
  else if (millisec != 0) {
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d006      	beq.n	8005e2e <osMessagePeek+0x54>
    ticks = millisec / portTICK_PERIOD_MS;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <osMessagePeek+0x54>
      ticks = 1;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
    }
  }
  
  if (xQueuePeek(queue_id, &event.value.v, ticks) == pdTRUE) 
 8005e2e:	f107 0310 	add.w	r3, r7, #16
 8005e32:	3304      	adds	r3, #4
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	4619      	mov	r1, r3
 8005e38:	68b8      	ldr	r0, [r7, #8]
 8005e3a:	f000 fc6d 	bl	8006718 <xQueuePeek>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d102      	bne.n	8005e4a <osMessagePeek+0x70>
  {
    /* We have mail */
    event.status = osEventMessage;
 8005e44:	2310      	movs	r3, #16
 8005e46:	613b      	str	r3, [r7, #16]
 8005e48:	e006      	b.n	8005e58 <osMessagePeek+0x7e>
  }
  else 
  {
    event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <osMessagePeek+0x7a>
 8005e50:	2300      	movs	r3, #0
 8005e52:	e000      	b.n	8005e56 <osMessagePeek+0x7c>
 8005e54:	2340      	movs	r3, #64	; 0x40
 8005e56:	613b      	str	r3, [r7, #16]
  }
  
  return event;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	461c      	mov	r4, r3
 8005e5c:	f107 0310 	add.w	r3, r7, #16
 8005e60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	3724      	adds	r7, #36	; 0x24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd90      	pop	{r4, r7, pc}

08005e70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f103 0208 	add.w	r2, r3, #8
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f04f 32ff 	mov.w	r2, #4294967295
 8005e88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f103 0208 	add.w	r2, r3, #8
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f103 0208 	add.w	r2, r3, #8
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	601a      	str	r2, [r3, #0]
}
 8005f06:	bf00      	nop
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f12:	b480      	push	{r7}
 8005f14:	b085      	sub	sp, #20
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d103      	bne.n	8005f32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	e00c      	b.n	8005f4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3308      	adds	r3, #8
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e002      	b.n	8005f40 <vListInsert+0x2e>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d2f6      	bcs.n	8005f3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]
}
 8005f78:	bf00      	nop
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6892      	ldr	r2, [r2, #8]
 8005f9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6852      	ldr	r2, [r2, #4]
 8005fa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d103      	bne.n	8005fb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	1e5a      	subs	r2, r3, #1
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d109      	bne.n	8006000 <xQueueGenericReset+0x28>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	e7fe      	b.n	8005ffe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006000:	f001 fddc 	bl	8007bbc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600c:	68f9      	ldr	r1, [r7, #12]
 800600e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006010:	fb01 f303 	mul.w	r3, r1, r3
 8006014:	441a      	add	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006030:	3b01      	subs	r3, #1
 8006032:	68f9      	ldr	r1, [r7, #12]
 8006034:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006036:	fb01 f303 	mul.w	r3, r1, r3
 800603a:	441a      	add	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	22ff      	movs	r2, #255	; 0xff
 8006044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	22ff      	movs	r2, #255	; 0xff
 800604c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d114      	bne.n	8006080 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d01a      	beq.n	8006094 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3310      	adds	r3, #16
 8006062:	4618      	mov	r0, r3
 8006064:	f001 f9c0 	bl	80073e8 <xTaskRemoveFromEventList>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d012      	beq.n	8006094 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800606e:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <xQueueGenericReset+0xcc>)
 8006070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	e009      	b.n	8006094 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3310      	adds	r3, #16
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff fef3 	bl	8005e70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3324      	adds	r3, #36	; 0x24
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff feee 	bl	8005e70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006094:	f001 fdc0 	bl	8007c18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006098:	2301      	movs	r3, #1
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	e000ed04 	.word	0xe000ed04

080060a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08e      	sub	sp, #56	; 0x38
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d109      	bne.n	80060d0 <xQueueGenericCreateStatic+0x28>
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ce:	e7fe      	b.n	80060ce <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d109      	bne.n	80060ea <xQueueGenericCreateStatic+0x42>
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
 80060e8:	e7fe      	b.n	80060e8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <xQueueGenericCreateStatic+0x4e>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <xQueueGenericCreateStatic+0x52>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <xQueueGenericCreateStatic+0x54>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d109      	bne.n	8006114 <xQueueGenericCreateStatic+0x6c>
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	623b      	str	r3, [r7, #32]
 8006112:	e7fe      	b.n	8006112 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <xQueueGenericCreateStatic+0x78>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <xQueueGenericCreateStatic+0x7c>
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <xQueueGenericCreateStatic+0x7e>
 8006124:	2300      	movs	r3, #0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d109      	bne.n	800613e <xQueueGenericCreateStatic+0x96>
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	e7fe      	b.n	800613c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800613e:	2348      	movs	r3, #72	; 0x48
 8006140:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b48      	cmp	r3, #72	; 0x48
 8006146:	d009      	beq.n	800615c <xQueueGenericCreateStatic+0xb4>
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	e7fe      	b.n	800615a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00d      	beq.n	8006182 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800616e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	4613      	mov	r3, r2
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f842 	bl	8006206 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006184:	4618      	mov	r0, r3
 8006186:	3730      	adds	r7, #48	; 0x30
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	; 0x28
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	4613      	mov	r3, r2
 8006198:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d109      	bne.n	80061b4 <xQueueGenericCreate+0x28>
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	e7fe      	b.n	80061b2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d102      	bne.n	80061c0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	e004      	b.n	80061ca <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	fb02 f303 	mul.w	r3, r2, r3
 80061c8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	3348      	adds	r3, #72	; 0x48
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 fe0e 	bl	8007df0 <pvPortMalloc>
 80061d4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00f      	beq.n	80061fc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	3348      	adds	r3, #72	; 0x48
 80061e0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061ea:	79fa      	ldrb	r2, [r7, #7]
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	4613      	mov	r3, r2
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f805 	bl	8006206 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80061fc:	69bb      	ldr	r3, [r7, #24]
	}
 80061fe:	4618      	mov	r0, r3
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	607a      	str	r2, [r7, #4]
 8006212:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d103      	bne.n	8006222 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	e002      	b.n	8006228 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006234:	2101      	movs	r1, #1
 8006236:	69b8      	ldr	r0, [r7, #24]
 8006238:	f7ff fece 	bl	8005fd8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08e      	sub	sp, #56	; 0x38
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006252:	2300      	movs	r3, #0
 8006254:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	2b00      	cmp	r3, #0
 800625e:	d109      	bne.n	8006274 <xQueueGenericSend+0x30>
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
 8006272:	e7fe      	b.n	8006272 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <xQueueGenericSend+0x3e>
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <xQueueGenericSend+0x42>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <xQueueGenericSend+0x44>
 8006286:	2300      	movs	r3, #0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d109      	bne.n	80062a0 <xQueueGenericSend+0x5c>
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
 800629e:	e7fe      	b.n	800629e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d103      	bne.n	80062ae <xQueueGenericSend+0x6a>
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <xQueueGenericSend+0x6e>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <xQueueGenericSend+0x70>
 80062b2:	2300      	movs	r3, #0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d109      	bne.n	80062cc <xQueueGenericSend+0x88>
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	623b      	str	r3, [r7, #32]
 80062ca:	e7fe      	b.n	80062ca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062cc:	f001 fa48 	bl	8007760 <xTaskGetSchedulerState>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <xQueueGenericSend+0x98>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <xQueueGenericSend+0x9c>
 80062dc:	2301      	movs	r3, #1
 80062de:	e000      	b.n	80062e2 <xQueueGenericSend+0x9e>
 80062e0:	2300      	movs	r3, #0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <xQueueGenericSend+0xb6>
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	e7fe      	b.n	80062f8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062fa:	f001 fc5f 	bl	8007bbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006306:	429a      	cmp	r2, r3
 8006308:	d302      	bcc.n	8006310 <xQueueGenericSend+0xcc>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b02      	cmp	r3, #2
 800630e:	d129      	bne.n	8006364 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	68b9      	ldr	r1, [r7, #8]
 8006314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006316:	f000 fb5a 	bl	80069ce <prvCopyDataToQueue>
 800631a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	d010      	beq.n	8006346 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	3324      	adds	r3, #36	; 0x24
 8006328:	4618      	mov	r0, r3
 800632a:	f001 f85d 	bl	80073e8 <xTaskRemoveFromEventList>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d013      	beq.n	800635c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006334:	4b3f      	ldr	r3, [pc, #252]	; (8006434 <xQueueGenericSend+0x1f0>)
 8006336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	e00a      	b.n	800635c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800634c:	4b39      	ldr	r3, [pc, #228]	; (8006434 <xQueueGenericSend+0x1f0>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800635c:	f001 fc5c 	bl	8007c18 <vPortExitCritical>
				return pdPASS;
 8006360:	2301      	movs	r3, #1
 8006362:	e063      	b.n	800642c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d103      	bne.n	8006372 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800636a:	f001 fc55 	bl	8007c18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800636e:	2300      	movs	r3, #0
 8006370:	e05c      	b.n	800642c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	2b00      	cmp	r3, #0
 8006376:	d106      	bne.n	8006386 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006378:	f107 0314 	add.w	r3, r7, #20
 800637c:	4618      	mov	r0, r3
 800637e:	f001 f895 	bl	80074ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006382:	2301      	movs	r3, #1
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006386:	f001 fc47 	bl	8007c18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800638a:	f000 fe49 	bl	8007020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800638e:	f001 fc15 	bl	8007bbc <vPortEnterCritical>
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006398:	b25b      	sxtb	r3, r3
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d103      	bne.n	80063a8 <xQueueGenericSend+0x164>
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ae:	b25b      	sxtb	r3, r3
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d103      	bne.n	80063be <xQueueGenericSend+0x17a>
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063be:	f001 fc2b 	bl	8007c18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063c2:	1d3a      	adds	r2, r7, #4
 80063c4:	f107 0314 	add.w	r3, r7, #20
 80063c8:	4611      	mov	r1, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 f884 	bl	80074d8 <xTaskCheckForTimeOut>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d124      	bne.n	8006420 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063d8:	f000 fbf1 	bl	8006bbe <prvIsQueueFull>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d018      	beq.n	8006414 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	3310      	adds	r3, #16
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	4611      	mov	r1, r2
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 ffd8 	bl	80073a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063f2:	f000 fb7c 	bl	8006aee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80063f6:	f000 fe21 	bl	800703c <xTaskResumeAll>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f47f af7c 	bne.w	80062fa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006402:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <xQueueGenericSend+0x1f0>)
 8006404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	e772      	b.n	80062fa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006416:	f000 fb6a 	bl	8006aee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800641a:	f000 fe0f 	bl	800703c <xTaskResumeAll>
 800641e:	e76c      	b.n	80062fa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006422:	f000 fb64 	bl	8006aee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006426:	f000 fe09 	bl	800703c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800642a:	2300      	movs	r3, #0
		}
	}
}
 800642c:	4618      	mov	r0, r3
 800642e:	3738      	adds	r7, #56	; 0x38
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	e000ed04 	.word	0xe000ed04

08006438 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08e      	sub	sp, #56	; 0x38
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	2b00      	cmp	r3, #0
 800644e:	d109      	bne.n	8006464 <xQueueGenericSendFromISR+0x2c>
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
 8006462:	e7fe      	b.n	8006462 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d103      	bne.n	8006472 <xQueueGenericSendFromISR+0x3a>
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <xQueueGenericSendFromISR+0x3e>
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <xQueueGenericSendFromISR+0x40>
 8006476:	2300      	movs	r3, #0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d109      	bne.n	8006490 <xQueueGenericSendFromISR+0x58>
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	623b      	str	r3, [r7, #32]
 800648e:	e7fe      	b.n	800648e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d103      	bne.n	800649e <xQueueGenericSendFromISR+0x66>
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <xQueueGenericSendFromISR+0x6a>
 800649e:	2301      	movs	r3, #1
 80064a0:	e000      	b.n	80064a4 <xQueueGenericSendFromISR+0x6c>
 80064a2:	2300      	movs	r3, #0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d109      	bne.n	80064bc <xQueueGenericSendFromISR+0x84>
 80064a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	e7fe      	b.n	80064ba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064bc:	f001 fc5a 	bl	8007d74 <vPortValidateInterruptPriority>
	__asm volatile
 80064c0:	f3ef 8211 	mrs	r2, BASEPRI
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	61ba      	str	r2, [r7, #24]
 80064d6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d302      	bcc.n	80064ee <xQueueGenericSendFromISR+0xb6>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d12c      	bne.n	8006548 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064fe:	f000 fa66 	bl	80069ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006502:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650a:	d112      	bne.n	8006532 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	2b00      	cmp	r3, #0
 8006512:	d016      	beq.n	8006542 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	3324      	adds	r3, #36	; 0x24
 8006518:	4618      	mov	r0, r3
 800651a:	f000 ff65 	bl	80073e8 <xTaskRemoveFromEventList>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00e      	beq.n	8006542 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	e007      	b.n	8006542 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006532:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006536:	3301      	adds	r3, #1
 8006538:	b2db      	uxtb	r3, r3
 800653a:	b25a      	sxtb	r2, r3
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006542:	2301      	movs	r3, #1
 8006544:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006546:	e001      	b.n	800654c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006548:	2300      	movs	r3, #0
 800654a:	637b      	str	r3, [r7, #52]	; 0x34
 800654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006558:	4618      	mov	r0, r3
 800655a:	3738      	adds	r7, #56	; 0x38
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08c      	sub	sp, #48	; 0x30
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800656c:	2300      	movs	r3, #0
 800656e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	2b00      	cmp	r3, #0
 8006578:	d109      	bne.n	800658e <xQueueReceive+0x2e>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	623b      	str	r3, [r7, #32]
 800658c:	e7fe      	b.n	800658c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d103      	bne.n	800659c <xQueueReceive+0x3c>
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <xQueueReceive+0x40>
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <xQueueReceive+0x42>
 80065a0:	2300      	movs	r3, #0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d109      	bne.n	80065ba <xQueueReceive+0x5a>
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	61fb      	str	r3, [r7, #28]
 80065b8:	e7fe      	b.n	80065b8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065ba:	f001 f8d1 	bl	8007760 <xTaskGetSchedulerState>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d102      	bne.n	80065ca <xQueueReceive+0x6a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <xQueueReceive+0x6e>
 80065ca:	2301      	movs	r3, #1
 80065cc:	e000      	b.n	80065d0 <xQueueReceive+0x70>
 80065ce:	2300      	movs	r3, #0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d109      	bne.n	80065e8 <xQueueReceive+0x88>
 80065d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	e7fe      	b.n	80065e6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80065e8:	f001 fae8 	bl	8007bbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d01f      	beq.n	8006638 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065f8:	68b9      	ldr	r1, [r7, #8]
 80065fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065fc:	f000 fa51 	bl	8006aa2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	1e5a      	subs	r2, r3, #1
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00f      	beq.n	8006630 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	3310      	adds	r3, #16
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fee7 	bl	80073e8 <xTaskRemoveFromEventList>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006620:	4b3c      	ldr	r3, [pc, #240]	; (8006714 <xQueueReceive+0x1b4>)
 8006622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006630:	f001 faf2 	bl	8007c18 <vPortExitCritical>
				return pdPASS;
 8006634:	2301      	movs	r3, #1
 8006636:	e069      	b.n	800670c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d103      	bne.n	8006646 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800663e:	f001 faeb 	bl	8007c18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006642:	2300      	movs	r3, #0
 8006644:	e062      	b.n	800670c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800664c:	f107 0310 	add.w	r3, r7, #16
 8006650:	4618      	mov	r0, r3
 8006652:	f000 ff2b 	bl	80074ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006656:	2301      	movs	r3, #1
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800665a:	f001 fadd 	bl	8007c18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800665e:	f000 fcdf 	bl	8007020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006662:	f001 faab 	bl	8007bbc <vPortEnterCritical>
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800666c:	b25b      	sxtb	r3, r3
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006672:	d103      	bne.n	800667c <xQueueReceive+0x11c>
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006682:	b25b      	sxtb	r3, r3
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006688:	d103      	bne.n	8006692 <xQueueReceive+0x132>
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006692:	f001 fac1 	bl	8007c18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006696:	1d3a      	adds	r2, r7, #4
 8006698:	f107 0310 	add.w	r3, r7, #16
 800669c:	4611      	mov	r1, r2
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 ff1a 	bl	80074d8 <xTaskCheckForTimeOut>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d123      	bne.n	80066f2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ac:	f000 fa71 	bl	8006b92 <prvIsQueueEmpty>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d017      	beq.n	80066e6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	3324      	adds	r3, #36	; 0x24
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	4611      	mov	r1, r2
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 fe6e 	bl	80073a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066c6:	f000 fa12 	bl	8006aee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066ca:	f000 fcb7 	bl	800703c <xTaskResumeAll>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d189      	bne.n	80065e8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80066d4:	4b0f      	ldr	r3, [pc, #60]	; (8006714 <xQueueReceive+0x1b4>)
 80066d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	e780      	b.n	80065e8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066e8:	f000 fa01 	bl	8006aee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066ec:	f000 fca6 	bl	800703c <xTaskResumeAll>
 80066f0:	e77a      	b.n	80065e8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066f4:	f000 f9fb 	bl	8006aee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066f8:	f000 fca0 	bl	800703c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066fe:	f000 fa48 	bl	8006b92 <prvIsQueueEmpty>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	f43f af6f 	beq.w	80065e8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800670a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800670c:	4618      	mov	r0, r3
 800670e:	3730      	adds	r7, #48	; 0x30
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <xQueuePeek>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08e      	sub	sp, #56	; 0x38
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006724:	2300      	movs	r3, #0
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <xQueuePeek+0x2e>
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
 8006744:	e7fe      	b.n	8006744 <xQueuePeek+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d103      	bne.n	8006754 <xQueuePeek+0x3c>
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <xQueuePeek+0x40>
 8006754:	2301      	movs	r3, #1
 8006756:	e000      	b.n	800675a <xQueuePeek+0x42>
 8006758:	2300      	movs	r3, #0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d109      	bne.n	8006772 <xQueuePeek+0x5a>
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	623b      	str	r3, [r7, #32]
 8006770:	e7fe      	b.n	8006770 <xQueuePeek+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006772:	f000 fff5 	bl	8007760 <xTaskGetSchedulerState>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d102      	bne.n	8006782 <xQueuePeek+0x6a>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <xQueuePeek+0x6e>
 8006782:	2301      	movs	r3, #1
 8006784:	e000      	b.n	8006788 <xQueuePeek+0x70>
 8006786:	2300      	movs	r3, #0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d109      	bne.n	80067a0 <xQueuePeek+0x88>
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	e7fe      	b.n	800679e <xQueuePeek+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80067a0:	f001 fa0c 	bl	8007bbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d021      	beq.n	80067f4 <xQueuePeek+0xdc>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ba:	f000 f972 	bl	8006aa2 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067c2:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00f      	beq.n	80067ec <xQueuePeek+0xd4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	3324      	adds	r3, #36	; 0x24
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fe09 	bl	80073e8 <xTaskRemoveFromEventList>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <xQueuePeek+0xd4>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80067dc:	4b3c      	ldr	r3, [pc, #240]	; (80068d0 <xQueuePeek+0x1b8>)
 80067de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067ec:	f001 fa14 	bl	8007c18 <vPortExitCritical>
				return pdPASS;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e069      	b.n	80068c8 <xQueuePeek+0x1b0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d103      	bne.n	8006802 <xQueuePeek+0xea>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067fa:	f001 fa0d 	bl	8007c18 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067fe:	2300      	movs	r3, #0
 8006800:	e062      	b.n	80068c8 <xQueuePeek+0x1b0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006804:	2b00      	cmp	r3, #0
 8006806:	d106      	bne.n	8006816 <xQueuePeek+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006808:	f107 0314 	add.w	r3, r7, #20
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fe4d 	bl	80074ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006812:	2301      	movs	r3, #1
 8006814:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006816:	f001 f9ff 	bl	8007c18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800681a:	f000 fc01 	bl	8007020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800681e:	f001 f9cd 	bl	8007bbc <vPortEnterCritical>
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006828:	b25b      	sxtb	r3, r3
 800682a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682e:	d103      	bne.n	8006838 <xQueuePeek+0x120>
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800683e:	b25b      	sxtb	r3, r3
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006844:	d103      	bne.n	800684e <xQueuePeek+0x136>
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800684e:	f001 f9e3 	bl	8007c18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006852:	1d3a      	adds	r2, r7, #4
 8006854:	f107 0314 	add.w	r3, r7, #20
 8006858:	4611      	mov	r1, r2
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fe3c 	bl	80074d8 <xTaskCheckForTimeOut>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d123      	bne.n	80068ae <xQueuePeek+0x196>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006868:	f000 f993 	bl	8006b92 <prvIsQueueEmpty>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d017      	beq.n	80068a2 <xQueuePeek+0x18a>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	3324      	adds	r3, #36	; 0x24
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	4611      	mov	r1, r2
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fd90 	bl	80073a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006882:	f000 f934 	bl	8006aee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006886:	f000 fbd9 	bl	800703c <xTaskResumeAll>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d187      	bne.n	80067a0 <xQueuePeek+0x88>
				{
					portYIELD_WITHIN_API();
 8006890:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <xQueuePeek+0x1b8>)
 8006892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	e77e      	b.n	80067a0 <xQueuePeek+0x88>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 80068a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068a4:	f000 f923 	bl	8006aee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068a8:	f000 fbc8 	bl	800703c <xTaskResumeAll>
 80068ac:	e778      	b.n	80067a0 <xQueuePeek+0x88>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 80068ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068b0:	f000 f91d 	bl	8006aee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068b4:	f000 fbc2 	bl	800703c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068ba:	f000 f96a 	bl	8006b92 <prvIsQueueEmpty>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f43f af6d 	beq.w	80067a0 <xQueuePeek+0x88>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3738      	adds	r7, #56	; 0x38
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	e000ed04 	.word	0xe000ed04

080068d4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08e      	sub	sp, #56	; 0x38
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <xQueueReceiveFromISR+0x2a>
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	623b      	str	r3, [r7, #32]
 80068fc:	e7fe      	b.n	80068fc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d103      	bne.n	800690c <xQueueReceiveFromISR+0x38>
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <xQueueReceiveFromISR+0x3c>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <xQueueReceiveFromISR+0x3e>
 8006910:	2300      	movs	r3, #0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d109      	bne.n	800692a <xQueueReceiveFromISR+0x56>
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	e7fe      	b.n	8006928 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800692a:	f001 fa23 	bl	8007d74 <vPortValidateInterruptPriority>
	__asm volatile
 800692e:	f3ef 8211 	mrs	r2, BASEPRI
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	61ba      	str	r2, [r7, #24]
 8006944:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006946:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006948:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	d02f      	beq.n	80069b6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800695c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006964:	f000 f89d 	bl	8006aa2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	1e5a      	subs	r2, r3, #1
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006970:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006978:	d112      	bne.n	80069a0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d016      	beq.n	80069b0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	3310      	adds	r3, #16
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fd2e 	bl	80073e8 <xTaskRemoveFromEventList>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	e007      	b.n	80069b0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80069a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069a4:	3301      	adds	r3, #1
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	b25a      	sxtb	r2, r3
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80069b0:	2301      	movs	r3, #1
 80069b2:	637b      	str	r3, [r7, #52]	; 0x34
 80069b4:	e001      	b.n	80069ba <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80069b6:	2300      	movs	r3, #0
 80069b8:	637b      	str	r3, [r7, #52]	; 0x34
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3738      	adds	r7, #56	; 0x38
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b086      	sub	sp, #24
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10d      	bne.n	8006a08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d14d      	bne.n	8006a90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fecf 	bl	800779c <xTaskPriorityDisinherit>
 80069fe:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	605a      	str	r2, [r3, #4]
 8006a06:	e043      	b.n	8006a90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d119      	bne.n	8006a42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6898      	ldr	r0, [r3, #8]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	461a      	mov	r2, r3
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	f001 fbe9 	bl	80081f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	441a      	add	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d32b      	bcc.n	8006a90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	609a      	str	r2, [r3, #8]
 8006a40:	e026      	b.n	8006a90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	68d8      	ldr	r0, [r3, #12]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	f001 fbcf 	bl	80081f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	425b      	negs	r3, r3
 8006a5c:	441a      	add	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d207      	bcs.n	8006a7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	425b      	negs	r3, r3
 8006a78:	441a      	add	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d105      	bne.n	8006a90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a98:	697b      	ldr	r3, [r7, #20]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d018      	beq.n	8006ae6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abc:	441a      	add	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d303      	bcc.n	8006ad6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68d9      	ldr	r1, [r3, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	461a      	mov	r2, r3
 8006ae0:	6838      	ldr	r0, [r7, #0]
 8006ae2:	f001 fb85 	bl	80081f0 <memcpy>
	}
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006af6:	f001 f861 	bl	8007bbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b02:	e011      	b.n	8006b28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d012      	beq.n	8006b32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3324      	adds	r3, #36	; 0x24
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fc69 	bl	80073e8 <xTaskRemoveFromEventList>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b1c:	f000 fd3c 	bl	8007598 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dce9      	bgt.n	8006b04 <prvUnlockQueue+0x16>
 8006b30:	e000      	b.n	8006b34 <prvUnlockQueue+0x46>
					break;
 8006b32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	22ff      	movs	r2, #255	; 0xff
 8006b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b3c:	f001 f86c 	bl	8007c18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b40:	f001 f83c 	bl	8007bbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b4c:	e011      	b.n	8006b72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d012      	beq.n	8006b7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3310      	adds	r3, #16
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fc44 	bl	80073e8 <xTaskRemoveFromEventList>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b66:	f000 fd17 	bl	8007598 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	dce9      	bgt.n	8006b4e <prvUnlockQueue+0x60>
 8006b7a:	e000      	b.n	8006b7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	22ff      	movs	r2, #255	; 0xff
 8006b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b86:	f001 f847 	bl	8007c18 <vPortExitCritical>
}
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b9a:	f001 f80f 	bl	8007bbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	e001      	b.n	8006bb0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bb0:	f001 f832 	bl	8007c18 <vPortExitCritical>

	return xReturn;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bc6:	f000 fff9 	bl	8007bbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d102      	bne.n	8006bdc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	e001      	b.n	8006be0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006be0:	f001 f81a 	bl	8007c18 <vPortExitCritical>

	return xReturn;
 8006be4:	68fb      	ldr	r3, [r7, #12]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b08e      	sub	sp, #56	; 0x38
 8006bf2:	af04      	add	r7, sp, #16
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	607a      	str	r2, [r7, #4]
 8006bfa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d109      	bne.n	8006c16 <xTaskCreateStatic+0x28>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	623b      	str	r3, [r7, #32]
 8006c14:	e7fe      	b.n	8006c14 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d109      	bne.n	8006c30 <xTaskCreateStatic+0x42>
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	e7fe      	b.n	8006c2e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c30:	2354      	movs	r3, #84	; 0x54
 8006c32:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	2b54      	cmp	r3, #84	; 0x54
 8006c38:	d009      	beq.n	8006c4e <xTaskCreateStatic+0x60>
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	e7fe      	b.n	8006c4c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d01e      	beq.n	8006c92 <xTaskCreateStatic+0xa4>
 8006c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01b      	beq.n	8006c92 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9303      	str	r3, [sp, #12]
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	9302      	str	r3, [sp, #8]
 8006c74:	f107 0314 	add.w	r3, r7, #20
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f850 	bl	8006d2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c8c:	f000 f8cc 	bl	8006e28 <prvAddNewTaskToReadyList>
 8006c90:	e001      	b.n	8006c96 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c96:	697b      	ldr	r3, [r7, #20]
	}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3728      	adds	r7, #40	; 0x28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08c      	sub	sp, #48	; 0x30
 8006ca4:	af04      	add	r7, sp, #16
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f001 f89b 	bl	8007df0 <pvPortMalloc>
 8006cba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00e      	beq.n	8006ce0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006cc2:	2054      	movs	r0, #84	; 0x54
 8006cc4:	f001 f894 	bl	8007df0 <pvPortMalloc>
 8006cc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d003      	beq.n	8006cd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8006cd6:	e005      	b.n	8006ce4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cd8:	6978      	ldr	r0, [r7, #20]
 8006cda:	f001 f94b 	bl	8007f74 <vPortFree>
 8006cde:	e001      	b.n	8006ce4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d017      	beq.n	8006d1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cf2:	88fa      	ldrh	r2, [r7, #6]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9303      	str	r3, [sp, #12]
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	9302      	str	r3, [sp, #8]
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	9301      	str	r3, [sp, #4]
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f80e 	bl	8006d2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d0e:	69f8      	ldr	r0, [r7, #28]
 8006d10:	f000 f88a 	bl	8006e28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d14:	2301      	movs	r3, #1
 8006d16:	61bb      	str	r3, [r7, #24]
 8006d18:	e002      	b.n	8006d20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d20:	69bb      	ldr	r3, [r7, #24]
	}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b088      	sub	sp, #32
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
 8006d36:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d42:	3b01      	subs	r3, #1
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	f023 0307 	bic.w	r3, r3, #7
 8006d50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d009      	beq.n	8006d70 <prvInitialiseNewTask+0x46>
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	617b      	str	r3, [r7, #20]
 8006d6e:	e7fe      	b.n	8006d6e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d70:	2300      	movs	r3, #0
 8006d72:	61fb      	str	r3, [r7, #28]
 8006d74:	e012      	b.n	8006d9c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	7819      	ldrb	r1, [r3, #0]
 8006d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	4413      	add	r3, r2
 8006d84:	3334      	adds	r3, #52	; 0x34
 8006d86:	460a      	mov	r2, r1
 8006d88:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	4413      	add	r3, r2
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d006      	beq.n	8006da4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	61fb      	str	r3, [r7, #28]
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	2b0f      	cmp	r3, #15
 8006da0:	d9e9      	bls.n	8006d76 <prvInitialiseNewTask+0x4c>
 8006da2:	e000      	b.n	8006da6 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006da4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	2b06      	cmp	r3, #6
 8006db2:	d901      	bls.n	8006db8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006db4:	2306      	movs	r3, #6
 8006db6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7ff f86e 	bl	8005eb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	3318      	adds	r3, #24
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff f869 	bl	8005eb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	f1c3 0207 	rsb	r2, r3, #7
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	2200      	movs	r2, #0
 8006df8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	68f9      	ldr	r1, [r7, #12]
 8006e06:	69b8      	ldr	r0, [r7, #24]
 8006e08:	f000 fdb2 	bl	8007970 <pxPortInitialiseStack>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e1e:	bf00      	nop
 8006e20:	3720      	adds	r7, #32
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e30:	f000 fec4 	bl	8007bbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e34:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <prvAddNewTaskToReadyList+0xb8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	4a29      	ldr	r2, [pc, #164]	; (8006ee0 <prvAddNewTaskToReadyList+0xb8>)
 8006e3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e3e:	4b29      	ldr	r3, [pc, #164]	; (8006ee4 <prvAddNewTaskToReadyList+0xbc>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d109      	bne.n	8006e5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e46:	4a27      	ldr	r2, [pc, #156]	; (8006ee4 <prvAddNewTaskToReadyList+0xbc>)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e4c:	4b24      	ldr	r3, [pc, #144]	; (8006ee0 <prvAddNewTaskToReadyList+0xb8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d110      	bne.n	8006e76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e54:	f000 fbc4 	bl	80075e0 <prvInitialiseTaskLists>
 8006e58:	e00d      	b.n	8006e76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e5a:	4b23      	ldr	r3, [pc, #140]	; (8006ee8 <prvAddNewTaskToReadyList+0xc0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e62:	4b20      	ldr	r3, [pc, #128]	; (8006ee4 <prvAddNewTaskToReadyList+0xbc>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d802      	bhi.n	8006e76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e70:	4a1c      	ldr	r2, [pc, #112]	; (8006ee4 <prvAddNewTaskToReadyList+0xbc>)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e76:	4b1d      	ldr	r3, [pc, #116]	; (8006eec <prvAddNewTaskToReadyList+0xc4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <prvAddNewTaskToReadyList+0xc4>)
 8006e7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	2201      	movs	r2, #1
 8006e86:	409a      	lsls	r2, r3
 8006e88:	4b19      	ldr	r3, [pc, #100]	; (8006ef0 <prvAddNewTaskToReadyList+0xc8>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	4a18      	ldr	r2, [pc, #96]	; (8006ef0 <prvAddNewTaskToReadyList+0xc8>)
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4a15      	ldr	r2, [pc, #84]	; (8006ef4 <prvAddNewTaskToReadyList+0xcc>)
 8006ea0:	441a      	add	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f7ff f80e 	bl	8005eca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006eae:	f000 feb3 	bl	8007c18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <prvAddNewTaskToReadyList+0xc0>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00e      	beq.n	8006ed8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006eba:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <prvAddNewTaskToReadyList+0xbc>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d207      	bcs.n	8006ed8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ec8:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <prvAddNewTaskToReadyList+0xd0>)
 8006eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ed8:	bf00      	nop
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000418 	.word	0x20000418
 8006ee4:	20000318 	.word	0x20000318
 8006ee8:	20000424 	.word	0x20000424
 8006eec:	20000434 	.word	0x20000434
 8006ef0:	20000420 	.word	0x20000420
 8006ef4:	2000031c 	.word	0x2000031c
 8006ef8:	e000ed04 	.word	0xe000ed04

08006efc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d016      	beq.n	8006f3c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f0e:	4b13      	ldr	r3, [pc, #76]	; (8006f5c <vTaskDelay+0x60>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d009      	beq.n	8006f2a <vTaskDelay+0x2e>
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	60bb      	str	r3, [r7, #8]
 8006f28:	e7fe      	b.n	8006f28 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006f2a:	f000 f879 	bl	8007020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f2e:	2100      	movs	r1, #0
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fcb7 	bl	80078a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f36:	f000 f881 	bl	800703c <xTaskResumeAll>
 8006f3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d107      	bne.n	8006f52 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006f42:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <vTaskDelay+0x64>)
 8006f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000440 	.word	0x20000440
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08a      	sub	sp, #40	; 0x28
 8006f68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f72:	463a      	mov	r2, r7
 8006f74:	1d39      	adds	r1, r7, #4
 8006f76:	f107 0308 	add.w	r3, r7, #8
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7f9 fb5c 	bl	8000638 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	9202      	str	r2, [sp, #8]
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	460a      	mov	r2, r1
 8006f92:	491d      	ldr	r1, [pc, #116]	; (8007008 <vTaskStartScheduler+0xa4>)
 8006f94:	481d      	ldr	r0, [pc, #116]	; (800700c <vTaskStartScheduler+0xa8>)
 8006f96:	f7ff fe2a 	bl	8006bee <xTaskCreateStatic>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	4b1c      	ldr	r3, [pc, #112]	; (8007010 <vTaskStartScheduler+0xac>)
 8006f9e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fa0:	4b1b      	ldr	r3, [pc, #108]	; (8007010 <vTaskStartScheduler+0xac>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	e001      	b.n	8006fb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d115      	bne.n	8006fe4 <vTaskStartScheduler+0x80>
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fca:	4b12      	ldr	r3, [pc, #72]	; (8007014 <vTaskStartScheduler+0xb0>)
 8006fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fd2:	4b11      	ldr	r3, [pc, #68]	; (8007018 <vTaskStartScheduler+0xb4>)
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006fd8:	4b10      	ldr	r3, [pc, #64]	; (800701c <vTaskStartScheduler+0xb8>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006fde:	f000 fd4f 	bl	8007a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006fe2:	e00d      	b.n	8007000 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fea:	d109      	bne.n	8007000 <vTaskStartScheduler+0x9c>
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	e7fe      	b.n	8006ffe <vTaskStartScheduler+0x9a>
}
 8007000:	bf00      	nop
 8007002:	3718      	adds	r7, #24
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	0800963c 	.word	0x0800963c
 800700c:	080075b1 	.word	0x080075b1
 8007010:	2000043c 	.word	0x2000043c
 8007014:	20000438 	.word	0x20000438
 8007018:	20000424 	.word	0x20000424
 800701c:	2000041c 	.word	0x2000041c

08007020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007020:	b480      	push	{r7}
 8007022:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007024:	4b04      	ldr	r3, [pc, #16]	; (8007038 <vTaskSuspendAll+0x18>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3301      	adds	r3, #1
 800702a:	4a03      	ldr	r2, [pc, #12]	; (8007038 <vTaskSuspendAll+0x18>)
 800702c:	6013      	str	r3, [r2, #0]
}
 800702e:	bf00      	nop
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	20000440 	.word	0x20000440

0800703c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007046:	2300      	movs	r3, #0
 8007048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800704a:	4b41      	ldr	r3, [pc, #260]	; (8007150 <xTaskResumeAll+0x114>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d109      	bne.n	8007066 <xTaskResumeAll+0x2a>
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	e7fe      	b.n	8007064 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007066:	f000 fda9 	bl	8007bbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800706a:	4b39      	ldr	r3, [pc, #228]	; (8007150 <xTaskResumeAll+0x114>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3b01      	subs	r3, #1
 8007070:	4a37      	ldr	r2, [pc, #220]	; (8007150 <xTaskResumeAll+0x114>)
 8007072:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007074:	4b36      	ldr	r3, [pc, #216]	; (8007150 <xTaskResumeAll+0x114>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d161      	bne.n	8007140 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800707c:	4b35      	ldr	r3, [pc, #212]	; (8007154 <xTaskResumeAll+0x118>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d05d      	beq.n	8007140 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007084:	e02e      	b.n	80070e4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007086:	4b34      	ldr	r3, [pc, #208]	; (8007158 <xTaskResumeAll+0x11c>)
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3318      	adds	r3, #24
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe ff76 	bl	8005f84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3304      	adds	r3, #4
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe ff71 	bl	8005f84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	2201      	movs	r2, #1
 80070a8:	409a      	lsls	r2, r3
 80070aa:	4b2c      	ldr	r3, [pc, #176]	; (800715c <xTaskResumeAll+0x120>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	4a2a      	ldr	r2, [pc, #168]	; (800715c <xTaskResumeAll+0x120>)
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b8:	4613      	mov	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4a27      	ldr	r2, [pc, #156]	; (8007160 <xTaskResumeAll+0x124>)
 80070c2:	441a      	add	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3304      	adds	r3, #4
 80070c8:	4619      	mov	r1, r3
 80070ca:	4610      	mov	r0, r2
 80070cc:	f7fe fefd 	bl	8005eca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d4:	4b23      	ldr	r3, [pc, #140]	; (8007164 <xTaskResumeAll+0x128>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070da:	429a      	cmp	r2, r3
 80070dc:	d302      	bcc.n	80070e4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80070de:	4b22      	ldr	r3, [pc, #136]	; (8007168 <xTaskResumeAll+0x12c>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070e4:	4b1c      	ldr	r3, [pc, #112]	; (8007158 <xTaskResumeAll+0x11c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1cc      	bne.n	8007086 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070f2:	f000 fb0f 	bl	8007714 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80070f6:	4b1d      	ldr	r3, [pc, #116]	; (800716c <xTaskResumeAll+0x130>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d010      	beq.n	8007124 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007102:	f000 f837 	bl	8007174 <xTaskIncrementTick>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800710c:	4b16      	ldr	r3, [pc, #88]	; (8007168 <xTaskResumeAll+0x12c>)
 800710e:	2201      	movs	r2, #1
 8007110:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3b01      	subs	r3, #1
 8007116:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1f1      	bne.n	8007102 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800711e:	4b13      	ldr	r3, [pc, #76]	; (800716c <xTaskResumeAll+0x130>)
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007124:	4b10      	ldr	r3, [pc, #64]	; (8007168 <xTaskResumeAll+0x12c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d009      	beq.n	8007140 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007130:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <xTaskResumeAll+0x134>)
 8007132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007140:	f000 fd6a 	bl	8007c18 <vPortExitCritical>

	return xAlreadyYielded;
 8007144:	68bb      	ldr	r3, [r7, #8]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20000440 	.word	0x20000440
 8007154:	20000418 	.word	0x20000418
 8007158:	200003d8 	.word	0x200003d8
 800715c:	20000420 	.word	0x20000420
 8007160:	2000031c 	.word	0x2000031c
 8007164:	20000318 	.word	0x20000318
 8007168:	2000042c 	.word	0x2000042c
 800716c:	20000428 	.word	0x20000428
 8007170:	e000ed04 	.word	0xe000ed04

08007174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800717e:	4b50      	ldr	r3, [pc, #320]	; (80072c0 <xTaskIncrementTick+0x14c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	f040 808c 	bne.w	80072a0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007188:	4b4e      	ldr	r3, [pc, #312]	; (80072c4 <xTaskIncrementTick+0x150>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3301      	adds	r3, #1
 800718e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007190:	4a4c      	ldr	r2, [pc, #304]	; (80072c4 <xTaskIncrementTick+0x150>)
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d11f      	bne.n	80071dc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800719c:	4b4a      	ldr	r3, [pc, #296]	; (80072c8 <xTaskIncrementTick+0x154>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d009      	beq.n	80071ba <xTaskIncrementTick+0x46>
 80071a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	e7fe      	b.n	80071b8 <xTaskIncrementTick+0x44>
 80071ba:	4b43      	ldr	r3, [pc, #268]	; (80072c8 <xTaskIncrementTick+0x154>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	4b42      	ldr	r3, [pc, #264]	; (80072cc <xTaskIncrementTick+0x158>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a40      	ldr	r2, [pc, #256]	; (80072c8 <xTaskIncrementTick+0x154>)
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	4a40      	ldr	r2, [pc, #256]	; (80072cc <xTaskIncrementTick+0x158>)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	4b40      	ldr	r3, [pc, #256]	; (80072d0 <xTaskIncrementTick+0x15c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3301      	adds	r3, #1
 80071d4:	4a3e      	ldr	r2, [pc, #248]	; (80072d0 <xTaskIncrementTick+0x15c>)
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	f000 fa9c 	bl	8007714 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071dc:	4b3d      	ldr	r3, [pc, #244]	; (80072d4 <xTaskIncrementTick+0x160>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d34d      	bcc.n	8007282 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071e6:	4b38      	ldr	r3, [pc, #224]	; (80072c8 <xTaskIncrementTick+0x154>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <xTaskIncrementTick+0x80>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e000      	b.n	80071f6 <xTaskIncrementTick+0x82>
 80071f4:	2300      	movs	r3, #0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d004      	beq.n	8007204 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071fa:	4b36      	ldr	r3, [pc, #216]	; (80072d4 <xTaskIncrementTick+0x160>)
 80071fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007200:	601a      	str	r2, [r3, #0]
					break;
 8007202:	e03e      	b.n	8007282 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007204:	4b30      	ldr	r3, [pc, #192]	; (80072c8 <xTaskIncrementTick+0x154>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	429a      	cmp	r2, r3
 800721a:	d203      	bcs.n	8007224 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800721c:	4a2d      	ldr	r2, [pc, #180]	; (80072d4 <xTaskIncrementTick+0x160>)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6013      	str	r3, [r2, #0]
						break;
 8007222:	e02e      	b.n	8007282 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	3304      	adds	r3, #4
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe feab 	bl	8005f84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	2b00      	cmp	r3, #0
 8007234:	d004      	beq.n	8007240 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	3318      	adds	r3, #24
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe fea2 	bl	8005f84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	2201      	movs	r2, #1
 8007246:	409a      	lsls	r2, r3
 8007248:	4b23      	ldr	r3, [pc, #140]	; (80072d8 <xTaskIncrementTick+0x164>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4313      	orrs	r3, r2
 800724e:	4a22      	ldr	r2, [pc, #136]	; (80072d8 <xTaskIncrementTick+0x164>)
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007256:	4613      	mov	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4a1f      	ldr	r2, [pc, #124]	; (80072dc <xTaskIncrementTick+0x168>)
 8007260:	441a      	add	r2, r3
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	3304      	adds	r3, #4
 8007266:	4619      	mov	r1, r3
 8007268:	4610      	mov	r0, r2
 800726a:	f7fe fe2e 	bl	8005eca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007272:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <xTaskIncrementTick+0x16c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	429a      	cmp	r2, r3
 800727a:	d3b4      	bcc.n	80071e6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800727c:	2301      	movs	r3, #1
 800727e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007280:	e7b1      	b.n	80071e6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007282:	4b17      	ldr	r3, [pc, #92]	; (80072e0 <xTaskIncrementTick+0x16c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007288:	4914      	ldr	r1, [pc, #80]	; (80072dc <xTaskIncrementTick+0x168>)
 800728a:	4613      	mov	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	440b      	add	r3, r1
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d907      	bls.n	80072aa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800729a:	2301      	movs	r3, #1
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	e004      	b.n	80072aa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80072a0:	4b10      	ldr	r3, [pc, #64]	; (80072e4 <xTaskIncrementTick+0x170>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3301      	adds	r3, #1
 80072a6:	4a0f      	ldr	r2, [pc, #60]	; (80072e4 <xTaskIncrementTick+0x170>)
 80072a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80072aa:	4b0f      	ldr	r3, [pc, #60]	; (80072e8 <xTaskIncrementTick+0x174>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80072b2:	2301      	movs	r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80072b6:	697b      	ldr	r3, [r7, #20]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20000440 	.word	0x20000440
 80072c4:	2000041c 	.word	0x2000041c
 80072c8:	200003d0 	.word	0x200003d0
 80072cc:	200003d4 	.word	0x200003d4
 80072d0:	20000430 	.word	0x20000430
 80072d4:	20000438 	.word	0x20000438
 80072d8:	20000420 	.word	0x20000420
 80072dc:	2000031c 	.word	0x2000031c
 80072e0:	20000318 	.word	0x20000318
 80072e4:	20000428 	.word	0x20000428
 80072e8:	2000042c 	.word	0x2000042c

080072ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072f2:	4b26      	ldr	r3, [pc, #152]	; (800738c <vTaskSwitchContext+0xa0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072fa:	4b25      	ldr	r3, [pc, #148]	; (8007390 <vTaskSwitchContext+0xa4>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007300:	e03e      	b.n	8007380 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007302:	4b23      	ldr	r3, [pc, #140]	; (8007390 <vTaskSwitchContext+0xa4>)
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007308:	4b22      	ldr	r3, [pc, #136]	; (8007394 <vTaskSwitchContext+0xa8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	fab3 f383 	clz	r3, r3
 8007314:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007316:	7afb      	ldrb	r3, [r7, #11]
 8007318:	f1c3 031f 	rsb	r3, r3, #31
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	491e      	ldr	r1, [pc, #120]	; (8007398 <vTaskSwitchContext+0xac>)
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	440b      	add	r3, r1
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d109      	bne.n	8007346 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	607b      	str	r3, [r7, #4]
 8007344:	e7fe      	b.n	8007344 <vTaskSwitchContext+0x58>
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4a11      	ldr	r2, [pc, #68]	; (8007398 <vTaskSwitchContext+0xac>)
 8007352:	4413      	add	r3, r2
 8007354:	613b      	str	r3, [r7, #16]
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	605a      	str	r2, [r3, #4]
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	3308      	adds	r3, #8
 8007368:	429a      	cmp	r2, r3
 800736a:	d104      	bne.n	8007376 <vTaskSwitchContext+0x8a>
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	605a      	str	r2, [r3, #4]
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	4a07      	ldr	r2, [pc, #28]	; (800739c <vTaskSwitchContext+0xb0>)
 800737e:	6013      	str	r3, [r2, #0]
}
 8007380:	bf00      	nop
 8007382:	371c      	adds	r7, #28
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	20000440 	.word	0x20000440
 8007390:	2000042c 	.word	0x2000042c
 8007394:	20000420 	.word	0x20000420
 8007398:	2000031c 	.word	0x2000031c
 800739c:	20000318 	.word	0x20000318

080073a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d109      	bne.n	80073c4 <vTaskPlaceOnEventList+0x24>
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	e7fe      	b.n	80073c2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073c4:	4b07      	ldr	r3, [pc, #28]	; (80073e4 <vTaskPlaceOnEventList+0x44>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3318      	adds	r3, #24
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7fe fda0 	bl	8005f12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073d2:	2101      	movs	r1, #1
 80073d4:	6838      	ldr	r0, [r7, #0]
 80073d6:	f000 fa65 	bl	80078a4 <prvAddCurrentTaskToDelayedList>
}
 80073da:	bf00      	nop
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20000318 	.word	0x20000318

080073e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d109      	bne.n	8007412 <xTaskRemoveFromEventList+0x2a>
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	e7fe      	b.n	8007410 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	3318      	adds	r3, #24
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe fdb4 	bl	8005f84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800741c:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <xTaskRemoveFromEventList+0xac>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d11c      	bne.n	800745e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	3304      	adds	r3, #4
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe fdab 	bl	8005f84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	2201      	movs	r2, #1
 8007434:	409a      	lsls	r2, r3
 8007436:	4b18      	ldr	r3, [pc, #96]	; (8007498 <xTaskRemoveFromEventList+0xb0>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4313      	orrs	r3, r2
 800743c:	4a16      	ldr	r2, [pc, #88]	; (8007498 <xTaskRemoveFromEventList+0xb0>)
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4a13      	ldr	r2, [pc, #76]	; (800749c <xTaskRemoveFromEventList+0xb4>)
 800744e:	441a      	add	r2, r3
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	3304      	adds	r3, #4
 8007454:	4619      	mov	r1, r3
 8007456:	4610      	mov	r0, r2
 8007458:	f7fe fd37 	bl	8005eca <vListInsertEnd>
 800745c:	e005      	b.n	800746a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	3318      	adds	r3, #24
 8007462:	4619      	mov	r1, r3
 8007464:	480e      	ldr	r0, [pc, #56]	; (80074a0 <xTaskRemoveFromEventList+0xb8>)
 8007466:	f7fe fd30 	bl	8005eca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <xTaskRemoveFromEventList+0xbc>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	429a      	cmp	r2, r3
 8007476:	d905      	bls.n	8007484 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007478:	2301      	movs	r3, #1
 800747a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800747c:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <xTaskRemoveFromEventList+0xc0>)
 800747e:	2201      	movs	r2, #1
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	e001      	b.n	8007488 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007484:	2300      	movs	r3, #0
 8007486:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007488:	697b      	ldr	r3, [r7, #20]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20000440 	.word	0x20000440
 8007498:	20000420 	.word	0x20000420
 800749c:	2000031c 	.word	0x2000031c
 80074a0:	200003d8 	.word	0x200003d8
 80074a4:	20000318 	.word	0x20000318
 80074a8:	2000042c 	.word	0x2000042c

080074ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074b4:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <vTaskInternalSetTimeOutState+0x24>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074bc:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <vTaskInternalSetTimeOutState+0x28>)
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	605a      	str	r2, [r3, #4]
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	20000430 	.word	0x20000430
 80074d4:	2000041c 	.word	0x2000041c

080074d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d109      	bne.n	80074fc <xTaskCheckForTimeOut+0x24>
 80074e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	613b      	str	r3, [r7, #16]
 80074fa:	e7fe      	b.n	80074fa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d109      	bne.n	8007516 <xTaskCheckForTimeOut+0x3e>
 8007502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	e7fe      	b.n	8007514 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007516:	f000 fb51 	bl	8007bbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800751a:	4b1d      	ldr	r3, [pc, #116]	; (8007590 <xTaskCheckForTimeOut+0xb8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007532:	d102      	bne.n	800753a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	e023      	b.n	8007582 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4b15      	ldr	r3, [pc, #84]	; (8007594 <xTaskCheckForTimeOut+0xbc>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d007      	beq.n	8007556 <xTaskCheckForTimeOut+0x7e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	429a      	cmp	r2, r3
 800754e:	d302      	bcc.n	8007556 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007550:	2301      	movs	r3, #1
 8007552:	61fb      	str	r3, [r7, #28]
 8007554:	e015      	b.n	8007582 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	429a      	cmp	r2, r3
 800755e:	d20b      	bcs.n	8007578 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	1ad2      	subs	r2, r2, r3
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ff9d 	bl	80074ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007572:	2300      	movs	r3, #0
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	e004      	b.n	8007582 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800757e:	2301      	movs	r3, #1
 8007580:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007582:	f000 fb49 	bl	8007c18 <vPortExitCritical>

	return xReturn;
 8007586:	69fb      	ldr	r3, [r7, #28]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3720      	adds	r7, #32
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	2000041c 	.word	0x2000041c
 8007594:	20000430 	.word	0x20000430

08007598 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800759c:	4b03      	ldr	r3, [pc, #12]	; (80075ac <vTaskMissedYield+0x14>)
 800759e:	2201      	movs	r2, #1
 80075a0:	601a      	str	r2, [r3, #0]
}
 80075a2:	bf00      	nop
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	2000042c 	.word	0x2000042c

080075b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075b8:	f000 f852 	bl	8007660 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <prvIdleTask+0x28>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d9f9      	bls.n	80075b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075c4:	4b05      	ldr	r3, [pc, #20]	; (80075dc <prvIdleTask+0x2c>)
 80075c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075d4:	e7f0      	b.n	80075b8 <prvIdleTask+0x8>
 80075d6:	bf00      	nop
 80075d8:	2000031c 	.word	0x2000031c
 80075dc:	e000ed04 	.word	0xe000ed04

080075e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075e6:	2300      	movs	r3, #0
 80075e8:	607b      	str	r3, [r7, #4]
 80075ea:	e00c      	b.n	8007606 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4a12      	ldr	r2, [pc, #72]	; (8007640 <prvInitialiseTaskLists+0x60>)
 80075f8:	4413      	add	r3, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fc38 	bl	8005e70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3301      	adds	r3, #1
 8007604:	607b      	str	r3, [r7, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b06      	cmp	r3, #6
 800760a:	d9ef      	bls.n	80075ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800760c:	480d      	ldr	r0, [pc, #52]	; (8007644 <prvInitialiseTaskLists+0x64>)
 800760e:	f7fe fc2f 	bl	8005e70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007612:	480d      	ldr	r0, [pc, #52]	; (8007648 <prvInitialiseTaskLists+0x68>)
 8007614:	f7fe fc2c 	bl	8005e70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007618:	480c      	ldr	r0, [pc, #48]	; (800764c <prvInitialiseTaskLists+0x6c>)
 800761a:	f7fe fc29 	bl	8005e70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800761e:	480c      	ldr	r0, [pc, #48]	; (8007650 <prvInitialiseTaskLists+0x70>)
 8007620:	f7fe fc26 	bl	8005e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007624:	480b      	ldr	r0, [pc, #44]	; (8007654 <prvInitialiseTaskLists+0x74>)
 8007626:	f7fe fc23 	bl	8005e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800762a:	4b0b      	ldr	r3, [pc, #44]	; (8007658 <prvInitialiseTaskLists+0x78>)
 800762c:	4a05      	ldr	r2, [pc, #20]	; (8007644 <prvInitialiseTaskLists+0x64>)
 800762e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007630:	4b0a      	ldr	r3, [pc, #40]	; (800765c <prvInitialiseTaskLists+0x7c>)
 8007632:	4a05      	ldr	r2, [pc, #20]	; (8007648 <prvInitialiseTaskLists+0x68>)
 8007634:	601a      	str	r2, [r3, #0]
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	2000031c 	.word	0x2000031c
 8007644:	200003a8 	.word	0x200003a8
 8007648:	200003bc 	.word	0x200003bc
 800764c:	200003d8 	.word	0x200003d8
 8007650:	200003ec 	.word	0x200003ec
 8007654:	20000404 	.word	0x20000404
 8007658:	200003d0 	.word	0x200003d0
 800765c:	200003d4 	.word	0x200003d4

08007660 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007666:	e019      	b.n	800769c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007668:	f000 faa8 	bl	8007bbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800766c:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <prvCheckTasksWaitingTermination+0x4c>)
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe fc83 	bl	8005f84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800767e:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <prvCheckTasksWaitingTermination+0x50>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3b01      	subs	r3, #1
 8007684:	4a0a      	ldr	r2, [pc, #40]	; (80076b0 <prvCheckTasksWaitingTermination+0x50>)
 8007686:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007688:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <prvCheckTasksWaitingTermination+0x54>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3b01      	subs	r3, #1
 800768e:	4a09      	ldr	r2, [pc, #36]	; (80076b4 <prvCheckTasksWaitingTermination+0x54>)
 8007690:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007692:	f000 fac1 	bl	8007c18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f80e 	bl	80076b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800769c:	4b05      	ldr	r3, [pc, #20]	; (80076b4 <prvCheckTasksWaitingTermination+0x54>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e1      	bne.n	8007668 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	200003ec 	.word	0x200003ec
 80076b0:	20000418 	.word	0x20000418
 80076b4:	20000400 	.word	0x20000400

080076b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d108      	bne.n	80076dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fc50 	bl	8007f74 <vPortFree>
				vPortFree( pxTCB );
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fc4d 	bl	8007f74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076da:	e017      	b.n	800770c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d103      	bne.n	80076ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fc44 	bl	8007f74 <vPortFree>
	}
 80076ec:	e00e      	b.n	800770c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d009      	beq.n	800770c <prvDeleteTCB+0x54>
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	60fb      	str	r3, [r7, #12]
 800770a:	e7fe      	b.n	800770a <prvDeleteTCB+0x52>
	}
 800770c:	bf00      	nop
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800771a:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <prvResetNextTaskUnblockTime+0x44>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <prvResetNextTaskUnblockTime+0x14>
 8007724:	2301      	movs	r3, #1
 8007726:	e000      	b.n	800772a <prvResetNextTaskUnblockTime+0x16>
 8007728:	2300      	movs	r3, #0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d004      	beq.n	8007738 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800772e:	4b0b      	ldr	r3, [pc, #44]	; (800775c <prvResetNextTaskUnblockTime+0x48>)
 8007730:	f04f 32ff 	mov.w	r2, #4294967295
 8007734:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007736:	e008      	b.n	800774a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007738:	4b07      	ldr	r3, [pc, #28]	; (8007758 <prvResetNextTaskUnblockTime+0x44>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	4a05      	ldr	r2, [pc, #20]	; (800775c <prvResetNextTaskUnblockTime+0x48>)
 8007748:	6013      	str	r3, [r2, #0]
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	200003d0 	.word	0x200003d0
 800775c:	20000438 	.word	0x20000438

08007760 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007766:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <xTaskGetSchedulerState+0x34>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d102      	bne.n	8007774 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800776e:	2301      	movs	r3, #1
 8007770:	607b      	str	r3, [r7, #4]
 8007772:	e008      	b.n	8007786 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007774:	4b08      	ldr	r3, [pc, #32]	; (8007798 <xTaskGetSchedulerState+0x38>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d102      	bne.n	8007782 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800777c:	2302      	movs	r3, #2
 800777e:	607b      	str	r3, [r7, #4]
 8007780:	e001      	b.n	8007786 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007782:	2300      	movs	r3, #0
 8007784:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007786:	687b      	ldr	r3, [r7, #4]
	}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	20000424 	.word	0x20000424
 8007798:	20000440 	.word	0x20000440

0800779c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d06c      	beq.n	800788c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077b2:	4b39      	ldr	r3, [pc, #228]	; (8007898 <xTaskPriorityDisinherit+0xfc>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d009      	beq.n	80077d0 <xTaskPriorityDisinherit+0x34>
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	e7fe      	b.n	80077ce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d109      	bne.n	80077ec <xTaskPriorityDisinherit+0x50>
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	e7fe      	b.n	80077ea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f0:	1e5a      	subs	r2, r3, #1
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fe:	429a      	cmp	r2, r3
 8007800:	d044      	beq.n	800788c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007806:	2b00      	cmp	r3, #0
 8007808:	d140      	bne.n	800788c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	3304      	adds	r3, #4
 800780e:	4618      	mov	r0, r3
 8007810:	f7fe fbb8 	bl	8005f84 <uxListRemove>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d115      	bne.n	8007846 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781e:	491f      	ldr	r1, [pc, #124]	; (800789c <xTaskPriorityDisinherit+0x100>)
 8007820:	4613      	mov	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	440b      	add	r3, r1
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <xTaskPriorityDisinherit+0xaa>
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	2201      	movs	r2, #1
 8007836:	fa02 f303 	lsl.w	r3, r2, r3
 800783a:	43da      	mvns	r2, r3
 800783c:	4b18      	ldr	r3, [pc, #96]	; (80078a0 <xTaskPriorityDisinherit+0x104>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4013      	ands	r3, r2
 8007842:	4a17      	ldr	r2, [pc, #92]	; (80078a0 <xTaskPriorityDisinherit+0x104>)
 8007844:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007852:	f1c3 0207 	rsb	r2, r3, #7
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	2201      	movs	r2, #1
 8007860:	409a      	lsls	r2, r3
 8007862:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <xTaskPriorityDisinherit+0x104>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4313      	orrs	r3, r2
 8007868:	4a0d      	ldr	r2, [pc, #52]	; (80078a0 <xTaskPriorityDisinherit+0x104>)
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007870:	4613      	mov	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4a08      	ldr	r2, [pc, #32]	; (800789c <xTaskPriorityDisinherit+0x100>)
 800787a:	441a      	add	r2, r3
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	3304      	adds	r3, #4
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f7fe fb21 	bl	8005eca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007888:	2301      	movs	r3, #1
 800788a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800788c:	697b      	ldr	r3, [r7, #20]
	}
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20000318 	.word	0x20000318
 800789c:	2000031c 	.word	0x2000031c
 80078a0:	20000420 	.word	0x20000420

080078a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078ae:	4b29      	ldr	r3, [pc, #164]	; (8007954 <prvAddCurrentTaskToDelayedList+0xb0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078b4:	4b28      	ldr	r3, [pc, #160]	; (8007958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3304      	adds	r3, #4
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fb62 	bl	8005f84 <uxListRemove>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10b      	bne.n	80078de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80078c6:	4b24      	ldr	r3, [pc, #144]	; (8007958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078cc:	2201      	movs	r2, #1
 80078ce:	fa02 f303 	lsl.w	r3, r2, r3
 80078d2:	43da      	mvns	r2, r3
 80078d4:	4b21      	ldr	r3, [pc, #132]	; (800795c <prvAddCurrentTaskToDelayedList+0xb8>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4013      	ands	r3, r2
 80078da:	4a20      	ldr	r2, [pc, #128]	; (800795c <prvAddCurrentTaskToDelayedList+0xb8>)
 80078dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e4:	d10a      	bne.n	80078fc <prvAddCurrentTaskToDelayedList+0x58>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d007      	beq.n	80078fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ec:	4b1a      	ldr	r3, [pc, #104]	; (8007958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3304      	adds	r3, #4
 80078f2:	4619      	mov	r1, r3
 80078f4:	481a      	ldr	r0, [pc, #104]	; (8007960 <prvAddCurrentTaskToDelayedList+0xbc>)
 80078f6:	f7fe fae8 	bl	8005eca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078fa:	e026      	b.n	800794a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4413      	add	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007904:	4b14      	ldr	r3, [pc, #80]	; (8007958 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	429a      	cmp	r2, r3
 8007912:	d209      	bcs.n	8007928 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007914:	4b13      	ldr	r3, [pc, #76]	; (8007964 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	4b0f      	ldr	r3, [pc, #60]	; (8007958 <prvAddCurrentTaskToDelayedList+0xb4>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3304      	adds	r3, #4
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f7fe faf6 	bl	8005f12 <vListInsert>
}
 8007926:	e010      	b.n	800794a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007928:	4b0f      	ldr	r3, [pc, #60]	; (8007968 <prvAddCurrentTaskToDelayedList+0xc4>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <prvAddCurrentTaskToDelayedList+0xb4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3304      	adds	r3, #4
 8007932:	4619      	mov	r1, r3
 8007934:	4610      	mov	r0, r2
 8007936:	f7fe faec 	bl	8005f12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800793a:	4b0c      	ldr	r3, [pc, #48]	; (800796c <prvAddCurrentTaskToDelayedList+0xc8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	429a      	cmp	r2, r3
 8007942:	d202      	bcs.n	800794a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007944:	4a09      	ldr	r2, [pc, #36]	; (800796c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6013      	str	r3, [r2, #0]
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	2000041c 	.word	0x2000041c
 8007958:	20000318 	.word	0x20000318
 800795c:	20000420 	.word	0x20000420
 8007960:	20000404 	.word	0x20000404
 8007964:	200003d4 	.word	0x200003d4
 8007968:	200003d0 	.word	0x200003d0
 800796c:	20000438 	.word	0x20000438

08007970 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3b04      	subs	r3, #4
 8007980:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3b04      	subs	r3, #4
 800798e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f023 0201 	bic.w	r2, r3, #1
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3b04      	subs	r3, #4
 800799e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079a0:	4a0c      	ldr	r2, [pc, #48]	; (80079d4 <pxPortInitialiseStack+0x64>)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3b14      	subs	r3, #20
 80079aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3b04      	subs	r3, #4
 80079b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f06f 0202 	mvn.w	r2, #2
 80079be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3b20      	subs	r3, #32
 80079c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079c6:	68fb      	ldr	r3, [r7, #12]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	080079d9 	.word	0x080079d9

080079d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079e2:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <prvTaskExitError+0x50>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ea:	d009      	beq.n	8007a00 <prvTaskExitError+0x28>
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	60fb      	str	r3, [r7, #12]
 80079fe:	e7fe      	b.n	80079fe <prvTaskExitError+0x26>
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a12:	bf00      	nop
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0fc      	beq.n	8007a14 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a1a:	bf00      	nop
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	20000028 	.word	0x20000028
 8007a2c:	00000000 	.word	0x00000000

08007a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <pxCurrentTCBConst2>)
 8007a32:	6819      	ldr	r1, [r3, #0]
 8007a34:	6808      	ldr	r0, [r1, #0]
 8007a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3a:	f380 8809 	msr	PSP, r0
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f04f 0000 	mov.w	r0, #0
 8007a46:	f380 8811 	msr	BASEPRI, r0
 8007a4a:	4770      	bx	lr
 8007a4c:	f3af 8000 	nop.w

08007a50 <pxCurrentTCBConst2>:
 8007a50:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop

08007a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a58:	4808      	ldr	r0, [pc, #32]	; (8007a7c <prvPortStartFirstTask+0x24>)
 8007a5a:	6800      	ldr	r0, [r0, #0]
 8007a5c:	6800      	ldr	r0, [r0, #0]
 8007a5e:	f380 8808 	msr	MSP, r0
 8007a62:	f04f 0000 	mov.w	r0, #0
 8007a66:	f380 8814 	msr	CONTROL, r0
 8007a6a:	b662      	cpsie	i
 8007a6c:	b661      	cpsie	f
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	df00      	svc	0
 8007a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a7a:	bf00      	nop
 8007a7c:	e000ed08 	.word	0xe000ed08

08007a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a86:	4b44      	ldr	r3, [pc, #272]	; (8007b98 <xPortStartScheduler+0x118>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a44      	ldr	r2, [pc, #272]	; (8007b9c <xPortStartScheduler+0x11c>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d109      	bne.n	8007aa4 <xPortStartScheduler+0x24>
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	613b      	str	r3, [r7, #16]
 8007aa2:	e7fe      	b.n	8007aa2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007aa4:	4b3c      	ldr	r3, [pc, #240]	; (8007b98 <xPortStartScheduler+0x118>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a3d      	ldr	r2, [pc, #244]	; (8007ba0 <xPortStartScheduler+0x120>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d109      	bne.n	8007ac2 <xPortStartScheduler+0x42>
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	e7fe      	b.n	8007ac0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ac2:	4b38      	ldr	r3, [pc, #224]	; (8007ba4 <xPortStartScheduler+0x124>)
 8007ac4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	22ff      	movs	r2, #255	; 0xff
 8007ad2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	4b30      	ldr	r3, [pc, #192]	; (8007ba8 <xPortStartScheduler+0x128>)
 8007ae8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007aea:	4b30      	ldr	r3, [pc, #192]	; (8007bac <xPortStartScheduler+0x12c>)
 8007aec:	2207      	movs	r2, #7
 8007aee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007af0:	e009      	b.n	8007b06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007af2:	4b2e      	ldr	r3, [pc, #184]	; (8007bac <xPortStartScheduler+0x12c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	4a2c      	ldr	r2, [pc, #176]	; (8007bac <xPortStartScheduler+0x12c>)
 8007afa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b06:	78fb      	ldrb	r3, [r7, #3]
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0e:	2b80      	cmp	r3, #128	; 0x80
 8007b10:	d0ef      	beq.n	8007af2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b12:	4b26      	ldr	r3, [pc, #152]	; (8007bac <xPortStartScheduler+0x12c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f1c3 0307 	rsb	r3, r3, #7
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	d009      	beq.n	8007b32 <xPortStartScheduler+0xb2>
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	60bb      	str	r3, [r7, #8]
 8007b30:	e7fe      	b.n	8007b30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b32:	4b1e      	ldr	r3, [pc, #120]	; (8007bac <xPortStartScheduler+0x12c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	021b      	lsls	r3, r3, #8
 8007b38:	4a1c      	ldr	r2, [pc, #112]	; (8007bac <xPortStartScheduler+0x12c>)
 8007b3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b3c:	4b1b      	ldr	r3, [pc, #108]	; (8007bac <xPortStartScheduler+0x12c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b44:	4a19      	ldr	r2, [pc, #100]	; (8007bac <xPortStartScheduler+0x12c>)
 8007b46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b50:	4b17      	ldr	r3, [pc, #92]	; (8007bb0 <xPortStartScheduler+0x130>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a16      	ldr	r2, [pc, #88]	; (8007bb0 <xPortStartScheduler+0x130>)
 8007b56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b5c:	4b14      	ldr	r3, [pc, #80]	; (8007bb0 <xPortStartScheduler+0x130>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a13      	ldr	r2, [pc, #76]	; (8007bb0 <xPortStartScheduler+0x130>)
 8007b62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b68:	f000 f8d6 	bl	8007d18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b6c:	4b11      	ldr	r3, [pc, #68]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b72:	f000 f8f5 	bl	8007d60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b76:	4b10      	ldr	r3, [pc, #64]	; (8007bb8 <xPortStartScheduler+0x138>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a0f      	ldr	r2, [pc, #60]	; (8007bb8 <xPortStartScheduler+0x138>)
 8007b7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b82:	f7ff ff69 	bl	8007a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b86:	f7ff fbb1 	bl	80072ec <vTaskSwitchContext>
	prvTaskExitError();
 8007b8a:	f7ff ff25 	bl	80079d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	e000ed00 	.word	0xe000ed00
 8007b9c:	410fc271 	.word	0x410fc271
 8007ba0:	410fc270 	.word	0x410fc270
 8007ba4:	e000e400 	.word	0xe000e400
 8007ba8:	20000444 	.word	0x20000444
 8007bac:	20000448 	.word	0x20000448
 8007bb0:	e000ed20 	.word	0xe000ed20
 8007bb4:	20000028 	.word	0x20000028
 8007bb8:	e000ef34 	.word	0xe000ef34

08007bbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bd4:	4b0e      	ldr	r3, [pc, #56]	; (8007c10 <vPortEnterCritical+0x54>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	4a0d      	ldr	r2, [pc, #52]	; (8007c10 <vPortEnterCritical+0x54>)
 8007bdc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bde:	4b0c      	ldr	r3, [pc, #48]	; (8007c10 <vPortEnterCritical+0x54>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d10e      	bne.n	8007c04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007be6:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <vPortEnterCritical+0x58>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d009      	beq.n	8007c04 <vPortEnterCritical+0x48>
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	603b      	str	r3, [r7, #0]
 8007c02:	e7fe      	b.n	8007c02 <vPortEnterCritical+0x46>
	}
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	20000028 	.word	0x20000028
 8007c14:	e000ed04 	.word	0xe000ed04

08007c18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c1e:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <vPortExitCritical+0x4c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d109      	bne.n	8007c3a <vPortExitCritical+0x22>
 8007c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	607b      	str	r3, [r7, #4]
 8007c38:	e7fe      	b.n	8007c38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007c3a:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <vPortExitCritical+0x4c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	4a08      	ldr	r2, [pc, #32]	; (8007c64 <vPortExitCritical+0x4c>)
 8007c42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c44:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <vPortExitCritical+0x4c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <vPortExitCritical+0x3e>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20000028 	.word	0x20000028
	...

08007c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c70:	f3ef 8009 	mrs	r0, PSP
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	4b15      	ldr	r3, [pc, #84]	; (8007cd0 <pxCurrentTCBConst>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	f01e 0f10 	tst.w	lr, #16
 8007c80:	bf08      	it	eq
 8007c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8a:	6010      	str	r0, [r2, #0]
 8007c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c94:	f380 8811 	msr	BASEPRI, r0
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f7ff fb24 	bl	80072ec <vTaskSwitchContext>
 8007ca4:	f04f 0000 	mov.w	r0, #0
 8007ca8:	f380 8811 	msr	BASEPRI, r0
 8007cac:	bc09      	pop	{r0, r3}
 8007cae:	6819      	ldr	r1, [r3, #0]
 8007cb0:	6808      	ldr	r0, [r1, #0]
 8007cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb6:	f01e 0f10 	tst.w	lr, #16
 8007cba:	bf08      	it	eq
 8007cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cc0:	f380 8809 	msr	PSP, r0
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	f3af 8000 	nop.w

08007cd0 <pxCurrentTCBConst>:
 8007cd0:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cd4:	bf00      	nop
 8007cd6:	bf00      	nop

08007cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cf0:	f7ff fa40 	bl	8007174 <xTaskIncrementTick>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cfa:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <SysTick_Handler+0x3c>)
 8007cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	2300      	movs	r3, #0
 8007d04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	e000ed04 	.word	0xe000ed04

08007d18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d1c:	4b0b      	ldr	r3, [pc, #44]	; (8007d4c <vPortSetupTimerInterrupt+0x34>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d22:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <vPortSetupTimerInterrupt+0x38>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d28:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <vPortSetupTimerInterrupt+0x3c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a0a      	ldr	r2, [pc, #40]	; (8007d58 <vPortSetupTimerInterrupt+0x40>)
 8007d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d32:	099b      	lsrs	r3, r3, #6
 8007d34:	4a09      	ldr	r2, [pc, #36]	; (8007d5c <vPortSetupTimerInterrupt+0x44>)
 8007d36:	3b01      	subs	r3, #1
 8007d38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d3a:	4b04      	ldr	r3, [pc, #16]	; (8007d4c <vPortSetupTimerInterrupt+0x34>)
 8007d3c:	2207      	movs	r2, #7
 8007d3e:	601a      	str	r2, [r3, #0]
}
 8007d40:	bf00      	nop
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	e000e010 	.word	0xe000e010
 8007d50:	e000e018 	.word	0xe000e018
 8007d54:	2000001c 	.word	0x2000001c
 8007d58:	10624dd3 	.word	0x10624dd3
 8007d5c:	e000e014 	.word	0xe000e014

08007d60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d70 <vPortEnableVFP+0x10>
 8007d64:	6801      	ldr	r1, [r0, #0]
 8007d66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d6a:	6001      	str	r1, [r0, #0]
 8007d6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d6e:	bf00      	nop
 8007d70:	e000ed88 	.word	0xe000ed88

08007d74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d7a:	f3ef 8305 	mrs	r3, IPSR
 8007d7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b0f      	cmp	r3, #15
 8007d84:	d913      	bls.n	8007dae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d86:	4a16      	ldr	r2, [pc, #88]	; (8007de0 <vPortValidateInterruptPriority+0x6c>)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d90:	4b14      	ldr	r3, [pc, #80]	; (8007de4 <vPortValidateInterruptPriority+0x70>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	7afa      	ldrb	r2, [r7, #11]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d209      	bcs.n	8007dae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	607b      	str	r3, [r7, #4]
 8007dac:	e7fe      	b.n	8007dac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007dae:	4b0e      	ldr	r3, [pc, #56]	; (8007de8 <vPortValidateInterruptPriority+0x74>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007db6:	4b0d      	ldr	r3, [pc, #52]	; (8007dec <vPortValidateInterruptPriority+0x78>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d909      	bls.n	8007dd2 <vPortValidateInterruptPriority+0x5e>
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	603b      	str	r3, [r7, #0]
 8007dd0:	e7fe      	b.n	8007dd0 <vPortValidateInterruptPriority+0x5c>
	}
 8007dd2:	bf00      	nop
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	e000e3f0 	.word	0xe000e3f0
 8007de4:	20000444 	.word	0x20000444
 8007de8:	e000ed0c 	.word	0xe000ed0c
 8007dec:	20000448 	.word	0x20000448

08007df0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08a      	sub	sp, #40	; 0x28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007dfc:	f7ff f910 	bl	8007020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e00:	4b57      	ldr	r3, [pc, #348]	; (8007f60 <pvPortMalloc+0x170>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e08:	f000 f90c 	bl	8008024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e0c:	4b55      	ldr	r3, [pc, #340]	; (8007f64 <pvPortMalloc+0x174>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4013      	ands	r3, r2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f040 808c 	bne.w	8007f32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01c      	beq.n	8007e5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007e20:	2208      	movs	r2, #8
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4413      	add	r3, r2
 8007e26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d013      	beq.n	8007e5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f023 0307 	bic.w	r3, r3, #7
 8007e38:	3308      	adds	r3, #8
 8007e3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d009      	beq.n	8007e5a <pvPortMalloc+0x6a>
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	e7fe      	b.n	8007e58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d068      	beq.n	8007f32 <pvPortMalloc+0x142>
 8007e60:	4b41      	ldr	r3, [pc, #260]	; (8007f68 <pvPortMalloc+0x178>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d863      	bhi.n	8007f32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e6a:	4b40      	ldr	r3, [pc, #256]	; (8007f6c <pvPortMalloc+0x17c>)
 8007e6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e6e:	4b3f      	ldr	r3, [pc, #252]	; (8007f6c <pvPortMalloc+0x17c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e74:	e004      	b.n	8007e80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d903      	bls.n	8007e92 <pvPortMalloc+0xa2>
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1f1      	bne.n	8007e76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e92:	4b33      	ldr	r3, [pc, #204]	; (8007f60 <pvPortMalloc+0x170>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d04a      	beq.n	8007f32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	4413      	add	r3, r2
 8007ea4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	1ad2      	subs	r2, r2, r3
 8007eb6:	2308      	movs	r3, #8
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d91e      	bls.n	8007efc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	f003 0307 	and.w	r3, r3, #7
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d009      	beq.n	8007ee4 <pvPortMalloc+0xf4>
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	e7fe      	b.n	8007ee2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	1ad2      	subs	r2, r2, r3
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ef6:	69b8      	ldr	r0, [r7, #24]
 8007ef8:	f000 f8f6 	bl	80080e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007efc:	4b1a      	ldr	r3, [pc, #104]	; (8007f68 <pvPortMalloc+0x178>)
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	4a18      	ldr	r2, [pc, #96]	; (8007f68 <pvPortMalloc+0x178>)
 8007f08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f0a:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <pvPortMalloc+0x178>)
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	4b18      	ldr	r3, [pc, #96]	; (8007f70 <pvPortMalloc+0x180>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d203      	bcs.n	8007f1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f16:	4b14      	ldr	r3, [pc, #80]	; (8007f68 <pvPortMalloc+0x178>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a15      	ldr	r2, [pc, #84]	; (8007f70 <pvPortMalloc+0x180>)
 8007f1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	4b10      	ldr	r3, [pc, #64]	; (8007f64 <pvPortMalloc+0x174>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	431a      	orrs	r2, r3
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f32:	f7ff f883 	bl	800703c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	f003 0307 	and.w	r3, r3, #7
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d009      	beq.n	8007f54 <pvPortMalloc+0x164>
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	60fb      	str	r3, [r7, #12]
 8007f52:	e7fe      	b.n	8007f52 <pvPortMalloc+0x162>
	return pvReturn;
 8007f54:	69fb      	ldr	r3, [r7, #28]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3728      	adds	r7, #40	; 0x28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20004054 	.word	0x20004054
 8007f64:	20004060 	.word	0x20004060
 8007f68:	20004058 	.word	0x20004058
 8007f6c:	2000404c 	.word	0x2000404c
 8007f70:	2000405c 	.word	0x2000405c

08007f74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d046      	beq.n	8008014 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f86:	2308      	movs	r3, #8
 8007f88:	425b      	negs	r3, r3
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	4b20      	ldr	r3, [pc, #128]	; (800801c <vPortFree+0xa8>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d109      	bne.n	8007fb6 <vPortFree+0x42>
 8007fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e7fe      	b.n	8007fb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d009      	beq.n	8007fd2 <vPortFree+0x5e>
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	60bb      	str	r3, [r7, #8]
 8007fd0:	e7fe      	b.n	8007fd0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	4b11      	ldr	r3, [pc, #68]	; (800801c <vPortFree+0xa8>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d019      	beq.n	8008014 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d115      	bne.n	8008014 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	4b0b      	ldr	r3, [pc, #44]	; (800801c <vPortFree+0xa8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	401a      	ands	r2, r3
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ff8:	f7ff f812 	bl	8007020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	4b07      	ldr	r3, [pc, #28]	; (8008020 <vPortFree+0xac>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4413      	add	r3, r2
 8008006:	4a06      	ldr	r2, [pc, #24]	; (8008020 <vPortFree+0xac>)
 8008008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800800a:	6938      	ldr	r0, [r7, #16]
 800800c:	f000 f86c 	bl	80080e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008010:	f7ff f814 	bl	800703c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008014:	bf00      	nop
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20004060 	.word	0x20004060
 8008020:	20004058 	.word	0x20004058

08008024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800802a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800802e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008030:	4b27      	ldr	r3, [pc, #156]	; (80080d0 <prvHeapInit+0xac>)
 8008032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00c      	beq.n	8008058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3307      	adds	r3, #7
 8008042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f023 0307 	bic.w	r3, r3, #7
 800804a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	4a1f      	ldr	r2, [pc, #124]	; (80080d0 <prvHeapInit+0xac>)
 8008054:	4413      	add	r3, r2
 8008056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800805c:	4a1d      	ldr	r2, [pc, #116]	; (80080d4 <prvHeapInit+0xb0>)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008062:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <prvHeapInit+0xb0>)
 8008064:	2200      	movs	r2, #0
 8008066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	4413      	add	r3, r2
 800806e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008070:	2208      	movs	r2, #8
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	1a9b      	subs	r3, r3, r2
 8008076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0307 	bic.w	r3, r3, #7
 800807e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a15      	ldr	r2, [pc, #84]	; (80080d8 <prvHeapInit+0xb4>)
 8008084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008086:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <prvHeapInit+0xb4>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800808e:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <prvHeapInit+0xb4>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080a4:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <prvHeapInit+0xb4>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	4a0a      	ldr	r2, [pc, #40]	; (80080dc <prvHeapInit+0xb8>)
 80080b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	4a09      	ldr	r2, [pc, #36]	; (80080e0 <prvHeapInit+0xbc>)
 80080ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080bc:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <prvHeapInit+0xc0>)
 80080be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080c2:	601a      	str	r2, [r3, #0]
}
 80080c4:	bf00      	nop
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	2000044c 	.word	0x2000044c
 80080d4:	2000404c 	.word	0x2000404c
 80080d8:	20004054 	.word	0x20004054
 80080dc:	2000405c 	.word	0x2000405c
 80080e0:	20004058 	.word	0x20004058
 80080e4:	20004060 	.word	0x20004060

080080e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080f0:	4b28      	ldr	r3, [pc, #160]	; (8008194 <prvInsertBlockIntoFreeList+0xac>)
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	e002      	b.n	80080fc <prvInsertBlockIntoFreeList+0x14>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	429a      	cmp	r2, r3
 8008104:	d8f7      	bhi.n	80080f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	4413      	add	r3, r2
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	429a      	cmp	r2, r3
 8008116:	d108      	bne.n	800812a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	441a      	add	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	441a      	add	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	429a      	cmp	r2, r3
 800813c:	d118      	bne.n	8008170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b15      	ldr	r3, [pc, #84]	; (8008198 <prvInsertBlockIntoFreeList+0xb0>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d00d      	beq.n	8008166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	441a      	add	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	e008      	b.n	8008178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008166:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <prvInsertBlockIntoFreeList+0xb0>)
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	e003      	b.n	8008178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	429a      	cmp	r2, r3
 800817e:	d002      	beq.n	8008186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008186:	bf00      	nop
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	2000404c 	.word	0x2000404c
 8008198:	20004054 	.word	0x20004054

0800819c <__errno>:
 800819c:	4b01      	ldr	r3, [pc, #4]	; (80081a4 <__errno+0x8>)
 800819e:	6818      	ldr	r0, [r3, #0]
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	2000002c 	.word	0x2000002c

080081a8 <__libc_init_array>:
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	4e0d      	ldr	r6, [pc, #52]	; (80081e0 <__libc_init_array+0x38>)
 80081ac:	4c0d      	ldr	r4, [pc, #52]	; (80081e4 <__libc_init_array+0x3c>)
 80081ae:	1ba4      	subs	r4, r4, r6
 80081b0:	10a4      	asrs	r4, r4, #2
 80081b2:	2500      	movs	r5, #0
 80081b4:	42a5      	cmp	r5, r4
 80081b6:	d109      	bne.n	80081cc <__libc_init_array+0x24>
 80081b8:	4e0b      	ldr	r6, [pc, #44]	; (80081e8 <__libc_init_array+0x40>)
 80081ba:	4c0c      	ldr	r4, [pc, #48]	; (80081ec <__libc_init_array+0x44>)
 80081bc:	f001 f98e 	bl	80094dc <_init>
 80081c0:	1ba4      	subs	r4, r4, r6
 80081c2:	10a4      	asrs	r4, r4, #2
 80081c4:	2500      	movs	r5, #0
 80081c6:	42a5      	cmp	r5, r4
 80081c8:	d105      	bne.n	80081d6 <__libc_init_array+0x2e>
 80081ca:	bd70      	pop	{r4, r5, r6, pc}
 80081cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081d0:	4798      	blx	r3
 80081d2:	3501      	adds	r5, #1
 80081d4:	e7ee      	b.n	80081b4 <__libc_init_array+0xc>
 80081d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081da:	4798      	blx	r3
 80081dc:	3501      	adds	r5, #1
 80081de:	e7f2      	b.n	80081c6 <__libc_init_array+0x1e>
 80081e0:	08009708 	.word	0x08009708
 80081e4:	08009708 	.word	0x08009708
 80081e8:	08009708 	.word	0x08009708
 80081ec:	0800970c 	.word	0x0800970c

080081f0 <memcpy>:
 80081f0:	b510      	push	{r4, lr}
 80081f2:	1e43      	subs	r3, r0, #1
 80081f4:	440a      	add	r2, r1
 80081f6:	4291      	cmp	r1, r2
 80081f8:	d100      	bne.n	80081fc <memcpy+0xc>
 80081fa:	bd10      	pop	{r4, pc}
 80081fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008200:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008204:	e7f7      	b.n	80081f6 <memcpy+0x6>

08008206 <memset>:
 8008206:	4402      	add	r2, r0
 8008208:	4603      	mov	r3, r0
 800820a:	4293      	cmp	r3, r2
 800820c:	d100      	bne.n	8008210 <memset+0xa>
 800820e:	4770      	bx	lr
 8008210:	f803 1b01 	strb.w	r1, [r3], #1
 8008214:	e7f9      	b.n	800820a <memset+0x4>
	...

08008218 <iprintf>:
 8008218:	b40f      	push	{r0, r1, r2, r3}
 800821a:	4b0a      	ldr	r3, [pc, #40]	; (8008244 <iprintf+0x2c>)
 800821c:	b513      	push	{r0, r1, r4, lr}
 800821e:	681c      	ldr	r4, [r3, #0]
 8008220:	b124      	cbz	r4, 800822c <iprintf+0x14>
 8008222:	69a3      	ldr	r3, [r4, #24]
 8008224:	b913      	cbnz	r3, 800822c <iprintf+0x14>
 8008226:	4620      	mov	r0, r4
 8008228:	f000 f9cc 	bl	80085c4 <__sinit>
 800822c:	ab05      	add	r3, sp, #20
 800822e:	9a04      	ldr	r2, [sp, #16]
 8008230:	68a1      	ldr	r1, [r4, #8]
 8008232:	9301      	str	r3, [sp, #4]
 8008234:	4620      	mov	r0, r4
 8008236:	f000 fcdf 	bl	8008bf8 <_vfiprintf_r>
 800823a:	b002      	add	sp, #8
 800823c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008240:	b004      	add	sp, #16
 8008242:	4770      	bx	lr
 8008244:	2000002c 	.word	0x2000002c

08008248 <setvbuf>:
 8008248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800824c:	461d      	mov	r5, r3
 800824e:	4b51      	ldr	r3, [pc, #324]	; (8008394 <setvbuf+0x14c>)
 8008250:	681e      	ldr	r6, [r3, #0]
 8008252:	4604      	mov	r4, r0
 8008254:	460f      	mov	r7, r1
 8008256:	4690      	mov	r8, r2
 8008258:	b126      	cbz	r6, 8008264 <setvbuf+0x1c>
 800825a:	69b3      	ldr	r3, [r6, #24]
 800825c:	b913      	cbnz	r3, 8008264 <setvbuf+0x1c>
 800825e:	4630      	mov	r0, r6
 8008260:	f000 f9b0 	bl	80085c4 <__sinit>
 8008264:	4b4c      	ldr	r3, [pc, #304]	; (8008398 <setvbuf+0x150>)
 8008266:	429c      	cmp	r4, r3
 8008268:	d152      	bne.n	8008310 <setvbuf+0xc8>
 800826a:	6874      	ldr	r4, [r6, #4]
 800826c:	f1b8 0f02 	cmp.w	r8, #2
 8008270:	d006      	beq.n	8008280 <setvbuf+0x38>
 8008272:	f1b8 0f01 	cmp.w	r8, #1
 8008276:	f200 8089 	bhi.w	800838c <setvbuf+0x144>
 800827a:	2d00      	cmp	r5, #0
 800827c:	f2c0 8086 	blt.w	800838c <setvbuf+0x144>
 8008280:	4621      	mov	r1, r4
 8008282:	4630      	mov	r0, r6
 8008284:	f000 f934 	bl	80084f0 <_fflush_r>
 8008288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800828a:	b141      	cbz	r1, 800829e <setvbuf+0x56>
 800828c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008290:	4299      	cmp	r1, r3
 8008292:	d002      	beq.n	800829a <setvbuf+0x52>
 8008294:	4630      	mov	r0, r6
 8008296:	f000 fa8b 	bl	80087b0 <_free_r>
 800829a:	2300      	movs	r3, #0
 800829c:	6363      	str	r3, [r4, #52]	; 0x34
 800829e:	2300      	movs	r3, #0
 80082a0:	61a3      	str	r3, [r4, #24]
 80082a2:	6063      	str	r3, [r4, #4]
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	061b      	lsls	r3, r3, #24
 80082a8:	d503      	bpl.n	80082b2 <setvbuf+0x6a>
 80082aa:	6921      	ldr	r1, [r4, #16]
 80082ac:	4630      	mov	r0, r6
 80082ae:	f000 fa7f 	bl	80087b0 <_free_r>
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80082b8:	f023 0303 	bic.w	r3, r3, #3
 80082bc:	f1b8 0f02 	cmp.w	r8, #2
 80082c0:	81a3      	strh	r3, [r4, #12]
 80082c2:	d05d      	beq.n	8008380 <setvbuf+0x138>
 80082c4:	ab01      	add	r3, sp, #4
 80082c6:	466a      	mov	r2, sp
 80082c8:	4621      	mov	r1, r4
 80082ca:	4630      	mov	r0, r6
 80082cc:	f000 fa04 	bl	80086d8 <__swhatbuf_r>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	4318      	orrs	r0, r3
 80082d4:	81a0      	strh	r0, [r4, #12]
 80082d6:	bb2d      	cbnz	r5, 8008324 <setvbuf+0xdc>
 80082d8:	9d00      	ldr	r5, [sp, #0]
 80082da:	4628      	mov	r0, r5
 80082dc:	f000 fa60 	bl	80087a0 <malloc>
 80082e0:	4607      	mov	r7, r0
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d14e      	bne.n	8008384 <setvbuf+0x13c>
 80082e6:	f8dd 9000 	ldr.w	r9, [sp]
 80082ea:	45a9      	cmp	r9, r5
 80082ec:	d13c      	bne.n	8008368 <setvbuf+0x120>
 80082ee:	f04f 30ff 	mov.w	r0, #4294967295
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	f043 0302 	orr.w	r3, r3, #2
 80082f8:	81a3      	strh	r3, [r4, #12]
 80082fa:	2300      	movs	r3, #0
 80082fc:	60a3      	str	r3, [r4, #8]
 80082fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	2301      	movs	r3, #1
 8008308:	6163      	str	r3, [r4, #20]
 800830a:	b003      	add	sp, #12
 800830c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008310:	4b22      	ldr	r3, [pc, #136]	; (800839c <setvbuf+0x154>)
 8008312:	429c      	cmp	r4, r3
 8008314:	d101      	bne.n	800831a <setvbuf+0xd2>
 8008316:	68b4      	ldr	r4, [r6, #8]
 8008318:	e7a8      	b.n	800826c <setvbuf+0x24>
 800831a:	4b21      	ldr	r3, [pc, #132]	; (80083a0 <setvbuf+0x158>)
 800831c:	429c      	cmp	r4, r3
 800831e:	bf08      	it	eq
 8008320:	68f4      	ldreq	r4, [r6, #12]
 8008322:	e7a3      	b.n	800826c <setvbuf+0x24>
 8008324:	2f00      	cmp	r7, #0
 8008326:	d0d8      	beq.n	80082da <setvbuf+0x92>
 8008328:	69b3      	ldr	r3, [r6, #24]
 800832a:	b913      	cbnz	r3, 8008332 <setvbuf+0xea>
 800832c:	4630      	mov	r0, r6
 800832e:	f000 f949 	bl	80085c4 <__sinit>
 8008332:	f1b8 0f01 	cmp.w	r8, #1
 8008336:	bf08      	it	eq
 8008338:	89a3      	ldrheq	r3, [r4, #12]
 800833a:	6027      	str	r7, [r4, #0]
 800833c:	bf04      	itt	eq
 800833e:	f043 0301 	orreq.w	r3, r3, #1
 8008342:	81a3      	strheq	r3, [r4, #12]
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	f013 0008 	ands.w	r0, r3, #8
 800834a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800834e:	d01b      	beq.n	8008388 <setvbuf+0x140>
 8008350:	f013 0001 	ands.w	r0, r3, #1
 8008354:	bf18      	it	ne
 8008356:	426d      	negne	r5, r5
 8008358:	f04f 0300 	mov.w	r3, #0
 800835c:	bf1d      	ittte	ne
 800835e:	60a3      	strne	r3, [r4, #8]
 8008360:	61a5      	strne	r5, [r4, #24]
 8008362:	4618      	movne	r0, r3
 8008364:	60a5      	streq	r5, [r4, #8]
 8008366:	e7d0      	b.n	800830a <setvbuf+0xc2>
 8008368:	4648      	mov	r0, r9
 800836a:	f000 fa19 	bl	80087a0 <malloc>
 800836e:	4607      	mov	r7, r0
 8008370:	2800      	cmp	r0, #0
 8008372:	d0bc      	beq.n	80082ee <setvbuf+0xa6>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	464d      	mov	r5, r9
 800837e:	e7d3      	b.n	8008328 <setvbuf+0xe0>
 8008380:	2000      	movs	r0, #0
 8008382:	e7b6      	b.n	80082f2 <setvbuf+0xaa>
 8008384:	46a9      	mov	r9, r5
 8008386:	e7f5      	b.n	8008374 <setvbuf+0x12c>
 8008388:	60a0      	str	r0, [r4, #8]
 800838a:	e7be      	b.n	800830a <setvbuf+0xc2>
 800838c:	f04f 30ff 	mov.w	r0, #4294967295
 8008390:	e7bb      	b.n	800830a <setvbuf+0xc2>
 8008392:	bf00      	nop
 8008394:	2000002c 	.word	0x2000002c
 8008398:	0800968c 	.word	0x0800968c
 800839c:	080096ac 	.word	0x080096ac
 80083a0:	0800966c 	.word	0x0800966c

080083a4 <siprintf>:
 80083a4:	b40e      	push	{r1, r2, r3}
 80083a6:	b500      	push	{lr}
 80083a8:	b09c      	sub	sp, #112	; 0x70
 80083aa:	ab1d      	add	r3, sp, #116	; 0x74
 80083ac:	9002      	str	r0, [sp, #8]
 80083ae:	9006      	str	r0, [sp, #24]
 80083b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083b4:	4809      	ldr	r0, [pc, #36]	; (80083dc <siprintf+0x38>)
 80083b6:	9107      	str	r1, [sp, #28]
 80083b8:	9104      	str	r1, [sp, #16]
 80083ba:	4909      	ldr	r1, [pc, #36]	; (80083e0 <siprintf+0x3c>)
 80083bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c0:	9105      	str	r1, [sp, #20]
 80083c2:	6800      	ldr	r0, [r0, #0]
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	a902      	add	r1, sp, #8
 80083c8:	f000 faf4 	bl	80089b4 <_svfiprintf_r>
 80083cc:	9b02      	ldr	r3, [sp, #8]
 80083ce:	2200      	movs	r2, #0
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	b01c      	add	sp, #112	; 0x70
 80083d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d8:	b003      	add	sp, #12
 80083da:	4770      	bx	lr
 80083dc:	2000002c 	.word	0x2000002c
 80083e0:	ffff0208 	.word	0xffff0208

080083e4 <__sflush_r>:
 80083e4:	898a      	ldrh	r2, [r1, #12]
 80083e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ea:	4605      	mov	r5, r0
 80083ec:	0710      	lsls	r0, r2, #28
 80083ee:	460c      	mov	r4, r1
 80083f0:	d458      	bmi.n	80084a4 <__sflush_r+0xc0>
 80083f2:	684b      	ldr	r3, [r1, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dc05      	bgt.n	8008404 <__sflush_r+0x20>
 80083f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	dc02      	bgt.n	8008404 <__sflush_r+0x20>
 80083fe:	2000      	movs	r0, #0
 8008400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008406:	2e00      	cmp	r6, #0
 8008408:	d0f9      	beq.n	80083fe <__sflush_r+0x1a>
 800840a:	2300      	movs	r3, #0
 800840c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008410:	682f      	ldr	r7, [r5, #0]
 8008412:	6a21      	ldr	r1, [r4, #32]
 8008414:	602b      	str	r3, [r5, #0]
 8008416:	d032      	beq.n	800847e <__sflush_r+0x9a>
 8008418:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	075a      	lsls	r2, r3, #29
 800841e:	d505      	bpl.n	800842c <__sflush_r+0x48>
 8008420:	6863      	ldr	r3, [r4, #4]
 8008422:	1ac0      	subs	r0, r0, r3
 8008424:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008426:	b10b      	cbz	r3, 800842c <__sflush_r+0x48>
 8008428:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800842a:	1ac0      	subs	r0, r0, r3
 800842c:	2300      	movs	r3, #0
 800842e:	4602      	mov	r2, r0
 8008430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008432:	6a21      	ldr	r1, [r4, #32]
 8008434:	4628      	mov	r0, r5
 8008436:	47b0      	blx	r6
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	d106      	bne.n	800844c <__sflush_r+0x68>
 800843e:	6829      	ldr	r1, [r5, #0]
 8008440:	291d      	cmp	r1, #29
 8008442:	d848      	bhi.n	80084d6 <__sflush_r+0xf2>
 8008444:	4a29      	ldr	r2, [pc, #164]	; (80084ec <__sflush_r+0x108>)
 8008446:	40ca      	lsrs	r2, r1
 8008448:	07d6      	lsls	r6, r2, #31
 800844a:	d544      	bpl.n	80084d6 <__sflush_r+0xf2>
 800844c:	2200      	movs	r2, #0
 800844e:	6062      	str	r2, [r4, #4]
 8008450:	04d9      	lsls	r1, r3, #19
 8008452:	6922      	ldr	r2, [r4, #16]
 8008454:	6022      	str	r2, [r4, #0]
 8008456:	d504      	bpl.n	8008462 <__sflush_r+0x7e>
 8008458:	1c42      	adds	r2, r0, #1
 800845a:	d101      	bne.n	8008460 <__sflush_r+0x7c>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b903      	cbnz	r3, 8008462 <__sflush_r+0x7e>
 8008460:	6560      	str	r0, [r4, #84]	; 0x54
 8008462:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008464:	602f      	str	r7, [r5, #0]
 8008466:	2900      	cmp	r1, #0
 8008468:	d0c9      	beq.n	80083fe <__sflush_r+0x1a>
 800846a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800846e:	4299      	cmp	r1, r3
 8008470:	d002      	beq.n	8008478 <__sflush_r+0x94>
 8008472:	4628      	mov	r0, r5
 8008474:	f000 f99c 	bl	80087b0 <_free_r>
 8008478:	2000      	movs	r0, #0
 800847a:	6360      	str	r0, [r4, #52]	; 0x34
 800847c:	e7c0      	b.n	8008400 <__sflush_r+0x1c>
 800847e:	2301      	movs	r3, #1
 8008480:	4628      	mov	r0, r5
 8008482:	47b0      	blx	r6
 8008484:	1c41      	adds	r1, r0, #1
 8008486:	d1c8      	bne.n	800841a <__sflush_r+0x36>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0c5      	beq.n	800841a <__sflush_r+0x36>
 800848e:	2b1d      	cmp	r3, #29
 8008490:	d001      	beq.n	8008496 <__sflush_r+0xb2>
 8008492:	2b16      	cmp	r3, #22
 8008494:	d101      	bne.n	800849a <__sflush_r+0xb6>
 8008496:	602f      	str	r7, [r5, #0]
 8008498:	e7b1      	b.n	80083fe <__sflush_r+0x1a>
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a0:	81a3      	strh	r3, [r4, #12]
 80084a2:	e7ad      	b.n	8008400 <__sflush_r+0x1c>
 80084a4:	690f      	ldr	r7, [r1, #16]
 80084a6:	2f00      	cmp	r7, #0
 80084a8:	d0a9      	beq.n	80083fe <__sflush_r+0x1a>
 80084aa:	0793      	lsls	r3, r2, #30
 80084ac:	680e      	ldr	r6, [r1, #0]
 80084ae:	bf08      	it	eq
 80084b0:	694b      	ldreq	r3, [r1, #20]
 80084b2:	600f      	str	r7, [r1, #0]
 80084b4:	bf18      	it	ne
 80084b6:	2300      	movne	r3, #0
 80084b8:	eba6 0807 	sub.w	r8, r6, r7
 80084bc:	608b      	str	r3, [r1, #8]
 80084be:	f1b8 0f00 	cmp.w	r8, #0
 80084c2:	dd9c      	ble.n	80083fe <__sflush_r+0x1a>
 80084c4:	4643      	mov	r3, r8
 80084c6:	463a      	mov	r2, r7
 80084c8:	6a21      	ldr	r1, [r4, #32]
 80084ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b0      	blx	r6
 80084d0:	2800      	cmp	r0, #0
 80084d2:	dc06      	bgt.n	80084e2 <__sflush_r+0xfe>
 80084d4:	89a3      	ldrh	r3, [r4, #12]
 80084d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084da:	81a3      	strh	r3, [r4, #12]
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295
 80084e0:	e78e      	b.n	8008400 <__sflush_r+0x1c>
 80084e2:	4407      	add	r7, r0
 80084e4:	eba8 0800 	sub.w	r8, r8, r0
 80084e8:	e7e9      	b.n	80084be <__sflush_r+0xda>
 80084ea:	bf00      	nop
 80084ec:	20400001 	.word	0x20400001

080084f0 <_fflush_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	690b      	ldr	r3, [r1, #16]
 80084f4:	4605      	mov	r5, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	b1db      	cbz	r3, 8008532 <_fflush_r+0x42>
 80084fa:	b118      	cbz	r0, 8008504 <_fflush_r+0x14>
 80084fc:	6983      	ldr	r3, [r0, #24]
 80084fe:	b90b      	cbnz	r3, 8008504 <_fflush_r+0x14>
 8008500:	f000 f860 	bl	80085c4 <__sinit>
 8008504:	4b0c      	ldr	r3, [pc, #48]	; (8008538 <_fflush_r+0x48>)
 8008506:	429c      	cmp	r4, r3
 8008508:	d109      	bne.n	800851e <_fflush_r+0x2e>
 800850a:	686c      	ldr	r4, [r5, #4]
 800850c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008510:	b17b      	cbz	r3, 8008532 <_fflush_r+0x42>
 8008512:	4621      	mov	r1, r4
 8008514:	4628      	mov	r0, r5
 8008516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800851a:	f7ff bf63 	b.w	80083e4 <__sflush_r>
 800851e:	4b07      	ldr	r3, [pc, #28]	; (800853c <_fflush_r+0x4c>)
 8008520:	429c      	cmp	r4, r3
 8008522:	d101      	bne.n	8008528 <_fflush_r+0x38>
 8008524:	68ac      	ldr	r4, [r5, #8]
 8008526:	e7f1      	b.n	800850c <_fflush_r+0x1c>
 8008528:	4b05      	ldr	r3, [pc, #20]	; (8008540 <_fflush_r+0x50>)
 800852a:	429c      	cmp	r4, r3
 800852c:	bf08      	it	eq
 800852e:	68ec      	ldreq	r4, [r5, #12]
 8008530:	e7ec      	b.n	800850c <_fflush_r+0x1c>
 8008532:	2000      	movs	r0, #0
 8008534:	bd38      	pop	{r3, r4, r5, pc}
 8008536:	bf00      	nop
 8008538:	0800968c 	.word	0x0800968c
 800853c:	080096ac 	.word	0x080096ac
 8008540:	0800966c 	.word	0x0800966c

08008544 <std>:
 8008544:	2300      	movs	r3, #0
 8008546:	b510      	push	{r4, lr}
 8008548:	4604      	mov	r4, r0
 800854a:	e9c0 3300 	strd	r3, r3, [r0]
 800854e:	6083      	str	r3, [r0, #8]
 8008550:	8181      	strh	r1, [r0, #12]
 8008552:	6643      	str	r3, [r0, #100]	; 0x64
 8008554:	81c2      	strh	r2, [r0, #14]
 8008556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800855a:	6183      	str	r3, [r0, #24]
 800855c:	4619      	mov	r1, r3
 800855e:	2208      	movs	r2, #8
 8008560:	305c      	adds	r0, #92	; 0x5c
 8008562:	f7ff fe50 	bl	8008206 <memset>
 8008566:	4b05      	ldr	r3, [pc, #20]	; (800857c <std+0x38>)
 8008568:	6263      	str	r3, [r4, #36]	; 0x24
 800856a:	4b05      	ldr	r3, [pc, #20]	; (8008580 <std+0x3c>)
 800856c:	62a3      	str	r3, [r4, #40]	; 0x28
 800856e:	4b05      	ldr	r3, [pc, #20]	; (8008584 <std+0x40>)
 8008570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008572:	4b05      	ldr	r3, [pc, #20]	; (8008588 <std+0x44>)
 8008574:	6224      	str	r4, [r4, #32]
 8008576:	6323      	str	r3, [r4, #48]	; 0x30
 8008578:	bd10      	pop	{r4, pc}
 800857a:	bf00      	nop
 800857c:	08009155 	.word	0x08009155
 8008580:	08009177 	.word	0x08009177
 8008584:	080091af 	.word	0x080091af
 8008588:	080091d3 	.word	0x080091d3

0800858c <_cleanup_r>:
 800858c:	4901      	ldr	r1, [pc, #4]	; (8008594 <_cleanup_r+0x8>)
 800858e:	f000 b885 	b.w	800869c <_fwalk_reent>
 8008592:	bf00      	nop
 8008594:	080084f1 	.word	0x080084f1

08008598 <__sfmoreglue>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	1e4a      	subs	r2, r1, #1
 800859c:	2568      	movs	r5, #104	; 0x68
 800859e:	4355      	muls	r5, r2
 80085a0:	460e      	mov	r6, r1
 80085a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085a6:	f000 f951 	bl	800884c <_malloc_r>
 80085aa:	4604      	mov	r4, r0
 80085ac:	b140      	cbz	r0, 80085c0 <__sfmoreglue+0x28>
 80085ae:	2100      	movs	r1, #0
 80085b0:	e9c0 1600 	strd	r1, r6, [r0]
 80085b4:	300c      	adds	r0, #12
 80085b6:	60a0      	str	r0, [r4, #8]
 80085b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085bc:	f7ff fe23 	bl	8008206 <memset>
 80085c0:	4620      	mov	r0, r4
 80085c2:	bd70      	pop	{r4, r5, r6, pc}

080085c4 <__sinit>:
 80085c4:	6983      	ldr	r3, [r0, #24]
 80085c6:	b510      	push	{r4, lr}
 80085c8:	4604      	mov	r4, r0
 80085ca:	bb33      	cbnz	r3, 800861a <__sinit+0x56>
 80085cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80085d0:	6503      	str	r3, [r0, #80]	; 0x50
 80085d2:	4b12      	ldr	r3, [pc, #72]	; (800861c <__sinit+0x58>)
 80085d4:	4a12      	ldr	r2, [pc, #72]	; (8008620 <__sinit+0x5c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6282      	str	r2, [r0, #40]	; 0x28
 80085da:	4298      	cmp	r0, r3
 80085dc:	bf04      	itt	eq
 80085de:	2301      	moveq	r3, #1
 80085e0:	6183      	streq	r3, [r0, #24]
 80085e2:	f000 f81f 	bl	8008624 <__sfp>
 80085e6:	6060      	str	r0, [r4, #4]
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 f81b 	bl	8008624 <__sfp>
 80085ee:	60a0      	str	r0, [r4, #8]
 80085f0:	4620      	mov	r0, r4
 80085f2:	f000 f817 	bl	8008624 <__sfp>
 80085f6:	2200      	movs	r2, #0
 80085f8:	60e0      	str	r0, [r4, #12]
 80085fa:	2104      	movs	r1, #4
 80085fc:	6860      	ldr	r0, [r4, #4]
 80085fe:	f7ff ffa1 	bl	8008544 <std>
 8008602:	2201      	movs	r2, #1
 8008604:	2109      	movs	r1, #9
 8008606:	68a0      	ldr	r0, [r4, #8]
 8008608:	f7ff ff9c 	bl	8008544 <std>
 800860c:	2202      	movs	r2, #2
 800860e:	2112      	movs	r1, #18
 8008610:	68e0      	ldr	r0, [r4, #12]
 8008612:	f7ff ff97 	bl	8008544 <std>
 8008616:	2301      	movs	r3, #1
 8008618:	61a3      	str	r3, [r4, #24]
 800861a:	bd10      	pop	{r4, pc}
 800861c:	08009668 	.word	0x08009668
 8008620:	0800858d 	.word	0x0800858d

08008624 <__sfp>:
 8008624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008626:	4b1b      	ldr	r3, [pc, #108]	; (8008694 <__sfp+0x70>)
 8008628:	681e      	ldr	r6, [r3, #0]
 800862a:	69b3      	ldr	r3, [r6, #24]
 800862c:	4607      	mov	r7, r0
 800862e:	b913      	cbnz	r3, 8008636 <__sfp+0x12>
 8008630:	4630      	mov	r0, r6
 8008632:	f7ff ffc7 	bl	80085c4 <__sinit>
 8008636:	3648      	adds	r6, #72	; 0x48
 8008638:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800863c:	3b01      	subs	r3, #1
 800863e:	d503      	bpl.n	8008648 <__sfp+0x24>
 8008640:	6833      	ldr	r3, [r6, #0]
 8008642:	b133      	cbz	r3, 8008652 <__sfp+0x2e>
 8008644:	6836      	ldr	r6, [r6, #0]
 8008646:	e7f7      	b.n	8008638 <__sfp+0x14>
 8008648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800864c:	b16d      	cbz	r5, 800866a <__sfp+0x46>
 800864e:	3468      	adds	r4, #104	; 0x68
 8008650:	e7f4      	b.n	800863c <__sfp+0x18>
 8008652:	2104      	movs	r1, #4
 8008654:	4638      	mov	r0, r7
 8008656:	f7ff ff9f 	bl	8008598 <__sfmoreglue>
 800865a:	6030      	str	r0, [r6, #0]
 800865c:	2800      	cmp	r0, #0
 800865e:	d1f1      	bne.n	8008644 <__sfp+0x20>
 8008660:	230c      	movs	r3, #12
 8008662:	603b      	str	r3, [r7, #0]
 8008664:	4604      	mov	r4, r0
 8008666:	4620      	mov	r0, r4
 8008668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800866a:	4b0b      	ldr	r3, [pc, #44]	; (8008698 <__sfp+0x74>)
 800866c:	6665      	str	r5, [r4, #100]	; 0x64
 800866e:	e9c4 5500 	strd	r5, r5, [r4]
 8008672:	60a5      	str	r5, [r4, #8]
 8008674:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008678:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800867c:	2208      	movs	r2, #8
 800867e:	4629      	mov	r1, r5
 8008680:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008684:	f7ff fdbf 	bl	8008206 <memset>
 8008688:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800868c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008690:	e7e9      	b.n	8008666 <__sfp+0x42>
 8008692:	bf00      	nop
 8008694:	08009668 	.word	0x08009668
 8008698:	ffff0001 	.word	0xffff0001

0800869c <_fwalk_reent>:
 800869c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086a0:	4680      	mov	r8, r0
 80086a2:	4689      	mov	r9, r1
 80086a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086a8:	2600      	movs	r6, #0
 80086aa:	b914      	cbnz	r4, 80086b2 <_fwalk_reent+0x16>
 80086ac:	4630      	mov	r0, r6
 80086ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80086b6:	3f01      	subs	r7, #1
 80086b8:	d501      	bpl.n	80086be <_fwalk_reent+0x22>
 80086ba:	6824      	ldr	r4, [r4, #0]
 80086bc:	e7f5      	b.n	80086aa <_fwalk_reent+0xe>
 80086be:	89ab      	ldrh	r3, [r5, #12]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d907      	bls.n	80086d4 <_fwalk_reent+0x38>
 80086c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086c8:	3301      	adds	r3, #1
 80086ca:	d003      	beq.n	80086d4 <_fwalk_reent+0x38>
 80086cc:	4629      	mov	r1, r5
 80086ce:	4640      	mov	r0, r8
 80086d0:	47c8      	blx	r9
 80086d2:	4306      	orrs	r6, r0
 80086d4:	3568      	adds	r5, #104	; 0x68
 80086d6:	e7ee      	b.n	80086b6 <_fwalk_reent+0x1a>

080086d8 <__swhatbuf_r>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	460e      	mov	r6, r1
 80086dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e0:	2900      	cmp	r1, #0
 80086e2:	b096      	sub	sp, #88	; 0x58
 80086e4:	4614      	mov	r4, r2
 80086e6:	461d      	mov	r5, r3
 80086e8:	da07      	bge.n	80086fa <__swhatbuf_r+0x22>
 80086ea:	2300      	movs	r3, #0
 80086ec:	602b      	str	r3, [r5, #0]
 80086ee:	89b3      	ldrh	r3, [r6, #12]
 80086f0:	061a      	lsls	r2, r3, #24
 80086f2:	d410      	bmi.n	8008716 <__swhatbuf_r+0x3e>
 80086f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086f8:	e00e      	b.n	8008718 <__swhatbuf_r+0x40>
 80086fa:	466a      	mov	r2, sp
 80086fc:	f000 fe50 	bl	80093a0 <_fstat_r>
 8008700:	2800      	cmp	r0, #0
 8008702:	dbf2      	blt.n	80086ea <__swhatbuf_r+0x12>
 8008704:	9a01      	ldr	r2, [sp, #4]
 8008706:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800870a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800870e:	425a      	negs	r2, r3
 8008710:	415a      	adcs	r2, r3
 8008712:	602a      	str	r2, [r5, #0]
 8008714:	e7ee      	b.n	80086f4 <__swhatbuf_r+0x1c>
 8008716:	2340      	movs	r3, #64	; 0x40
 8008718:	2000      	movs	r0, #0
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	b016      	add	sp, #88	; 0x58
 800871e:	bd70      	pop	{r4, r5, r6, pc}

08008720 <__smakebuf_r>:
 8008720:	898b      	ldrh	r3, [r1, #12]
 8008722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008724:	079d      	lsls	r5, r3, #30
 8008726:	4606      	mov	r6, r0
 8008728:	460c      	mov	r4, r1
 800872a:	d507      	bpl.n	800873c <__smakebuf_r+0x1c>
 800872c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	6123      	str	r3, [r4, #16]
 8008734:	2301      	movs	r3, #1
 8008736:	6163      	str	r3, [r4, #20]
 8008738:	b002      	add	sp, #8
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	ab01      	add	r3, sp, #4
 800873e:	466a      	mov	r2, sp
 8008740:	f7ff ffca 	bl	80086d8 <__swhatbuf_r>
 8008744:	9900      	ldr	r1, [sp, #0]
 8008746:	4605      	mov	r5, r0
 8008748:	4630      	mov	r0, r6
 800874a:	f000 f87f 	bl	800884c <_malloc_r>
 800874e:	b948      	cbnz	r0, 8008764 <__smakebuf_r+0x44>
 8008750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008754:	059a      	lsls	r2, r3, #22
 8008756:	d4ef      	bmi.n	8008738 <__smakebuf_r+0x18>
 8008758:	f023 0303 	bic.w	r3, r3, #3
 800875c:	f043 0302 	orr.w	r3, r3, #2
 8008760:	81a3      	strh	r3, [r4, #12]
 8008762:	e7e3      	b.n	800872c <__smakebuf_r+0xc>
 8008764:	4b0d      	ldr	r3, [pc, #52]	; (800879c <__smakebuf_r+0x7c>)
 8008766:	62b3      	str	r3, [r6, #40]	; 0x28
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	6020      	str	r0, [r4, #0]
 800876c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008770:	81a3      	strh	r3, [r4, #12]
 8008772:	9b00      	ldr	r3, [sp, #0]
 8008774:	6163      	str	r3, [r4, #20]
 8008776:	9b01      	ldr	r3, [sp, #4]
 8008778:	6120      	str	r0, [r4, #16]
 800877a:	b15b      	cbz	r3, 8008794 <__smakebuf_r+0x74>
 800877c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008780:	4630      	mov	r0, r6
 8008782:	f000 fe1f 	bl	80093c4 <_isatty_r>
 8008786:	b128      	cbz	r0, 8008794 <__smakebuf_r+0x74>
 8008788:	89a3      	ldrh	r3, [r4, #12]
 800878a:	f023 0303 	bic.w	r3, r3, #3
 800878e:	f043 0301 	orr.w	r3, r3, #1
 8008792:	81a3      	strh	r3, [r4, #12]
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	431d      	orrs	r5, r3
 8008798:	81a5      	strh	r5, [r4, #12]
 800879a:	e7cd      	b.n	8008738 <__smakebuf_r+0x18>
 800879c:	0800858d 	.word	0x0800858d

080087a0 <malloc>:
 80087a0:	4b02      	ldr	r3, [pc, #8]	; (80087ac <malloc+0xc>)
 80087a2:	4601      	mov	r1, r0
 80087a4:	6818      	ldr	r0, [r3, #0]
 80087a6:	f000 b851 	b.w	800884c <_malloc_r>
 80087aa:	bf00      	nop
 80087ac:	2000002c 	.word	0x2000002c

080087b0 <_free_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4605      	mov	r5, r0
 80087b4:	2900      	cmp	r1, #0
 80087b6:	d045      	beq.n	8008844 <_free_r+0x94>
 80087b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087bc:	1f0c      	subs	r4, r1, #4
 80087be:	2b00      	cmp	r3, #0
 80087c0:	bfb8      	it	lt
 80087c2:	18e4      	addlt	r4, r4, r3
 80087c4:	f000 fe39 	bl	800943a <__malloc_lock>
 80087c8:	4a1f      	ldr	r2, [pc, #124]	; (8008848 <_free_r+0x98>)
 80087ca:	6813      	ldr	r3, [r2, #0]
 80087cc:	4610      	mov	r0, r2
 80087ce:	b933      	cbnz	r3, 80087de <_free_r+0x2e>
 80087d0:	6063      	str	r3, [r4, #4]
 80087d2:	6014      	str	r4, [r2, #0]
 80087d4:	4628      	mov	r0, r5
 80087d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087da:	f000 be2f 	b.w	800943c <__malloc_unlock>
 80087de:	42a3      	cmp	r3, r4
 80087e0:	d90c      	bls.n	80087fc <_free_r+0x4c>
 80087e2:	6821      	ldr	r1, [r4, #0]
 80087e4:	1862      	adds	r2, r4, r1
 80087e6:	4293      	cmp	r3, r2
 80087e8:	bf04      	itt	eq
 80087ea:	681a      	ldreq	r2, [r3, #0]
 80087ec:	685b      	ldreq	r3, [r3, #4]
 80087ee:	6063      	str	r3, [r4, #4]
 80087f0:	bf04      	itt	eq
 80087f2:	1852      	addeq	r2, r2, r1
 80087f4:	6022      	streq	r2, [r4, #0]
 80087f6:	6004      	str	r4, [r0, #0]
 80087f8:	e7ec      	b.n	80087d4 <_free_r+0x24>
 80087fa:	4613      	mov	r3, r2
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	b10a      	cbz	r2, 8008804 <_free_r+0x54>
 8008800:	42a2      	cmp	r2, r4
 8008802:	d9fa      	bls.n	80087fa <_free_r+0x4a>
 8008804:	6819      	ldr	r1, [r3, #0]
 8008806:	1858      	adds	r0, r3, r1
 8008808:	42a0      	cmp	r0, r4
 800880a:	d10b      	bne.n	8008824 <_free_r+0x74>
 800880c:	6820      	ldr	r0, [r4, #0]
 800880e:	4401      	add	r1, r0
 8008810:	1858      	adds	r0, r3, r1
 8008812:	4282      	cmp	r2, r0
 8008814:	6019      	str	r1, [r3, #0]
 8008816:	d1dd      	bne.n	80087d4 <_free_r+0x24>
 8008818:	6810      	ldr	r0, [r2, #0]
 800881a:	6852      	ldr	r2, [r2, #4]
 800881c:	605a      	str	r2, [r3, #4]
 800881e:	4401      	add	r1, r0
 8008820:	6019      	str	r1, [r3, #0]
 8008822:	e7d7      	b.n	80087d4 <_free_r+0x24>
 8008824:	d902      	bls.n	800882c <_free_r+0x7c>
 8008826:	230c      	movs	r3, #12
 8008828:	602b      	str	r3, [r5, #0]
 800882a:	e7d3      	b.n	80087d4 <_free_r+0x24>
 800882c:	6820      	ldr	r0, [r4, #0]
 800882e:	1821      	adds	r1, r4, r0
 8008830:	428a      	cmp	r2, r1
 8008832:	bf04      	itt	eq
 8008834:	6811      	ldreq	r1, [r2, #0]
 8008836:	6852      	ldreq	r2, [r2, #4]
 8008838:	6062      	str	r2, [r4, #4]
 800883a:	bf04      	itt	eq
 800883c:	1809      	addeq	r1, r1, r0
 800883e:	6021      	streq	r1, [r4, #0]
 8008840:	605c      	str	r4, [r3, #4]
 8008842:	e7c7      	b.n	80087d4 <_free_r+0x24>
 8008844:	bd38      	pop	{r3, r4, r5, pc}
 8008846:	bf00      	nop
 8008848:	20004064 	.word	0x20004064

0800884c <_malloc_r>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	1ccd      	adds	r5, r1, #3
 8008850:	f025 0503 	bic.w	r5, r5, #3
 8008854:	3508      	adds	r5, #8
 8008856:	2d0c      	cmp	r5, #12
 8008858:	bf38      	it	cc
 800885a:	250c      	movcc	r5, #12
 800885c:	2d00      	cmp	r5, #0
 800885e:	4606      	mov	r6, r0
 8008860:	db01      	blt.n	8008866 <_malloc_r+0x1a>
 8008862:	42a9      	cmp	r1, r5
 8008864:	d903      	bls.n	800886e <_malloc_r+0x22>
 8008866:	230c      	movs	r3, #12
 8008868:	6033      	str	r3, [r6, #0]
 800886a:	2000      	movs	r0, #0
 800886c:	bd70      	pop	{r4, r5, r6, pc}
 800886e:	f000 fde4 	bl	800943a <__malloc_lock>
 8008872:	4a21      	ldr	r2, [pc, #132]	; (80088f8 <_malloc_r+0xac>)
 8008874:	6814      	ldr	r4, [r2, #0]
 8008876:	4621      	mov	r1, r4
 8008878:	b991      	cbnz	r1, 80088a0 <_malloc_r+0x54>
 800887a:	4c20      	ldr	r4, [pc, #128]	; (80088fc <_malloc_r+0xb0>)
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	b91b      	cbnz	r3, 8008888 <_malloc_r+0x3c>
 8008880:	4630      	mov	r0, r6
 8008882:	f000 fc57 	bl	8009134 <_sbrk_r>
 8008886:	6020      	str	r0, [r4, #0]
 8008888:	4629      	mov	r1, r5
 800888a:	4630      	mov	r0, r6
 800888c:	f000 fc52 	bl	8009134 <_sbrk_r>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d124      	bne.n	80088de <_malloc_r+0x92>
 8008894:	230c      	movs	r3, #12
 8008896:	6033      	str	r3, [r6, #0]
 8008898:	4630      	mov	r0, r6
 800889a:	f000 fdcf 	bl	800943c <__malloc_unlock>
 800889e:	e7e4      	b.n	800886a <_malloc_r+0x1e>
 80088a0:	680b      	ldr	r3, [r1, #0]
 80088a2:	1b5b      	subs	r3, r3, r5
 80088a4:	d418      	bmi.n	80088d8 <_malloc_r+0x8c>
 80088a6:	2b0b      	cmp	r3, #11
 80088a8:	d90f      	bls.n	80088ca <_malloc_r+0x7e>
 80088aa:	600b      	str	r3, [r1, #0]
 80088ac:	50cd      	str	r5, [r1, r3]
 80088ae:	18cc      	adds	r4, r1, r3
 80088b0:	4630      	mov	r0, r6
 80088b2:	f000 fdc3 	bl	800943c <__malloc_unlock>
 80088b6:	f104 000b 	add.w	r0, r4, #11
 80088ba:	1d23      	adds	r3, r4, #4
 80088bc:	f020 0007 	bic.w	r0, r0, #7
 80088c0:	1ac3      	subs	r3, r0, r3
 80088c2:	d0d3      	beq.n	800886c <_malloc_r+0x20>
 80088c4:	425a      	negs	r2, r3
 80088c6:	50e2      	str	r2, [r4, r3]
 80088c8:	e7d0      	b.n	800886c <_malloc_r+0x20>
 80088ca:	428c      	cmp	r4, r1
 80088cc:	684b      	ldr	r3, [r1, #4]
 80088ce:	bf16      	itet	ne
 80088d0:	6063      	strne	r3, [r4, #4]
 80088d2:	6013      	streq	r3, [r2, #0]
 80088d4:	460c      	movne	r4, r1
 80088d6:	e7eb      	b.n	80088b0 <_malloc_r+0x64>
 80088d8:	460c      	mov	r4, r1
 80088da:	6849      	ldr	r1, [r1, #4]
 80088dc:	e7cc      	b.n	8008878 <_malloc_r+0x2c>
 80088de:	1cc4      	adds	r4, r0, #3
 80088e0:	f024 0403 	bic.w	r4, r4, #3
 80088e4:	42a0      	cmp	r0, r4
 80088e6:	d005      	beq.n	80088f4 <_malloc_r+0xa8>
 80088e8:	1a21      	subs	r1, r4, r0
 80088ea:	4630      	mov	r0, r6
 80088ec:	f000 fc22 	bl	8009134 <_sbrk_r>
 80088f0:	3001      	adds	r0, #1
 80088f2:	d0cf      	beq.n	8008894 <_malloc_r+0x48>
 80088f4:	6025      	str	r5, [r4, #0]
 80088f6:	e7db      	b.n	80088b0 <_malloc_r+0x64>
 80088f8:	20004064 	.word	0x20004064
 80088fc:	20004068 	.word	0x20004068

08008900 <__ssputs_r>:
 8008900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008904:	688e      	ldr	r6, [r1, #8]
 8008906:	429e      	cmp	r6, r3
 8008908:	4682      	mov	sl, r0
 800890a:	460c      	mov	r4, r1
 800890c:	4690      	mov	r8, r2
 800890e:	4699      	mov	r9, r3
 8008910:	d837      	bhi.n	8008982 <__ssputs_r+0x82>
 8008912:	898a      	ldrh	r2, [r1, #12]
 8008914:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008918:	d031      	beq.n	800897e <__ssputs_r+0x7e>
 800891a:	6825      	ldr	r5, [r4, #0]
 800891c:	6909      	ldr	r1, [r1, #16]
 800891e:	1a6f      	subs	r7, r5, r1
 8008920:	6965      	ldr	r5, [r4, #20]
 8008922:	2302      	movs	r3, #2
 8008924:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008928:	fb95 f5f3 	sdiv	r5, r5, r3
 800892c:	f109 0301 	add.w	r3, r9, #1
 8008930:	443b      	add	r3, r7
 8008932:	429d      	cmp	r5, r3
 8008934:	bf38      	it	cc
 8008936:	461d      	movcc	r5, r3
 8008938:	0553      	lsls	r3, r2, #21
 800893a:	d530      	bpl.n	800899e <__ssputs_r+0x9e>
 800893c:	4629      	mov	r1, r5
 800893e:	f7ff ff85 	bl	800884c <_malloc_r>
 8008942:	4606      	mov	r6, r0
 8008944:	b950      	cbnz	r0, 800895c <__ssputs_r+0x5c>
 8008946:	230c      	movs	r3, #12
 8008948:	f8ca 3000 	str.w	r3, [sl]
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008952:	81a3      	strh	r3, [r4, #12]
 8008954:	f04f 30ff 	mov.w	r0, #4294967295
 8008958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800895c:	463a      	mov	r2, r7
 800895e:	6921      	ldr	r1, [r4, #16]
 8008960:	f7ff fc46 	bl	80081f0 <memcpy>
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800896a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800896e:	81a3      	strh	r3, [r4, #12]
 8008970:	6126      	str	r6, [r4, #16]
 8008972:	6165      	str	r5, [r4, #20]
 8008974:	443e      	add	r6, r7
 8008976:	1bed      	subs	r5, r5, r7
 8008978:	6026      	str	r6, [r4, #0]
 800897a:	60a5      	str	r5, [r4, #8]
 800897c:	464e      	mov	r6, r9
 800897e:	454e      	cmp	r6, r9
 8008980:	d900      	bls.n	8008984 <__ssputs_r+0x84>
 8008982:	464e      	mov	r6, r9
 8008984:	4632      	mov	r2, r6
 8008986:	4641      	mov	r1, r8
 8008988:	6820      	ldr	r0, [r4, #0]
 800898a:	f000 fd3d 	bl	8009408 <memmove>
 800898e:	68a3      	ldr	r3, [r4, #8]
 8008990:	1b9b      	subs	r3, r3, r6
 8008992:	60a3      	str	r3, [r4, #8]
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	441e      	add	r6, r3
 8008998:	6026      	str	r6, [r4, #0]
 800899a:	2000      	movs	r0, #0
 800899c:	e7dc      	b.n	8008958 <__ssputs_r+0x58>
 800899e:	462a      	mov	r2, r5
 80089a0:	f000 fd4d 	bl	800943e <_realloc_r>
 80089a4:	4606      	mov	r6, r0
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d1e2      	bne.n	8008970 <__ssputs_r+0x70>
 80089aa:	6921      	ldr	r1, [r4, #16]
 80089ac:	4650      	mov	r0, sl
 80089ae:	f7ff feff 	bl	80087b0 <_free_r>
 80089b2:	e7c8      	b.n	8008946 <__ssputs_r+0x46>

080089b4 <_svfiprintf_r>:
 80089b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b8:	461d      	mov	r5, r3
 80089ba:	898b      	ldrh	r3, [r1, #12]
 80089bc:	061f      	lsls	r7, r3, #24
 80089be:	b09d      	sub	sp, #116	; 0x74
 80089c0:	4680      	mov	r8, r0
 80089c2:	460c      	mov	r4, r1
 80089c4:	4616      	mov	r6, r2
 80089c6:	d50f      	bpl.n	80089e8 <_svfiprintf_r+0x34>
 80089c8:	690b      	ldr	r3, [r1, #16]
 80089ca:	b96b      	cbnz	r3, 80089e8 <_svfiprintf_r+0x34>
 80089cc:	2140      	movs	r1, #64	; 0x40
 80089ce:	f7ff ff3d 	bl	800884c <_malloc_r>
 80089d2:	6020      	str	r0, [r4, #0]
 80089d4:	6120      	str	r0, [r4, #16]
 80089d6:	b928      	cbnz	r0, 80089e4 <_svfiprintf_r+0x30>
 80089d8:	230c      	movs	r3, #12
 80089da:	f8c8 3000 	str.w	r3, [r8]
 80089de:	f04f 30ff 	mov.w	r0, #4294967295
 80089e2:	e0c8      	b.n	8008b76 <_svfiprintf_r+0x1c2>
 80089e4:	2340      	movs	r3, #64	; 0x40
 80089e6:	6163      	str	r3, [r4, #20]
 80089e8:	2300      	movs	r3, #0
 80089ea:	9309      	str	r3, [sp, #36]	; 0x24
 80089ec:	2320      	movs	r3, #32
 80089ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089f2:	2330      	movs	r3, #48	; 0x30
 80089f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089f8:	9503      	str	r5, [sp, #12]
 80089fa:	f04f 0b01 	mov.w	fp, #1
 80089fe:	4637      	mov	r7, r6
 8008a00:	463d      	mov	r5, r7
 8008a02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a06:	b10b      	cbz	r3, 8008a0c <_svfiprintf_r+0x58>
 8008a08:	2b25      	cmp	r3, #37	; 0x25
 8008a0a:	d13e      	bne.n	8008a8a <_svfiprintf_r+0xd6>
 8008a0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008a10:	d00b      	beq.n	8008a2a <_svfiprintf_r+0x76>
 8008a12:	4653      	mov	r3, sl
 8008a14:	4632      	mov	r2, r6
 8008a16:	4621      	mov	r1, r4
 8008a18:	4640      	mov	r0, r8
 8008a1a:	f7ff ff71 	bl	8008900 <__ssputs_r>
 8008a1e:	3001      	adds	r0, #1
 8008a20:	f000 80a4 	beq.w	8008b6c <_svfiprintf_r+0x1b8>
 8008a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a26:	4453      	add	r3, sl
 8008a28:	9309      	str	r3, [sp, #36]	; 0x24
 8008a2a:	783b      	ldrb	r3, [r7, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 809d 	beq.w	8008b6c <_svfiprintf_r+0x1b8>
 8008a32:	2300      	movs	r3, #0
 8008a34:	f04f 32ff 	mov.w	r2, #4294967295
 8008a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a3c:	9304      	str	r3, [sp, #16]
 8008a3e:	9307      	str	r3, [sp, #28]
 8008a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a44:	931a      	str	r3, [sp, #104]	; 0x68
 8008a46:	462f      	mov	r7, r5
 8008a48:	2205      	movs	r2, #5
 8008a4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008a4e:	4850      	ldr	r0, [pc, #320]	; (8008b90 <_svfiprintf_r+0x1dc>)
 8008a50:	f7f7 fbce 	bl	80001f0 <memchr>
 8008a54:	9b04      	ldr	r3, [sp, #16]
 8008a56:	b9d0      	cbnz	r0, 8008a8e <_svfiprintf_r+0xda>
 8008a58:	06d9      	lsls	r1, r3, #27
 8008a5a:	bf44      	itt	mi
 8008a5c:	2220      	movmi	r2, #32
 8008a5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a62:	071a      	lsls	r2, r3, #28
 8008a64:	bf44      	itt	mi
 8008a66:	222b      	movmi	r2, #43	; 0x2b
 8008a68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a6c:	782a      	ldrb	r2, [r5, #0]
 8008a6e:	2a2a      	cmp	r2, #42	; 0x2a
 8008a70:	d015      	beq.n	8008a9e <_svfiprintf_r+0xea>
 8008a72:	9a07      	ldr	r2, [sp, #28]
 8008a74:	462f      	mov	r7, r5
 8008a76:	2000      	movs	r0, #0
 8008a78:	250a      	movs	r5, #10
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a80:	3b30      	subs	r3, #48	; 0x30
 8008a82:	2b09      	cmp	r3, #9
 8008a84:	d94d      	bls.n	8008b22 <_svfiprintf_r+0x16e>
 8008a86:	b1b8      	cbz	r0, 8008ab8 <_svfiprintf_r+0x104>
 8008a88:	e00f      	b.n	8008aaa <_svfiprintf_r+0xf6>
 8008a8a:	462f      	mov	r7, r5
 8008a8c:	e7b8      	b.n	8008a00 <_svfiprintf_r+0x4c>
 8008a8e:	4a40      	ldr	r2, [pc, #256]	; (8008b90 <_svfiprintf_r+0x1dc>)
 8008a90:	1a80      	subs	r0, r0, r2
 8008a92:	fa0b f000 	lsl.w	r0, fp, r0
 8008a96:	4318      	orrs	r0, r3
 8008a98:	9004      	str	r0, [sp, #16]
 8008a9a:	463d      	mov	r5, r7
 8008a9c:	e7d3      	b.n	8008a46 <_svfiprintf_r+0x92>
 8008a9e:	9a03      	ldr	r2, [sp, #12]
 8008aa0:	1d11      	adds	r1, r2, #4
 8008aa2:	6812      	ldr	r2, [r2, #0]
 8008aa4:	9103      	str	r1, [sp, #12]
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	db01      	blt.n	8008aae <_svfiprintf_r+0xfa>
 8008aaa:	9207      	str	r2, [sp, #28]
 8008aac:	e004      	b.n	8008ab8 <_svfiprintf_r+0x104>
 8008aae:	4252      	negs	r2, r2
 8008ab0:	f043 0302 	orr.w	r3, r3, #2
 8008ab4:	9207      	str	r2, [sp, #28]
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	783b      	ldrb	r3, [r7, #0]
 8008aba:	2b2e      	cmp	r3, #46	; 0x2e
 8008abc:	d10c      	bne.n	8008ad8 <_svfiprintf_r+0x124>
 8008abe:	787b      	ldrb	r3, [r7, #1]
 8008ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ac2:	d133      	bne.n	8008b2c <_svfiprintf_r+0x178>
 8008ac4:	9b03      	ldr	r3, [sp, #12]
 8008ac6:	1d1a      	adds	r2, r3, #4
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	9203      	str	r2, [sp, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	bfb8      	it	lt
 8008ad0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ad4:	3702      	adds	r7, #2
 8008ad6:	9305      	str	r3, [sp, #20]
 8008ad8:	4d2e      	ldr	r5, [pc, #184]	; (8008b94 <_svfiprintf_r+0x1e0>)
 8008ada:	7839      	ldrb	r1, [r7, #0]
 8008adc:	2203      	movs	r2, #3
 8008ade:	4628      	mov	r0, r5
 8008ae0:	f7f7 fb86 	bl	80001f0 <memchr>
 8008ae4:	b138      	cbz	r0, 8008af6 <_svfiprintf_r+0x142>
 8008ae6:	2340      	movs	r3, #64	; 0x40
 8008ae8:	1b40      	subs	r0, r0, r5
 8008aea:	fa03 f000 	lsl.w	r0, r3, r0
 8008aee:	9b04      	ldr	r3, [sp, #16]
 8008af0:	4303      	orrs	r3, r0
 8008af2:	3701      	adds	r7, #1
 8008af4:	9304      	str	r3, [sp, #16]
 8008af6:	7839      	ldrb	r1, [r7, #0]
 8008af8:	4827      	ldr	r0, [pc, #156]	; (8008b98 <_svfiprintf_r+0x1e4>)
 8008afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008afe:	2206      	movs	r2, #6
 8008b00:	1c7e      	adds	r6, r7, #1
 8008b02:	f7f7 fb75 	bl	80001f0 <memchr>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d038      	beq.n	8008b7c <_svfiprintf_r+0x1c8>
 8008b0a:	4b24      	ldr	r3, [pc, #144]	; (8008b9c <_svfiprintf_r+0x1e8>)
 8008b0c:	bb13      	cbnz	r3, 8008b54 <_svfiprintf_r+0x1a0>
 8008b0e:	9b03      	ldr	r3, [sp, #12]
 8008b10:	3307      	adds	r3, #7
 8008b12:	f023 0307 	bic.w	r3, r3, #7
 8008b16:	3308      	adds	r3, #8
 8008b18:	9303      	str	r3, [sp, #12]
 8008b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1c:	444b      	add	r3, r9
 8008b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b20:	e76d      	b.n	80089fe <_svfiprintf_r+0x4a>
 8008b22:	fb05 3202 	mla	r2, r5, r2, r3
 8008b26:	2001      	movs	r0, #1
 8008b28:	460f      	mov	r7, r1
 8008b2a:	e7a6      	b.n	8008a7a <_svfiprintf_r+0xc6>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	3701      	adds	r7, #1
 8008b30:	9305      	str	r3, [sp, #20]
 8008b32:	4619      	mov	r1, r3
 8008b34:	250a      	movs	r5, #10
 8008b36:	4638      	mov	r0, r7
 8008b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b3c:	3a30      	subs	r2, #48	; 0x30
 8008b3e:	2a09      	cmp	r2, #9
 8008b40:	d903      	bls.n	8008b4a <_svfiprintf_r+0x196>
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0c8      	beq.n	8008ad8 <_svfiprintf_r+0x124>
 8008b46:	9105      	str	r1, [sp, #20]
 8008b48:	e7c6      	b.n	8008ad8 <_svfiprintf_r+0x124>
 8008b4a:	fb05 2101 	mla	r1, r5, r1, r2
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4607      	mov	r7, r0
 8008b52:	e7f0      	b.n	8008b36 <_svfiprintf_r+0x182>
 8008b54:	ab03      	add	r3, sp, #12
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	4622      	mov	r2, r4
 8008b5a:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <_svfiprintf_r+0x1ec>)
 8008b5c:	a904      	add	r1, sp, #16
 8008b5e:	4640      	mov	r0, r8
 8008b60:	f3af 8000 	nop.w
 8008b64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008b68:	4681      	mov	r9, r0
 8008b6a:	d1d6      	bne.n	8008b1a <_svfiprintf_r+0x166>
 8008b6c:	89a3      	ldrh	r3, [r4, #12]
 8008b6e:	065b      	lsls	r3, r3, #25
 8008b70:	f53f af35 	bmi.w	80089de <_svfiprintf_r+0x2a>
 8008b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b76:	b01d      	add	sp, #116	; 0x74
 8008b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7c:	ab03      	add	r3, sp, #12
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	4622      	mov	r2, r4
 8008b82:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <_svfiprintf_r+0x1ec>)
 8008b84:	a904      	add	r1, sp, #16
 8008b86:	4640      	mov	r0, r8
 8008b88:	f000 f9c2 	bl	8008f10 <_printf_i>
 8008b8c:	e7ea      	b.n	8008b64 <_svfiprintf_r+0x1b0>
 8008b8e:	bf00      	nop
 8008b90:	080096cc 	.word	0x080096cc
 8008b94:	080096d2 	.word	0x080096d2
 8008b98:	080096d6 	.word	0x080096d6
 8008b9c:	00000000 	.word	0x00000000
 8008ba0:	08008901 	.word	0x08008901

08008ba4 <__sfputc_r>:
 8008ba4:	6893      	ldr	r3, [r2, #8]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	b410      	push	{r4}
 8008bac:	6093      	str	r3, [r2, #8]
 8008bae:	da08      	bge.n	8008bc2 <__sfputc_r+0x1e>
 8008bb0:	6994      	ldr	r4, [r2, #24]
 8008bb2:	42a3      	cmp	r3, r4
 8008bb4:	db01      	blt.n	8008bba <__sfputc_r+0x16>
 8008bb6:	290a      	cmp	r1, #10
 8008bb8:	d103      	bne.n	8008bc2 <__sfputc_r+0x1e>
 8008bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bbe:	f000 bb0d 	b.w	80091dc <__swbuf_r>
 8008bc2:	6813      	ldr	r3, [r2, #0]
 8008bc4:	1c58      	adds	r0, r3, #1
 8008bc6:	6010      	str	r0, [r2, #0]
 8008bc8:	7019      	strb	r1, [r3, #0]
 8008bca:	4608      	mov	r0, r1
 8008bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <__sfputs_r>:
 8008bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	460f      	mov	r7, r1
 8008bd8:	4614      	mov	r4, r2
 8008bda:	18d5      	adds	r5, r2, r3
 8008bdc:	42ac      	cmp	r4, r5
 8008bde:	d101      	bne.n	8008be4 <__sfputs_r+0x12>
 8008be0:	2000      	movs	r0, #0
 8008be2:	e007      	b.n	8008bf4 <__sfputs_r+0x22>
 8008be4:	463a      	mov	r2, r7
 8008be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bea:	4630      	mov	r0, r6
 8008bec:	f7ff ffda 	bl	8008ba4 <__sfputc_r>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d1f3      	bne.n	8008bdc <__sfputs_r+0xa>
 8008bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bf8 <_vfiprintf_r>:
 8008bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	b09d      	sub	sp, #116	; 0x74
 8008c00:	4617      	mov	r7, r2
 8008c02:	461d      	mov	r5, r3
 8008c04:	4606      	mov	r6, r0
 8008c06:	b118      	cbz	r0, 8008c10 <_vfiprintf_r+0x18>
 8008c08:	6983      	ldr	r3, [r0, #24]
 8008c0a:	b90b      	cbnz	r3, 8008c10 <_vfiprintf_r+0x18>
 8008c0c:	f7ff fcda 	bl	80085c4 <__sinit>
 8008c10:	4b7c      	ldr	r3, [pc, #496]	; (8008e04 <_vfiprintf_r+0x20c>)
 8008c12:	429c      	cmp	r4, r3
 8008c14:	d158      	bne.n	8008cc8 <_vfiprintf_r+0xd0>
 8008c16:	6874      	ldr	r4, [r6, #4]
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	0718      	lsls	r0, r3, #28
 8008c1c:	d55e      	bpl.n	8008cdc <_vfiprintf_r+0xe4>
 8008c1e:	6923      	ldr	r3, [r4, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d05b      	beq.n	8008cdc <_vfiprintf_r+0xe4>
 8008c24:	2300      	movs	r3, #0
 8008c26:	9309      	str	r3, [sp, #36]	; 0x24
 8008c28:	2320      	movs	r3, #32
 8008c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c2e:	2330      	movs	r3, #48	; 0x30
 8008c30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c34:	9503      	str	r5, [sp, #12]
 8008c36:	f04f 0b01 	mov.w	fp, #1
 8008c3a:	46b8      	mov	r8, r7
 8008c3c:	4645      	mov	r5, r8
 8008c3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c42:	b10b      	cbz	r3, 8008c48 <_vfiprintf_r+0x50>
 8008c44:	2b25      	cmp	r3, #37	; 0x25
 8008c46:	d154      	bne.n	8008cf2 <_vfiprintf_r+0xfa>
 8008c48:	ebb8 0a07 	subs.w	sl, r8, r7
 8008c4c:	d00b      	beq.n	8008c66 <_vfiprintf_r+0x6e>
 8008c4e:	4653      	mov	r3, sl
 8008c50:	463a      	mov	r2, r7
 8008c52:	4621      	mov	r1, r4
 8008c54:	4630      	mov	r0, r6
 8008c56:	f7ff ffbc 	bl	8008bd2 <__sfputs_r>
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	f000 80c2 	beq.w	8008de4 <_vfiprintf_r+0x1ec>
 8008c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c62:	4453      	add	r3, sl
 8008c64:	9309      	str	r3, [sp, #36]	; 0x24
 8008c66:	f898 3000 	ldrb.w	r3, [r8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 80ba 	beq.w	8008de4 <_vfiprintf_r+0x1ec>
 8008c70:	2300      	movs	r3, #0
 8008c72:	f04f 32ff 	mov.w	r2, #4294967295
 8008c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c7a:	9304      	str	r3, [sp, #16]
 8008c7c:	9307      	str	r3, [sp, #28]
 8008c7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c82:	931a      	str	r3, [sp, #104]	; 0x68
 8008c84:	46a8      	mov	r8, r5
 8008c86:	2205      	movs	r2, #5
 8008c88:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008c8c:	485e      	ldr	r0, [pc, #376]	; (8008e08 <_vfiprintf_r+0x210>)
 8008c8e:	f7f7 faaf 	bl	80001f0 <memchr>
 8008c92:	9b04      	ldr	r3, [sp, #16]
 8008c94:	bb78      	cbnz	r0, 8008cf6 <_vfiprintf_r+0xfe>
 8008c96:	06d9      	lsls	r1, r3, #27
 8008c98:	bf44      	itt	mi
 8008c9a:	2220      	movmi	r2, #32
 8008c9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ca0:	071a      	lsls	r2, r3, #28
 8008ca2:	bf44      	itt	mi
 8008ca4:	222b      	movmi	r2, #43	; 0x2b
 8008ca6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008caa:	782a      	ldrb	r2, [r5, #0]
 8008cac:	2a2a      	cmp	r2, #42	; 0x2a
 8008cae:	d02a      	beq.n	8008d06 <_vfiprintf_r+0x10e>
 8008cb0:	9a07      	ldr	r2, [sp, #28]
 8008cb2:	46a8      	mov	r8, r5
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	250a      	movs	r5, #10
 8008cb8:	4641      	mov	r1, r8
 8008cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cbe:	3b30      	subs	r3, #48	; 0x30
 8008cc0:	2b09      	cmp	r3, #9
 8008cc2:	d969      	bls.n	8008d98 <_vfiprintf_r+0x1a0>
 8008cc4:	b360      	cbz	r0, 8008d20 <_vfiprintf_r+0x128>
 8008cc6:	e024      	b.n	8008d12 <_vfiprintf_r+0x11a>
 8008cc8:	4b50      	ldr	r3, [pc, #320]	; (8008e0c <_vfiprintf_r+0x214>)
 8008cca:	429c      	cmp	r4, r3
 8008ccc:	d101      	bne.n	8008cd2 <_vfiprintf_r+0xda>
 8008cce:	68b4      	ldr	r4, [r6, #8]
 8008cd0:	e7a2      	b.n	8008c18 <_vfiprintf_r+0x20>
 8008cd2:	4b4f      	ldr	r3, [pc, #316]	; (8008e10 <_vfiprintf_r+0x218>)
 8008cd4:	429c      	cmp	r4, r3
 8008cd6:	bf08      	it	eq
 8008cd8:	68f4      	ldreq	r4, [r6, #12]
 8008cda:	e79d      	b.n	8008c18 <_vfiprintf_r+0x20>
 8008cdc:	4621      	mov	r1, r4
 8008cde:	4630      	mov	r0, r6
 8008ce0:	f000 fae0 	bl	80092a4 <__swsetup_r>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d09d      	beq.n	8008c24 <_vfiprintf_r+0x2c>
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	b01d      	add	sp, #116	; 0x74
 8008cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf2:	46a8      	mov	r8, r5
 8008cf4:	e7a2      	b.n	8008c3c <_vfiprintf_r+0x44>
 8008cf6:	4a44      	ldr	r2, [pc, #272]	; (8008e08 <_vfiprintf_r+0x210>)
 8008cf8:	1a80      	subs	r0, r0, r2
 8008cfa:	fa0b f000 	lsl.w	r0, fp, r0
 8008cfe:	4318      	orrs	r0, r3
 8008d00:	9004      	str	r0, [sp, #16]
 8008d02:	4645      	mov	r5, r8
 8008d04:	e7be      	b.n	8008c84 <_vfiprintf_r+0x8c>
 8008d06:	9a03      	ldr	r2, [sp, #12]
 8008d08:	1d11      	adds	r1, r2, #4
 8008d0a:	6812      	ldr	r2, [r2, #0]
 8008d0c:	9103      	str	r1, [sp, #12]
 8008d0e:	2a00      	cmp	r2, #0
 8008d10:	db01      	blt.n	8008d16 <_vfiprintf_r+0x11e>
 8008d12:	9207      	str	r2, [sp, #28]
 8008d14:	e004      	b.n	8008d20 <_vfiprintf_r+0x128>
 8008d16:	4252      	negs	r2, r2
 8008d18:	f043 0302 	orr.w	r3, r3, #2
 8008d1c:	9207      	str	r2, [sp, #28]
 8008d1e:	9304      	str	r3, [sp, #16]
 8008d20:	f898 3000 	ldrb.w	r3, [r8]
 8008d24:	2b2e      	cmp	r3, #46	; 0x2e
 8008d26:	d10e      	bne.n	8008d46 <_vfiprintf_r+0x14e>
 8008d28:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d2e:	d138      	bne.n	8008da2 <_vfiprintf_r+0x1aa>
 8008d30:	9b03      	ldr	r3, [sp, #12]
 8008d32:	1d1a      	adds	r2, r3, #4
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	9203      	str	r2, [sp, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	bfb8      	it	lt
 8008d3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d40:	f108 0802 	add.w	r8, r8, #2
 8008d44:	9305      	str	r3, [sp, #20]
 8008d46:	4d33      	ldr	r5, [pc, #204]	; (8008e14 <_vfiprintf_r+0x21c>)
 8008d48:	f898 1000 	ldrb.w	r1, [r8]
 8008d4c:	2203      	movs	r2, #3
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f7f7 fa4e 	bl	80001f0 <memchr>
 8008d54:	b140      	cbz	r0, 8008d68 <_vfiprintf_r+0x170>
 8008d56:	2340      	movs	r3, #64	; 0x40
 8008d58:	1b40      	subs	r0, r0, r5
 8008d5a:	fa03 f000 	lsl.w	r0, r3, r0
 8008d5e:	9b04      	ldr	r3, [sp, #16]
 8008d60:	4303      	orrs	r3, r0
 8008d62:	f108 0801 	add.w	r8, r8, #1
 8008d66:	9304      	str	r3, [sp, #16]
 8008d68:	f898 1000 	ldrb.w	r1, [r8]
 8008d6c:	482a      	ldr	r0, [pc, #168]	; (8008e18 <_vfiprintf_r+0x220>)
 8008d6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d72:	2206      	movs	r2, #6
 8008d74:	f108 0701 	add.w	r7, r8, #1
 8008d78:	f7f7 fa3a 	bl	80001f0 <memchr>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d037      	beq.n	8008df0 <_vfiprintf_r+0x1f8>
 8008d80:	4b26      	ldr	r3, [pc, #152]	; (8008e1c <_vfiprintf_r+0x224>)
 8008d82:	bb1b      	cbnz	r3, 8008dcc <_vfiprintf_r+0x1d4>
 8008d84:	9b03      	ldr	r3, [sp, #12]
 8008d86:	3307      	adds	r3, #7
 8008d88:	f023 0307 	bic.w	r3, r3, #7
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	9303      	str	r3, [sp, #12]
 8008d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d92:	444b      	add	r3, r9
 8008d94:	9309      	str	r3, [sp, #36]	; 0x24
 8008d96:	e750      	b.n	8008c3a <_vfiprintf_r+0x42>
 8008d98:	fb05 3202 	mla	r2, r5, r2, r3
 8008d9c:	2001      	movs	r0, #1
 8008d9e:	4688      	mov	r8, r1
 8008da0:	e78a      	b.n	8008cb8 <_vfiprintf_r+0xc0>
 8008da2:	2300      	movs	r3, #0
 8008da4:	f108 0801 	add.w	r8, r8, #1
 8008da8:	9305      	str	r3, [sp, #20]
 8008daa:	4619      	mov	r1, r3
 8008dac:	250a      	movs	r5, #10
 8008dae:	4640      	mov	r0, r8
 8008db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008db4:	3a30      	subs	r2, #48	; 0x30
 8008db6:	2a09      	cmp	r2, #9
 8008db8:	d903      	bls.n	8008dc2 <_vfiprintf_r+0x1ca>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0c3      	beq.n	8008d46 <_vfiprintf_r+0x14e>
 8008dbe:	9105      	str	r1, [sp, #20]
 8008dc0:	e7c1      	b.n	8008d46 <_vfiprintf_r+0x14e>
 8008dc2:	fb05 2101 	mla	r1, r5, r1, r2
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4680      	mov	r8, r0
 8008dca:	e7f0      	b.n	8008dae <_vfiprintf_r+0x1b6>
 8008dcc:	ab03      	add	r3, sp, #12
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	4622      	mov	r2, r4
 8008dd2:	4b13      	ldr	r3, [pc, #76]	; (8008e20 <_vfiprintf_r+0x228>)
 8008dd4:	a904      	add	r1, sp, #16
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f3af 8000 	nop.w
 8008ddc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008de0:	4681      	mov	r9, r0
 8008de2:	d1d5      	bne.n	8008d90 <_vfiprintf_r+0x198>
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	065b      	lsls	r3, r3, #25
 8008de8:	f53f af7e 	bmi.w	8008ce8 <_vfiprintf_r+0xf0>
 8008dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dee:	e77d      	b.n	8008cec <_vfiprintf_r+0xf4>
 8008df0:	ab03      	add	r3, sp, #12
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	4622      	mov	r2, r4
 8008df6:	4b0a      	ldr	r3, [pc, #40]	; (8008e20 <_vfiprintf_r+0x228>)
 8008df8:	a904      	add	r1, sp, #16
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f000 f888 	bl	8008f10 <_printf_i>
 8008e00:	e7ec      	b.n	8008ddc <_vfiprintf_r+0x1e4>
 8008e02:	bf00      	nop
 8008e04:	0800968c 	.word	0x0800968c
 8008e08:	080096cc 	.word	0x080096cc
 8008e0c:	080096ac 	.word	0x080096ac
 8008e10:	0800966c 	.word	0x0800966c
 8008e14:	080096d2 	.word	0x080096d2
 8008e18:	080096d6 	.word	0x080096d6
 8008e1c:	00000000 	.word	0x00000000
 8008e20:	08008bd3 	.word	0x08008bd3

08008e24 <_printf_common>:
 8008e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	4691      	mov	r9, r2
 8008e2a:	461f      	mov	r7, r3
 8008e2c:	688a      	ldr	r2, [r1, #8]
 8008e2e:	690b      	ldr	r3, [r1, #16]
 8008e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e34:	4293      	cmp	r3, r2
 8008e36:	bfb8      	it	lt
 8008e38:	4613      	movlt	r3, r2
 8008e3a:	f8c9 3000 	str.w	r3, [r9]
 8008e3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e42:	4606      	mov	r6, r0
 8008e44:	460c      	mov	r4, r1
 8008e46:	b112      	cbz	r2, 8008e4e <_printf_common+0x2a>
 8008e48:	3301      	adds	r3, #1
 8008e4a:	f8c9 3000 	str.w	r3, [r9]
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	0699      	lsls	r1, r3, #26
 8008e52:	bf42      	ittt	mi
 8008e54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008e58:	3302      	addmi	r3, #2
 8008e5a:	f8c9 3000 	strmi.w	r3, [r9]
 8008e5e:	6825      	ldr	r5, [r4, #0]
 8008e60:	f015 0506 	ands.w	r5, r5, #6
 8008e64:	d107      	bne.n	8008e76 <_printf_common+0x52>
 8008e66:	f104 0a19 	add.w	sl, r4, #25
 8008e6a:	68e3      	ldr	r3, [r4, #12]
 8008e6c:	f8d9 2000 	ldr.w	r2, [r9]
 8008e70:	1a9b      	subs	r3, r3, r2
 8008e72:	42ab      	cmp	r3, r5
 8008e74:	dc28      	bgt.n	8008ec8 <_printf_common+0xa4>
 8008e76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008e7a:	6822      	ldr	r2, [r4, #0]
 8008e7c:	3300      	adds	r3, #0
 8008e7e:	bf18      	it	ne
 8008e80:	2301      	movne	r3, #1
 8008e82:	0692      	lsls	r2, r2, #26
 8008e84:	d42d      	bmi.n	8008ee2 <_printf_common+0xbe>
 8008e86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e8a:	4639      	mov	r1, r7
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	47c0      	blx	r8
 8008e90:	3001      	adds	r0, #1
 8008e92:	d020      	beq.n	8008ed6 <_printf_common+0xb2>
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	68e5      	ldr	r5, [r4, #12]
 8008e98:	f8d9 2000 	ldr.w	r2, [r9]
 8008e9c:	f003 0306 	and.w	r3, r3, #6
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	bf08      	it	eq
 8008ea4:	1aad      	subeq	r5, r5, r2
 8008ea6:	68a3      	ldr	r3, [r4, #8]
 8008ea8:	6922      	ldr	r2, [r4, #16]
 8008eaa:	bf0c      	ite	eq
 8008eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eb0:	2500      	movne	r5, #0
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	bfc4      	itt	gt
 8008eb6:	1a9b      	subgt	r3, r3, r2
 8008eb8:	18ed      	addgt	r5, r5, r3
 8008eba:	f04f 0900 	mov.w	r9, #0
 8008ebe:	341a      	adds	r4, #26
 8008ec0:	454d      	cmp	r5, r9
 8008ec2:	d11a      	bne.n	8008efa <_printf_common+0xd6>
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	e008      	b.n	8008eda <_printf_common+0xb6>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	4652      	mov	r2, sl
 8008ecc:	4639      	mov	r1, r7
 8008ece:	4630      	mov	r0, r6
 8008ed0:	47c0      	blx	r8
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	d103      	bne.n	8008ede <_printf_common+0xba>
 8008ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ede:	3501      	adds	r5, #1
 8008ee0:	e7c3      	b.n	8008e6a <_printf_common+0x46>
 8008ee2:	18e1      	adds	r1, r4, r3
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	2030      	movs	r0, #48	; 0x30
 8008ee8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eec:	4422      	add	r2, r4
 8008eee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ef2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ef6:	3302      	adds	r3, #2
 8008ef8:	e7c5      	b.n	8008e86 <_printf_common+0x62>
 8008efa:	2301      	movs	r3, #1
 8008efc:	4622      	mov	r2, r4
 8008efe:	4639      	mov	r1, r7
 8008f00:	4630      	mov	r0, r6
 8008f02:	47c0      	blx	r8
 8008f04:	3001      	adds	r0, #1
 8008f06:	d0e6      	beq.n	8008ed6 <_printf_common+0xb2>
 8008f08:	f109 0901 	add.w	r9, r9, #1
 8008f0c:	e7d8      	b.n	8008ec0 <_printf_common+0x9c>
	...

08008f10 <_printf_i>:
 8008f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008f18:	460c      	mov	r4, r1
 8008f1a:	7e09      	ldrb	r1, [r1, #24]
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	296e      	cmp	r1, #110	; 0x6e
 8008f20:	4617      	mov	r7, r2
 8008f22:	4606      	mov	r6, r0
 8008f24:	4698      	mov	r8, r3
 8008f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f28:	f000 80b3 	beq.w	8009092 <_printf_i+0x182>
 8008f2c:	d822      	bhi.n	8008f74 <_printf_i+0x64>
 8008f2e:	2963      	cmp	r1, #99	; 0x63
 8008f30:	d036      	beq.n	8008fa0 <_printf_i+0x90>
 8008f32:	d80a      	bhi.n	8008f4a <_printf_i+0x3a>
 8008f34:	2900      	cmp	r1, #0
 8008f36:	f000 80b9 	beq.w	80090ac <_printf_i+0x19c>
 8008f3a:	2958      	cmp	r1, #88	; 0x58
 8008f3c:	f000 8083 	beq.w	8009046 <_printf_i+0x136>
 8008f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008f48:	e032      	b.n	8008fb0 <_printf_i+0xa0>
 8008f4a:	2964      	cmp	r1, #100	; 0x64
 8008f4c:	d001      	beq.n	8008f52 <_printf_i+0x42>
 8008f4e:	2969      	cmp	r1, #105	; 0x69
 8008f50:	d1f6      	bne.n	8008f40 <_printf_i+0x30>
 8008f52:	6820      	ldr	r0, [r4, #0]
 8008f54:	6813      	ldr	r3, [r2, #0]
 8008f56:	0605      	lsls	r5, r0, #24
 8008f58:	f103 0104 	add.w	r1, r3, #4
 8008f5c:	d52a      	bpl.n	8008fb4 <_printf_i+0xa4>
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6011      	str	r1, [r2, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da03      	bge.n	8008f6e <_printf_i+0x5e>
 8008f66:	222d      	movs	r2, #45	; 0x2d
 8008f68:	425b      	negs	r3, r3
 8008f6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008f6e:	486f      	ldr	r0, [pc, #444]	; (800912c <_printf_i+0x21c>)
 8008f70:	220a      	movs	r2, #10
 8008f72:	e039      	b.n	8008fe8 <_printf_i+0xd8>
 8008f74:	2973      	cmp	r1, #115	; 0x73
 8008f76:	f000 809d 	beq.w	80090b4 <_printf_i+0x1a4>
 8008f7a:	d808      	bhi.n	8008f8e <_printf_i+0x7e>
 8008f7c:	296f      	cmp	r1, #111	; 0x6f
 8008f7e:	d020      	beq.n	8008fc2 <_printf_i+0xb2>
 8008f80:	2970      	cmp	r1, #112	; 0x70
 8008f82:	d1dd      	bne.n	8008f40 <_printf_i+0x30>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	f043 0320 	orr.w	r3, r3, #32
 8008f8a:	6023      	str	r3, [r4, #0]
 8008f8c:	e003      	b.n	8008f96 <_printf_i+0x86>
 8008f8e:	2975      	cmp	r1, #117	; 0x75
 8008f90:	d017      	beq.n	8008fc2 <_printf_i+0xb2>
 8008f92:	2978      	cmp	r1, #120	; 0x78
 8008f94:	d1d4      	bne.n	8008f40 <_printf_i+0x30>
 8008f96:	2378      	movs	r3, #120	; 0x78
 8008f98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f9c:	4864      	ldr	r0, [pc, #400]	; (8009130 <_printf_i+0x220>)
 8008f9e:	e055      	b.n	800904c <_printf_i+0x13c>
 8008fa0:	6813      	ldr	r3, [r2, #0]
 8008fa2:	1d19      	adds	r1, r3, #4
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6011      	str	r1, [r2, #0]
 8008fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e08c      	b.n	80090ce <_printf_i+0x1be>
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	6011      	str	r1, [r2, #0]
 8008fb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fbc:	bf18      	it	ne
 8008fbe:	b21b      	sxthne	r3, r3
 8008fc0:	e7cf      	b.n	8008f62 <_printf_i+0x52>
 8008fc2:	6813      	ldr	r3, [r2, #0]
 8008fc4:	6825      	ldr	r5, [r4, #0]
 8008fc6:	1d18      	adds	r0, r3, #4
 8008fc8:	6010      	str	r0, [r2, #0]
 8008fca:	0628      	lsls	r0, r5, #24
 8008fcc:	d501      	bpl.n	8008fd2 <_printf_i+0xc2>
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	e002      	b.n	8008fd8 <_printf_i+0xc8>
 8008fd2:	0668      	lsls	r0, r5, #25
 8008fd4:	d5fb      	bpl.n	8008fce <_printf_i+0xbe>
 8008fd6:	881b      	ldrh	r3, [r3, #0]
 8008fd8:	4854      	ldr	r0, [pc, #336]	; (800912c <_printf_i+0x21c>)
 8008fda:	296f      	cmp	r1, #111	; 0x6f
 8008fdc:	bf14      	ite	ne
 8008fde:	220a      	movne	r2, #10
 8008fe0:	2208      	moveq	r2, #8
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fe8:	6865      	ldr	r5, [r4, #4]
 8008fea:	60a5      	str	r5, [r4, #8]
 8008fec:	2d00      	cmp	r5, #0
 8008fee:	f2c0 8095 	blt.w	800911c <_printf_i+0x20c>
 8008ff2:	6821      	ldr	r1, [r4, #0]
 8008ff4:	f021 0104 	bic.w	r1, r1, #4
 8008ff8:	6021      	str	r1, [r4, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d13d      	bne.n	800907a <_printf_i+0x16a>
 8008ffe:	2d00      	cmp	r5, #0
 8009000:	f040 808e 	bne.w	8009120 <_printf_i+0x210>
 8009004:	4665      	mov	r5, ip
 8009006:	2a08      	cmp	r2, #8
 8009008:	d10b      	bne.n	8009022 <_printf_i+0x112>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	07db      	lsls	r3, r3, #31
 800900e:	d508      	bpl.n	8009022 <_printf_i+0x112>
 8009010:	6923      	ldr	r3, [r4, #16]
 8009012:	6862      	ldr	r2, [r4, #4]
 8009014:	429a      	cmp	r2, r3
 8009016:	bfde      	ittt	le
 8009018:	2330      	movle	r3, #48	; 0x30
 800901a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800901e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009022:	ebac 0305 	sub.w	r3, ip, r5
 8009026:	6123      	str	r3, [r4, #16]
 8009028:	f8cd 8000 	str.w	r8, [sp]
 800902c:	463b      	mov	r3, r7
 800902e:	aa03      	add	r2, sp, #12
 8009030:	4621      	mov	r1, r4
 8009032:	4630      	mov	r0, r6
 8009034:	f7ff fef6 	bl	8008e24 <_printf_common>
 8009038:	3001      	adds	r0, #1
 800903a:	d14d      	bne.n	80090d8 <_printf_i+0x1c8>
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	b005      	add	sp, #20
 8009042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009046:	4839      	ldr	r0, [pc, #228]	; (800912c <_printf_i+0x21c>)
 8009048:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800904c:	6813      	ldr	r3, [r2, #0]
 800904e:	6821      	ldr	r1, [r4, #0]
 8009050:	1d1d      	adds	r5, r3, #4
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6015      	str	r5, [r2, #0]
 8009056:	060a      	lsls	r2, r1, #24
 8009058:	d50b      	bpl.n	8009072 <_printf_i+0x162>
 800905a:	07ca      	lsls	r2, r1, #31
 800905c:	bf44      	itt	mi
 800905e:	f041 0120 	orrmi.w	r1, r1, #32
 8009062:	6021      	strmi	r1, [r4, #0]
 8009064:	b91b      	cbnz	r3, 800906e <_printf_i+0x15e>
 8009066:	6822      	ldr	r2, [r4, #0]
 8009068:	f022 0220 	bic.w	r2, r2, #32
 800906c:	6022      	str	r2, [r4, #0]
 800906e:	2210      	movs	r2, #16
 8009070:	e7b7      	b.n	8008fe2 <_printf_i+0xd2>
 8009072:	064d      	lsls	r5, r1, #25
 8009074:	bf48      	it	mi
 8009076:	b29b      	uxthmi	r3, r3
 8009078:	e7ef      	b.n	800905a <_printf_i+0x14a>
 800907a:	4665      	mov	r5, ip
 800907c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009080:	fb02 3311 	mls	r3, r2, r1, r3
 8009084:	5cc3      	ldrb	r3, [r0, r3]
 8009086:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800908a:	460b      	mov	r3, r1
 800908c:	2900      	cmp	r1, #0
 800908e:	d1f5      	bne.n	800907c <_printf_i+0x16c>
 8009090:	e7b9      	b.n	8009006 <_printf_i+0xf6>
 8009092:	6813      	ldr	r3, [r2, #0]
 8009094:	6825      	ldr	r5, [r4, #0]
 8009096:	6961      	ldr	r1, [r4, #20]
 8009098:	1d18      	adds	r0, r3, #4
 800909a:	6010      	str	r0, [r2, #0]
 800909c:	0628      	lsls	r0, r5, #24
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	d501      	bpl.n	80090a6 <_printf_i+0x196>
 80090a2:	6019      	str	r1, [r3, #0]
 80090a4:	e002      	b.n	80090ac <_printf_i+0x19c>
 80090a6:	066a      	lsls	r2, r5, #25
 80090a8:	d5fb      	bpl.n	80090a2 <_printf_i+0x192>
 80090aa:	8019      	strh	r1, [r3, #0]
 80090ac:	2300      	movs	r3, #0
 80090ae:	6123      	str	r3, [r4, #16]
 80090b0:	4665      	mov	r5, ip
 80090b2:	e7b9      	b.n	8009028 <_printf_i+0x118>
 80090b4:	6813      	ldr	r3, [r2, #0]
 80090b6:	1d19      	adds	r1, r3, #4
 80090b8:	6011      	str	r1, [r2, #0]
 80090ba:	681d      	ldr	r5, [r3, #0]
 80090bc:	6862      	ldr	r2, [r4, #4]
 80090be:	2100      	movs	r1, #0
 80090c0:	4628      	mov	r0, r5
 80090c2:	f7f7 f895 	bl	80001f0 <memchr>
 80090c6:	b108      	cbz	r0, 80090cc <_printf_i+0x1bc>
 80090c8:	1b40      	subs	r0, r0, r5
 80090ca:	6060      	str	r0, [r4, #4]
 80090cc:	6863      	ldr	r3, [r4, #4]
 80090ce:	6123      	str	r3, [r4, #16]
 80090d0:	2300      	movs	r3, #0
 80090d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090d6:	e7a7      	b.n	8009028 <_printf_i+0x118>
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	462a      	mov	r2, r5
 80090dc:	4639      	mov	r1, r7
 80090de:	4630      	mov	r0, r6
 80090e0:	47c0      	blx	r8
 80090e2:	3001      	adds	r0, #1
 80090e4:	d0aa      	beq.n	800903c <_printf_i+0x12c>
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	079b      	lsls	r3, r3, #30
 80090ea:	d413      	bmi.n	8009114 <_printf_i+0x204>
 80090ec:	68e0      	ldr	r0, [r4, #12]
 80090ee:	9b03      	ldr	r3, [sp, #12]
 80090f0:	4298      	cmp	r0, r3
 80090f2:	bfb8      	it	lt
 80090f4:	4618      	movlt	r0, r3
 80090f6:	e7a3      	b.n	8009040 <_printf_i+0x130>
 80090f8:	2301      	movs	r3, #1
 80090fa:	464a      	mov	r2, r9
 80090fc:	4639      	mov	r1, r7
 80090fe:	4630      	mov	r0, r6
 8009100:	47c0      	blx	r8
 8009102:	3001      	adds	r0, #1
 8009104:	d09a      	beq.n	800903c <_printf_i+0x12c>
 8009106:	3501      	adds	r5, #1
 8009108:	68e3      	ldr	r3, [r4, #12]
 800910a:	9a03      	ldr	r2, [sp, #12]
 800910c:	1a9b      	subs	r3, r3, r2
 800910e:	42ab      	cmp	r3, r5
 8009110:	dcf2      	bgt.n	80090f8 <_printf_i+0x1e8>
 8009112:	e7eb      	b.n	80090ec <_printf_i+0x1dc>
 8009114:	2500      	movs	r5, #0
 8009116:	f104 0919 	add.w	r9, r4, #25
 800911a:	e7f5      	b.n	8009108 <_printf_i+0x1f8>
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1ac      	bne.n	800907a <_printf_i+0x16a>
 8009120:	7803      	ldrb	r3, [r0, #0]
 8009122:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009126:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800912a:	e76c      	b.n	8009006 <_printf_i+0xf6>
 800912c:	080096dd 	.word	0x080096dd
 8009130:	080096ee 	.word	0x080096ee

08009134 <_sbrk_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4c06      	ldr	r4, [pc, #24]	; (8009150 <_sbrk_r+0x1c>)
 8009138:	2300      	movs	r3, #0
 800913a:	4605      	mov	r5, r0
 800913c:	4608      	mov	r0, r1
 800913e:	6023      	str	r3, [r4, #0]
 8009140:	f000 f9be 	bl	80094c0 <_sbrk>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	d102      	bne.n	800914e <_sbrk_r+0x1a>
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	b103      	cbz	r3, 800914e <_sbrk_r+0x1a>
 800914c:	602b      	str	r3, [r5, #0]
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	20004344 	.word	0x20004344

08009154 <__sread>:
 8009154:	b510      	push	{r4, lr}
 8009156:	460c      	mov	r4, r1
 8009158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800915c:	f000 f996 	bl	800948c <_read_r>
 8009160:	2800      	cmp	r0, #0
 8009162:	bfab      	itete	ge
 8009164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009166:	89a3      	ldrhlt	r3, [r4, #12]
 8009168:	181b      	addge	r3, r3, r0
 800916a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800916e:	bfac      	ite	ge
 8009170:	6563      	strge	r3, [r4, #84]	; 0x54
 8009172:	81a3      	strhlt	r3, [r4, #12]
 8009174:	bd10      	pop	{r4, pc}

08009176 <__swrite>:
 8009176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800917a:	461f      	mov	r7, r3
 800917c:	898b      	ldrh	r3, [r1, #12]
 800917e:	05db      	lsls	r3, r3, #23
 8009180:	4605      	mov	r5, r0
 8009182:	460c      	mov	r4, r1
 8009184:	4616      	mov	r6, r2
 8009186:	d505      	bpl.n	8009194 <__swrite+0x1e>
 8009188:	2302      	movs	r3, #2
 800918a:	2200      	movs	r2, #0
 800918c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009190:	f000 f928 	bl	80093e4 <_lseek_r>
 8009194:	89a3      	ldrh	r3, [r4, #12]
 8009196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800919a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800919e:	81a3      	strh	r3, [r4, #12]
 80091a0:	4632      	mov	r2, r6
 80091a2:	463b      	mov	r3, r7
 80091a4:	4628      	mov	r0, r5
 80091a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091aa:	f000 b869 	b.w	8009280 <_write_r>

080091ae <__sseek>:
 80091ae:	b510      	push	{r4, lr}
 80091b0:	460c      	mov	r4, r1
 80091b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b6:	f000 f915 	bl	80093e4 <_lseek_r>
 80091ba:	1c43      	adds	r3, r0, #1
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	bf15      	itete	ne
 80091c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80091c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091ca:	81a3      	strheq	r3, [r4, #12]
 80091cc:	bf18      	it	ne
 80091ce:	81a3      	strhne	r3, [r4, #12]
 80091d0:	bd10      	pop	{r4, pc}

080091d2 <__sclose>:
 80091d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d6:	f000 b8d3 	b.w	8009380 <_close_r>
	...

080091dc <__swbuf_r>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	460e      	mov	r6, r1
 80091e0:	4614      	mov	r4, r2
 80091e2:	4605      	mov	r5, r0
 80091e4:	b118      	cbz	r0, 80091ee <__swbuf_r+0x12>
 80091e6:	6983      	ldr	r3, [r0, #24]
 80091e8:	b90b      	cbnz	r3, 80091ee <__swbuf_r+0x12>
 80091ea:	f7ff f9eb 	bl	80085c4 <__sinit>
 80091ee:	4b21      	ldr	r3, [pc, #132]	; (8009274 <__swbuf_r+0x98>)
 80091f0:	429c      	cmp	r4, r3
 80091f2:	d12a      	bne.n	800924a <__swbuf_r+0x6e>
 80091f4:	686c      	ldr	r4, [r5, #4]
 80091f6:	69a3      	ldr	r3, [r4, #24]
 80091f8:	60a3      	str	r3, [r4, #8]
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	071a      	lsls	r2, r3, #28
 80091fe:	d52e      	bpl.n	800925e <__swbuf_r+0x82>
 8009200:	6923      	ldr	r3, [r4, #16]
 8009202:	b363      	cbz	r3, 800925e <__swbuf_r+0x82>
 8009204:	6923      	ldr	r3, [r4, #16]
 8009206:	6820      	ldr	r0, [r4, #0]
 8009208:	1ac0      	subs	r0, r0, r3
 800920a:	6963      	ldr	r3, [r4, #20]
 800920c:	b2f6      	uxtb	r6, r6
 800920e:	4283      	cmp	r3, r0
 8009210:	4637      	mov	r7, r6
 8009212:	dc04      	bgt.n	800921e <__swbuf_r+0x42>
 8009214:	4621      	mov	r1, r4
 8009216:	4628      	mov	r0, r5
 8009218:	f7ff f96a 	bl	80084f0 <_fflush_r>
 800921c:	bb28      	cbnz	r0, 800926a <__swbuf_r+0x8e>
 800921e:	68a3      	ldr	r3, [r4, #8]
 8009220:	3b01      	subs	r3, #1
 8009222:	60a3      	str	r3, [r4, #8]
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	6022      	str	r2, [r4, #0]
 800922a:	701e      	strb	r6, [r3, #0]
 800922c:	6963      	ldr	r3, [r4, #20]
 800922e:	3001      	adds	r0, #1
 8009230:	4283      	cmp	r3, r0
 8009232:	d004      	beq.n	800923e <__swbuf_r+0x62>
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	07db      	lsls	r3, r3, #31
 8009238:	d519      	bpl.n	800926e <__swbuf_r+0x92>
 800923a:	2e0a      	cmp	r6, #10
 800923c:	d117      	bne.n	800926e <__swbuf_r+0x92>
 800923e:	4621      	mov	r1, r4
 8009240:	4628      	mov	r0, r5
 8009242:	f7ff f955 	bl	80084f0 <_fflush_r>
 8009246:	b190      	cbz	r0, 800926e <__swbuf_r+0x92>
 8009248:	e00f      	b.n	800926a <__swbuf_r+0x8e>
 800924a:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <__swbuf_r+0x9c>)
 800924c:	429c      	cmp	r4, r3
 800924e:	d101      	bne.n	8009254 <__swbuf_r+0x78>
 8009250:	68ac      	ldr	r4, [r5, #8]
 8009252:	e7d0      	b.n	80091f6 <__swbuf_r+0x1a>
 8009254:	4b09      	ldr	r3, [pc, #36]	; (800927c <__swbuf_r+0xa0>)
 8009256:	429c      	cmp	r4, r3
 8009258:	bf08      	it	eq
 800925a:	68ec      	ldreq	r4, [r5, #12]
 800925c:	e7cb      	b.n	80091f6 <__swbuf_r+0x1a>
 800925e:	4621      	mov	r1, r4
 8009260:	4628      	mov	r0, r5
 8009262:	f000 f81f 	bl	80092a4 <__swsetup_r>
 8009266:	2800      	cmp	r0, #0
 8009268:	d0cc      	beq.n	8009204 <__swbuf_r+0x28>
 800926a:	f04f 37ff 	mov.w	r7, #4294967295
 800926e:	4638      	mov	r0, r7
 8009270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009272:	bf00      	nop
 8009274:	0800968c 	.word	0x0800968c
 8009278:	080096ac 	.word	0x080096ac
 800927c:	0800966c 	.word	0x0800966c

08009280 <_write_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4c07      	ldr	r4, [pc, #28]	; (80092a0 <_write_r+0x20>)
 8009284:	4605      	mov	r5, r0
 8009286:	4608      	mov	r0, r1
 8009288:	4611      	mov	r1, r2
 800928a:	2200      	movs	r2, #0
 800928c:	6022      	str	r2, [r4, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	f7f7 ff7e 	bl	8001190 <_write>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	d102      	bne.n	800929e <_write_r+0x1e>
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	b103      	cbz	r3, 800929e <_write_r+0x1e>
 800929c:	602b      	str	r3, [r5, #0]
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	20004344 	.word	0x20004344

080092a4 <__swsetup_r>:
 80092a4:	4b32      	ldr	r3, [pc, #200]	; (8009370 <__swsetup_r+0xcc>)
 80092a6:	b570      	push	{r4, r5, r6, lr}
 80092a8:	681d      	ldr	r5, [r3, #0]
 80092aa:	4606      	mov	r6, r0
 80092ac:	460c      	mov	r4, r1
 80092ae:	b125      	cbz	r5, 80092ba <__swsetup_r+0x16>
 80092b0:	69ab      	ldr	r3, [r5, #24]
 80092b2:	b913      	cbnz	r3, 80092ba <__swsetup_r+0x16>
 80092b4:	4628      	mov	r0, r5
 80092b6:	f7ff f985 	bl	80085c4 <__sinit>
 80092ba:	4b2e      	ldr	r3, [pc, #184]	; (8009374 <__swsetup_r+0xd0>)
 80092bc:	429c      	cmp	r4, r3
 80092be:	d10f      	bne.n	80092e0 <__swsetup_r+0x3c>
 80092c0:	686c      	ldr	r4, [r5, #4]
 80092c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	0715      	lsls	r5, r2, #28
 80092ca:	d42c      	bmi.n	8009326 <__swsetup_r+0x82>
 80092cc:	06d0      	lsls	r0, r2, #27
 80092ce:	d411      	bmi.n	80092f4 <__swsetup_r+0x50>
 80092d0:	2209      	movs	r2, #9
 80092d2:	6032      	str	r2, [r6, #0]
 80092d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	f04f 30ff 	mov.w	r0, #4294967295
 80092de:	e03e      	b.n	800935e <__swsetup_r+0xba>
 80092e0:	4b25      	ldr	r3, [pc, #148]	; (8009378 <__swsetup_r+0xd4>)
 80092e2:	429c      	cmp	r4, r3
 80092e4:	d101      	bne.n	80092ea <__swsetup_r+0x46>
 80092e6:	68ac      	ldr	r4, [r5, #8]
 80092e8:	e7eb      	b.n	80092c2 <__swsetup_r+0x1e>
 80092ea:	4b24      	ldr	r3, [pc, #144]	; (800937c <__swsetup_r+0xd8>)
 80092ec:	429c      	cmp	r4, r3
 80092ee:	bf08      	it	eq
 80092f0:	68ec      	ldreq	r4, [r5, #12]
 80092f2:	e7e6      	b.n	80092c2 <__swsetup_r+0x1e>
 80092f4:	0751      	lsls	r1, r2, #29
 80092f6:	d512      	bpl.n	800931e <__swsetup_r+0x7a>
 80092f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092fa:	b141      	cbz	r1, 800930e <__swsetup_r+0x6a>
 80092fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009300:	4299      	cmp	r1, r3
 8009302:	d002      	beq.n	800930a <__swsetup_r+0x66>
 8009304:	4630      	mov	r0, r6
 8009306:	f7ff fa53 	bl	80087b0 <_free_r>
 800930a:	2300      	movs	r3, #0
 800930c:	6363      	str	r3, [r4, #52]	; 0x34
 800930e:	89a3      	ldrh	r3, [r4, #12]
 8009310:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	2300      	movs	r3, #0
 8009318:	6063      	str	r3, [r4, #4]
 800931a:	6923      	ldr	r3, [r4, #16]
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	f043 0308 	orr.w	r3, r3, #8
 8009324:	81a3      	strh	r3, [r4, #12]
 8009326:	6923      	ldr	r3, [r4, #16]
 8009328:	b94b      	cbnz	r3, 800933e <__swsetup_r+0x9a>
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009334:	d003      	beq.n	800933e <__swsetup_r+0x9a>
 8009336:	4621      	mov	r1, r4
 8009338:	4630      	mov	r0, r6
 800933a:	f7ff f9f1 	bl	8008720 <__smakebuf_r>
 800933e:	89a2      	ldrh	r2, [r4, #12]
 8009340:	f012 0301 	ands.w	r3, r2, #1
 8009344:	d00c      	beq.n	8009360 <__swsetup_r+0xbc>
 8009346:	2300      	movs	r3, #0
 8009348:	60a3      	str	r3, [r4, #8]
 800934a:	6963      	ldr	r3, [r4, #20]
 800934c:	425b      	negs	r3, r3
 800934e:	61a3      	str	r3, [r4, #24]
 8009350:	6923      	ldr	r3, [r4, #16]
 8009352:	b953      	cbnz	r3, 800936a <__swsetup_r+0xc6>
 8009354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009358:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800935c:	d1ba      	bne.n	80092d4 <__swsetup_r+0x30>
 800935e:	bd70      	pop	{r4, r5, r6, pc}
 8009360:	0792      	lsls	r2, r2, #30
 8009362:	bf58      	it	pl
 8009364:	6963      	ldrpl	r3, [r4, #20]
 8009366:	60a3      	str	r3, [r4, #8]
 8009368:	e7f2      	b.n	8009350 <__swsetup_r+0xac>
 800936a:	2000      	movs	r0, #0
 800936c:	e7f7      	b.n	800935e <__swsetup_r+0xba>
 800936e:	bf00      	nop
 8009370:	2000002c 	.word	0x2000002c
 8009374:	0800968c 	.word	0x0800968c
 8009378:	080096ac 	.word	0x080096ac
 800937c:	0800966c 	.word	0x0800966c

08009380 <_close_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4c06      	ldr	r4, [pc, #24]	; (800939c <_close_r+0x1c>)
 8009384:	2300      	movs	r3, #0
 8009386:	4605      	mov	r5, r0
 8009388:	4608      	mov	r0, r1
 800938a:	6023      	str	r3, [r4, #0]
 800938c:	f7f7 ff2c 	bl	80011e8 <_close>
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	d102      	bne.n	800939a <_close_r+0x1a>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	b103      	cbz	r3, 800939a <_close_r+0x1a>
 8009398:	602b      	str	r3, [r5, #0]
 800939a:	bd38      	pop	{r3, r4, r5, pc}
 800939c:	20004344 	.word	0x20004344

080093a0 <_fstat_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4c07      	ldr	r4, [pc, #28]	; (80093c0 <_fstat_r+0x20>)
 80093a4:	2300      	movs	r3, #0
 80093a6:	4605      	mov	r5, r0
 80093a8:	4608      	mov	r0, r1
 80093aa:	4611      	mov	r1, r2
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	f7f7 ff6b 	bl	8001288 <_fstat>
 80093b2:	1c43      	adds	r3, r0, #1
 80093b4:	d102      	bne.n	80093bc <_fstat_r+0x1c>
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	b103      	cbz	r3, 80093bc <_fstat_r+0x1c>
 80093ba:	602b      	str	r3, [r5, #0]
 80093bc:	bd38      	pop	{r3, r4, r5, pc}
 80093be:	bf00      	nop
 80093c0:	20004344 	.word	0x20004344

080093c4 <_isatty_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4c06      	ldr	r4, [pc, #24]	; (80093e0 <_isatty_r+0x1c>)
 80093c8:	2300      	movs	r3, #0
 80093ca:	4605      	mov	r5, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	6023      	str	r3, [r4, #0]
 80093d0:	f7f7 fec8 	bl	8001164 <_isatty>
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	d102      	bne.n	80093de <_isatty_r+0x1a>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	b103      	cbz	r3, 80093de <_isatty_r+0x1a>
 80093dc:	602b      	str	r3, [r5, #0]
 80093de:	bd38      	pop	{r3, r4, r5, pc}
 80093e0:	20004344 	.word	0x20004344

080093e4 <_lseek_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4c07      	ldr	r4, [pc, #28]	; (8009404 <_lseek_r+0x20>)
 80093e8:	4605      	mov	r5, r0
 80093ea:	4608      	mov	r0, r1
 80093ec:	4611      	mov	r1, r2
 80093ee:	2200      	movs	r2, #0
 80093f0:	6022      	str	r2, [r4, #0]
 80093f2:	461a      	mov	r2, r3
 80093f4:	f7f7 ff0f 	bl	8001216 <_lseek>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d102      	bne.n	8009402 <_lseek_r+0x1e>
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	b103      	cbz	r3, 8009402 <_lseek_r+0x1e>
 8009400:	602b      	str	r3, [r5, #0]
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	20004344 	.word	0x20004344

08009408 <memmove>:
 8009408:	4288      	cmp	r0, r1
 800940a:	b510      	push	{r4, lr}
 800940c:	eb01 0302 	add.w	r3, r1, r2
 8009410:	d807      	bhi.n	8009422 <memmove+0x1a>
 8009412:	1e42      	subs	r2, r0, #1
 8009414:	4299      	cmp	r1, r3
 8009416:	d00a      	beq.n	800942e <memmove+0x26>
 8009418:	f811 4b01 	ldrb.w	r4, [r1], #1
 800941c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009420:	e7f8      	b.n	8009414 <memmove+0xc>
 8009422:	4283      	cmp	r3, r0
 8009424:	d9f5      	bls.n	8009412 <memmove+0xa>
 8009426:	1881      	adds	r1, r0, r2
 8009428:	1ad2      	subs	r2, r2, r3
 800942a:	42d3      	cmn	r3, r2
 800942c:	d100      	bne.n	8009430 <memmove+0x28>
 800942e:	bd10      	pop	{r4, pc}
 8009430:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009434:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009438:	e7f7      	b.n	800942a <memmove+0x22>

0800943a <__malloc_lock>:
 800943a:	4770      	bx	lr

0800943c <__malloc_unlock>:
 800943c:	4770      	bx	lr

0800943e <_realloc_r>:
 800943e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009440:	4607      	mov	r7, r0
 8009442:	4614      	mov	r4, r2
 8009444:	460e      	mov	r6, r1
 8009446:	b921      	cbnz	r1, 8009452 <_realloc_r+0x14>
 8009448:	4611      	mov	r1, r2
 800944a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800944e:	f7ff b9fd 	b.w	800884c <_malloc_r>
 8009452:	b922      	cbnz	r2, 800945e <_realloc_r+0x20>
 8009454:	f7ff f9ac 	bl	80087b0 <_free_r>
 8009458:	4625      	mov	r5, r4
 800945a:	4628      	mov	r0, r5
 800945c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800945e:	f000 f827 	bl	80094b0 <_malloc_usable_size_r>
 8009462:	42a0      	cmp	r0, r4
 8009464:	d20f      	bcs.n	8009486 <_realloc_r+0x48>
 8009466:	4621      	mov	r1, r4
 8009468:	4638      	mov	r0, r7
 800946a:	f7ff f9ef 	bl	800884c <_malloc_r>
 800946e:	4605      	mov	r5, r0
 8009470:	2800      	cmp	r0, #0
 8009472:	d0f2      	beq.n	800945a <_realloc_r+0x1c>
 8009474:	4631      	mov	r1, r6
 8009476:	4622      	mov	r2, r4
 8009478:	f7fe feba 	bl	80081f0 <memcpy>
 800947c:	4631      	mov	r1, r6
 800947e:	4638      	mov	r0, r7
 8009480:	f7ff f996 	bl	80087b0 <_free_r>
 8009484:	e7e9      	b.n	800945a <_realloc_r+0x1c>
 8009486:	4635      	mov	r5, r6
 8009488:	e7e7      	b.n	800945a <_realloc_r+0x1c>
	...

0800948c <_read_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4c07      	ldr	r4, [pc, #28]	; (80094ac <_read_r+0x20>)
 8009490:	4605      	mov	r5, r0
 8009492:	4608      	mov	r0, r1
 8009494:	4611      	mov	r1, r2
 8009496:	2200      	movs	r2, #0
 8009498:	6022      	str	r2, [r4, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	f7f7 fecc 	bl	8001238 <_read>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_read_r+0x1e>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_read_r+0x1e>
 80094a8:	602b      	str	r3, [r5, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	20004344 	.word	0x20004344

080094b0 <_malloc_usable_size_r>:
 80094b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094b4:	1f18      	subs	r0, r3, #4
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	bfbc      	itt	lt
 80094ba:	580b      	ldrlt	r3, [r1, r0]
 80094bc:	18c0      	addlt	r0, r0, r3
 80094be:	4770      	bx	lr

080094c0 <_sbrk>:
 80094c0:	4b04      	ldr	r3, [pc, #16]	; (80094d4 <_sbrk+0x14>)
 80094c2:	6819      	ldr	r1, [r3, #0]
 80094c4:	4602      	mov	r2, r0
 80094c6:	b909      	cbnz	r1, 80094cc <_sbrk+0xc>
 80094c8:	4903      	ldr	r1, [pc, #12]	; (80094d8 <_sbrk+0x18>)
 80094ca:	6019      	str	r1, [r3, #0]
 80094cc:	6818      	ldr	r0, [r3, #0]
 80094ce:	4402      	add	r2, r0
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	4770      	bx	lr
 80094d4:	2000406c 	.word	0x2000406c
 80094d8:	20004348 	.word	0x20004348

080094dc <_init>:
 80094dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094de:	bf00      	nop
 80094e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094e2:	bc08      	pop	{r3}
 80094e4:	469e      	mov	lr, r3
 80094e6:	4770      	bx	lr

080094e8 <_fini>:
 80094e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ea:	bf00      	nop
 80094ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ee:	bc08      	pop	{r3}
 80094f0:	469e      	mov	lr, r3
 80094f2:	4770      	bx	lr
