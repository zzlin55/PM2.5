
PM2.5 module RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007c34  08007c34  00017c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007db8  08007db8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08007db8  08007db8  00017db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dc0  08007dc0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dc0  08007dc0  00017dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dc4  08007dc4  00017dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042b0  2000008c  08007e54  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000433c  08007e54  0002433c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b971  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038a5  00000000  00000000  0003ba2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001808  00000000  00000000  0003f2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001680  00000000  00000000  00040ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ac3f  00000000  00000000  00042160  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012e71  00000000  00000000  0005cd9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e53b  00000000  00000000  0006fc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e14b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e4c  00000000  00000000  0010e1c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c1c 	.word	0x08007c1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08007c1c 	.word	0x08007c1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <transmitPM2_5>:
	return PM01Val;
}

//transmit PM Value to PC
uint16_t transmitPM2_5(uint8_t *thebuf)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	uint16_t PM2_5Val;
    PM2_5Val=((thebuf[6]<<8) + thebuf[7]);//count PM2.5 value of the air detector module
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3306      	adds	r3, #6
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	021b      	lsls	r3, r3, #8
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3307      	adds	r3, #7
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	4413      	add	r3, r2
 80005ae:	81fb      	strh	r3, [r7, #14]
	return PM2_5Val;
 80005b0:	89fb      	ldrh	r3, [r7, #14]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
	...

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	200000a8 	.word	0x200000a8
 80005f0:	200000fc 	.word	0x200000fc

080005f4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000602:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000606:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800060a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800060e:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000612:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000614:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000616:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	613b      	str	r3, [r7, #16]

	Lcd_mode_select(&lcd);
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f80e 	bl	800064a <Lcd_mode_select>

	return lcd;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	461d      	mov	r5, r3
 8000632:	f107 0410 	add.w	r4, r7, #16
 8000636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800063e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	3728      	adds	r7, #40	; 0x28
 8000646:	46bd      	mov	sp, r7
 8000648:	bdb0      	pop	{r4, r5, r7, pc}

0800064a <Lcd_mode_select>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_mode_select(Lcd_HandleTypeDef * lcd)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	7d9b      	ldrb	r3, [r3, #22]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d10c      	bne.n	8000674 <Lcd_mode_select+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800065a:	2133      	movs	r1, #51	; 0x33
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f000 f86d 	bl	800073c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000662:	2132      	movs	r1, #50	; 0x32
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 f869 	bl	800073c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800066a:	2128      	movs	r1, #40	; 0x28
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f865 	bl	800073c <lcd_write_command>
 8000672:	e003      	b.n	800067c <Lcd_mode_select+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000674:	2138      	movs	r1, #56	; 0x38
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 f860 	bl	800073c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800067c:	2101      	movs	r1, #1
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 f85c 	bl	800073c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000684:	210c      	movs	r1, #12
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f000 f858 	bl	800073c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800068c:	2106      	movs	r1, #6
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f854 	bl	800073c <lcd_write_command>

}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <Lcd_int>:

/**
 * Write a number on the current position
 */
 void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	4906      	ldr	r1, [pc, #24]	; (80006c8 <Lcd_int+0x2c>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 fa18 	bl	8006ae4 <siprintf>

	Lcd_string(lcd, buffer);
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 f806 	bl	80006cc <Lcd_string>
}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	08007c34 	.word	0x08007c34

080006cc <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	e00a      	b.n	80006f2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4619      	mov	r1, r3
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 f856 	bl	8000798 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	3301      	adds	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	7bfc      	ldrb	r4, [r7, #15]
 80006f4:	6838      	ldr	r0, [r7, #0]
 80006f6:	f7ff fd73 	bl	80001e0 <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	429c      	cmp	r4, r3
 80006fe:	d3ed      	bcc.n	80006dc <Lcd_string+0x10>
	}
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	bd90      	pop	{r4, r7, pc}

08000708 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
 8000714:	4613      	mov	r3, r2
 8000716:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <Lcd_cursor+0x30>)
 800071c:	5cd2      	ldrb	r2, [r2, r3]
 800071e:	78bb      	ldrb	r3, [r7, #2]
 8000720:	4413      	add	r3, r2
 8000722:	b2db      	uxtb	r3, r3
 8000724:	3b80      	subs	r3, #128	; 0x80
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4619      	mov	r1, r3
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 f806 	bl	800073c <lcd_write_command>
	#endif
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	08007cfc 	.word	0x08007cfc

0800073c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6898      	ldr	r0, [r3, #8]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	899b      	ldrh	r3, [r3, #12]
 8000750:	2200      	movs	r2, #0
 8000752:	4619      	mov	r1, r3
 8000754:	f002 f81a 	bl	800278c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7d9b      	ldrb	r3, [r3, #22]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d111      	bne.n	8000784 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	091b      	lsrs	r3, r3, #4
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2204      	movs	r2, #4
 8000768:	4619      	mov	r1, r3
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 f842 	bl	80007f4 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2204      	movs	r2, #4
 800077a:	4619      	mov	r1, r3
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f000 f839 	bl	80007f4 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000782:	e005      	b.n	8000790 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	2208      	movs	r2, #8
 8000788:	4619      	mov	r1, r3
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 f832 	bl	80007f4 <lcd_write>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6898      	ldr	r0, [r3, #8]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	899b      	ldrh	r3, [r3, #12]
 80007ac:	2201      	movs	r2, #1
 80007ae:	4619      	mov	r1, r3
 80007b0:	f001 ffec 	bl	800278c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7d9b      	ldrb	r3, [r3, #22]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d111      	bne.n	80007e0 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	091b      	lsrs	r3, r3, #4
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2204      	movs	r2, #4
 80007c4:	4619      	mov	r1, r3
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f000 f814 	bl	80007f4 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2204      	movs	r2, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 f80b 	bl	80007f4 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80007de:	e005      	b.n	80007ec <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	2208      	movs	r2, #8
 80007e4:	4619      	mov	r1, r3
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f000 f804 	bl	80007f4 <lcd_write>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	70fb      	strb	r3, [r7, #3]
 8000800:	4613      	mov	r3, r2
 8000802:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]
 8000808:	e019      	b.n	800083e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	8819      	ldrh	r1, [r3, #0]
 8000822:	78fa      	ldrb	r2, [r7, #3]
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	fa42 f303 	asr.w	r3, r2, r3
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	f001 ffaa 	bl	800278c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	3301      	adds	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	7bfa      	ldrb	r2, [r7, #15]
 8000840:	78bb      	ldrb	r3, [r7, #2]
 8000842:	429a      	cmp	r2, r3
 8000844:	d3e1      	bcc.n	800080a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6918      	ldr	r0, [r3, #16]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	8a9b      	ldrh	r3, [r3, #20]
 800084e:	2201      	movs	r2, #1
 8000850:	4619      	mov	r1, r3
 8000852:	f001 ff9b 	bl	800278c <HAL_GPIO_WritePin>
	DELAY(1);
 8000856:	2001      	movs	r0, #1
 8000858:	f000 ffa6 	bl	80017a8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6918      	ldr	r0, [r3, #16]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	8a9b      	ldrh	r3, [r3, #20]
 8000864:	2200      	movs	r2, #0
 8000866:	4619      	mov	r1, r3
 8000868:	f001 ff90 	bl	800278c <HAL_GPIO_WritePin>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b0a4      	sub	sp, #144	; 0x90
 8000878:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087a:	f000 ff53 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087e:	f000 f89d 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000882:	f000 fa3b 	bl	8000cfc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000886:	f000 f8f9 	bl	8000a7c <MX_ADC1_Init>
  MX_I2C1_Init();
 800088a:	f000 f949 	bl	8000b20 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800088e:	f000 f9ab 	bl	8000be8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000892:	f000 f9d3 	bl	8000c3c <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8000896:	f000 f971 	bl	8000b7c <MX_SPI3_Init>
  MX_DMA_Init();
 800089a:	f000 f9f9 	bl	8000c90 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800089e:	4837      	ldr	r0, [pc, #220]	; (800097c <main+0x108>)
 80008a0:	f000 fb62 	bl	8000f68 <RetargetInit>


  static Lcd_PortType ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
  static Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2140      	movs	r1, #64	; 0x40
 80008a8:	4835      	ldr	r0, [pc, #212]	; (8000980 <main+0x10c>)
 80008aa:	f001 ff6f 	bl	800278c <HAL_GPIO_WritePin>
  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 80008ae:	4c35      	ldr	r4, [pc, #212]	; (8000984 <main+0x110>)
 80008b0:	4638      	mov	r0, r7
 80008b2:	2300      	movs	r3, #0
 80008b4:	9303      	str	r3, [sp, #12]
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	9302      	str	r3, [sp, #8]
 80008ba:	4b33      	ldr	r3, [pc, #204]	; (8000988 <main+0x114>)
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	4b31      	ldr	r3, [pc, #196]	; (800098c <main+0x118>)
 80008c6:	4a32      	ldr	r2, [pc, #200]	; (8000990 <main+0x11c>)
 80008c8:	4932      	ldr	r1, [pc, #200]	; (8000994 <main+0x120>)
 80008ca:	f7ff fe93 	bl	80005f4 <Lcd_create>
 80008ce:	4625      	mov	r5, r4
 80008d0:	463c      	mov	r4, r7
 80008d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008da:	e885 0003 	stmia.w	r5, {r0, r1}
  Lcd_string(&lcd, "Initialising");
 80008de:	492e      	ldr	r1, [pc, #184]	; (8000998 <main+0x124>)
 80008e0:	4828      	ldr	r0, [pc, #160]	; (8000984 <main+0x110>)
 80008e2:	f7ff fef3 	bl	80006cc <Lcd_string>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of PMvalue */
  osMessageQDef(PMvalue, 1, uint8_t);
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <main+0x128>)
 80008e8:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80008ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  PMvalueHandle = osMessageCreate(osMessageQ(PMvalue), NULL);
 80008f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 fe5a 	bl	80045b2 <osMessageCreate>
 80008fe:	4602      	mov	r2, r0
 8000900:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <main+0x12c>)
 8000902:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000904:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <main+0x130>)
 8000906:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800090a:	461d      	mov	r5, r3
 800090c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000910:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000914:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000918:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fde7 	bl	80044f2 <osThreadCreate>
 8000924:	4602      	mov	r2, r0
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <main+0x134>)
 8000928:	601a      	str	r2, [r3, #0]

  /* definition and creation of LCDtask */
  osThreadDef(LCDtask, LCDtask1, osPriorityIdle, 0, 128);
 800092a:	4b20      	ldr	r3, [pc, #128]	; (80009ac <main+0x138>)
 800092c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000930:	461d      	mov	r5, r3
 8000932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000936:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800093a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDtaskHandle = osThreadCreate(osThread(LCDtask), NULL);
 800093e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fdd4 	bl	80044f2 <osThreadCreate>
 800094a:	4602      	mov	r2, r0
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <main+0x13c>)
 800094e:	601a      	str	r2, [r3, #0]

  /* definition and creation of PM2_5 */
  osThreadDef(PM2_5, PM2_5_1, osPriorityIdle, 0, 128);
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <main+0x140>)
 8000952:	f107 041c 	add.w	r4, r7, #28
 8000956:	461d      	mov	r5, r3
 8000958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PM2_5Handle = osThreadCreate(osThread(PM2_5), NULL);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 fdc1 	bl	80044f2 <osThreadCreate>
 8000970:	4602      	mov	r2, r0
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <main+0x144>)
 8000974:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000976:	f003 fdb5 	bl	80044e4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800097a:	e7fe      	b.n	800097a <main+0x106>
 800097c:	200042b0 	.word	0x200042b0
 8000980:	40020400 	.word	0x40020400
 8000984:	200002fc 	.word	0x200002fc
 8000988:	40020800 	.word	0x40020800
 800098c:	40020000 	.word	0x40020000
 8000990:	20000014 	.word	0x20000014
 8000994:	20000004 	.word	0x20000004
 8000998:	08007c38 	.word	0x08007c38
 800099c:	08007c48 	.word	0x08007c48
 80009a0:	2000422c 	.word	0x2000422c
 80009a4:	08007c64 	.word	0x08007c64
 80009a8:	2000406c 	.word	0x2000406c
 80009ac:	08007c88 	.word	0x08007c88
 80009b0:	200040d0 	.word	0x200040d0
 80009b4:	08007cac 	.word	0x08007cac
 80009b8:	20004180 	.word	0x20004180

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	; 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	2230      	movs	r2, #48	; 0x30
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f005 ffbb 	bl	8006946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <SystemClock_Config+0xb8>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <SystemClock_Config+0xb8>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <SystemClock_Config+0xb8>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <SystemClock_Config+0xbc>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <SystemClock_Config+0xbc>)
 8000a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <SystemClock_Config+0xbc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a24:	2310      	movs	r3, #16
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 f807 	bl	8002a44 <HAL_RCC_OscConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a3c:	f000 fa8c 	bl	8000f58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 fa34 	bl	8002ec8 <HAL_RCC_ClockConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a66:	f000 fa77 	bl	8000f58 <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3750      	adds	r7, #80	; 0x50
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40007000 	.word	0x40007000

08000a7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a82:	463b      	mov	r3, r7
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000a90:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <MX_ADC1_Init+0x9c>)
 8000a92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000abc:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <MX_ADC1_Init+0xa0>)
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000adc:	f000 fe86 	bl	80017ec <HAL_ADC_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ae6:	f000 fa37 	bl	8000f58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af6:	463b      	mov	r3, r7
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <MX_ADC1_Init+0x98>)
 8000afc:	f000 feba 	bl	8001874 <HAL_ADC_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b06:	f000 fa27 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20004184 	.word	0x20004184
 8000b18:	40012000 	.word	0x40012000
 8000b1c:	0f000001 	.word	0x0f000001

08000b20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b26:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <MX_I2C1_Init+0x54>)
 8000b28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b2c:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <MX_I2C1_Init+0x58>)
 8000b2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b5e:	f001 fe49 	bl	80027f4 <HAL_I2C_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b68:	f000 f9f6 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200040d4 	.word	0x200040d4
 8000b74:	40005400 	.word	0x40005400
 8000b78:	000186a0 	.word	0x000186a0

08000b7c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_SPI3_Init+0x64>)
 8000b82:	4a18      	ldr	r2, [pc, #96]	; (8000be4 <MX_SPI3_Init+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_SPI3_Init+0x64>)
 8000b88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_SPI3_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_SPI3_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_SPI3_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_SPI3_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_SPI3_Init+0x64>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_SPI3_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_SPI3_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_SPI3_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <MX_SPI3_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_SPI3_Init+0x64>)
 8000bc8:	220a      	movs	r2, #10
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_SPI3_Init+0x64>)
 8000bce:	f002 fb75 	bl	80032bc <HAL_SPI_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000bd8:	f000 f9be 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20004128 	.word	0x20004128
 8000be4:	40003c00 	.word	0x40003c00

08000be8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <MX_USART2_UART_Init+0x50>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c20:	f002 fdce 	bl	80037c0 <HAL_UART_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c2a:	f000 f995 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200042b0 	.word	0x200042b0
 8000c38:	40004400 	.word	0x40004400

08000c3c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART6_UART_Init+0x4c>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <MX_USART6_UART_Init+0x50>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_USART6_UART_Init+0x4c>)
 8000c48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USART6_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART6_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USART6_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART6_UART_Init+0x4c>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USART6_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USART6_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART6_UART_Init+0x4c>)
 8000c74:	f002 fda4 	bl	80037c0 <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c7e:	f000 f96b 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20004270 	.word	0x20004270
 8000c8c:	40011400 	.word	0x40011400

08000c90 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_DMA_Init+0x68>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <MX_DMA_Init+0x68>)
 8000ca0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_DMA_Init+0x68>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_DMA_Init+0x68>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <MX_DMA_Init+0x68>)
 8000cbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <MX_DMA_Init+0x68>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	2011      	movs	r0, #17
 8000cd4:	f001 f8a4 	bl	8001e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000cd8:	2011      	movs	r0, #17
 8000cda:	f001 f8bd 	bl	8001e58 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	2039      	movs	r0, #57	; 0x39
 8000ce4:	f001 f89c 	bl	8001e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ce8:	2039      	movs	r0, #57	; 0x39
 8000cea:	f001 f8b5 	bl	8001e58 <HAL_NVIC_EnableIRQ>

}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a40      	ldr	r2, [pc, #256]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a39      	ldr	r2, [pc, #228]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a32      	ldr	r2, [pc, #200]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a2b      	ldr	r2, [pc, #172]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|D7_LCD_Pin|D8_LCD_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000d88:	4825      	ldr	r0, [pc, #148]	; (8000e20 <MX_GPIO_Init+0x124>)
 8000d8a:	f001 fcff 	bl	800278c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|LED_Green_Pin|LED_Yellow_Pin|LED_Red_Pin 
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f24e 4170 	movw	r1, #58480	; 0xe470
 8000d94:	4823      	ldr	r0, [pc, #140]	; (8000e24 <MX_GPIO_Init+0x128>)
 8000d96:	f001 fcf9 	bl	800278c <HAL_GPIO_WritePin>
                          |D5_LCD_Pin|D4_LCD_Pin|D10_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_LCD_GPIO_Port, D9_LCD_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	4822      	ldr	r0, [pc, #136]	; (8000e28 <MX_GPIO_Init+0x12c>)
 8000da0:	f001 fcf4 	bl	800278c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A0_LCD_Pin */
  GPIO_InitStruct.Pin = A0_LCD_Pin;
 8000da4:	2301      	movs	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da8:	2303      	movs	r3, #3
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_LCD_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	481a      	ldr	r0, [pc, #104]	; (8000e20 <MX_GPIO_Init+0x124>)
 8000db8:	f001 fb66 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 D7_LCD_Pin D8_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|D7_LCD_Pin|D8_LCD_Pin;
 8000dbc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4812      	ldr	r0, [pc, #72]	; (8000e20 <MX_GPIO_Init+0x124>)
 8000dd6:	f001 fb57 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin LED_Green_Pin LED_Yellow_Pin LED_Red_Pin 
                           D5_LCD_Pin D4_LCD_Pin D10_LCD_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|LED_Green_Pin|LED_Yellow_Pin|LED_Red_Pin 
 8000dda:	f24e 4370 	movw	r3, #58480	; 0xe470
 8000dde:	617b      	str	r3, [r7, #20]
                          |D5_LCD_Pin|D4_LCD_Pin|D10_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <MX_GPIO_Init+0x128>)
 8000df4:	f001 fb48 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_LCD_Pin */
  GPIO_InitStruct.Pin = D9_LCD_Pin;
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D9_LCD_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_GPIO_Init+0x12c>)
 8000e10:	f001 fb3a 	bl	8002488 <HAL_GPIO_Init>

}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	; 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40020800 	.word	0x40020800

08000e2c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	RxReady = SET;
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <HAL_UART_RxCpltCallback+0x1c>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000000 	.word	0x20000000

08000e4c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e54:	2001      	movs	r0, #1
 8000e56:	f003 fb98 	bl	800458a <osDelay>
 8000e5a:	e7fb      	b.n	8000e54 <StartDefaultTask+0x8>

08000e5c <LCDtask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCDtask1 */
void LCDtask1(void const * argument)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
		lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
		 */
  /* Infinite loop */
  for(;;)
  {
	  PMevt = osMessageGet(PMvalueHandle,osWaitForever);
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <LCDtask1+0x60>)
 8000e66:	6819      	ldr	r1, [r3, #0]
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 fc07 	bl	8004684 <osMessageGet>
	  if (PMevt.status == osEventMessage)
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	2b10      	cmp	r3, #16
 8000e7a:	d119      	bne.n	8000eb0 <LCDtask1+0x54>
	  {
		  PM2_5 = PMevt.value.v;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	75fb      	strb	r3, [r7, #23]
		  printf("The current PM2.5 is : %d \r\n", PM2_5);
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
 8000e82:	4619      	mov	r1, r3
 8000e84:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <LCDtask1+0x64>)
 8000e86:	f005 fd67 	bl	8006958 <iprintf>

		  Lcd_cursor(&lcd,0,0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LCDtask1+0x68>)
 8000e90:	f7ff fc3a 	bl	8000708 <Lcd_cursor>
		  Lcd_string(&lcd, "PM2.5 is:");
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <LCDtask1+0x6c>)
 8000e96:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <LCDtask1+0x68>)
 8000e98:	f7ff fc18 	bl	80006cc <Lcd_string>
		  Lcd_cursor(&lcd,0,10);
 8000e9c:	220a      	movs	r2, #10
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <LCDtask1+0x68>)
 8000ea2:	f7ff fc31 	bl	8000708 <Lcd_cursor>
		  Lcd_int(&lcd,PM2_5);
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <LCDtask1+0x68>)
 8000eac:	f7ff fbf6 	bl	800069c <Lcd_int>

	  }

	  osDelay(1000);
 8000eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb4:	f003 fb69 	bl	800458a <osDelay>
	  PMevt = osMessageGet(PMvalueHandle,osWaitForever);
 8000eb8:	e7d4      	b.n	8000e64 <LCDtask1+0x8>
 8000eba:	bf00      	nop
 8000ebc:	2000422c 	.word	0x2000422c
 8000ec0:	08007cc8 	.word	0x08007cc8
 8000ec4:	200002fc 	.word	0x200002fc
 8000ec8:	08007ce8 	.word	0x08007ce8

08000ecc <PM2_5_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PM2_5_1 */
void PM2_5_1(void const * argument)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PM2_5_1 */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t PM2_5;
	  if (RxReady==SET)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <PM2_5_1+0x54>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d11b      	bne.n	8000f14 <PM2_5_1+0x48>
	  {
		  RxReady = RESET;
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <PM2_5_1+0x54>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart6, pmflag, 32);
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	490f      	ldr	r1, [pc, #60]	; (8000f24 <PM2_5_1+0x58>)
 8000ee6:	4810      	ldr	r0, [pc, #64]	; (8000f28 <PM2_5_1+0x5c>)
 8000ee8:	f002 fdf6 	bl	8003ad8 <HAL_UART_Receive_IT>
		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000eec:	2120      	movs	r1, #32
 8000eee:	480f      	ldr	r0, [pc, #60]	; (8000f2c <PM2_5_1+0x60>)
 8000ef0:	f001 fc65 	bl	80027be <HAL_GPIO_TogglePin>
		  if(pmflag[0]==0x42)
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <PM2_5_1+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b42      	cmp	r3, #66	; 0x42
 8000efa:	d10b      	bne.n	8000f14 <PM2_5_1+0x48>
		  {
			  PM2_5 = transmitPM2_5(pmflag);
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <PM2_5_1+0x58>)
 8000efe:	f7ff fb47 	bl	8000590 <transmitPM2_5>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
			  osMessagePut(PMvalueHandle,PM2_5,1);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <PM2_5_1+0x64>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	7bf9      	ldrb	r1, [r7, #15]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fb78 	bl	8004604 <osMessagePut>
		  }
	  }
	  osDelay(500);
 8000f14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f18:	f003 fb37 	bl	800458a <osDelay>
  {
 8000f1c:	e7da      	b.n	8000ed4 <PM2_5_1+0x8>
 8000f1e:	bf00      	nop
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20004250 	.word	0x20004250
 8000f28:	20004270 	.word	0x20004270
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	2000422c 	.word	0x2000422c

08000f34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f46:	f000 fc0f 	bl	8001768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40000400 	.word	0x40000400

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <RetargetInit+0x28>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <RetargetInit+0x2c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6898      	ldr	r0, [r3, #8]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2202      	movs	r2, #2
 8000f80:	2100      	movs	r1, #0
 8000f82:	f005 fd01 	bl	8006988 <setvbuf>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200042f0 	.word	0x200042f0
 8000f94:	20000028 	.word	0x20000028

08000f98 <_isatty>:

int _isatty(int fd) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db04      	blt.n	8000fb0 <_isatty+0x18>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	dc01      	bgt.n	8000fb0 <_isatty+0x18>
    return 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e005      	b.n	8000fbc <_isatty+0x24>

  errno = EBADF;
 8000fb0:	f005 fc94 	bl	80068dc <__errno>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	2309      	movs	r3, #9
 8000fb8:	6013      	str	r3, [r2, #0]
  return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_write>:

int _write(int fd, char* ptr, int len) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d002      	beq.n	8000fdc <_write+0x18>
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d111      	bne.n	8001000 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <_write+0x54>)
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	f002 fc36 	bl	800385a <HAL_UART_Transmit>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <_write+0x38>
      return len;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	e008      	b.n	800100e <_write+0x4a>
    else
      return EIO;
 8000ffc:	2305      	movs	r3, #5
 8000ffe:	e006      	b.n	800100e <_write+0x4a>
  }
  errno = EBADF;
 8001000:	f005 fc6c 	bl	80068dc <__errno>
 8001004:	4602      	mov	r2, r0
 8001006:	2309      	movs	r3, #9
 8001008:	6013      	str	r3, [r2, #0]
  return -1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200042f0 	.word	0x200042f0

0800101c <_close>:

int _close(int fd) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db04      	blt.n	8001034 <_close+0x18>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b02      	cmp	r3, #2
 800102e:	dc01      	bgt.n	8001034 <_close+0x18>
    return 0;
 8001030:	2300      	movs	r3, #0
 8001032:	e006      	b.n	8001042 <_close+0x26>

  errno = EBADF;
 8001034:	f005 fc52 	bl	80068dc <__errno>
 8001038:	4602      	mov	r2, r0
 800103a:	2309      	movs	r3, #9
 800103c:	6013      	str	r3, [r2, #0]
  return -1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001056:	f005 fc41 	bl	80068dc <__errno>
 800105a:	4602      	mov	r2, r0
 800105c:	2309      	movs	r3, #9
 800105e:	6013      	str	r3, [r2, #0]
  return -1;
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_read>:

int _read(int fd, char* ptr, int len) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d110      	bne.n	80010a0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <_read+0x4c>)
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	2201      	movs	r2, #1
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	f002 fc7f 	bl	800398c <HAL_UART_Receive>
 800108e:	4603      	mov	r3, r0
 8001090:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <_read+0x30>
      return 1;
 8001098:	2301      	movs	r3, #1
 800109a:	e008      	b.n	80010ae <_read+0x42>
    else
      return EIO;
 800109c:	2305      	movs	r3, #5
 800109e:	e006      	b.n	80010ae <_read+0x42>
  }
  errno = EBADF;
 80010a0:	f005 fc1c 	bl	80068dc <__errno>
 80010a4:	4602      	mov	r2, r0
 80010a6:	2309      	movs	r3, #9
 80010a8:	6013      	str	r3, [r2, #0]
  return -1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200042f0 	.word	0x200042f0

080010bc <_fstat>:

int _fstat(int fd, struct stat* st) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db08      	blt.n	80010de <_fstat+0x22>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	dc05      	bgt.n	80010de <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d8:	605a      	str	r2, [r3, #4]
    return 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	e005      	b.n	80010ea <_fstat+0x2e>
  }

  errno = EBADF;
 80010de:	f005 fbfd 	bl	80068dc <__errno>
 80010e2:	4602      	mov	r2, r0
 80010e4:	2309      	movs	r3, #9
 80010e6:	6013      	str	r3, [r2, #0]
  return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_MspInit+0x54>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a11      	ldr	r2, [pc, #68]	; (8001148 <HAL_MspInit+0x54>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <HAL_MspInit+0x54>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_MspInit+0x54>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_MspInit+0x54>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_MspInit+0x54>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	210f      	movs	r1, #15
 8001136:	f06f 0001 	mvn.w	r0, #1
 800113a:	f000 fe71 	bl	8001e20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800

0800114c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_ADC_MspInit+0x7c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d127      	bne.n	80011be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_ADC_MspInit+0x80>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a15      	ldr	r2, [pc, #84]	; (80011cc <HAL_ADC_MspInit+0x80>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_ADC_MspInit+0x80>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_ADC_MspInit+0x80>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_ADC_MspInit+0x80>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_ADC_MspInit+0x80>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = A0_LCD_Pin;
 80011a6:	2301      	movs	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011aa:	2303      	movs	r3, #3
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A0_LCD_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_ADC_MspInit+0x84>)
 80011ba:	f001 f965 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40012000 	.word	0x40012000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_I2C_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12c      	bne.n	8001250 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_I2C_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_I2C_MspInit+0x88>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_I2C_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = RTC_I2C_SCL_Pin|RTC_I2C_SDA_Pin;
 8001212:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001218:	2312      	movs	r3, #18
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800121c:	2301      	movs	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001224:	2304      	movs	r3, #4
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <HAL_I2C_MspInit+0x8c>)
 8001230:	f001 f92a 	bl	8002488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_I2C_MspInit+0x88>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_I2C_MspInit+0x88>)
 800123e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001242:	6413      	str	r3, [r2, #64]	; 0x40
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_I2C_MspInit+0x88>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40005400 	.word	0x40005400
 800125c:	40023800 	.word	0x40023800
 8001260:	40020400 	.word	0x40020400

08001264 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <HAL_SPI_MspInit+0x84>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12c      	bne.n	80012e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_SPI_MspInit+0x88>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <HAL_SPI_MspInit+0x88>)
 8001290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_SPI_MspInit+0x88>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_SPI_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_SPI_MspInit+0x88>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_SPI_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012d0:	2306      	movs	r3, #6
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_SPI_MspInit+0x8c>)
 80012dc:	f001 f8d4 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40003c00 	.word	0x40003c00
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020800 	.word	0x40020800

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	; 0x30
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a79      	ldr	r2, [pc, #484]	; (80014f8 <HAL_UART_MspInit+0x204>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d163      	bne.n	80013de <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	4b78      	ldr	r3, [pc, #480]	; (80014fc <HAL_UART_MspInit+0x208>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a77      	ldr	r2, [pc, #476]	; (80014fc <HAL_UART_MspInit+0x208>)
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b75      	ldr	r3, [pc, #468]	; (80014fc <HAL_UART_MspInit+0x208>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	61bb      	str	r3, [r7, #24]
 8001330:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	4b71      	ldr	r3, [pc, #452]	; (80014fc <HAL_UART_MspInit+0x208>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a70      	ldr	r2, [pc, #448]	; (80014fc <HAL_UART_MspInit+0x208>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b6e      	ldr	r3, [pc, #440]	; (80014fc <HAL_UART_MspInit+0x208>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800134e:	230c      	movs	r3, #12
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001356:	2301      	movs	r3, #1
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800135e:	2307      	movs	r3, #7
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4865      	ldr	r0, [pc, #404]	; (8001500 <HAL_UART_MspInit+0x20c>)
 800136a:	f001 f88d 	bl	8002488 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800136e:	4b65      	ldr	r3, [pc, #404]	; (8001504 <HAL_UART_MspInit+0x210>)
 8001370:	4a65      	ldr	r2, [pc, #404]	; (8001508 <HAL_UART_MspInit+0x214>)
 8001372:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001374:	4b63      	ldr	r3, [pc, #396]	; (8001504 <HAL_UART_MspInit+0x210>)
 8001376:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800137a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800137c:	4b61      	ldr	r3, [pc, #388]	; (8001504 <HAL_UART_MspInit+0x210>)
 800137e:	2240      	movs	r2, #64	; 0x40
 8001380:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001382:	4b60      	ldr	r3, [pc, #384]	; (8001504 <HAL_UART_MspInit+0x210>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001388:	4b5e      	ldr	r3, [pc, #376]	; (8001504 <HAL_UART_MspInit+0x210>)
 800138a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800138e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001390:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <HAL_UART_MspInit+0x210>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001396:	4b5b      	ldr	r3, [pc, #364]	; (8001504 <HAL_UART_MspInit+0x210>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800139c:	4b59      	ldr	r3, [pc, #356]	; (8001504 <HAL_UART_MspInit+0x210>)
 800139e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013a4:	4b57      	ldr	r3, [pc, #348]	; (8001504 <HAL_UART_MspInit+0x210>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013aa:	4b56      	ldr	r3, [pc, #344]	; (8001504 <HAL_UART_MspInit+0x210>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80013b0:	4854      	ldr	r0, [pc, #336]	; (8001504 <HAL_UART_MspInit+0x210>)
 80013b2:	f000 fd5f 	bl	8001e74 <HAL_DMA_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80013bc:	f7ff fdcc 	bl	8000f58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a50      	ldr	r2, [pc, #320]	; (8001504 <HAL_UART_MspInit+0x210>)
 80013c4:	631a      	str	r2, [r3, #48]	; 0x30
 80013c6:	4a4f      	ldr	r2, [pc, #316]	; (8001504 <HAL_UART_MspInit+0x210>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2105      	movs	r1, #5
 80013d0:	2026      	movs	r0, #38	; 0x26
 80013d2:	f000 fd25 	bl	8001e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013d6:	2026      	movs	r0, #38	; 0x26
 80013d8:	f000 fd3e 	bl	8001e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013dc:	e087      	b.n	80014ee <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART6)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a4a      	ldr	r2, [pc, #296]	; (800150c <HAL_UART_MspInit+0x218>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	f040 8082 	bne.w	80014ee <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART6_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b43      	ldr	r3, [pc, #268]	; (80014fc <HAL_UART_MspInit+0x208>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a42      	ldr	r2, [pc, #264]	; (80014fc <HAL_UART_MspInit+0x208>)
 80013f4:	f043 0320 	orr.w	r3, r3, #32
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b40      	ldr	r3, [pc, #256]	; (80014fc <HAL_UART_MspInit+0x208>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f003 0320 	and.w	r3, r3, #32
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b3c      	ldr	r3, [pc, #240]	; (80014fc <HAL_UART_MspInit+0x208>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a3b      	ldr	r2, [pc, #236]	; (80014fc <HAL_UART_MspInit+0x208>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b39      	ldr	r3, [pc, #228]	; (80014fc <HAL_UART_MspInit+0x208>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	4b35      	ldr	r3, [pc, #212]	; (80014fc <HAL_UART_MspInit+0x208>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a34      	ldr	r2, [pc, #208]	; (80014fc <HAL_UART_MspInit+0x208>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b32      	ldr	r3, [pc, #200]	; (80014fc <HAL_UART_MspInit+0x208>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PM2_5_UART6_TX_Pin;
 800143e:	2340      	movs	r3, #64	; 0x40
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001446:	2301      	movs	r3, #1
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800144e:	2308      	movs	r3, #8
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PM2_5_UART6_TX_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	482d      	ldr	r0, [pc, #180]	; (8001510 <HAL_UART_MspInit+0x21c>)
 800145a:	f001 f815 	bl	8002488 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PM2_5_UART6_RX_Pin;
 800145e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001468:	2301      	movs	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001470:	2308      	movs	r3, #8
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PM2_5_UART6_RX_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4821      	ldr	r0, [pc, #132]	; (8001500 <HAL_UART_MspInit+0x20c>)
 800147c:	f001 f804 	bl	8002488 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_UART_MspInit+0x220>)
 8001482:	4a25      	ldr	r2, [pc, #148]	; (8001518 <HAL_UART_MspInit+0x224>)
 8001484:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_UART_MspInit+0x220>)
 8001488:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800148c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_UART_MspInit+0x220>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <HAL_UART_MspInit+0x220>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_UART_MspInit+0x220>)
 800149c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_UART_MspInit+0x220>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <HAL_UART_MspInit+0x220>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_UART_MspInit+0x220>)
 80014b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_UART_MspInit+0x220>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_UART_MspInit+0x220>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80014c2:	4814      	ldr	r0, [pc, #80]	; (8001514 <HAL_UART_MspInit+0x220>)
 80014c4:	f000 fcd6 	bl	8001e74 <HAL_DMA_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_UART_MspInit+0x1de>
      Error_Handler();
 80014ce:	f7ff fd43 	bl	8000f58 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a0f      	ldr	r2, [pc, #60]	; (8001514 <HAL_UART_MspInit+0x220>)
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34
 80014d8:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <HAL_UART_MspInit+0x220>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2105      	movs	r1, #5
 80014e2:	2047      	movs	r0, #71	; 0x47
 80014e4:	f000 fc9c 	bl	8001e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80014e8:	2047      	movs	r0, #71	; 0x47
 80014ea:	f000 fcb5 	bl	8001e58 <HAL_NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3730      	adds	r7, #48	; 0x30
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40004400 	.word	0x40004400
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000
 8001504:	200041cc 	.word	0x200041cc
 8001508:	400260a0 	.word	0x400260a0
 800150c:	40011400 	.word	0x40011400
 8001510:	40020800 	.word	0x40020800
 8001514:	20004070 	.word	0x20004070
 8001518:	40026428 	.word	0x40026428

0800151c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	201d      	movs	r0, #29
 8001532:	f000 fc75 	bl	8001e20 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8001536:	201d      	movs	r0, #29
 8001538:	f000 fc8e 	bl	8001e58 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <HAL_InitTick+0xa0>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <HAL_InitTick+0xa0>)
 8001546:	f043 0302 	orr.w	r3, r3, #2
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_InitTick+0xa0>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001558:	f107 0210 	add.w	r2, r7, #16
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f001 fe78 	bl	8003258 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001568:	f001 fe4e 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 800156c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <HAL_InitTick+0xa4>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	0c9b      	lsrs	r3, r3, #18
 8001578:	3b01      	subs	r3, #1
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_InitTick+0xa8>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <HAL_InitTick+0xac>)
 8001580:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_InitTick+0xa8>)
 8001584:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001588:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <HAL_InitTick+0xa8>)
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_InitTick+0xa8>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_InitTick+0xa8>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800159c:	4809      	ldr	r0, [pc, #36]	; (80015c4 <HAL_InitTick+0xa8>)
 800159e:	f001 fef1 	bl	8003384 <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d104      	bne.n	80015b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80015a8:	4806      	ldr	r0, [pc, #24]	; (80015c4 <HAL_InitTick+0xa8>)
 80015aa:	f001 ff20 	bl	80033ee <HAL_TIM_Base_Start_IT>
 80015ae:	4603      	mov	r3, r0
 80015b0:	e000      	b.n	80015b4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3730      	adds	r7, #48	; 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	200042f4 	.word	0x200042f4
 80015c8:	40000400 	.word	0x40000400

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <DMA1_Stream6_IRQHandler+0x10>)
 8001606:	f000 fd05 	bl	8002014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200041cc 	.word	0x200041cc

08001614 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <TIM3_IRQHandler+0x10>)
 800161a:	f001 ff0c 	bl	8003436 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200042f4 	.word	0x200042f4

08001628 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <USART2_IRQHandler+0x10>)
 800162e:	f002 faa9 	bl	8003b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200042b0 	.word	0x200042b0

0800163c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <DMA2_Stream1_IRQHandler+0x10>)
 8001642:	f000 fce7 	bl	8002014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20004070 	.word	0x20004070

08001650 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <USART6_IRQHandler+0x10>)
 8001656:	f002 fa95 	bl	8003b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20004270 	.word	0x20004270

08001664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <SystemInit+0x60>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166e:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <SystemInit+0x60>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <SystemInit+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <SystemInit+0x64>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <SystemInit+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <SystemInit+0x64>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <SystemInit+0x64>)
 8001690:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <SystemInit+0x64>)
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <SystemInit+0x68>)
 800169e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <SystemInit+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <SystemInit+0x64>)
 80016a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <SystemInit+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SystemInit+0x60>)
 80016b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b8:	609a      	str	r2, [r3, #8]
#endif
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00
 80016c8:	40023800 	.word	0x40023800
 80016cc:	24003010 	.word	0x24003010

080016d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001708 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016d6:	e003      	b.n	80016e0 <LoopCopyDataInit>

080016d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016de:	3104      	adds	r1, #4

080016e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016e8:	d3f6      	bcc.n	80016d8 <CopyDataInit>
  ldr  r2, =_sbss
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016ec:	e002      	b.n	80016f4 <LoopFillZerobss>

080016ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016f0:	f842 3b04 	str.w	r3, [r2], #4

080016f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016f8:	d3f9      	bcc.n	80016ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016fa:	f7ff ffb3 	bl	8001664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fe:	f005 f8f3 	bl	80068e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001702:	f7ff f8b7 	bl	8000874 <main>
  bx  lr    
 8001706:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001708:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800170c:	08007dc8 	.word	0x08007dc8
  ldr  r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001714:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8001718:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 800171c:	2000433c 	.word	0x2000433c

08001720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_Init+0x40>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_Init+0x40>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_Init+0x40>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 fb5c 	bl	8001e0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff fee2 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fccc 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000020 	.word	0x20000020
 800178c:	20004334 	.word	0x20004334

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20004334 	.word	0x20004334

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_Delay+0x40>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000020 	.word	0x20000020

080017ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e033      	b.n	800186a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fc9e 	bl	800114c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	2b00      	cmp	r3, #0
 8001828:	d118      	bne.n	800185c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001832:	f023 0302 	bic.w	r3, r3, #2
 8001836:	f043 0202 	orr.w	r2, r3, #2
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f93a 	bl	8001ab8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
 800185a:	e001      	b.n	8001860 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1c>
 800188c:	2302      	movs	r3, #2
 800188e:	e105      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x228>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b09      	cmp	r3, #9
 800189e:	d925      	bls.n	80018ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68d9      	ldr	r1, [r3, #12]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	3b1e      	subs	r3, #30
 80018b6:	2207      	movs	r2, #7
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43da      	mvns	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	400a      	ands	r2, r1
 80018c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68d9      	ldr	r1, [r3, #12]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	4603      	mov	r3, r0
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4403      	add	r3, r0
 80018de:	3b1e      	subs	r3, #30
 80018e0:	409a      	lsls	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	e022      	b.n	8001932 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6919      	ldr	r1, [r3, #16]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	2207      	movs	r2, #7
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	400a      	ands	r2, r1
 800190e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6919      	ldr	r1, [r3, #16]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	4603      	mov	r3, r0
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4403      	add	r3, r0
 8001928:	409a      	lsls	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b06      	cmp	r3, #6
 8001938:	d824      	bhi.n	8001984 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	3b05      	subs	r3, #5
 800194c:	221f      	movs	r2, #31
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	400a      	ands	r2, r1
 800195a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	4618      	mov	r0, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	3b05      	subs	r3, #5
 8001976:	fa00 f203 	lsl.w	r2, r0, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	635a      	str	r2, [r3, #52]	; 0x34
 8001982:	e04c      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b0c      	cmp	r3, #12
 800198a:	d824      	bhi.n	80019d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	3b23      	subs	r3, #35	; 0x23
 800199e:	221f      	movs	r2, #31
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43da      	mvns	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	400a      	ands	r2, r1
 80019ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	3b23      	subs	r3, #35	; 0x23
 80019c8:	fa00 f203 	lsl.w	r2, r0, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
 80019d4:	e023      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3b41      	subs	r3, #65	; 0x41
 80019e8:	221f      	movs	r2, #31
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	400a      	ands	r2, r1
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	3b41      	subs	r3, #65	; 0x41
 8001a12:	fa00 f203 	lsl.w	r2, r0, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a1e:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <HAL_ADC_ConfigChannel+0x234>)
 8001a20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a21      	ldr	r2, [pc, #132]	; (8001aac <HAL_ADC_ConfigChannel+0x238>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d109      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1cc>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b12      	cmp	r3, #18
 8001a32:	d105      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a19      	ldr	r2, [pc, #100]	; (8001aac <HAL_ADC_ConfigChannel+0x238>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d123      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x21e>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b10      	cmp	r3, #16
 8001a50:	d003      	beq.n	8001a5a <HAL_ADC_ConfigChannel+0x1e6>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b11      	cmp	r3, #17
 8001a58:	d11b      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b10      	cmp	r3, #16
 8001a6c:	d111      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_ADC_ConfigChannel+0x23c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_ADC_ConfigChannel+0x240>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	0c9a      	lsrs	r2, r3, #18
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a84:	e002      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f9      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40012300 	.word	0x40012300
 8001aac:	40012000 	.word	0x40012000
 8001ab0:	2000001c 	.word	0x2000001c
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac0:	4b79      	ldr	r3, [pc, #484]	; (8001ca8 <ADC_Init+0x1f0>)
 8001ac2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	021a      	lsls	r2, r3, #8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	4a58      	ldr	r2, [pc, #352]	; (8001cac <ADC_Init+0x1f4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d022      	beq.n	8001b96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6899      	ldr	r1, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6899      	ldr	r1, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	e00f      	b.n	8001bb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0202 	bic.w	r2, r2, #2
 8001bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6899      	ldr	r1, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7e1b      	ldrb	r3, [r3, #24]
 8001bd0:	005a      	lsls	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01b      	beq.n	8001c1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bf2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6859      	ldr	r1, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	035a      	lsls	r2, r3, #13
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	e007      	b.n	8001c2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	051a      	lsls	r2, r3, #20
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6899      	ldr	r1, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c6e:	025a      	lsls	r2, r3, #9
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6899      	ldr	r1, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	029a      	lsls	r2, r3, #10
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40012300 	.word	0x40012300
 8001cac:	0f000001 	.word	0x0f000001

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0b      	blt.n	8001d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4907      	ldr	r1, [pc, #28]	; (8001d4c <__NVIC_EnableIRQ+0x38>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2001      	movs	r0, #1
 8001d36:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db0a      	blt.n	8001d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	490c      	ldr	r1, [pc, #48]	; (8001d9c <__NVIC_SetPriority+0x4c>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d78:	e00a      	b.n	8001d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4908      	ldr	r1, [pc, #32]	; (8001da0 <__NVIC_SetPriority+0x50>)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	3b04      	subs	r3, #4
 8001d88:	0112      	lsls	r2, r2, #4
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	761a      	strb	r2, [r3, #24]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f1c3 0307 	rsb	r3, r3, #7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf28      	it	cs
 8001dc2:	2304      	movcs	r3, #4
 8001dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d902      	bls.n	8001dd4 <NVIC_EncodePriority+0x30>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3b03      	subs	r3, #3
 8001dd2:	e000      	b.n	8001dd6 <NVIC_EncodePriority+0x32>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	4313      	orrs	r3, r2
         );
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff4c 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e32:	f7ff ff61 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	68b9      	ldr	r1, [r7, #8]
 8001e3c:	6978      	ldr	r0, [r7, #20]
 8001e3e:	f7ff ffb1 	bl	8001da4 <NVIC_EncodePriority>
 8001e42:	4602      	mov	r2, r0
 8001e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff80 	bl	8001d50 <__NVIC_SetPriority>
}
 8001e50:	bf00      	nop
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff54 	bl	8001d14 <__NVIC_EnableIRQ>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff fc86 	bl	8001790 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e099      	b.n	8001fc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb0:	e00f      	b.n	8001ed2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb2:	f7ff fc6d 	bl	8001790 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d908      	bls.n	8001ed2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e078      	b.n	8001fc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1e8      	bne.n	8001eb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_DMA_Init+0x158>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d107      	bne.n	8001f3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	4313      	orrs	r3, r2
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f023 0307 	bic.w	r3, r3, #7
 8001f52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d117      	bne.n	8001f96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fa0b 	bl	8002394 <DMA_CheckFifoParam>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f92:	2301      	movs	r3, #1
 8001f94:	e016      	b.n	8001fc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f9c2 	bl	8002328 <DMA_CalcBaseAndBitshift>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	223f      	movs	r2, #63	; 0x3f
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	f010803f 	.word	0xf010803f

08001fd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d004      	beq.n	8001fee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00c      	b.n	8002008 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2205      	movs	r2, #5
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002020:	4b92      	ldr	r3, [pc, #584]	; (800226c <HAL_DMA_IRQHandler+0x258>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a92      	ldr	r2, [pc, #584]	; (8002270 <HAL_DMA_IRQHandler+0x25c>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0a9b      	lsrs	r3, r3, #10
 800202c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2208      	movs	r2, #8
 8002040:	409a      	lsls	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01a      	beq.n	8002080 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d013      	beq.n	8002080 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0204 	bic.w	r2, r2, #4
 8002066:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	2208      	movs	r2, #8
 800206e:	409a      	lsls	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002084:	2201      	movs	r2, #1
 8002086:	409a      	lsls	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d012      	beq.n	80020b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	2201      	movs	r2, #1
 80020a4:	409a      	lsls	r2, r3
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	f043 0202 	orr.w	r2, r3, #2
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ba:	2204      	movs	r2, #4
 80020bc:	409a      	lsls	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d012      	beq.n	80020ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00b      	beq.n	80020ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2204      	movs	r2, #4
 80020da:	409a      	lsls	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	f043 0204 	orr.w	r2, r3, #4
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	2210      	movs	r2, #16
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d043      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d03c      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210e:	2210      	movs	r2, #16
 8002110:	409a      	lsls	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d018      	beq.n	8002156 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d108      	bne.n	8002144 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d024      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	4798      	blx	r3
 8002142:	e01f      	b.n	8002184 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01b      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
 8002154:	e016      	b.n	8002184 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0208 	bic.w	r2, r2, #8
 8002172:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	2220      	movs	r2, #32
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 808e 	beq.w	80022b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8086 	beq.w	80022b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	2220      	movs	r2, #32
 80021ac:	409a      	lsls	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d136      	bne.n	800222c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0216 	bic.w	r2, r2, #22
 80021cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <HAL_DMA_IRQHandler+0x1da>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0208 	bic.w	r2, r2, #8
 80021fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	223f      	movs	r2, #63	; 0x3f
 8002204:	409a      	lsls	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221e:	2b00      	cmp	r3, #0
 8002220:	d07d      	beq.n	800231e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4798      	blx	r3
        }
        return;
 800222a:	e078      	b.n	800231e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d01c      	beq.n	8002274 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d108      	bne.n	800225a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	2b00      	cmp	r3, #0
 800224e:	d030      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	4798      	blx	r3
 8002258:	e02b      	b.n	80022b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	2b00      	cmp	r3, #0
 8002260:	d027      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
 800226a:	e022      	b.n	80022b2 <HAL_DMA_IRQHandler+0x29e>
 800226c:	2000001c 	.word	0x2000001c
 8002270:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10f      	bne.n	80022a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0210 	bic.w	r2, r2, #16
 8002290:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d032      	beq.n	8002320 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d022      	beq.n	800230c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2205      	movs	r2, #5
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3301      	adds	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d307      	bcc.n	80022fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f2      	bne.n	80022de <HAL_DMA_IRQHandler+0x2ca>
 80022f8:	e000      	b.n	80022fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4798      	blx	r3
 800231c:	e000      	b.n	8002320 <HAL_DMA_IRQHandler+0x30c>
        return;
 800231e:	bf00      	nop
    }
  }
}
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop

08002328 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	3b10      	subs	r3, #16
 8002338:	4a14      	ldr	r2, [pc, #80]	; (800238c <DMA_CalcBaseAndBitshift+0x64>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002342:	4a13      	ldr	r2, [pc, #76]	; (8002390 <DMA_CalcBaseAndBitshift+0x68>)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b03      	cmp	r3, #3
 8002354:	d909      	bls.n	800236a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800235e:	f023 0303 	bic.w	r3, r3, #3
 8002362:	1d1a      	adds	r2, r3, #4
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	659a      	str	r2, [r3, #88]	; 0x58
 8002368:	e007      	b.n	800237a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002372:	f023 0303 	bic.w	r3, r3, #3
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	aaaaaaab 	.word	0xaaaaaaab
 8002390:	08007d18 	.word	0x08007d18

08002394 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d11f      	bne.n	80023ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d855      	bhi.n	8002460 <DMA_CheckFifoParam+0xcc>
 80023b4:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <DMA_CheckFifoParam+0x28>)
 80023b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ba:	bf00      	nop
 80023bc:	080023cd 	.word	0x080023cd
 80023c0:	080023df 	.word	0x080023df
 80023c4:	080023cd 	.word	0x080023cd
 80023c8:	08002461 	.word	0x08002461
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d045      	beq.n	8002464 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023dc:	e042      	b.n	8002464 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023e6:	d13f      	bne.n	8002468 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ec:	e03c      	b.n	8002468 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f6:	d121      	bne.n	800243c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d836      	bhi.n	800246c <DMA_CheckFifoParam+0xd8>
 80023fe:	a201      	add	r2, pc, #4	; (adr r2, 8002404 <DMA_CheckFifoParam+0x70>)
 8002400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002404:	08002415 	.word	0x08002415
 8002408:	0800241b 	.word	0x0800241b
 800240c:	08002415 	.word	0x08002415
 8002410:	0800242d 	.word	0x0800242d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      break;
 8002418:	e02f      	b.n	800247a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d024      	beq.n	8002470 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242a:	e021      	b.n	8002470 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002434:	d11e      	bne.n	8002474 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800243a:	e01b      	b.n	8002474 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d902      	bls.n	8002448 <DMA_CheckFifoParam+0xb4>
 8002442:	2b03      	cmp	r3, #3
 8002444:	d003      	beq.n	800244e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002446:	e018      	b.n	800247a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
      break;
 800244c:	e015      	b.n	800247a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00e      	beq.n	8002478 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
      break;
 800245e:	e00b      	b.n	8002478 <DMA_CheckFifoParam+0xe4>
      break;
 8002460:	bf00      	nop
 8002462:	e00a      	b.n	800247a <DMA_CheckFifoParam+0xe6>
      break;
 8002464:	bf00      	nop
 8002466:	e008      	b.n	800247a <DMA_CheckFifoParam+0xe6>
      break;
 8002468:	bf00      	nop
 800246a:	e006      	b.n	800247a <DMA_CheckFifoParam+0xe6>
      break;
 800246c:	bf00      	nop
 800246e:	e004      	b.n	800247a <DMA_CheckFifoParam+0xe6>
      break;
 8002470:	bf00      	nop
 8002472:	e002      	b.n	800247a <DMA_CheckFifoParam+0xe6>
      break;   
 8002474:	bf00      	nop
 8002476:	e000      	b.n	800247a <DMA_CheckFifoParam+0xe6>
      break;
 8002478:	bf00      	nop
    }
  } 
  
  return status; 
 800247a:	7bfb      	ldrb	r3, [r7, #15]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	e159      	b.n	8002758 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	429a      	cmp	r2, r3
 80024be:	f040 8148 	bne.w	8002752 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x4a>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b12      	cmp	r3, #18
 80024d0:	d123      	bne.n	800251a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	08da      	lsrs	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3208      	adds	r2, #8
 80024da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	220f      	movs	r2, #15
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	08da      	lsrs	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3208      	adds	r2, #8
 8002514:	69b9      	ldr	r1, [r7, #24]
 8002516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0203 	and.w	r2, r3, #3
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d00b      	beq.n	800256e <HAL_GPIO_Init+0xe6>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d007      	beq.n	800256e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002562:	2b11      	cmp	r3, #17
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b12      	cmp	r3, #18
 800256c:	d130      	bne.n	80025d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 0201 	and.w	r2, r3, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80a2 	beq.w	8002752 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b56      	ldr	r3, [pc, #344]	; (800276c <HAL_GPIO_Init+0x2e4>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4a55      	ldr	r2, [pc, #340]	; (800276c <HAL_GPIO_Init+0x2e4>)
 8002618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261c:	6453      	str	r3, [r2, #68]	; 0x44
 800261e:	4b53      	ldr	r3, [pc, #332]	; (800276c <HAL_GPIO_Init+0x2e4>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262a:	4a51      	ldr	r2, [pc, #324]	; (8002770 <HAL_GPIO_Init+0x2e8>)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a48      	ldr	r2, [pc, #288]	; (8002774 <HAL_GPIO_Init+0x2ec>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d019      	beq.n	800268a <HAL_GPIO_Init+0x202>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a47      	ldr	r2, [pc, #284]	; (8002778 <HAL_GPIO_Init+0x2f0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_GPIO_Init+0x1fe>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a46      	ldr	r2, [pc, #280]	; (800277c <HAL_GPIO_Init+0x2f4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00d      	beq.n	8002682 <HAL_GPIO_Init+0x1fa>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a45      	ldr	r2, [pc, #276]	; (8002780 <HAL_GPIO_Init+0x2f8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <HAL_GPIO_Init+0x1f6>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a44      	ldr	r2, [pc, #272]	; (8002784 <HAL_GPIO_Init+0x2fc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d101      	bne.n	800267a <HAL_GPIO_Init+0x1f2>
 8002676:	2304      	movs	r3, #4
 8002678:	e008      	b.n	800268c <HAL_GPIO_Init+0x204>
 800267a:	2307      	movs	r3, #7
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x204>
 800267e:	2303      	movs	r3, #3
 8002680:	e004      	b.n	800268c <HAL_GPIO_Init+0x204>
 8002682:	2302      	movs	r3, #2
 8002684:	e002      	b.n	800268c <HAL_GPIO_Init+0x204>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x204>
 800268a:	2300      	movs	r3, #0
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	f002 0203 	and.w	r2, r2, #3
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	4093      	lsls	r3, r2
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800269c:	4934      	ldr	r1, [pc, #208]	; (8002770 <HAL_GPIO_Init+0x2e8>)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026aa:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HAL_GPIO_Init+0x300>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ce:	4a2e      	ldr	r2, [pc, #184]	; (8002788 <HAL_GPIO_Init+0x300>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026d4:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <HAL_GPIO_Init+0x300>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f8:	4a23      	ldr	r2, [pc, #140]	; (8002788 <HAL_GPIO_Init+0x300>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <HAL_GPIO_Init+0x300>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002722:	4a19      	ldr	r2, [pc, #100]	; (8002788 <HAL_GPIO_Init+0x300>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HAL_GPIO_Init+0x300>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800274c:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <HAL_GPIO_Init+0x300>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3301      	adds	r3, #1
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b0f      	cmp	r3, #15
 800275c:	f67f aea2 	bls.w	80024a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002760:	bf00      	nop
 8002762:	3724      	adds	r7, #36	; 0x24
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	40023800 	.word	0x40023800
 8002770:	40013800 	.word	0x40013800
 8002774:	40020000 	.word	0x40020000
 8002778:	40020400 	.word	0x40020400
 800277c:	40020800 	.word	0x40020800
 8002780:	40020c00 	.word	0x40020c00
 8002784:	40021000 	.word	0x40021000
 8002788:	40013c00 	.word	0x40013c00

0800278c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	807b      	strh	r3, [r7, #2]
 8002798:	4613      	mov	r3, r2
 800279a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800279c:	787b      	ldrb	r3, [r7, #1]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a8:	e003      	b.n	80027b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027aa:	887b      	ldrh	r3, [r7, #2]
 80027ac:	041a      	lsls	r2, r3, #16
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	619a      	str	r2, [r3, #24]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	401a      	ands	r2, r3
 80027d2:	887b      	ldrh	r3, [r7, #2]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d104      	bne.n	80027e2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	041a      	lsls	r2, r3, #16
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e10f      	b.n	8002a26 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe fcda 	bl	80011d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002838:	f000 fce6 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 800283c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a7b      	ldr	r2, [pc, #492]	; (8002a30 <HAL_I2C_Init+0x23c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d807      	bhi.n	8002858 <HAL_I2C_Init+0x64>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4a7a      	ldr	r2, [pc, #488]	; (8002a34 <HAL_I2C_Init+0x240>)
 800284c:	4293      	cmp	r3, r2
 800284e:	bf94      	ite	ls
 8002850:	2301      	movls	r3, #1
 8002852:	2300      	movhi	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	e006      	b.n	8002866 <HAL_I2C_Init+0x72>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a77      	ldr	r2, [pc, #476]	; (8002a38 <HAL_I2C_Init+0x244>)
 800285c:	4293      	cmp	r3, r2
 800285e:	bf94      	ite	ls
 8002860:	2301      	movls	r3, #1
 8002862:	2300      	movhi	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0db      	b.n	8002a26 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4a72      	ldr	r2, [pc, #456]	; (8002a3c <HAL_I2C_Init+0x248>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0c9b      	lsrs	r3, r3, #18
 8002878:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a64      	ldr	r2, [pc, #400]	; (8002a30 <HAL_I2C_Init+0x23c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d802      	bhi.n	80028a8 <HAL_I2C_Init+0xb4>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3301      	adds	r3, #1
 80028a6:	e009      	b.n	80028bc <HAL_I2C_Init+0xc8>
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	4a63      	ldr	r2, [pc, #396]	; (8002a40 <HAL_I2C_Init+0x24c>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	3301      	adds	r3, #1
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4956      	ldr	r1, [pc, #344]	; (8002a30 <HAL_I2C_Init+0x23c>)
 80028d8:	428b      	cmp	r3, r1
 80028da:	d80d      	bhi.n	80028f8 <HAL_I2C_Init+0x104>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1e59      	subs	r1, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ea:	3301      	adds	r3, #1
 80028ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	bf38      	it	cc
 80028f4:	2304      	movcc	r3, #4
 80028f6:	e04f      	b.n	8002998 <HAL_I2C_Init+0x1a4>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d111      	bne.n	8002924 <HAL_I2C_Init+0x130>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1e58      	subs	r0, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	440b      	add	r3, r1
 800290e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002912:	3301      	adds	r3, #1
 8002914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e012      	b.n	800294a <HAL_I2C_Init+0x156>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1e58      	subs	r0, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	0099      	lsls	r1, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	fbb0 f3f3 	udiv	r3, r0, r3
 800293a:	3301      	adds	r3, #1
 800293c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Init+0x15e>
 800294e:	2301      	movs	r3, #1
 8002950:	e022      	b.n	8002998 <HAL_I2C_Init+0x1a4>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10e      	bne.n	8002978 <HAL_I2C_Init+0x184>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1e58      	subs	r0, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6859      	ldr	r1, [r3, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	440b      	add	r3, r1
 8002968:	fbb0 f3f3 	udiv	r3, r0, r3
 800296c:	3301      	adds	r3, #1
 800296e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002976:	e00f      	b.n	8002998 <HAL_I2C_Init+0x1a4>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1e58      	subs	r0, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	0099      	lsls	r1, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	fbb0 f3f3 	udiv	r3, r0, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002994:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	6809      	ldr	r1, [r1, #0]
 800299c:	4313      	orrs	r3, r2
 800299e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6911      	ldr	r1, [r2, #16]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68d2      	ldr	r2, [r2, #12]
 80029d2:	4311      	orrs	r1, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	430b      	orrs	r3, r1
 80029da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2220      	movs	r2, #32
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	000186a0 	.word	0x000186a0
 8002a34:	001e847f 	.word	0x001e847f
 8002a38:	003d08ff 	.word	0x003d08ff
 8002a3c:	431bde83 	.word	0x431bde83
 8002a40:	10624dd3 	.word	0x10624dd3

08002a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e22d      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d075      	beq.n	8002b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a62:	4ba3      	ldr	r3, [pc, #652]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d00c      	beq.n	8002a88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6e:	4ba0      	ldr	r3, [pc, #640]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d112      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b9d      	ldr	r3, [pc, #628]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a86:	d10b      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	4b99      	ldr	r3, [pc, #612]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d05b      	beq.n	8002b4c <HAL_RCC_OscConfig+0x108>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d157      	bne.n	8002b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e208      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa8:	d106      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x74>
 8002aaa:	4b91      	ldr	r3, [pc, #580]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a90      	ldr	r2, [pc, #576]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e01d      	b.n	8002af4 <HAL_RCC_OscConfig+0xb0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0x98>
 8002ac2:	4b8b      	ldr	r3, [pc, #556]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a8a      	ldr	r2, [pc, #552]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	4b88      	ldr	r3, [pc, #544]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a87      	ldr	r2, [pc, #540]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0xb0>
 8002adc:	4b84      	ldr	r3, [pc, #528]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a83      	ldr	r2, [pc, #524]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b81      	ldr	r3, [pc, #516]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a80      	ldr	r2, [pc, #512]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fe fe48 	bl	8001790 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b04:	f7fe fe44 	bl	8001790 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e1cd      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	4b76      	ldr	r3, [pc, #472]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0xc0>
 8002b22:	e014      	b.n	8002b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fe fe34 	bl	8001790 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fe30 	bl	8001790 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	; 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e1b9      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	4b6c      	ldr	r3, [pc, #432]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0xe8>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d063      	beq.n	8002c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b5a:	4b65      	ldr	r3, [pc, #404]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b66:	4b62      	ldr	r3, [pc, #392]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d11c      	bne.n	8002bac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b5f      	ldr	r3, [pc, #380]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7e:	4b5c      	ldr	r3, [pc, #368]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_RCC_OscConfig+0x152>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e18d      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b96:	4b56      	ldr	r3, [pc, #344]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4952      	ldr	r1, [pc, #328]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002baa:	e03a      	b.n	8002c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb4:	4b4f      	ldr	r3, [pc, #316]	; (8002cf4 <HAL_RCC_OscConfig+0x2b0>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bba:	f7fe fde9 	bl	8001790 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc2:	f7fe fde5 	bl	8001790 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e16e      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd4:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be0:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4940      	ldr	r1, [pc, #256]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]
 8002bf4:	e015      	b.n	8002c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf6:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <HAL_RCC_OscConfig+0x2b0>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fdc8 	bl	8001790 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c04:	f7fe fdc4 	bl	8001790 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e14d      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c16:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d030      	beq.n	8002c90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d016      	beq.n	8002c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c36:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <HAL_RCC_OscConfig+0x2b4>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fe fda8 	bl	8001790 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c44:	f7fe fda4 	bl	8001790 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e12d      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c56:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x200>
 8002c62:	e015      	b.n	8002c90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_RCC_OscConfig+0x2b4>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6a:	f7fe fd91 	bl	8001790 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c72:	f7fe fd8d 	bl	8001790 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e116      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80a0 	beq.w	8002dde <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10f      	bne.n	8002cce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_OscConfig+0x2b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d121      	bne.n	8002d1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <HAL_RCC_OscConfig+0x2b8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <HAL_RCC_OscConfig+0x2b8>)
 8002ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fd53 	bl	8001790 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cec:	e011      	b.n	8002d12 <HAL_RCC_OscConfig+0x2ce>
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	42470000 	.word	0x42470000
 8002cf8:	42470e80 	.word	0x42470e80
 8002cfc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d00:	f7fe fd46 	bl	8001790 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e0cf      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d12:	4b6a      	ldr	r3, [pc, #424]	; (8002ebc <HAL_RCC_OscConfig+0x478>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d106      	bne.n	8002d34 <HAL_RCC_OscConfig+0x2f0>
 8002d26:	4b66      	ldr	r3, [pc, #408]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	4a65      	ldr	r2, [pc, #404]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	; 0x70
 8002d32:	e01c      	b.n	8002d6e <HAL_RCC_OscConfig+0x32a>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	d10c      	bne.n	8002d56 <HAL_RCC_OscConfig+0x312>
 8002d3c:	4b60      	ldr	r3, [pc, #384]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	4a5f      	ldr	r2, [pc, #380]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002d42:	f043 0304 	orr.w	r3, r3, #4
 8002d46:	6713      	str	r3, [r2, #112]	; 0x70
 8002d48:	4b5d      	ldr	r3, [pc, #372]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	4a5c      	ldr	r2, [pc, #368]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6713      	str	r3, [r2, #112]	; 0x70
 8002d54:	e00b      	b.n	8002d6e <HAL_RCC_OscConfig+0x32a>
 8002d56:	4b5a      	ldr	r3, [pc, #360]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	4a59      	ldr	r2, [pc, #356]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	6713      	str	r3, [r2, #112]	; 0x70
 8002d62:	4b57      	ldr	r3, [pc, #348]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	4a56      	ldr	r2, [pc, #344]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002d68:	f023 0304 	bic.w	r3, r3, #4
 8002d6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d015      	beq.n	8002da2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d76:	f7fe fd0b 	bl	8001790 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7fe fd07 	bl	8001790 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e08e      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d94:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ee      	beq.n	8002d7e <HAL_RCC_OscConfig+0x33a>
 8002da0:	e014      	b.n	8002dcc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da2:	f7fe fcf5 	bl	8001790 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe fcf1 	bl	8001790 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e078      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1ee      	bne.n	8002daa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d105      	bne.n	8002dde <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a3a      	ldr	r2, [pc, #232]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d064      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002de6:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d05c      	beq.n	8002eac <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d141      	bne.n	8002e7e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfa:	4b32      	ldr	r3, [pc, #200]	; (8002ec4 <HAL_RCC_OscConfig+0x480>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7fe fcc6 	bl	8001790 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e08:	f7fe fcc2 	bl	8001790 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e04b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	4b29      	ldr	r3, [pc, #164]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	019b      	lsls	r3, r3, #6
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	041b      	lsls	r3, r3, #16
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	491d      	ldr	r1, [pc, #116]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e50:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <HAL_RCC_OscConfig+0x480>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e56:	f7fe fc9b 	bl	8001790 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5e:	f7fe fc97 	bl	8001790 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e020      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x41a>
 8002e7c:	e018      	b.n	8002eb0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_RCC_OscConfig+0x480>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fe fc84 	bl	8001790 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe fc80 	bl	8001790 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e009      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_RCC_OscConfig+0x47c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x448>
 8002eaa:	e001      	b.n	8002eb0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40007000 	.word	0x40007000
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	42470060 	.word	0x42470060

08002ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0ca      	b.n	8003072 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_RCC_ClockConfig+0x1b4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d90c      	bls.n	8002f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b64      	ldr	r3, [pc, #400]	; (800307c <HAL_RCC_ClockConfig+0x1b4>)
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b62      	ldr	r3, [pc, #392]	; (800307c <HAL_RCC_ClockConfig+0x1b4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0b6      	b.n	8003072 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d020      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f1c:	4b58      	ldr	r3, [pc, #352]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4a57      	ldr	r2, [pc, #348]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f34:	4b52      	ldr	r3, [pc, #328]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4a51      	ldr	r2, [pc, #324]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f40:	4b4f      	ldr	r3, [pc, #316]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	494c      	ldr	r1, [pc, #304]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d044      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d107      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b46      	ldr	r3, [pc, #280]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d119      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e07d      	b.n	8003072 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f86:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e06d      	b.n	8003072 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f96:	4b3a      	ldr	r3, [pc, #232]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e065      	b.n	8003072 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa6:	4b36      	ldr	r3, [pc, #216]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f023 0203 	bic.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4933      	ldr	r1, [pc, #204]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb8:	f7fe fbea 	bl	8001790 <HAL_GetTick>
 8002fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc0:	f7fe fbe6 	bl	8001790 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e04d      	b.n	8003072 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 020c 	and.w	r2, r3, #12
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1eb      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe8:	4b24      	ldr	r3, [pc, #144]	; (800307c <HAL_RCC_ClockConfig+0x1b4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d20c      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	4b21      	ldr	r3, [pc, #132]	; (800307c <HAL_RCC_ClockConfig+0x1b4>)
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b1f      	ldr	r3, [pc, #124]	; (800307c <HAL_RCC_ClockConfig+0x1b4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e030      	b.n	8003072 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800301c:	4b18      	ldr	r3, [pc, #96]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4915      	ldr	r1, [pc, #84]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	490d      	ldr	r1, [pc, #52]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800304e:	f000 f81d 	bl	800308c <HAL_RCC_GetSysClockFreq>
 8003052:	4601      	mov	r1, r0
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	4a09      	ldr	r2, [pc, #36]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	5cd3      	ldrb	r3, [r2, r3]
 8003062:	fa21 f303 	lsr.w	r3, r1, r3
 8003066:	4a08      	ldr	r2, [pc, #32]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800306a:	2000      	movs	r0, #0
 800306c:	f7fe fa56 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40023c00 	.word	0x40023c00
 8003080:	40023800 	.word	0x40023800
 8003084:	08007d00 	.word	0x08007d00
 8003088:	2000001c 	.word	0x2000001c

0800308c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800308c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	2300      	movs	r3, #0
 800309c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a2:	4b50      	ldr	r3, [pc, #320]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d007      	beq.n	80030be <HAL_RCC_GetSysClockFreq+0x32>
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d008      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x38>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f040 808d 	bne.w	80031d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030b8:	4b4b      	ldr	r3, [pc, #300]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80030ba:	60bb      	str	r3, [r7, #8]
       break;
 80030bc:	e08c      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030be:	4b4b      	ldr	r3, [pc, #300]	; (80031ec <HAL_RCC_GetSysClockFreq+0x160>)
 80030c0:	60bb      	str	r3, [r7, #8]
      break;
 80030c2:	e089      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c4:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ce:	4b45      	ldr	r3, [pc, #276]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d023      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030da:	4b42      	ldr	r3, [pc, #264]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	099b      	lsrs	r3, r3, #6
 80030e0:	f04f 0400 	mov.w	r4, #0
 80030e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	ea03 0501 	and.w	r5, r3, r1
 80030f0:	ea04 0602 	and.w	r6, r4, r2
 80030f4:	4a3d      	ldr	r2, [pc, #244]	; (80031ec <HAL_RCC_GetSysClockFreq+0x160>)
 80030f6:	fb02 f106 	mul.w	r1, r2, r6
 80030fa:	2200      	movs	r2, #0
 80030fc:	fb02 f205 	mul.w	r2, r2, r5
 8003100:	440a      	add	r2, r1
 8003102:	493a      	ldr	r1, [pc, #232]	; (80031ec <HAL_RCC_GetSysClockFreq+0x160>)
 8003104:	fba5 0101 	umull	r0, r1, r5, r1
 8003108:	1853      	adds	r3, r2, r1
 800310a:	4619      	mov	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f04f 0400 	mov.w	r4, #0
 8003112:	461a      	mov	r2, r3
 8003114:	4623      	mov	r3, r4
 8003116:	f7fd f8bb 	bl	8000290 <__aeabi_uldivmod>
 800311a:	4603      	mov	r3, r0
 800311c:	460c      	mov	r4, r1
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	e049      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003122:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	f04f 0400 	mov.w	r4, #0
 800312c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	ea03 0501 	and.w	r5, r3, r1
 8003138:	ea04 0602 	and.w	r6, r4, r2
 800313c:	4629      	mov	r1, r5
 800313e:	4632      	mov	r2, r6
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	f04f 0400 	mov.w	r4, #0
 8003148:	0154      	lsls	r4, r2, #5
 800314a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800314e:	014b      	lsls	r3, r1, #5
 8003150:	4619      	mov	r1, r3
 8003152:	4622      	mov	r2, r4
 8003154:	1b49      	subs	r1, r1, r5
 8003156:	eb62 0206 	sbc.w	r2, r2, r6
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	f04f 0400 	mov.w	r4, #0
 8003162:	0194      	lsls	r4, r2, #6
 8003164:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003168:	018b      	lsls	r3, r1, #6
 800316a:	1a5b      	subs	r3, r3, r1
 800316c:	eb64 0402 	sbc.w	r4, r4, r2
 8003170:	f04f 0100 	mov.w	r1, #0
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	00e2      	lsls	r2, r4, #3
 800317a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800317e:	00d9      	lsls	r1, r3, #3
 8003180:	460b      	mov	r3, r1
 8003182:	4614      	mov	r4, r2
 8003184:	195b      	adds	r3, r3, r5
 8003186:	eb44 0406 	adc.w	r4, r4, r6
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	02a2      	lsls	r2, r4, #10
 8003194:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003198:	0299      	lsls	r1, r3, #10
 800319a:	460b      	mov	r3, r1
 800319c:	4614      	mov	r4, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	4621      	mov	r1, r4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f04f 0400 	mov.w	r4, #0
 80031a8:	461a      	mov	r2, r3
 80031aa:	4623      	mov	r3, r4
 80031ac:	f7fd f870 	bl	8000290 <__aeabi_uldivmod>
 80031b0:	4603      	mov	r3, r0
 80031b2:	460c      	mov	r4, r1
 80031b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	0c1b      	lsrs	r3, r3, #16
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	3301      	adds	r3, #1
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ce:	60bb      	str	r3, [r7, #8]
      break;
 80031d0:	e002      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80031d4:	60bb      	str	r3, [r7, #8]
      break;
 80031d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d8:	68bb      	ldr	r3, [r7, #8]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	00f42400 	.word	0x00f42400
 80031ec:	017d7840 	.word	0x017d7840

080031f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <HAL_RCC_GetHCLKFreq+0x14>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	2000001c 	.word	0x2000001c

08003208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800320c:	f7ff fff0 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003210:	4601      	mov	r1, r0
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	0a9b      	lsrs	r3, r3, #10
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4a03      	ldr	r2, [pc, #12]	; (800322c <HAL_RCC_GetPCLK1Freq+0x24>)
 800321e:	5cd3      	ldrb	r3, [r2, r3]
 8003220:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40023800 	.word	0x40023800
 800322c:	08007d10 	.word	0x08007d10

08003230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003234:	f7ff ffdc 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003238:	4601      	mov	r1, r0
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	0b5b      	lsrs	r3, r3, #13
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	4a03      	ldr	r2, [pc, #12]	; (8003254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	fa21 f303 	lsr.w	r3, r1, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40023800 	.word	0x40023800
 8003254:	08007d10 	.word	0x08007d10

08003258 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	220f      	movs	r2, #15
 8003266:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003268:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_RCC_GetClockConfig+0x5c>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0203 	and.w	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_GetClockConfig+0x5c>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	08db      	lsrs	r3, r3, #3
 8003292:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <HAL_RCC_GetClockConfig+0x60>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 020f 	and.w	r2, r3, #15
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	601a      	str	r2, [r3, #0]
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40023c00 	.word	0x40023c00

080032bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e056      	b.n	800337c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7fd ffbb 	bl	8001264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003304:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	ea42 0103 	orr.w	r1, r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	0c1b      	lsrs	r3, r3, #16
 800334c:	f003 0104 	and.w	r1, r3, #4
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69da      	ldr	r2, [r3, #28]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800336a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e01d      	b.n	80033d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d106      	bne.n	80033b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f815 	bl	80033da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3304      	adds	r3, #4
 80033c0:	4619      	mov	r1, r3
 80033c2:	4610      	mov	r0, r2
 80033c4:	f000 f968 	bl	8003698 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b06      	cmp	r3, #6
 8003416:	d007      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b02      	cmp	r3, #2
 800344a:	d122      	bne.n	8003492 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b02      	cmp	r3, #2
 8003458:	d11b      	bne.n	8003492 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f06f 0202 	mvn.w	r2, #2
 8003462:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f8ee 	bl	800365a <HAL_TIM_IC_CaptureCallback>
 800347e:	e005      	b.n	800348c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f8e0 	bl	8003646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8f1 	bl	800366e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b04      	cmp	r3, #4
 800349e:	d122      	bne.n	80034e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d11b      	bne.n	80034e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f06f 0204 	mvn.w	r2, #4
 80034b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f8c4 	bl	800365a <HAL_TIM_IC_CaptureCallback>
 80034d2:	e005      	b.n	80034e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f8b6 	bl	8003646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f8c7 	bl	800366e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d122      	bne.n	800353a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d11b      	bne.n	800353a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f06f 0208 	mvn.w	r2, #8
 800350a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2204      	movs	r2, #4
 8003510:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f89a 	bl	800365a <HAL_TIM_IC_CaptureCallback>
 8003526:	e005      	b.n	8003534 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f88c 	bl	8003646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f89d 	bl	800366e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b10      	cmp	r3, #16
 8003546:	d122      	bne.n	800358e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b10      	cmp	r3, #16
 8003554:	d11b      	bne.n	800358e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0210 	mvn.w	r2, #16
 800355e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2208      	movs	r2, #8
 8003564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f870 	bl	800365a <HAL_TIM_IC_CaptureCallback>
 800357a:	e005      	b.n	8003588 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f862 	bl	8003646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f873 	bl	800366e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d10e      	bne.n	80035ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d107      	bne.n	80035ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f06f 0201 	mvn.w	r2, #1
 80035b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7fd fcbd 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b80      	cmp	r3, #128	; 0x80
 80035c6:	d10e      	bne.n	80035e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b80      	cmp	r3, #128	; 0x80
 80035d4:	d107      	bne.n	80035e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f8e3 	bl	80037ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d10e      	bne.n	8003612 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d107      	bne.n	8003612 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800360a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f838 	bl	8003682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b20      	cmp	r3, #32
 800361e:	d10e      	bne.n	800363e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b20      	cmp	r3, #32
 800362c:	d107      	bne.n	800363e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f06f 0220 	mvn.w	r2, #32
 8003636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f8ad 	bl	8003798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a34      	ldr	r2, [pc, #208]	; (800377c <TIM_Base_SetConfig+0xe4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00f      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b6:	d00b      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a31      	ldr	r2, [pc, #196]	; (8003780 <TIM_Base_SetConfig+0xe8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a30      	ldr	r2, [pc, #192]	; (8003784 <TIM_Base_SetConfig+0xec>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a2f      	ldr	r2, [pc, #188]	; (8003788 <TIM_Base_SetConfig+0xf0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d108      	bne.n	80036e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a25      	ldr	r2, [pc, #148]	; (800377c <TIM_Base_SetConfig+0xe4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01b      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d017      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a22      	ldr	r2, [pc, #136]	; (8003780 <TIM_Base_SetConfig+0xe8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a21      	ldr	r2, [pc, #132]	; (8003784 <TIM_Base_SetConfig+0xec>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00f      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a20      	ldr	r2, [pc, #128]	; (8003788 <TIM_Base_SetConfig+0xf0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00b      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1f      	ldr	r2, [pc, #124]	; (800378c <TIM_Base_SetConfig+0xf4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a1e      	ldr	r2, [pc, #120]	; (8003790 <TIM_Base_SetConfig+0xf8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d003      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <TIM_Base_SetConfig+0xfc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d108      	bne.n	8003734 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <TIM_Base_SetConfig+0xe4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d103      	bne.n	8003768 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	615a      	str	r2, [r3, #20]
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40010000 	.word	0x40010000
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00
 800378c:	40014000 	.word	0x40014000
 8003790:	40014400 	.word	0x40014400
 8003794:	40014800 	.word	0x40014800

08003798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e03f      	b.n	8003852 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd fd84 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2224      	movs	r2, #36	; 0x24
 80037f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fc39 	bl	800407c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b088      	sub	sp, #32
 800385e:	af02      	add	r7, sp, #8
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b20      	cmp	r3, #32
 8003878:	f040 8083 	bne.w	8003982 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_UART_Transmit+0x2e>
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e07b      	b.n	8003984 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_UART_Transmit+0x40>
 8003896:	2302      	movs	r3, #2
 8003898:	e074      	b.n	8003984 <HAL_UART_Transmit+0x12a>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2221      	movs	r2, #33	; 0x21
 80038ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80038b0:	f7fd ff6e 	bl	8001790 <HAL_GetTick>
 80038b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	88fa      	ldrh	r2, [r7, #6]
 80038ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038c2:	e042      	b.n	800394a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038da:	d122      	bne.n	8003922 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2200      	movs	r2, #0
 80038e4:	2180      	movs	r1, #128	; 0x80
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fa5c 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e046      	b.n	8003984 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003908:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d103      	bne.n	800391a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	3302      	adds	r3, #2
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	e017      	b.n	800394a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	3301      	adds	r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	e013      	b.n	800394a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	2180      	movs	r1, #128	; 0x80
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fa39 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e023      	b.n	8003984 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	60ba      	str	r2, [r7, #8]
 8003942:	781a      	ldrb	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1b7      	bne.n	80038c4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2200      	movs	r2, #0
 800395c:	2140      	movs	r1, #64	; 0x40
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fa20 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e00a      	b.n	8003984 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	e000      	b.n	8003984 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003982:	2302      	movs	r3, #2
  }
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	f040 8090 	bne.w	8003ace <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <HAL_UART_Receive+0x2e>
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e088      	b.n	8003ad0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_UART_Receive+0x40>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e081      	b.n	8003ad0 <HAL_UART_Receive+0x144>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2222      	movs	r2, #34	; 0x22
 80039de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80039e2:	f7fd fed5 	bl	8001790 <HAL_GetTick>
 80039e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	88fa      	ldrh	r2, [r7, #6]
 80039ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	88fa      	ldrh	r2, [r7, #6]
 80039f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80039f4:	e05c      	b.n	8003ab0 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0c:	d12b      	bne.n	8003a66 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2200      	movs	r2, #0
 8003a16:	2120      	movs	r1, #32
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f9c3 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e053      	b.n	8003ad0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10c      	bne.n	8003a4e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	3302      	adds	r3, #2
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	e030      	b.n	8003ab0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	3301      	adds	r3, #1
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	e024      	b.n	8003ab0 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2120      	movs	r1, #32
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f997 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e027      	b.n	8003ad0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d108      	bne.n	8003a9a <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6859      	ldr	r1, [r3, #4]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	60ba      	str	r2, [r7, #8]
 8003a94:	b2ca      	uxtb	r2, r1
 8003a96:	701a      	strb	r2, [r3, #0]
 8003a98:	e00a      	b.n	8003ab0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	1c59      	adds	r1, r3, #1
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d19d      	bne.n	80039f6 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e000      	b.n	8003ad0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003ace:	2302      	movs	r3, #2
  }
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d140      	bne.n	8003b74 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_UART_Receive_IT+0x26>
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e039      	b.n	8003b76 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_UART_Receive_IT+0x38>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e032      	b.n	8003b76 <HAL_UART_Receive_IT+0x9e>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	88fa      	ldrh	r2, [r7, #6]
 8003b22:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	88fa      	ldrh	r2, [r7, #6]
 8003b28:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2222      	movs	r2, #34	; 0x22
 8003b34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b4e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0220 	orr.w	r2, r2, #32
 8003b6e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e000      	b.n	8003b76 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
  }
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10d      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x52>
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f9d2 	bl	8003f78 <UART_Receive_IT>
      return;
 8003bd4:	e0cc      	b.n	8003d70 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80ab 	beq.w	8003d34 <HAL_UART_IRQHandler+0x1b0>
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <HAL_UART_IRQHandler+0x70>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80a0 	beq.w	8003d34 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_UART_IRQHandler+0x90>
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	f043 0201 	orr.w	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_UART_IRQHandler+0xb0>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2c:	f043 0202 	orr.w	r2, r3, #2
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_UART_IRQHandler+0xd0>
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	f043 0204 	orr.w	r2, r3, #4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_UART_IRQHandler+0xf0>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	f043 0208 	orr.w	r2, r3, #8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d078      	beq.n	8003d6e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <HAL_UART_IRQHandler+0x112>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f971 	bl	8003f78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <HAL_UART_IRQHandler+0x13a>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d031      	beq.n	8003d22 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f8ba 	bl	8003e38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d123      	bne.n	8003d1a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d013      	beq.n	8003d12 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cee:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <HAL_UART_IRQHandler+0x1f4>)
 8003cf0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe f96a 	bl	8001fd0 <HAL_DMA_Abort_IT>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d016      	beq.n	8003d30 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	e00e      	b.n	8003d30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f83c 	bl	8003d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	e00a      	b.n	8003d30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f838 	bl	8003d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	e006      	b.n	8003d30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f834 	bl	8003d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003d2e:	e01e      	b.n	8003d6e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d30:	bf00      	nop
    return;
 8003d32:	e01c      	b.n	8003d6e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_UART_IRQHandler+0x1cc>
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f8a7 	bl	8003e9c <UART_Transmit_IT>
    return;
 8003d4e:	e00f      	b.n	8003d70 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_UART_IRQHandler+0x1ec>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f8ef 	bl	8003f48 <UART_EndTransmit_IT>
    return;
 8003d6a:	bf00      	nop
 8003d6c:	e000      	b.n	8003d70 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003d6e:	bf00      	nop
  }
}
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	08003e75 	.word	0x08003e75

08003d7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db4:	e02c      	b.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d028      	beq.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d007      	beq.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dc4:	f7fd fce4 	bl	8001790 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d21d      	bcs.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003de2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e00f      	b.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d0c3      	beq.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e4e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7ff ff7e 	bl	8003d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b21      	cmp	r3, #33	; 0x21
 8003eae:	d144      	bne.n	8003f3a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb8:	d11a      	bne.n	8003ef0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ece:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d105      	bne.n	8003ee4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	1c9a      	adds	r2, r3, #2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	621a      	str	r2, [r3, #32]
 8003ee2:	e00e      	b.n	8003f02 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	621a      	str	r2, [r3, #32]
 8003eee:	e008      	b.n	8003f02 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	1c59      	adds	r1, r3, #1
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6211      	str	r1, [r2, #32]
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e000      	b.n	8003f3c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003f3a:	2302      	movs	r3, #2
  }
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ff07 	bl	8003d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b22      	cmp	r3, #34	; 0x22
 8003f8a:	d171      	bne.n	8004070 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d123      	bne.n	8003fde <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10e      	bne.n	8003fc2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	1c9a      	adds	r2, r3, #2
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8003fc0:	e029      	b.n	8004016 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
 8003fdc:	e01b      	b.n	8004016 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6858      	ldr	r0, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	1c59      	adds	r1, r3, #1
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6291      	str	r1, [r2, #40]	; 0x28
 8003ff6:	b2c2      	uxtb	r2, r0
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e00c      	b.n	8004016 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	1c58      	adds	r0, r3, #1
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	6288      	str	r0, [r1, #40]	; 0x28
 800400e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29b      	uxth	r3, r3
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4619      	mov	r1, r3
 8004024:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004026:	2b00      	cmp	r3, #0
 8004028:	d120      	bne.n	800406c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0220 	bic.w	r2, r2, #32
 8004038:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004048:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc fee2 	bl	8000e2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e002      	b.n	8004072 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	e000      	b.n	8004072 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004070:	2302      	movs	r3, #2
  }
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800407c:	b5b0      	push	{r4, r5, r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040bc:	f023 030c 	bic.w	r3, r3, #12
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	68f9      	ldr	r1, [r7, #12]
 80040c6:	430b      	orrs	r3, r1
 80040c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699a      	ldr	r2, [r3, #24]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e8:	f040 80e4 	bne.w	80042b4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4aab      	ldr	r2, [pc, #684]	; (80043a0 <UART_SetConfig+0x324>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <UART_SetConfig+0x84>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4aaa      	ldr	r2, [pc, #680]	; (80043a4 <UART_SetConfig+0x328>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d16c      	bne.n	80041da <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004100:	f7ff f896 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8004104:	4602      	mov	r2, r0
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	009a      	lsls	r2, r3, #2
 800410e:	441a      	add	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	fbb2 f3f3 	udiv	r3, r2, r3
 800411a:	4aa3      	ldr	r2, [pc, #652]	; (80043a8 <UART_SetConfig+0x32c>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	011c      	lsls	r4, r3, #4
 8004124:	f7ff f884 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8004128:	4602      	mov	r2, r0
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	009a      	lsls	r2, r3, #2
 8004132:	441a      	add	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fbb2 f5f3 	udiv	r5, r2, r3
 800413e:	f7ff f877 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8004142:	4602      	mov	r2, r0
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	009a      	lsls	r2, r3, #2
 800414c:	441a      	add	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	4a93      	ldr	r2, [pc, #588]	; (80043a8 <UART_SetConfig+0x32c>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	2264      	movs	r2, #100	; 0x64
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	1aeb      	subs	r3, r5, r3
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	3332      	adds	r3, #50	; 0x32
 800416c:	4a8e      	ldr	r2, [pc, #568]	; (80043a8 <UART_SetConfig+0x32c>)
 800416e:	fba2 2303 	umull	r2, r3, r2, r3
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800417a:	441c      	add	r4, r3
 800417c:	f7ff f858 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8004180:	4602      	mov	r2, r0
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	009a      	lsls	r2, r3, #2
 800418a:	441a      	add	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	fbb2 f5f3 	udiv	r5, r2, r3
 8004196:	f7ff f84b 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 800419a:	4602      	mov	r2, r0
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009a      	lsls	r2, r3, #2
 80041a4:	441a      	add	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	4a7d      	ldr	r2, [pc, #500]	; (80043a8 <UART_SetConfig+0x32c>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	2264      	movs	r2, #100	; 0x64
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	1aeb      	subs	r3, r5, r3
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	3332      	adds	r3, #50	; 0x32
 80041c4:	4a78      	ldr	r2, [pc, #480]	; (80043a8 <UART_SetConfig+0x32c>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	f003 0207 	and.w	r2, r3, #7
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4422      	add	r2, r4
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	e154      	b.n	8004484 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80041da:	f7ff f815 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 80041de:	4602      	mov	r2, r0
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	009a      	lsls	r2, r3, #2
 80041e8:	441a      	add	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f4:	4a6c      	ldr	r2, [pc, #432]	; (80043a8 <UART_SetConfig+0x32c>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	011c      	lsls	r4, r3, #4
 80041fe:	f7ff f803 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 8004202:	4602      	mov	r2, r0
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	009a      	lsls	r2, r3, #2
 800420c:	441a      	add	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	fbb2 f5f3 	udiv	r5, r2, r3
 8004218:	f7fe fff6 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 800421c:	4602      	mov	r2, r0
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	009a      	lsls	r2, r3, #2
 8004226:	441a      	add	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004232:	4a5d      	ldr	r2, [pc, #372]	; (80043a8 <UART_SetConfig+0x32c>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	2264      	movs	r2, #100	; 0x64
 800423c:	fb02 f303 	mul.w	r3, r2, r3
 8004240:	1aeb      	subs	r3, r5, r3
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	3332      	adds	r3, #50	; 0x32
 8004246:	4a58      	ldr	r2, [pc, #352]	; (80043a8 <UART_SetConfig+0x32c>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004254:	441c      	add	r4, r3
 8004256:	f7fe ffd7 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 800425a:	4602      	mov	r2, r0
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	009a      	lsls	r2, r3, #2
 8004264:	441a      	add	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004270:	f7fe ffca 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 8004274:	4602      	mov	r2, r0
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	009a      	lsls	r2, r3, #2
 800427e:	441a      	add	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	4a47      	ldr	r2, [pc, #284]	; (80043a8 <UART_SetConfig+0x32c>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	2264      	movs	r2, #100	; 0x64
 8004294:	fb02 f303 	mul.w	r3, r2, r3
 8004298:	1aeb      	subs	r3, r5, r3
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	3332      	adds	r3, #50	; 0x32
 800429e:	4a42      	ldr	r2, [pc, #264]	; (80043a8 <UART_SetConfig+0x32c>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	f003 0207 	and.w	r2, r3, #7
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4422      	add	r2, r4
 80042b0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80042b2:	e0e7      	b.n	8004484 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a39      	ldr	r2, [pc, #228]	; (80043a0 <UART_SetConfig+0x324>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <UART_SetConfig+0x24c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a38      	ldr	r2, [pc, #224]	; (80043a4 <UART_SetConfig+0x328>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d171      	bne.n	80043ac <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80042c8:	f7fe ffb2 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	009a      	lsls	r2, r3, #2
 80042d6:	441a      	add	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e2:	4a31      	ldr	r2, [pc, #196]	; (80043a8 <UART_SetConfig+0x32c>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	011c      	lsls	r4, r3, #4
 80042ec:	f7fe ffa0 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 80042f0:	4602      	mov	r2, r0
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	009a      	lsls	r2, r3, #2
 80042fa:	441a      	add	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	fbb2 f5f3 	udiv	r5, r2, r3
 8004306:	f7fe ff93 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 800430a:	4602      	mov	r2, r0
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009a      	lsls	r2, r3, #2
 8004314:	441a      	add	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004320:	4a21      	ldr	r2, [pc, #132]	; (80043a8 <UART_SetConfig+0x32c>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2264      	movs	r2, #100	; 0x64
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	1aeb      	subs	r3, r5, r3
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	3332      	adds	r3, #50	; 0x32
 8004334:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <UART_SetConfig+0x32c>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004340:	441c      	add	r4, r3
 8004342:	f7fe ff75 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8004346:	4602      	mov	r2, r0
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	009a      	lsls	r2, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	fbb2 f5f3 	udiv	r5, r2, r3
 800435c:	f7fe ff68 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8004360:	4602      	mov	r2, r0
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009a      	lsls	r2, r3, #2
 800436a:	441a      	add	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	fbb2 f3f3 	udiv	r3, r2, r3
 8004376:	4a0c      	ldr	r2, [pc, #48]	; (80043a8 <UART_SetConfig+0x32c>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	2264      	movs	r2, #100	; 0x64
 8004380:	fb02 f303 	mul.w	r3, r2, r3
 8004384:	1aeb      	subs	r3, r5, r3
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	3332      	adds	r3, #50	; 0x32
 800438a:	4a07      	ldr	r2, [pc, #28]	; (80043a8 <UART_SetConfig+0x32c>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	f003 020f 	and.w	r2, r3, #15
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4422      	add	r2, r4
 800439c:	609a      	str	r2, [r3, #8]
 800439e:	e071      	b.n	8004484 <UART_SetConfig+0x408>
 80043a0:	40011000 	.word	0x40011000
 80043a4:	40011400 	.word	0x40011400
 80043a8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80043ac:	f7fe ff2c 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 80043b0:	4602      	mov	r2, r0
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	009a      	lsls	r2, r3, #2
 80043ba:	441a      	add	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	4a31      	ldr	r2, [pc, #196]	; (800448c <UART_SetConfig+0x410>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	011c      	lsls	r4, r3, #4
 80043d0:	f7fe ff1a 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	009a      	lsls	r2, r3, #2
 80043de:	441a      	add	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80043ea:	f7fe ff0d 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 80043ee:	4602      	mov	r2, r0
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	009a      	lsls	r2, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	4a21      	ldr	r2, [pc, #132]	; (800448c <UART_SetConfig+0x410>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	2264      	movs	r2, #100	; 0x64
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	1aeb      	subs	r3, r5, r3
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	3332      	adds	r3, #50	; 0x32
 8004418:	4a1c      	ldr	r2, [pc, #112]	; (800448c <UART_SetConfig+0x410>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004424:	441c      	add	r4, r3
 8004426:	f7fe feef 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 800442a:	4602      	mov	r2, r0
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004440:	f7fe fee2 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 8004444:	4602      	mov	r2, r0
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	009a      	lsls	r2, r3, #2
 800444e:	441a      	add	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	fbb2 f3f3 	udiv	r3, r2, r3
 800445a:	4a0c      	ldr	r2, [pc, #48]	; (800448c <UART_SetConfig+0x410>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	2264      	movs	r2, #100	; 0x64
 8004464:	fb02 f303 	mul.w	r3, r2, r3
 8004468:	1aeb      	subs	r3, r5, r3
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	3332      	adds	r3, #50	; 0x32
 800446e:	4a07      	ldr	r2, [pc, #28]	; (800448c <UART_SetConfig+0x410>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	f003 020f 	and.w	r2, r3, #15
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4422      	add	r2, r4
 8004480:	609a      	str	r2, [r3, #8]
}
 8004482:	e7ff      	b.n	8004484 <UART_SetConfig+0x408>
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bdb0      	pop	{r4, r5, r7, pc}
 800448c:	51eb851f 	.word	0x51eb851f

08004490 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800449e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044a2:	2b84      	cmp	r3, #132	; 0x84
 80044a4:	d005      	beq.n	80044b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	3303      	adds	r3, #3
 80044b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044b2:	68fb      	ldr	r3, [r7, #12]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c6:	f3ef 8305 	mrs	r3, IPSR
 80044ca:	607b      	str	r3, [r7, #4]
  return(result);
 80044cc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80044e8:	f001 f8dc 	bl	80056a4 <vTaskStartScheduler>
  
  return osOK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f4:	b089      	sub	sp, #36	; 0x24
 80044f6:	af04      	add	r7, sp, #16
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <osThreadCreate+0x54>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01c      	beq.n	8004546 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685c      	ldr	r4, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681d      	ldr	r5, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691e      	ldr	r6, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff ffb6 	bl	8004490 <makeFreeRtosPriority>
 8004524:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800452e:	9202      	str	r2, [sp, #8]
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	9100      	str	r1, [sp, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	4632      	mov	r2, r6
 8004538:	4629      	mov	r1, r5
 800453a:	4620      	mov	r0, r4
 800453c:	f000 fef7 	bl	800532e <xTaskCreateStatic>
 8004540:	4603      	mov	r3, r0
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e01c      	b.n	8004580 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685c      	ldr	r4, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004552:	b29e      	uxth	r6, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff ff98 	bl	8004490 <makeFreeRtosPriority>
 8004560:	4602      	mov	r2, r0
 8004562:	f107 030c 	add.w	r3, r7, #12
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	9200      	str	r2, [sp, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	4632      	mov	r2, r6
 800456e:	4629      	mov	r1, r5
 8004570:	4620      	mov	r0, r4
 8004572:	f000 ff35 	bl	80053e0 <xTaskCreate>
 8004576:	4603      	mov	r3, r0
 8004578:	2b01      	cmp	r3, #1
 800457a:	d001      	beq.n	8004580 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800457c:	2300      	movs	r3, #0
 800457e:	e000      	b.n	8004582 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004580:	68fb      	ldr	r3, [r7, #12]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800458a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <osDelay+0x16>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	e000      	b.n	80045a2 <osDelay+0x18>
 80045a0:	2301      	movs	r3, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 f84a 	bl	800563c <vTaskDelay>
  
  return osOK;
 80045a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80045b2:	b590      	push	{r4, r7, lr}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af02      	add	r7, sp, #8
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d012      	beq.n	80045ea <osMessageCreate+0x38>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00e      	beq.n	80045ea <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68dc      	ldr	r4, [r3, #12]
 80045dc:	2300      	movs	r3, #0
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	4623      	mov	r3, r4
 80045e2:	f000 f9df 	bl	80049a4 <xQueueGenericCreateStatic>
 80045e6:	4603      	mov	r3, r0
 80045e8:	e008      	b.n	80045fc <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	4619      	mov	r1, r3
 80045f6:	f000 fa47 	bl	8004a88 <xQueueGenericCreate>
 80045fa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	bd90      	pop	{r4, r7, pc}

08004604 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004610:	2300      	movs	r3, #0
 8004612:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <osMessagePut+0x1e>
    ticks = 1;
 800461e:	2301      	movs	r3, #1
 8004620:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004622:	f7ff ff4d 	bl	80044c0 <inHandlerMode>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d018      	beq.n	800465e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800462c:	f107 0210 	add.w	r2, r7, #16
 8004630:	f107 0108 	add.w	r1, r7, #8
 8004634:	2300      	movs	r3, #0
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fb7c 	bl	8004d34 <xQueueGenericSendFromISR>
 800463c:	4603      	mov	r3, r0
 800463e:	2b01      	cmp	r3, #1
 8004640:	d001      	beq.n	8004646 <osMessagePut+0x42>
      return osErrorOS;
 8004642:	23ff      	movs	r3, #255	; 0xff
 8004644:	e018      	b.n	8004678 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d014      	beq.n	8004676 <osMessagePut+0x72>
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <osMessagePut+0x7c>)
 800464e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	e00b      	b.n	8004676 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800465e:	f107 0108 	add.w	r1, r7, #8
 8004662:	2300      	movs	r3, #0
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fa6a 	bl	8004b40 <xQueueGenericSend>
 800466c:	4603      	mov	r3, r0
 800466e:	2b01      	cmp	r3, #1
 8004670:	d001      	beq.n	8004676 <osMessagePut+0x72>
      return osErrorOS;
 8004672:	23ff      	movs	r3, #255	; 0xff
 8004674:	e000      	b.n	8004678 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004684:	b590      	push	{r4, r7, lr}
 8004686:	b08b      	sub	sp, #44	; 0x2c
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	617b      	str	r3, [r7, #20]
    return event;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	461c      	mov	r4, r3
 80046a6:	f107 0314 	add.w	r3, r7, #20
 80046aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046b2:	e054      	b.n	800475e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d103      	bne.n	80046cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ca:	e009      	b.n	80046e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d006      	beq.n	80046e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <osMessageGet+0x5c>
      ticks = 1;
 80046dc:	2301      	movs	r3, #1
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80046e0:	f7ff feee 	bl	80044c0 <inHandlerMode>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01c      	beq.n	8004724 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80046ea:	f107 0220 	add.w	r2, r7, #32
 80046ee:	f107 0314 	add.w	r3, r7, #20
 80046f2:	3304      	adds	r3, #4
 80046f4:	4619      	mov	r1, r3
 80046f6:	68b8      	ldr	r0, [r7, #8]
 80046f8:	f000 fc8c 	bl	8005014 <xQueueReceiveFromISR>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004702:	2310      	movs	r3, #16
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e001      	b.n	800470c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01d      	beq.n	800474e <osMessageGet+0xca>
 8004712:	4b15      	ldr	r3, [pc, #84]	; (8004768 <osMessageGet+0xe4>)
 8004714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	e014      	b.n	800474e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004724:	f107 0314 	add.w	r3, r7, #20
 8004728:	3304      	adds	r3, #4
 800472a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472c:	4619      	mov	r1, r3
 800472e:	68b8      	ldr	r0, [r7, #8]
 8004730:	f000 fb94 	bl	8004e5c <xQueueReceive>
 8004734:	4603      	mov	r3, r0
 8004736:	2b01      	cmp	r3, #1
 8004738:	d102      	bne.n	8004740 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800473a:	2310      	movs	r3, #16
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e006      	b.n	800474e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <osMessageGet+0xc6>
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <osMessageGet+0xc8>
 800474a:	2340      	movs	r3, #64	; 0x40
 800474c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	461c      	mov	r4, r3
 8004752:	f107 0314 	add.w	r3, r7, #20
 8004756:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800475a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	372c      	adds	r7, #44	; 0x2c
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}
 8004766:	bf00      	nop
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f103 0208 	add.w	r2, r3, #8
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f04f 32ff 	mov.w	r2, #4294967295
 8004784:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f103 0208 	add.w	r2, r3, #8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f103 0208 	add.w	r2, r3, #8
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
}
 8004802:	bf00      	nop
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d103      	bne.n	800482e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	e00c      	b.n	8004848 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3308      	adds	r3, #8
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	e002      	b.n	800483c <vListInsert+0x2e>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	429a      	cmp	r2, r3
 8004846:	d2f6      	bcs.n	8004836 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	601a      	str	r2, [r3, #0]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6892      	ldr	r2, [r2, #8]
 8004896:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6852      	ldr	r2, [r2, #4]
 80048a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d103      	bne.n	80048b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	1e5a      	subs	r2, r3, #1
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d109      	bne.n	80048fc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	e7fe      	b.n	80048fa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80048fc:	f001 fcfe 	bl	80062fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004908:	68f9      	ldr	r1, [r7, #12]
 800490a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	441a      	add	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492c:	3b01      	subs	r3, #1
 800492e:	68f9      	ldr	r1, [r7, #12]
 8004930:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	441a      	add	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	22ff      	movs	r2, #255	; 0xff
 8004940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	22ff      	movs	r2, #255	; 0xff
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d114      	bne.n	800497c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01a      	beq.n	8004990 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3310      	adds	r3, #16
 800495e:	4618      	mov	r0, r3
 8004960:	f001 f8e2 	bl	8005b28 <xTaskRemoveFromEventList>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d012      	beq.n	8004990 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800496a:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <xQueueGenericReset+0xcc>)
 800496c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	e009      	b.n	8004990 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3310      	adds	r3, #16
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fef3 	bl	800476c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3324      	adds	r3, #36	; 0x24
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff feee 	bl	800476c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004990:	f001 fce2 	bl	8006358 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004994:	2301      	movs	r3, #1
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	e000ed04 	.word	0xe000ed04

080049a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08e      	sub	sp, #56	; 0x38
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <xQueueGenericCreateStatic+0x28>
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ca:	e7fe      	b.n	80049ca <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <xQueueGenericCreateStatic+0x42>
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
 80049e4:	e7fe      	b.n	80049e4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <xQueueGenericCreateStatic+0x4e>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <xQueueGenericCreateStatic+0x52>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <xQueueGenericCreateStatic+0x54>
 80049f6:	2300      	movs	r3, #0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d109      	bne.n	8004a10 <xQueueGenericCreateStatic+0x6c>
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	623b      	str	r3, [r7, #32]
 8004a0e:	e7fe      	b.n	8004a0e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d102      	bne.n	8004a1c <xQueueGenericCreateStatic+0x78>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <xQueueGenericCreateStatic+0x7c>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <xQueueGenericCreateStatic+0x7e>
 8004a20:	2300      	movs	r3, #0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <xQueueGenericCreateStatic+0x96>
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	e7fe      	b.n	8004a38 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a3a:	2348      	movs	r3, #72	; 0x48
 8004a3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b48      	cmp	r3, #72	; 0x48
 8004a42:	d009      	beq.n	8004a58 <xQueueGenericCreateStatic+0xb4>
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	e7fe      	b.n	8004a56 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00d      	beq.n	8004a7e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	4613      	mov	r3, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f842 	bl	8004b02 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3730      	adds	r7, #48	; 0x30
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	; 0x28
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	4613      	mov	r3, r2
 8004a94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d109      	bne.n	8004ab0 <xQueueGenericCreate+0x28>
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	e7fe      	b.n	8004aae <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	e004      	b.n	8004ac6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	fb02 f303 	mul.w	r3, r2, r3
 8004ac4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3348      	adds	r3, #72	; 0x48
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 fd30 	bl	8006530 <pvPortMalloc>
 8004ad0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00f      	beq.n	8004af8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	3348      	adds	r3, #72	; 0x48
 8004adc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ae6:	79fa      	ldrb	r2, [r7, #7]
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	4613      	mov	r3, r2
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f805 	bl	8004b02 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004af8:	69bb      	ldr	r3, [r7, #24]
	}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3720      	adds	r7, #32
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	e002      	b.n	8004b24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b30:	2101      	movs	r1, #1
 8004b32:	69b8      	ldr	r0, [r7, #24]
 8004b34:	f7ff fece 	bl	80048d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08e      	sub	sp, #56	; 0x38
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <xQueueGenericSend+0x30>
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6e:	e7fe      	b.n	8004b6e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <xQueueGenericSend+0x3e>
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <xQueueGenericSend+0x42>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <xQueueGenericSend+0x44>
 8004b82:	2300      	movs	r3, #0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d109      	bne.n	8004b9c <xQueueGenericSend+0x5c>
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9a:	e7fe      	b.n	8004b9a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d103      	bne.n	8004baa <xQueueGenericSend+0x6a>
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <xQueueGenericSend+0x6e>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <xQueueGenericSend+0x70>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d109      	bne.n	8004bc8 <xQueueGenericSend+0x88>
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	623b      	str	r3, [r7, #32]
 8004bc6:	e7fe      	b.n	8004bc6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bc8:	f001 f96a 	bl	8005ea0 <xTaskGetSchedulerState>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d102      	bne.n	8004bd8 <xQueueGenericSend+0x98>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <xQueueGenericSend+0x9c>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e000      	b.n	8004bde <xQueueGenericSend+0x9e>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <xQueueGenericSend+0xb6>
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	e7fe      	b.n	8004bf4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bf6:	f001 fb81 	bl	80062fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d302      	bcc.n	8004c0c <xQueueGenericSend+0xcc>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d129      	bne.n	8004c60 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c12:	f000 fa7c 	bl	800510e <prvCopyDataToQueue>
 8004c16:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d010      	beq.n	8004c42 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	3324      	adds	r3, #36	; 0x24
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 ff7f 	bl	8005b28 <xTaskRemoveFromEventList>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d013      	beq.n	8004c58 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c30:	4b3f      	ldr	r3, [pc, #252]	; (8004d30 <xQueueGenericSend+0x1f0>)
 8004c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	e00a      	b.n	8004c58 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d007      	beq.n	8004c58 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c48:	4b39      	ldr	r3, [pc, #228]	; (8004d30 <xQueueGenericSend+0x1f0>)
 8004c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c58:	f001 fb7e 	bl	8006358 <vPortExitCritical>
				return pdPASS;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e063      	b.n	8004d28 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d103      	bne.n	8004c6e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c66:	f001 fb77 	bl	8006358 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e05c      	b.n	8004d28 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d106      	bne.n	8004c82 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c74:	f107 0314 	add.w	r3, r7, #20
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 ffb7 	bl	8005bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c82:	f001 fb69 	bl	8006358 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c86:	f000 fd6b 	bl	8005760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c8a:	f001 fb37 	bl	80062fc <vPortEnterCritical>
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c94:	b25b      	sxtb	r3, r3
 8004c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9a:	d103      	bne.n	8004ca4 <xQueueGenericSend+0x164>
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004caa:	b25b      	sxtb	r3, r3
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb0:	d103      	bne.n	8004cba <xQueueGenericSend+0x17a>
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cba:	f001 fb4d 	bl	8006358 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cbe:	1d3a      	adds	r2, r7, #4
 8004cc0:	f107 0314 	add.w	r3, r7, #20
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 ffa6 	bl	8005c18 <xTaskCheckForTimeOut>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d124      	bne.n	8004d1c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cd4:	f000 fb13 	bl	80052fe <prvIsQueueFull>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d018      	beq.n	8004d10 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	3310      	adds	r3, #16
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fefa 	bl	8005ae0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cee:	f000 fa9e 	bl	800522e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cf2:	f000 fd43 	bl	800577c <xTaskResumeAll>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f47f af7c 	bne.w	8004bf6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <xQueueGenericSend+0x1f0>)
 8004d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	e772      	b.n	8004bf6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d12:	f000 fa8c 	bl	800522e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d16:	f000 fd31 	bl	800577c <xTaskResumeAll>
 8004d1a:	e76c      	b.n	8004bf6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d1e:	f000 fa86 	bl	800522e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d22:	f000 fd2b 	bl	800577c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d26:	2300      	movs	r3, #0
		}
	}
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3738      	adds	r7, #56	; 0x38
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	e000ed04 	.word	0xe000ed04

08004d34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08e      	sub	sp, #56	; 0x38
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <xQueueGenericSendFromISR+0x2c>
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5e:	e7fe      	b.n	8004d5e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <xQueueGenericSendFromISR+0x3a>
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <xQueueGenericSendFromISR+0x3e>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <xQueueGenericSendFromISR+0x40>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <xQueueGenericSendFromISR+0x58>
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	623b      	str	r3, [r7, #32]
 8004d8a:	e7fe      	b.n	8004d8a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d103      	bne.n	8004d9a <xQueueGenericSendFromISR+0x66>
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <xQueueGenericSendFromISR+0x6a>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <xQueueGenericSendFromISR+0x6c>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d109      	bne.n	8004db8 <xQueueGenericSendFromISR+0x84>
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	e7fe      	b.n	8004db6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004db8:	f001 fb7c 	bl	80064b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dbc:	f3ef 8211 	mrs	r2, BASEPRI
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	61ba      	str	r2, [r7, #24]
 8004dd2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004dd4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d302      	bcc.n	8004dea <xQueueGenericSendFromISR+0xb6>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d12c      	bne.n	8004e44 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dfa:	f000 f988 	bl	800510e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004dfe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d112      	bne.n	8004e2e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d016      	beq.n	8004e3e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	3324      	adds	r3, #36	; 0x24
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fe87 	bl	8005b28 <xTaskRemoveFromEventList>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00e      	beq.n	8004e3e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00b      	beq.n	8004e3e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	e007      	b.n	8004e3e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e32:	3301      	adds	r3, #1
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	b25a      	sxtb	r2, r3
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004e42:	e001      	b.n	8004e48 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3738      	adds	r7, #56	; 0x38
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08c      	sub	sp, #48	; 0x30
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <xQueueReceive+0x2e>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	623b      	str	r3, [r7, #32]
 8004e88:	e7fe      	b.n	8004e88 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d103      	bne.n	8004e98 <xQueueReceive+0x3c>
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <xQueueReceive+0x40>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <xQueueReceive+0x42>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <xQueueReceive+0x5a>
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	61fb      	str	r3, [r7, #28]
 8004eb4:	e7fe      	b.n	8004eb4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eb6:	f000 fff3 	bl	8005ea0 <xTaskGetSchedulerState>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d102      	bne.n	8004ec6 <xQueueReceive+0x6a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <xQueueReceive+0x6e>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <xQueueReceive+0x70>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <xQueueReceive+0x88>
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	e7fe      	b.n	8004ee2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ee4:	f001 fa0a 	bl	80062fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01f      	beq.n	8004f34 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ef8:	f000 f973 	bl	80051e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	1e5a      	subs	r2, r3, #1
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00f      	beq.n	8004f2c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	3310      	adds	r3, #16
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fe09 	bl	8005b28 <xTaskRemoveFromEventList>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f1c:	4b3c      	ldr	r3, [pc, #240]	; (8005010 <xQueueReceive+0x1b4>)
 8004f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f2c:	f001 fa14 	bl	8006358 <vPortExitCritical>
				return pdPASS;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e069      	b.n	8005008 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f3a:	f001 fa0d 	bl	8006358 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e062      	b.n	8005008 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f48:	f107 0310 	add.w	r3, r7, #16
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fe4d 	bl	8005bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f52:	2301      	movs	r3, #1
 8004f54:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f56:	f001 f9ff 	bl	8006358 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f5a:	f000 fc01 	bl	8005760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f5e:	f001 f9cd 	bl	80062fc <vPortEnterCritical>
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f68:	b25b      	sxtb	r3, r3
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6e:	d103      	bne.n	8004f78 <xQueueReceive+0x11c>
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f7e:	b25b      	sxtb	r3, r3
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d103      	bne.n	8004f8e <xQueueReceive+0x132>
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f8e:	f001 f9e3 	bl	8006358 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f92:	1d3a      	adds	r2, r7, #4
 8004f94:	f107 0310 	add.w	r3, r7, #16
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fe3c 	bl	8005c18 <xTaskCheckForTimeOut>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d123      	bne.n	8004fee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa8:	f000 f993 	bl	80052d2 <prvIsQueueEmpty>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d017      	beq.n	8004fe2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	3324      	adds	r3, #36	; 0x24
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	4611      	mov	r1, r2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fd90 	bl	8005ae0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc2:	f000 f934 	bl	800522e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fc6:	f000 fbd9 	bl	800577c <xTaskResumeAll>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d189      	bne.n	8004ee4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <xQueueReceive+0x1b4>)
 8004fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	e780      	b.n	8004ee4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe4:	f000 f923 	bl	800522e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fe8:	f000 fbc8 	bl	800577c <xTaskResumeAll>
 8004fec:	e77a      	b.n	8004ee4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff0:	f000 f91d 	bl	800522e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ff4:	f000 fbc2 	bl	800577c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ffa:	f000 f96a 	bl	80052d2 <prvIsQueueEmpty>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	f43f af6f 	beq.w	8004ee4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005006:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005008:	4618      	mov	r0, r3
 800500a:	3730      	adds	r7, #48	; 0x30
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	e000ed04 	.word	0xe000ed04

08005014 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08e      	sub	sp, #56	; 0x38
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <xQueueReceiveFromISR+0x2a>
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	623b      	str	r3, [r7, #32]
 800503c:	e7fe      	b.n	800503c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d103      	bne.n	800504c <xQueueReceiveFromISR+0x38>
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <xQueueReceiveFromISR+0x3c>
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <xQueueReceiveFromISR+0x3e>
 8005050:	2300      	movs	r3, #0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <xQueueReceiveFromISR+0x56>
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	e7fe      	b.n	8005068 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800506a:	f001 fa23 	bl	80064b4 <vPortValidateInterruptPriority>
	__asm volatile
 800506e:	f3ef 8211 	mrs	r2, BASEPRI
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	61ba      	str	r2, [r7, #24]
 8005084:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005086:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005088:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	2b00      	cmp	r3, #0
 8005094:	d02f      	beq.n	80050f6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800509c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050a4:	f000 f89d 	bl	80051e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050aa:	1e5a      	subs	r2, r3, #1
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80050b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d112      	bne.n	80050e0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d016      	beq.n	80050f0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	3310      	adds	r3, #16
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fd2e 	bl	8005b28 <xTaskRemoveFromEventList>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00e      	beq.n	80050f0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00b      	beq.n	80050f0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	e007      	b.n	80050f0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80050e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050e4:	3301      	adds	r3, #1
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	b25a      	sxtb	r2, r3
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80050f0:	2301      	movs	r3, #1
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
 80050f4:	e001      	b.n	80050fa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	637b      	str	r3, [r7, #52]	; 0x34
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005106:	4618      	mov	r0, r3
 8005108:	3738      	adds	r7, #56	; 0x38
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b086      	sub	sp, #24
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10d      	bne.n	8005148 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d14d      	bne.n	80051d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fecf 	bl	8005edc <xTaskPriorityDisinherit>
 800513e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	605a      	str	r2, [r3, #4]
 8005146:	e043      	b.n	80051d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d119      	bne.n	8005182 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6898      	ldr	r0, [r3, #8]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	461a      	mov	r2, r3
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	f001 fbe9 	bl	8006930 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	441a      	add	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	429a      	cmp	r2, r3
 8005176:	d32b      	bcc.n	80051d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	e026      	b.n	80051d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	68d8      	ldr	r0, [r3, #12]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	461a      	mov	r2, r3
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	f001 fbcf 	bl	8006930 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	425b      	negs	r3, r3
 800519c:	441a      	add	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d207      	bcs.n	80051be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	425b      	negs	r3, r3
 80051b8:	441a      	add	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d105      	bne.n	80051d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051d8:	697b      	ldr	r3, [r7, #20]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d018      	beq.n	8005226 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	441a      	add	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	429a      	cmp	r2, r3
 800520c:	d303      	bcc.n	8005216 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68d9      	ldr	r1, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	461a      	mov	r2, r3
 8005220:	6838      	ldr	r0, [r7, #0]
 8005222:	f001 fb85 	bl	8006930 <memcpy>
	}
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005236:	f001 f861 	bl	80062fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005240:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005242:	e011      	b.n	8005268 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	2b00      	cmp	r3, #0
 800524a:	d012      	beq.n	8005272 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3324      	adds	r3, #36	; 0x24
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fc69 	bl	8005b28 <xTaskRemoveFromEventList>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800525c:	f000 fd3c 	bl	8005cd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	3b01      	subs	r3, #1
 8005264:	b2db      	uxtb	r3, r3
 8005266:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800526c:	2b00      	cmp	r3, #0
 800526e:	dce9      	bgt.n	8005244 <prvUnlockQueue+0x16>
 8005270:	e000      	b.n	8005274 <prvUnlockQueue+0x46>
					break;
 8005272:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	22ff      	movs	r2, #255	; 0xff
 8005278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800527c:	f001 f86c 	bl	8006358 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005280:	f001 f83c 	bl	80062fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800528a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800528c:	e011      	b.n	80052b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d012      	beq.n	80052bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3310      	adds	r3, #16
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fc44 	bl	8005b28 <xTaskRemoveFromEventList>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052a6:	f000 fd17 	bl	8005cd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052aa:	7bbb      	ldrb	r3, [r7, #14]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	dce9      	bgt.n	800528e <prvUnlockQueue+0x60>
 80052ba:	e000      	b.n	80052be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	22ff      	movs	r2, #255	; 0xff
 80052c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80052c6:	f001 f847 	bl	8006358 <vPortExitCritical>
}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052da:	f001 f80f 	bl	80062fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052e6:	2301      	movs	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	e001      	b.n	80052f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052f0:	f001 f832 	bl	8006358 <vPortExitCritical>

	return xReturn;
 80052f4:	68fb      	ldr	r3, [r7, #12]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005306:	f000 fff9 	bl	80062fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	429a      	cmp	r2, r3
 8005314:	d102      	bne.n	800531c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005316:	2301      	movs	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	e001      	b.n	8005320 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005320:	f001 f81a 	bl	8006358 <vPortExitCritical>

	return xReturn;
 8005324:	68fb      	ldr	r3, [r7, #12]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800532e:	b580      	push	{r7, lr}
 8005330:	b08e      	sub	sp, #56	; 0x38
 8005332:	af04      	add	r7, sp, #16
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800533c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <xTaskCreateStatic+0x28>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	623b      	str	r3, [r7, #32]
 8005354:	e7fe      	b.n	8005354 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <xTaskCreateStatic+0x42>
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	e7fe      	b.n	800536e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005370:	2354      	movs	r3, #84	; 0x54
 8005372:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b54      	cmp	r3, #84	; 0x54
 8005378:	d009      	beq.n	800538e <xTaskCreateStatic+0x60>
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	e7fe      	b.n	800538c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01e      	beq.n	80053d2 <xTaskCreateStatic+0xa4>
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01b      	beq.n	80053d2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053ac:	2300      	movs	r3, #0
 80053ae:	9303      	str	r3, [sp, #12]
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	9302      	str	r3, [sp, #8]
 80053b4:	f107 0314 	add.w	r3, r7, #20
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f850 	bl	800546a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053cc:	f000 f8cc 	bl	8005568 <prvAddNewTaskToReadyList>
 80053d0:	e001      	b.n	80053d6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053d6:	697b      	ldr	r3, [r7, #20]
	}
 80053d8:	4618      	mov	r0, r3
 80053da:	3728      	adds	r7, #40	; 0x28
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08c      	sub	sp, #48	; 0x30
 80053e4:	af04      	add	r7, sp, #16
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4618      	mov	r0, r3
 80053f6:	f001 f89b 	bl	8006530 <pvPortMalloc>
 80053fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00e      	beq.n	8005420 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005402:	2054      	movs	r0, #84	; 0x54
 8005404:	f001 f894 	bl	8006530 <pvPortMalloc>
 8005408:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	631a      	str	r2, [r3, #48]	; 0x30
 8005416:	e005      	b.n	8005424 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005418:	6978      	ldr	r0, [r7, #20]
 800541a:	f001 f94b 	bl	80066b4 <vPortFree>
 800541e:	e001      	b.n	8005424 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005420:	2300      	movs	r3, #0
 8005422:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d017      	beq.n	800545a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	2300      	movs	r3, #0
 8005436:	9303      	str	r3, [sp, #12]
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	9302      	str	r3, [sp, #8]
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f80e 	bl	800546a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800544e:	69f8      	ldr	r0, [r7, #28]
 8005450:	f000 f88a 	bl	8005568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005454:	2301      	movs	r3, #1
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	e002      	b.n	8005460 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800545a:	f04f 33ff 	mov.w	r3, #4294967295
 800545e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005460:	69bb      	ldr	r3, [r7, #24]
	}
 8005462:	4618      	mov	r0, r3
 8005464:	3720      	adds	r7, #32
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b088      	sub	sp, #32
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
 8005476:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005482:	3b01      	subs	r3, #1
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	f023 0307 	bic.w	r3, r3, #7
 8005490:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	2b00      	cmp	r3, #0
 800549a:	d009      	beq.n	80054b0 <prvInitialiseNewTask+0x46>
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	e7fe      	b.n	80054ae <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054b0:	2300      	movs	r3, #0
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	e012      	b.n	80054dc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	4413      	add	r3, r2
 80054bc:	7819      	ldrb	r1, [r3, #0]
 80054be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	4413      	add	r3, r2
 80054c4:	3334      	adds	r3, #52	; 0x34
 80054c6:	460a      	mov	r2, r1
 80054c8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	4413      	add	r3, r2
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d006      	beq.n	80054e4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	3301      	adds	r3, #1
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	2b0f      	cmp	r3, #15
 80054e0:	d9e9      	bls.n	80054b6 <prvInitialiseNewTask+0x4c>
 80054e2:	e000      	b.n	80054e6 <prvInitialiseNewTask+0x7c>
		{
			break;
 80054e4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	2b06      	cmp	r3, #6
 80054f2:	d901      	bls.n	80054f8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054f4:	2306      	movs	r3, #6
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005502:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	2200      	movs	r2, #0
 8005508:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	3304      	adds	r3, #4
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff f94c 	bl	80047ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005516:	3318      	adds	r3, #24
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff f947 	bl	80047ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005522:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	f1c3 0207 	rsb	r2, r3, #7
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005532:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	2200      	movs	r2, #0
 8005538:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	69b8      	ldr	r0, [r7, #24]
 8005548:	f000 fdb2 	bl	80060b0 <pxPortInitialiseStack>
 800554c:	4602      	mov	r2, r0
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800555e:	bf00      	nop
 8005560:	3720      	adds	r7, #32
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005570:	f000 fec4 	bl	80062fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005574:	4b2a      	ldr	r3, [pc, #168]	; (8005620 <prvAddNewTaskToReadyList+0xb8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3301      	adds	r3, #1
 800557a:	4a29      	ldr	r2, [pc, #164]	; (8005620 <prvAddNewTaskToReadyList+0xb8>)
 800557c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800557e:	4b29      	ldr	r3, [pc, #164]	; (8005624 <prvAddNewTaskToReadyList+0xbc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005586:	4a27      	ldr	r2, [pc, #156]	; (8005624 <prvAddNewTaskToReadyList+0xbc>)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800558c:	4b24      	ldr	r3, [pc, #144]	; (8005620 <prvAddNewTaskToReadyList+0xb8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d110      	bne.n	80055b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005594:	f000 fbc4 	bl	8005d20 <prvInitialiseTaskLists>
 8005598:	e00d      	b.n	80055b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800559a:	4b23      	ldr	r3, [pc, #140]	; (8005628 <prvAddNewTaskToReadyList+0xc0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055a2:	4b20      	ldr	r3, [pc, #128]	; (8005624 <prvAddNewTaskToReadyList+0xbc>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d802      	bhi.n	80055b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055b0:	4a1c      	ldr	r2, [pc, #112]	; (8005624 <prvAddNewTaskToReadyList+0xbc>)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055b6:	4b1d      	ldr	r3, [pc, #116]	; (800562c <prvAddNewTaskToReadyList+0xc4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3301      	adds	r3, #1
 80055bc:	4a1b      	ldr	r2, [pc, #108]	; (800562c <prvAddNewTaskToReadyList+0xc4>)
 80055be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	2201      	movs	r2, #1
 80055c6:	409a      	lsls	r2, r3
 80055c8:	4b19      	ldr	r3, [pc, #100]	; (8005630 <prvAddNewTaskToReadyList+0xc8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	4a18      	ldr	r2, [pc, #96]	; (8005630 <prvAddNewTaskToReadyList+0xc8>)
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4a15      	ldr	r2, [pc, #84]	; (8005634 <prvAddNewTaskToReadyList+0xcc>)
 80055e0:	441a      	add	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3304      	adds	r3, #4
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f7ff f8ec 	bl	80047c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055ee:	f000 feb3 	bl	8006358 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055f2:	4b0d      	ldr	r3, [pc, #52]	; (8005628 <prvAddNewTaskToReadyList+0xc0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00e      	beq.n	8005618 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055fa:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <prvAddNewTaskToReadyList+0xbc>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	429a      	cmp	r2, r3
 8005606:	d207      	bcs.n	8005618 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005608:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <prvAddNewTaskToReadyList+0xd0>)
 800560a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005618:	bf00      	nop
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20000414 	.word	0x20000414
 8005624:	20000314 	.word	0x20000314
 8005628:	20000420 	.word	0x20000420
 800562c:	20000430 	.word	0x20000430
 8005630:	2000041c 	.word	0x2000041c
 8005634:	20000318 	.word	0x20000318
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d016      	beq.n	800567c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800564e:	4b13      	ldr	r3, [pc, #76]	; (800569c <vTaskDelay+0x60>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d009      	beq.n	800566a <vTaskDelay+0x2e>
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	e7fe      	b.n	8005668 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800566a:	f000 f879 	bl	8005760 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800566e:	2100      	movs	r1, #0
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fcb7 	bl	8005fe4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005676:	f000 f881 	bl	800577c <xTaskResumeAll>
 800567a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d107      	bne.n	8005692 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005682:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <vTaskDelay+0x64>)
 8005684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	2000043c 	.word	0x2000043c
 80056a0:	e000ed04 	.word	0xe000ed04

080056a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08a      	sub	sp, #40	; 0x28
 80056a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056b2:	463a      	mov	r2, r7
 80056b4:	1d39      	adds	r1, r7, #4
 80056b6:	f107 0308 	add.w	r3, r7, #8
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fa ff80 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056c0:	6839      	ldr	r1, [r7, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	9202      	str	r2, [sp, #8]
 80056c8:	9301      	str	r3, [sp, #4]
 80056ca:	2300      	movs	r3, #0
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	2300      	movs	r3, #0
 80056d0:	460a      	mov	r2, r1
 80056d2:	491d      	ldr	r1, [pc, #116]	; (8005748 <vTaskStartScheduler+0xa4>)
 80056d4:	481d      	ldr	r0, [pc, #116]	; (800574c <vTaskStartScheduler+0xa8>)
 80056d6:	f7ff fe2a 	bl	800532e <xTaskCreateStatic>
 80056da:	4602      	mov	r2, r0
 80056dc:	4b1c      	ldr	r3, [pc, #112]	; (8005750 <vTaskStartScheduler+0xac>)
 80056de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056e0:	4b1b      	ldr	r3, [pc, #108]	; (8005750 <vTaskStartScheduler+0xac>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056e8:	2301      	movs	r3, #1
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	e001      	b.n	80056f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d115      	bne.n	8005724 <vTaskStartScheduler+0x80>
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800570a:	4b12      	ldr	r3, [pc, #72]	; (8005754 <vTaskStartScheduler+0xb0>)
 800570c:	f04f 32ff 	mov.w	r2, #4294967295
 8005710:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005712:	4b11      	ldr	r3, [pc, #68]	; (8005758 <vTaskStartScheduler+0xb4>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005718:	4b10      	ldr	r3, [pc, #64]	; (800575c <vTaskStartScheduler+0xb8>)
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800571e:	f000 fd4f 	bl	80061c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005722:	e00d      	b.n	8005740 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572a:	d109      	bne.n	8005740 <vTaskStartScheduler+0x9c>
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	e7fe      	b.n	800573e <vTaskStartScheduler+0x9a>
}
 8005740:	bf00      	nop
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	08007cf4 	.word	0x08007cf4
 800574c:	08005cf1 	.word	0x08005cf1
 8005750:	20000438 	.word	0x20000438
 8005754:	20000434 	.word	0x20000434
 8005758:	20000420 	.word	0x20000420
 800575c:	20000418 	.word	0x20000418

08005760 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005764:	4b04      	ldr	r3, [pc, #16]	; (8005778 <vTaskSuspendAll+0x18>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3301      	adds	r3, #1
 800576a:	4a03      	ldr	r2, [pc, #12]	; (8005778 <vTaskSuspendAll+0x18>)
 800576c:	6013      	str	r3, [r2, #0]
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	2000043c 	.word	0x2000043c

0800577c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005786:	2300      	movs	r3, #0
 8005788:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800578a:	4b41      	ldr	r3, [pc, #260]	; (8005890 <xTaskResumeAll+0x114>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d109      	bne.n	80057a6 <xTaskResumeAll+0x2a>
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	e7fe      	b.n	80057a4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057a6:	f000 fda9 	bl	80062fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057aa:	4b39      	ldr	r3, [pc, #228]	; (8005890 <xTaskResumeAll+0x114>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	4a37      	ldr	r2, [pc, #220]	; (8005890 <xTaskResumeAll+0x114>)
 80057b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b4:	4b36      	ldr	r3, [pc, #216]	; (8005890 <xTaskResumeAll+0x114>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d161      	bne.n	8005880 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057bc:	4b35      	ldr	r3, [pc, #212]	; (8005894 <xTaskResumeAll+0x118>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d05d      	beq.n	8005880 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057c4:	e02e      	b.n	8005824 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80057c6:	4b34      	ldr	r3, [pc, #208]	; (8005898 <xTaskResumeAll+0x11c>)
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3318      	adds	r3, #24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff f854 	bl	8004880 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3304      	adds	r3, #4
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff f84f 	bl	8004880 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	2201      	movs	r2, #1
 80057e8:	409a      	lsls	r2, r3
 80057ea:	4b2c      	ldr	r3, [pc, #176]	; (800589c <xTaskResumeAll+0x120>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	4a2a      	ldr	r2, [pc, #168]	; (800589c <xTaskResumeAll+0x120>)
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4a27      	ldr	r2, [pc, #156]	; (80058a0 <xTaskResumeAll+0x124>)
 8005802:	441a      	add	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f7fe ffdb 	bl	80047c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	4b23      	ldr	r3, [pc, #140]	; (80058a4 <xTaskResumeAll+0x128>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	429a      	cmp	r2, r3
 800581c:	d302      	bcc.n	8005824 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800581e:	4b22      	ldr	r3, [pc, #136]	; (80058a8 <xTaskResumeAll+0x12c>)
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005824:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <xTaskResumeAll+0x11c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1cc      	bne.n	80057c6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005832:	f000 fb0f 	bl	8005e54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005836:	4b1d      	ldr	r3, [pc, #116]	; (80058ac <xTaskResumeAll+0x130>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d010      	beq.n	8005864 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005842:	f000 f837 	bl	80058b4 <xTaskIncrementTick>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800584c:	4b16      	ldr	r3, [pc, #88]	; (80058a8 <xTaskResumeAll+0x12c>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3b01      	subs	r3, #1
 8005856:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f1      	bne.n	8005842 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <xTaskResumeAll+0x130>)
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005864:	4b10      	ldr	r3, [pc, #64]	; (80058a8 <xTaskResumeAll+0x12c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d009      	beq.n	8005880 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800586c:	2301      	movs	r3, #1
 800586e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005870:	4b0f      	ldr	r3, [pc, #60]	; (80058b0 <xTaskResumeAll+0x134>)
 8005872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005880:	f000 fd6a 	bl	8006358 <vPortExitCritical>

	return xAlreadyYielded;
 8005884:	68bb      	ldr	r3, [r7, #8]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	2000043c 	.word	0x2000043c
 8005894:	20000414 	.word	0x20000414
 8005898:	200003d4 	.word	0x200003d4
 800589c:	2000041c 	.word	0x2000041c
 80058a0:	20000318 	.word	0x20000318
 80058a4:	20000314 	.word	0x20000314
 80058a8:	20000428 	.word	0x20000428
 80058ac:	20000424 	.word	0x20000424
 80058b0:	e000ed04 	.word	0xe000ed04

080058b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058be:	4b50      	ldr	r3, [pc, #320]	; (8005a00 <xTaskIncrementTick+0x14c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f040 808c 	bne.w	80059e0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058c8:	4b4e      	ldr	r3, [pc, #312]	; (8005a04 <xTaskIncrementTick+0x150>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3301      	adds	r3, #1
 80058ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058d0:	4a4c      	ldr	r2, [pc, #304]	; (8005a04 <xTaskIncrementTick+0x150>)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d11f      	bne.n	800591c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80058dc:	4b4a      	ldr	r3, [pc, #296]	; (8005a08 <xTaskIncrementTick+0x154>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d009      	beq.n	80058fa <xTaskIncrementTick+0x46>
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	e7fe      	b.n	80058f8 <xTaskIncrementTick+0x44>
 80058fa:	4b43      	ldr	r3, [pc, #268]	; (8005a08 <xTaskIncrementTick+0x154>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	4b42      	ldr	r3, [pc, #264]	; (8005a0c <xTaskIncrementTick+0x158>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a40      	ldr	r2, [pc, #256]	; (8005a08 <xTaskIncrementTick+0x154>)
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	4a40      	ldr	r2, [pc, #256]	; (8005a0c <xTaskIncrementTick+0x158>)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	4b40      	ldr	r3, [pc, #256]	; (8005a10 <xTaskIncrementTick+0x15c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3301      	adds	r3, #1
 8005914:	4a3e      	ldr	r2, [pc, #248]	; (8005a10 <xTaskIncrementTick+0x15c>)
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	f000 fa9c 	bl	8005e54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800591c:	4b3d      	ldr	r3, [pc, #244]	; (8005a14 <xTaskIncrementTick+0x160>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	429a      	cmp	r2, r3
 8005924:	d34d      	bcc.n	80059c2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005926:	4b38      	ldr	r3, [pc, #224]	; (8005a08 <xTaskIncrementTick+0x154>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <xTaskIncrementTick+0x80>
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <xTaskIncrementTick+0x82>
 8005934:	2300      	movs	r3, #0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800593a:	4b36      	ldr	r3, [pc, #216]	; (8005a14 <xTaskIncrementTick+0x160>)
 800593c:	f04f 32ff 	mov.w	r2, #4294967295
 8005940:	601a      	str	r2, [r3, #0]
					break;
 8005942:	e03e      	b.n	80059c2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005944:	4b30      	ldr	r3, [pc, #192]	; (8005a08 <xTaskIncrementTick+0x154>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d203      	bcs.n	8005964 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800595c:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <xTaskIncrementTick+0x160>)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6013      	str	r3, [r2, #0]
						break;
 8005962:	e02e      	b.n	80059c2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	3304      	adds	r3, #4
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe ff89 	bl	8004880 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d004      	beq.n	8005980 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	3318      	adds	r3, #24
 800597a:	4618      	mov	r0, r3
 800597c:	f7fe ff80 	bl	8004880 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	2201      	movs	r2, #1
 8005986:	409a      	lsls	r2, r3
 8005988:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <xTaskIncrementTick+0x164>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4313      	orrs	r3, r2
 800598e:	4a22      	ldr	r2, [pc, #136]	; (8005a18 <xTaskIncrementTick+0x164>)
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <xTaskIncrementTick+0x168>)
 80059a0:	441a      	add	r2, r3
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f7fe ff0c 	bl	80047c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b2:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <xTaskIncrementTick+0x16c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d3b4      	bcc.n	8005926 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80059bc:	2301      	movs	r3, #1
 80059be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c0:	e7b1      	b.n	8005926 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059c2:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <xTaskIncrementTick+0x16c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c8:	4914      	ldr	r1, [pc, #80]	; (8005a1c <xTaskIncrementTick+0x168>)
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	440b      	add	r3, r1
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d907      	bls.n	80059ea <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80059da:	2301      	movs	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	e004      	b.n	80059ea <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80059e0:	4b10      	ldr	r3, [pc, #64]	; (8005a24 <xTaskIncrementTick+0x170>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3301      	adds	r3, #1
 80059e6:	4a0f      	ldr	r2, [pc, #60]	; (8005a24 <xTaskIncrementTick+0x170>)
 80059e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80059ea:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <xTaskIncrementTick+0x174>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80059f2:	2301      	movs	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80059f6:	697b      	ldr	r3, [r7, #20]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	2000043c 	.word	0x2000043c
 8005a04:	20000418 	.word	0x20000418
 8005a08:	200003cc 	.word	0x200003cc
 8005a0c:	200003d0 	.word	0x200003d0
 8005a10:	2000042c 	.word	0x2000042c
 8005a14:	20000434 	.word	0x20000434
 8005a18:	2000041c 	.word	0x2000041c
 8005a1c:	20000318 	.word	0x20000318
 8005a20:	20000314 	.word	0x20000314
 8005a24:	20000424 	.word	0x20000424
 8005a28:	20000428 	.word	0x20000428

08005a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a32:	4b26      	ldr	r3, [pc, #152]	; (8005acc <vTaskSwitchContext+0xa0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a3a:	4b25      	ldr	r3, [pc, #148]	; (8005ad0 <vTaskSwitchContext+0xa4>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a40:	e03e      	b.n	8005ac0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005a42:	4b23      	ldr	r3, [pc, #140]	; (8005ad0 <vTaskSwitchContext+0xa4>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005a48:	4b22      	ldr	r3, [pc, #136]	; (8005ad4 <vTaskSwitchContext+0xa8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	fab3 f383 	clz	r3, r3
 8005a54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a56:	7afb      	ldrb	r3, [r7, #11]
 8005a58:	f1c3 031f 	rsb	r3, r3, #31
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	491e      	ldr	r1, [pc, #120]	; (8005ad8 <vTaskSwitchContext+0xac>)
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	607b      	str	r3, [r7, #4]
 8005a84:	e7fe      	b.n	8005a84 <vTaskSwitchContext+0x58>
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4a11      	ldr	r2, [pc, #68]	; (8005ad8 <vTaskSwitchContext+0xac>)
 8005a92:	4413      	add	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	605a      	str	r2, [r3, #4]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d104      	bne.n	8005ab6 <vTaskSwitchContext+0x8a>
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4a07      	ldr	r2, [pc, #28]	; (8005adc <vTaskSwitchContext+0xb0>)
 8005abe:	6013      	str	r3, [r2, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	2000043c 	.word	0x2000043c
 8005ad0:	20000428 	.word	0x20000428
 8005ad4:	2000041c 	.word	0x2000041c
 8005ad8:	20000318 	.word	0x20000318
 8005adc:	20000314 	.word	0x20000314

08005ae0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d109      	bne.n	8005b04 <vTaskPlaceOnEventList+0x24>
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	e7fe      	b.n	8005b02 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b04:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <vTaskPlaceOnEventList+0x44>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3318      	adds	r3, #24
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fe fe7e 	bl	800480e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b12:	2101      	movs	r1, #1
 8005b14:	6838      	ldr	r0, [r7, #0]
 8005b16:	f000 fa65 	bl	8005fe4 <prvAddCurrentTaskToDelayedList>
}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000314 	.word	0x20000314

08005b28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <xTaskRemoveFromEventList+0x2a>
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	e7fe      	b.n	8005b50 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	3318      	adds	r3, #24
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fe92 	bl	8004880 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b5c:	4b1d      	ldr	r3, [pc, #116]	; (8005bd4 <xTaskRemoveFromEventList+0xac>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d11c      	bne.n	8005b9e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fe fe89 	bl	8004880 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	2201      	movs	r2, #1
 8005b74:	409a      	lsls	r2, r3
 8005b76:	4b18      	ldr	r3, [pc, #96]	; (8005bd8 <xTaskRemoveFromEventList+0xb0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	4a16      	ldr	r2, [pc, #88]	; (8005bd8 <xTaskRemoveFromEventList+0xb0>)
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4a13      	ldr	r2, [pc, #76]	; (8005bdc <xTaskRemoveFromEventList+0xb4>)
 8005b8e:	441a      	add	r2, r3
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4619      	mov	r1, r3
 8005b96:	4610      	mov	r0, r2
 8005b98:	f7fe fe15 	bl	80047c6 <vListInsertEnd>
 8005b9c:	e005      	b.n	8005baa <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	3318      	adds	r3, #24
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	480e      	ldr	r0, [pc, #56]	; (8005be0 <xTaskRemoveFromEventList+0xb8>)
 8005ba6:	f7fe fe0e 	bl	80047c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bae:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <xTaskRemoveFromEventList+0xbc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d905      	bls.n	8005bc4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <xTaskRemoveFromEventList+0xc0>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	e001      	b.n	8005bc8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005bc8:	697b      	ldr	r3, [r7, #20]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	2000043c 	.word	0x2000043c
 8005bd8:	2000041c 	.word	0x2000041c
 8005bdc:	20000318 	.word	0x20000318
 8005be0:	200003d4 	.word	0x200003d4
 8005be4:	20000314 	.word	0x20000314
 8005be8:	20000428 	.word	0x20000428

08005bec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <vTaskInternalSetTimeOutState+0x24>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <vTaskInternalSetTimeOutState+0x28>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	605a      	str	r2, [r3, #4]
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	2000042c 	.word	0x2000042c
 8005c14:	20000418 	.word	0x20000418

08005c18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d109      	bne.n	8005c3c <xTaskCheckForTimeOut+0x24>
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	e7fe      	b.n	8005c3a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <xTaskCheckForTimeOut+0x3e>
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	e7fe      	b.n	8005c54 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005c56:	f000 fb51 	bl	80062fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c5a:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <xTaskCheckForTimeOut+0xb8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c72:	d102      	bne.n	8005c7a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	e023      	b.n	8005cc2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b15      	ldr	r3, [pc, #84]	; (8005cd4 <xTaskCheckForTimeOut+0xbc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d007      	beq.n	8005c96 <xTaskCheckForTimeOut+0x7e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d302      	bcc.n	8005c96 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	61fb      	str	r3, [r7, #28]
 8005c94:	e015      	b.n	8005cc2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d20b      	bcs.n	8005cb8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	1ad2      	subs	r2, r2, r3
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff ff9d 	bl	8005bec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	e004      	b.n	8005cc2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cc2:	f000 fb49 	bl	8006358 <vPortExitCritical>

	return xReturn;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3720      	adds	r7, #32
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000418 	.word	0x20000418
 8005cd4:	2000042c 	.word	0x2000042c

08005cd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cdc:	4b03      	ldr	r3, [pc, #12]	; (8005cec <vTaskMissedYield+0x14>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	20000428 	.word	0x20000428

08005cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cf8:	f000 f852 	bl	8005da0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <prvIdleTask+0x28>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d9f9      	bls.n	8005cf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d04:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <prvIdleTask+0x2c>)
 8005d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d14:	e7f0      	b.n	8005cf8 <prvIdleTask+0x8>
 8005d16:	bf00      	nop
 8005d18:	20000318 	.word	0x20000318
 8005d1c:	e000ed04 	.word	0xe000ed04

08005d20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d26:	2300      	movs	r3, #0
 8005d28:	607b      	str	r3, [r7, #4]
 8005d2a:	e00c      	b.n	8005d46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4a12      	ldr	r2, [pc, #72]	; (8005d80 <prvInitialiseTaskLists+0x60>)
 8005d38:	4413      	add	r3, r2
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fd16 	bl	800476c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3301      	adds	r3, #1
 8005d44:	607b      	str	r3, [r7, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b06      	cmp	r3, #6
 8005d4a:	d9ef      	bls.n	8005d2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d4c:	480d      	ldr	r0, [pc, #52]	; (8005d84 <prvInitialiseTaskLists+0x64>)
 8005d4e:	f7fe fd0d 	bl	800476c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d52:	480d      	ldr	r0, [pc, #52]	; (8005d88 <prvInitialiseTaskLists+0x68>)
 8005d54:	f7fe fd0a 	bl	800476c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d58:	480c      	ldr	r0, [pc, #48]	; (8005d8c <prvInitialiseTaskLists+0x6c>)
 8005d5a:	f7fe fd07 	bl	800476c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d5e:	480c      	ldr	r0, [pc, #48]	; (8005d90 <prvInitialiseTaskLists+0x70>)
 8005d60:	f7fe fd04 	bl	800476c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d64:	480b      	ldr	r0, [pc, #44]	; (8005d94 <prvInitialiseTaskLists+0x74>)
 8005d66:	f7fe fd01 	bl	800476c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <prvInitialiseTaskLists+0x78>)
 8005d6c:	4a05      	ldr	r2, [pc, #20]	; (8005d84 <prvInitialiseTaskLists+0x64>)
 8005d6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d70:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <prvInitialiseTaskLists+0x7c>)
 8005d72:	4a05      	ldr	r2, [pc, #20]	; (8005d88 <prvInitialiseTaskLists+0x68>)
 8005d74:	601a      	str	r2, [r3, #0]
}
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000318 	.word	0x20000318
 8005d84:	200003a4 	.word	0x200003a4
 8005d88:	200003b8 	.word	0x200003b8
 8005d8c:	200003d4 	.word	0x200003d4
 8005d90:	200003e8 	.word	0x200003e8
 8005d94:	20000400 	.word	0x20000400
 8005d98:	200003cc 	.word	0x200003cc
 8005d9c:	200003d0 	.word	0x200003d0

08005da0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005da6:	e019      	b.n	8005ddc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005da8:	f000 faa8 	bl	80062fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005dac:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <prvCheckTasksWaitingTermination+0x4c>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fe fd61 	bl	8004880 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <prvCheckTasksWaitingTermination+0x50>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	4a0a      	ldr	r2, [pc, #40]	; (8005df0 <prvCheckTasksWaitingTermination+0x50>)
 8005dc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <prvCheckTasksWaitingTermination+0x54>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <prvCheckTasksWaitingTermination+0x54>)
 8005dd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dd2:	f000 fac1 	bl	8006358 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f80e 	bl	8005df8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <prvCheckTasksWaitingTermination+0x54>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e1      	bne.n	8005da8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005de4:	bf00      	nop
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	200003e8 	.word	0x200003e8
 8005df0:	20000414 	.word	0x20000414
 8005df4:	200003fc 	.word	0x200003fc

08005df8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d108      	bne.n	8005e1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fc50 	bl	80066b4 <vPortFree>
				vPortFree( pxTCB );
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fc4d 	bl	80066b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e1a:	e017      	b.n	8005e4c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d103      	bne.n	8005e2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fc44 	bl	80066b4 <vPortFree>
	}
 8005e2c:	e00e      	b.n	8005e4c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d009      	beq.n	8005e4c <prvDeleteTCB+0x54>
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	e7fe      	b.n	8005e4a <prvDeleteTCB+0x52>
	}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e5a:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <prvResetNextTaskUnblockTime+0x44>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <prvResetNextTaskUnblockTime+0x14>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <prvResetNextTaskUnblockTime+0x16>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d004      	beq.n	8005e78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e6e:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <prvResetNextTaskUnblockTime+0x48>)
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295
 8005e74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e76:	e008      	b.n	8005e8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e78:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <prvResetNextTaskUnblockTime+0x44>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4a05      	ldr	r2, [pc, #20]	; (8005e9c <prvResetNextTaskUnblockTime+0x48>)
 8005e88:	6013      	str	r3, [r2, #0]
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	200003cc 	.word	0x200003cc
 8005e9c:	20000434 	.word	0x20000434

08005ea0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <xTaskGetSchedulerState+0x34>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	e008      	b.n	8005ec6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eb4:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <xTaskGetSchedulerState+0x38>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	607b      	str	r3, [r7, #4]
 8005ec0:	e001      	b.n	8005ec6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ec6:	687b      	ldr	r3, [r7, #4]
	}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	20000420 	.word	0x20000420
 8005ed8:	2000043c 	.word	0x2000043c

08005edc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d06c      	beq.n	8005fcc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ef2:	4b39      	ldr	r3, [pc, #228]	; (8005fd8 <xTaskPriorityDisinherit+0xfc>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d009      	beq.n	8005f10 <xTaskPriorityDisinherit+0x34>
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	e7fe      	b.n	8005f0e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d109      	bne.n	8005f2c <xTaskPriorityDisinherit+0x50>
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	60bb      	str	r3, [r7, #8]
 8005f2a:	e7fe      	b.n	8005f2a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f30:	1e5a      	subs	r2, r3, #1
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d044      	beq.n	8005fcc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d140      	bne.n	8005fcc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe fc96 	bl	8004880 <uxListRemove>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d115      	bne.n	8005f86 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5e:	491f      	ldr	r1, [pc, #124]	; (8005fdc <xTaskPriorityDisinherit+0x100>)
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <xTaskPriorityDisinherit+0xaa>
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	2201      	movs	r2, #1
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	43da      	mvns	r2, r3
 8005f7c:	4b18      	ldr	r3, [pc, #96]	; (8005fe0 <xTaskPriorityDisinherit+0x104>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4013      	ands	r3, r2
 8005f82:	4a17      	ldr	r2, [pc, #92]	; (8005fe0 <xTaskPriorityDisinherit+0x104>)
 8005f84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	f1c3 0207 	rsb	r2, r3, #7
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	409a      	lsls	r2, r3
 8005fa2:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <xTaskPriorityDisinherit+0x104>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	4a0d      	ldr	r2, [pc, #52]	; (8005fe0 <xTaskPriorityDisinherit+0x104>)
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <xTaskPriorityDisinherit+0x100>)
 8005fba:	441a      	add	r2, r3
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7fe fbff 	bl	80047c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fcc:	697b      	ldr	r3, [r7, #20]
	}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000314 	.word	0x20000314
 8005fdc:	20000318 	.word	0x20000318
 8005fe0:	2000041c 	.word	0x2000041c

08005fe4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fee:	4b29      	ldr	r3, [pc, #164]	; (8006094 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ff4:	4b28      	ldr	r3, [pc, #160]	; (8006098 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fc40 	bl	8004880 <uxListRemove>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10b      	bne.n	800601e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006006:	4b24      	ldr	r3, [pc, #144]	; (8006098 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	2201      	movs	r2, #1
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	43da      	mvns	r2, r3
 8006014:	4b21      	ldr	r3, [pc, #132]	; (800609c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4013      	ands	r3, r2
 800601a:	4a20      	ldr	r2, [pc, #128]	; (800609c <prvAddCurrentTaskToDelayedList+0xb8>)
 800601c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d10a      	bne.n	800603c <prvAddCurrentTaskToDelayedList+0x58>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800602c:	4b1a      	ldr	r3, [pc, #104]	; (8006098 <prvAddCurrentTaskToDelayedList+0xb4>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	481a      	ldr	r0, [pc, #104]	; (80060a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006036:	f7fe fbc6 	bl	80047c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800603a:	e026      	b.n	800608a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4413      	add	r3, r2
 8006042:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006044:	4b14      	ldr	r3, [pc, #80]	; (8006098 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	429a      	cmp	r2, r3
 8006052:	d209      	bcs.n	8006068 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006054:	4b13      	ldr	r3, [pc, #76]	; (80060a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <prvAddCurrentTaskToDelayedList+0xb4>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3304      	adds	r3, #4
 800605e:	4619      	mov	r1, r3
 8006060:	4610      	mov	r0, r2
 8006062:	f7fe fbd4 	bl	800480e <vListInsert>
}
 8006066:	e010      	b.n	800608a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006068:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <prvAddCurrentTaskToDelayedList+0xb4>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3304      	adds	r3, #4
 8006072:	4619      	mov	r1, r3
 8006074:	4610      	mov	r0, r2
 8006076:	f7fe fbca 	bl	800480e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800607a:	4b0c      	ldr	r3, [pc, #48]	; (80060ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	429a      	cmp	r2, r3
 8006082:	d202      	bcs.n	800608a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006084:	4a09      	ldr	r2, [pc, #36]	; (80060ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	6013      	str	r3, [r2, #0]
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000418 	.word	0x20000418
 8006098:	20000314 	.word	0x20000314
 800609c:	2000041c 	.word	0x2000041c
 80060a0:	20000400 	.word	0x20000400
 80060a4:	200003d0 	.word	0x200003d0
 80060a8:	200003cc 	.word	0x200003cc
 80060ac:	20000434 	.word	0x20000434

080060b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3b04      	subs	r3, #4
 80060c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3b04      	subs	r3, #4
 80060ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f023 0201 	bic.w	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3b04      	subs	r3, #4
 80060de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060e0:	4a0c      	ldr	r2, [pc, #48]	; (8006114 <pxPortInitialiseStack+0x64>)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3b14      	subs	r3, #20
 80060ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3b04      	subs	r3, #4
 80060f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f06f 0202 	mvn.w	r2, #2
 80060fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3b20      	subs	r3, #32
 8006104:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006106:	68fb      	ldr	r3, [r7, #12]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	08006119 	.word	0x08006119

08006118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006122:	4b11      	ldr	r3, [pc, #68]	; (8006168 <prvTaskExitError+0x50>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612a:	d009      	beq.n	8006140 <prvTaskExitError+0x28>
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	e7fe      	b.n	800613e <prvTaskExitError+0x26>
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006152:	bf00      	nop
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0fc      	beq.n	8006154 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	20000024 	.word	0x20000024
 800616c:	00000000 	.word	0x00000000

08006170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <pxCurrentTCBConst2>)
 8006172:	6819      	ldr	r1, [r3, #0]
 8006174:	6808      	ldr	r0, [r1, #0]
 8006176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617a:	f380 8809 	msr	PSP, r0
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f380 8811 	msr	BASEPRI, r0
 800618a:	4770      	bx	lr
 800618c:	f3af 8000 	nop.w

08006190 <pxCurrentTCBConst2>:
 8006190:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop

08006198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006198:	4808      	ldr	r0, [pc, #32]	; (80061bc <prvPortStartFirstTask+0x24>)
 800619a:	6800      	ldr	r0, [r0, #0]
 800619c:	6800      	ldr	r0, [r0, #0]
 800619e:	f380 8808 	msr	MSP, r0
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f380 8814 	msr	CONTROL, r0
 80061aa:	b662      	cpsie	i
 80061ac:	b661      	cpsie	f
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	df00      	svc	0
 80061b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061ba:	bf00      	nop
 80061bc:	e000ed08 	.word	0xe000ed08

080061c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061c6:	4b44      	ldr	r3, [pc, #272]	; (80062d8 <xPortStartScheduler+0x118>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a44      	ldr	r2, [pc, #272]	; (80062dc <xPortStartScheduler+0x11c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d109      	bne.n	80061e4 <xPortStartScheduler+0x24>
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	e7fe      	b.n	80061e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061e4:	4b3c      	ldr	r3, [pc, #240]	; (80062d8 <xPortStartScheduler+0x118>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a3d      	ldr	r2, [pc, #244]	; (80062e0 <xPortStartScheduler+0x120>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d109      	bne.n	8006202 <xPortStartScheduler+0x42>
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	e7fe      	b.n	8006200 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006202:	4b38      	ldr	r3, [pc, #224]	; (80062e4 <xPortStartScheduler+0x124>)
 8006204:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	b2db      	uxtb	r3, r3
 800620c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006224:	b2da      	uxtb	r2, r3
 8006226:	4b30      	ldr	r3, [pc, #192]	; (80062e8 <xPortStartScheduler+0x128>)
 8006228:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800622a:	4b30      	ldr	r3, [pc, #192]	; (80062ec <xPortStartScheduler+0x12c>)
 800622c:	2207      	movs	r2, #7
 800622e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006230:	e009      	b.n	8006246 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006232:	4b2e      	ldr	r3, [pc, #184]	; (80062ec <xPortStartScheduler+0x12c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3b01      	subs	r3, #1
 8006238:	4a2c      	ldr	r2, [pc, #176]	; (80062ec <xPortStartScheduler+0x12c>)
 800623a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	b2db      	uxtb	r3, r3
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	b2db      	uxtb	r3, r3
 8006244:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624e:	2b80      	cmp	r3, #128	; 0x80
 8006250:	d0ef      	beq.n	8006232 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006252:	4b26      	ldr	r3, [pc, #152]	; (80062ec <xPortStartScheduler+0x12c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f1c3 0307 	rsb	r3, r3, #7
 800625a:	2b04      	cmp	r3, #4
 800625c:	d009      	beq.n	8006272 <xPortStartScheduler+0xb2>
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	60bb      	str	r3, [r7, #8]
 8006270:	e7fe      	b.n	8006270 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006272:	4b1e      	ldr	r3, [pc, #120]	; (80062ec <xPortStartScheduler+0x12c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	021b      	lsls	r3, r3, #8
 8006278:	4a1c      	ldr	r2, [pc, #112]	; (80062ec <xPortStartScheduler+0x12c>)
 800627a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800627c:	4b1b      	ldr	r3, [pc, #108]	; (80062ec <xPortStartScheduler+0x12c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006284:	4a19      	ldr	r2, [pc, #100]	; (80062ec <xPortStartScheduler+0x12c>)
 8006286:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	b2da      	uxtb	r2, r3
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006290:	4b17      	ldr	r3, [pc, #92]	; (80062f0 <xPortStartScheduler+0x130>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a16      	ldr	r2, [pc, #88]	; (80062f0 <xPortStartScheduler+0x130>)
 8006296:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800629a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800629c:	4b14      	ldr	r3, [pc, #80]	; (80062f0 <xPortStartScheduler+0x130>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a13      	ldr	r2, [pc, #76]	; (80062f0 <xPortStartScheduler+0x130>)
 80062a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062a8:	f000 f8d6 	bl	8006458 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062ac:	4b11      	ldr	r3, [pc, #68]	; (80062f4 <xPortStartScheduler+0x134>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062b2:	f000 f8f5 	bl	80064a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062b6:	4b10      	ldr	r3, [pc, #64]	; (80062f8 <xPortStartScheduler+0x138>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a0f      	ldr	r2, [pc, #60]	; (80062f8 <xPortStartScheduler+0x138>)
 80062bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062c2:	f7ff ff69 	bl	8006198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062c6:	f7ff fbb1 	bl	8005a2c <vTaskSwitchContext>
	prvTaskExitError();
 80062ca:	f7ff ff25 	bl	8006118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	e000ed00 	.word	0xe000ed00
 80062dc:	410fc271 	.word	0x410fc271
 80062e0:	410fc270 	.word	0x410fc270
 80062e4:	e000e400 	.word	0xe000e400
 80062e8:	20000440 	.word	0x20000440
 80062ec:	20000444 	.word	0x20000444
 80062f0:	e000ed20 	.word	0xe000ed20
 80062f4:	20000024 	.word	0x20000024
 80062f8:	e000ef34 	.word	0xe000ef34

080062fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006314:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <vPortEnterCritical+0x54>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3301      	adds	r3, #1
 800631a:	4a0d      	ldr	r2, [pc, #52]	; (8006350 <vPortEnterCritical+0x54>)
 800631c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800631e:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <vPortEnterCritical+0x54>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d10e      	bne.n	8006344 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <vPortEnterCritical+0x58>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d009      	beq.n	8006344 <vPortEnterCritical+0x48>
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	603b      	str	r3, [r7, #0]
 8006342:	e7fe      	b.n	8006342 <vPortEnterCritical+0x46>
	}
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	20000024 	.word	0x20000024
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800635e:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <vPortExitCritical+0x4c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d109      	bne.n	800637a <vPortExitCritical+0x22>
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	607b      	str	r3, [r7, #4]
 8006378:	e7fe      	b.n	8006378 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800637a:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <vPortExitCritical+0x4c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3b01      	subs	r3, #1
 8006380:	4a08      	ldr	r2, [pc, #32]	; (80063a4 <vPortExitCritical+0x4c>)
 8006382:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <vPortExitCritical+0x4c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d104      	bne.n	8006396 <vPortExitCritical+0x3e>
 800638c:	2300      	movs	r3, #0
 800638e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	20000024 	.word	0x20000024
	...

080063b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063b0:	f3ef 8009 	mrs	r0, PSP
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	4b15      	ldr	r3, [pc, #84]	; (8006410 <pxCurrentTCBConst>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	f01e 0f10 	tst.w	lr, #16
 80063c0:	bf08      	it	eq
 80063c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ca:	6010      	str	r0, [r2, #0]
 80063cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063d4:	f380 8811 	msr	BASEPRI, r0
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f7ff fb24 	bl	8005a2c <vTaskSwitchContext>
 80063e4:	f04f 0000 	mov.w	r0, #0
 80063e8:	f380 8811 	msr	BASEPRI, r0
 80063ec:	bc09      	pop	{r0, r3}
 80063ee:	6819      	ldr	r1, [r3, #0]
 80063f0:	6808      	ldr	r0, [r1, #0]
 80063f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f6:	f01e 0f10 	tst.w	lr, #16
 80063fa:	bf08      	it	eq
 80063fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006400:	f380 8809 	msr	PSP, r0
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	f3af 8000 	nop.w

08006410 <pxCurrentTCBConst>:
 8006410:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop

08006418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006430:	f7ff fa40 	bl	80058b4 <xTaskIncrementTick>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <SysTick_Handler+0x3c>)
 800643c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	2300      	movs	r3, #0
 8006444:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800644c:	bf00      	nop
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	e000ed04 	.word	0xe000ed04

08006458 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <vPortSetupTimerInterrupt+0x34>)
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006462:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <vPortSetupTimerInterrupt+0x38>)
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006468:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <vPortSetupTimerInterrupt+0x3c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a0a      	ldr	r2, [pc, #40]	; (8006498 <vPortSetupTimerInterrupt+0x40>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	099b      	lsrs	r3, r3, #6
 8006474:	4a09      	ldr	r2, [pc, #36]	; (800649c <vPortSetupTimerInterrupt+0x44>)
 8006476:	3b01      	subs	r3, #1
 8006478:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800647a:	4b04      	ldr	r3, [pc, #16]	; (800648c <vPortSetupTimerInterrupt+0x34>)
 800647c:	2207      	movs	r2, #7
 800647e:	601a      	str	r2, [r3, #0]
}
 8006480:	bf00      	nop
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	e000e010 	.word	0xe000e010
 8006490:	e000e018 	.word	0xe000e018
 8006494:	2000001c 	.word	0x2000001c
 8006498:	10624dd3 	.word	0x10624dd3
 800649c:	e000e014 	.word	0xe000e014

080064a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80064b0 <vPortEnableVFP+0x10>
 80064a4:	6801      	ldr	r1, [r0, #0]
 80064a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064aa:	6001      	str	r1, [r0, #0]
 80064ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064ae:	bf00      	nop
 80064b0:	e000ed88 	.word	0xe000ed88

080064b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064ba:	f3ef 8305 	mrs	r3, IPSR
 80064be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b0f      	cmp	r3, #15
 80064c4:	d913      	bls.n	80064ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064c6:	4a16      	ldr	r2, [pc, #88]	; (8006520 <vPortValidateInterruptPriority+0x6c>)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064d0:	4b14      	ldr	r3, [pc, #80]	; (8006524 <vPortValidateInterruptPriority+0x70>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	7afa      	ldrb	r2, [r7, #11]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d209      	bcs.n	80064ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	607b      	str	r3, [r7, #4]
 80064ec:	e7fe      	b.n	80064ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064ee:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <vPortValidateInterruptPriority+0x74>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064f6:	4b0d      	ldr	r3, [pc, #52]	; (800652c <vPortValidateInterruptPriority+0x78>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d909      	bls.n	8006512 <vPortValidateInterruptPriority+0x5e>
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	e7fe      	b.n	8006510 <vPortValidateInterruptPriority+0x5c>
	}
 8006512:	bf00      	nop
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	e000e3f0 	.word	0xe000e3f0
 8006524:	20000440 	.word	0x20000440
 8006528:	e000ed0c 	.word	0xe000ed0c
 800652c:	20000444 	.word	0x20000444

08006530 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08a      	sub	sp, #40	; 0x28
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800653c:	f7ff f910 	bl	8005760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006540:	4b57      	ldr	r3, [pc, #348]	; (80066a0 <pvPortMalloc+0x170>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006548:	f000 f90c 	bl	8006764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800654c:	4b55      	ldr	r3, [pc, #340]	; (80066a4 <pvPortMalloc+0x174>)
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4013      	ands	r3, r2
 8006554:	2b00      	cmp	r3, #0
 8006556:	f040 808c 	bne.w	8006672 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01c      	beq.n	800659a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006560:	2208      	movs	r2, #8
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4413      	add	r3, r2
 8006566:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	2b00      	cmp	r3, #0
 8006570:	d013      	beq.n	800659a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f023 0307 	bic.w	r3, r3, #7
 8006578:	3308      	adds	r3, #8
 800657a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <pvPortMalloc+0x6a>
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e7fe      	b.n	8006598 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d068      	beq.n	8006672 <pvPortMalloc+0x142>
 80065a0:	4b41      	ldr	r3, [pc, #260]	; (80066a8 <pvPortMalloc+0x178>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d863      	bhi.n	8006672 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065aa:	4b40      	ldr	r3, [pc, #256]	; (80066ac <pvPortMalloc+0x17c>)
 80065ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065ae:	4b3f      	ldr	r3, [pc, #252]	; (80066ac <pvPortMalloc+0x17c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065b4:	e004      	b.n	80065c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d903      	bls.n	80065d2 <pvPortMalloc+0xa2>
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f1      	bne.n	80065b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065d2:	4b33      	ldr	r3, [pc, #204]	; (80066a0 <pvPortMalloc+0x170>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d8:	429a      	cmp	r2, r3
 80065da:	d04a      	beq.n	8006672 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2208      	movs	r2, #8
 80065e2:	4413      	add	r3, r2
 80065e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	1ad2      	subs	r2, r2, r3
 80065f6:	2308      	movs	r3, #8
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d91e      	bls.n	800663c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4413      	add	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <pvPortMalloc+0xf4>
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	613b      	str	r3, [r7, #16]
 8006622:	e7fe      	b.n	8006622 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	1ad2      	subs	r2, r2, r3
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006636:	69b8      	ldr	r0, [r7, #24]
 8006638:	f000 f8f6 	bl	8006828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800663c:	4b1a      	ldr	r3, [pc, #104]	; (80066a8 <pvPortMalloc+0x178>)
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <pvPortMalloc+0x178>)
 8006648:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800664a:	4b17      	ldr	r3, [pc, #92]	; (80066a8 <pvPortMalloc+0x178>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	4b18      	ldr	r3, [pc, #96]	; (80066b0 <pvPortMalloc+0x180>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d203      	bcs.n	800665e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006656:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <pvPortMalloc+0x178>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <pvPortMalloc+0x180>)
 800665c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <pvPortMalloc+0x174>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	431a      	orrs	r2, r3
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006672:	f7ff f883 	bl	800577c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	2b00      	cmp	r3, #0
 800667e:	d009      	beq.n	8006694 <pvPortMalloc+0x164>
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	e7fe      	b.n	8006692 <pvPortMalloc+0x162>
	return pvReturn;
 8006694:	69fb      	ldr	r3, [r7, #28]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3728      	adds	r7, #40	; 0x28
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20004050 	.word	0x20004050
 80066a4:	2000405c 	.word	0x2000405c
 80066a8:	20004054 	.word	0x20004054
 80066ac:	20004048 	.word	0x20004048
 80066b0:	20004058 	.word	0x20004058

080066b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d046      	beq.n	8006754 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066c6:	2308      	movs	r3, #8
 80066c8:	425b      	negs	r3, r3
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4413      	add	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	4b20      	ldr	r3, [pc, #128]	; (800675c <vPortFree+0xa8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4013      	ands	r3, r2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <vPortFree+0x42>
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e7fe      	b.n	80066f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <vPortFree+0x5e>
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	60bb      	str	r3, [r7, #8]
 8006710:	e7fe      	b.n	8006710 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	4b11      	ldr	r3, [pc, #68]	; (800675c <vPortFree+0xa8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4013      	ands	r3, r2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d019      	beq.n	8006754 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d115      	bne.n	8006754 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	4b0b      	ldr	r3, [pc, #44]	; (800675c <vPortFree+0xa8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	43db      	mvns	r3, r3
 8006732:	401a      	ands	r2, r3
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006738:	f7ff f812 	bl	8005760 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <vPortFree+0xac>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4413      	add	r3, r2
 8006746:	4a06      	ldr	r2, [pc, #24]	; (8006760 <vPortFree+0xac>)
 8006748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800674a:	6938      	ldr	r0, [r7, #16]
 800674c:	f000 f86c 	bl	8006828 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006750:	f7ff f814 	bl	800577c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006754:	bf00      	nop
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	2000405c 	.word	0x2000405c
 8006760:	20004054 	.word	0x20004054

08006764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800676a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800676e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006770:	4b27      	ldr	r3, [pc, #156]	; (8006810 <prvHeapInit+0xac>)
 8006772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3307      	adds	r3, #7
 8006782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f023 0307 	bic.w	r3, r3, #7
 800678a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <prvHeapInit+0xac>)
 8006794:	4413      	add	r3, r2
 8006796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800679c:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <prvHeapInit+0xb0>)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067a2:	4b1c      	ldr	r3, [pc, #112]	; (8006814 <prvHeapInit+0xb0>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	4413      	add	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067b0:	2208      	movs	r2, #8
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0307 	bic.w	r3, r3, #7
 80067be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4a15      	ldr	r2, [pc, #84]	; (8006818 <prvHeapInit+0xb4>)
 80067c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067c6:	4b14      	ldr	r3, [pc, #80]	; (8006818 <prvHeapInit+0xb4>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2200      	movs	r2, #0
 80067cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067ce:	4b12      	ldr	r3, [pc, #72]	; (8006818 <prvHeapInit+0xb4>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067e4:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvHeapInit+0xb4>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	4a0a      	ldr	r2, [pc, #40]	; (800681c <prvHeapInit+0xb8>)
 80067f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	4a09      	ldr	r2, [pc, #36]	; (8006820 <prvHeapInit+0xbc>)
 80067fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067fc:	4b09      	ldr	r3, [pc, #36]	; (8006824 <prvHeapInit+0xc0>)
 80067fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006802:	601a      	str	r2, [r3, #0]
}
 8006804:	bf00      	nop
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	20000448 	.word	0x20000448
 8006814:	20004048 	.word	0x20004048
 8006818:	20004050 	.word	0x20004050
 800681c:	20004058 	.word	0x20004058
 8006820:	20004054 	.word	0x20004054
 8006824:	2000405c 	.word	0x2000405c

08006828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006830:	4b28      	ldr	r3, [pc, #160]	; (80068d4 <prvInsertBlockIntoFreeList+0xac>)
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e002      	b.n	800683c <prvInsertBlockIntoFreeList+0x14>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	429a      	cmp	r2, r3
 8006844:	d8f7      	bhi.n	8006836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	4413      	add	r3, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d108      	bne.n	800686a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	441a      	add	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	441a      	add	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d118      	bne.n	80068b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d00d      	beq.n	80068a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	441a      	add	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	e008      	b.n	80068b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <prvInsertBlockIntoFreeList+0xb0>)
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	e003      	b.n	80068b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d002      	beq.n	80068c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20004048 	.word	0x20004048
 80068d8:	20004050 	.word	0x20004050

080068dc <__errno>:
 80068dc:	4b01      	ldr	r3, [pc, #4]	; (80068e4 <__errno+0x8>)
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	20000028 	.word	0x20000028

080068e8 <__libc_init_array>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	4e0d      	ldr	r6, [pc, #52]	; (8006920 <__libc_init_array+0x38>)
 80068ec:	4c0d      	ldr	r4, [pc, #52]	; (8006924 <__libc_init_array+0x3c>)
 80068ee:	1ba4      	subs	r4, r4, r6
 80068f0:	10a4      	asrs	r4, r4, #2
 80068f2:	2500      	movs	r5, #0
 80068f4:	42a5      	cmp	r5, r4
 80068f6:	d109      	bne.n	800690c <__libc_init_array+0x24>
 80068f8:	4e0b      	ldr	r6, [pc, #44]	; (8006928 <__libc_init_array+0x40>)
 80068fa:	4c0c      	ldr	r4, [pc, #48]	; (800692c <__libc_init_array+0x44>)
 80068fc:	f001 f98e 	bl	8007c1c <_init>
 8006900:	1ba4      	subs	r4, r4, r6
 8006902:	10a4      	asrs	r4, r4, #2
 8006904:	2500      	movs	r5, #0
 8006906:	42a5      	cmp	r5, r4
 8006908:	d105      	bne.n	8006916 <__libc_init_array+0x2e>
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006910:	4798      	blx	r3
 8006912:	3501      	adds	r5, #1
 8006914:	e7ee      	b.n	80068f4 <__libc_init_array+0xc>
 8006916:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800691a:	4798      	blx	r3
 800691c:	3501      	adds	r5, #1
 800691e:	e7f2      	b.n	8006906 <__libc_init_array+0x1e>
 8006920:	08007dc0 	.word	0x08007dc0
 8006924:	08007dc0 	.word	0x08007dc0
 8006928:	08007dc0 	.word	0x08007dc0
 800692c:	08007dc4 	.word	0x08007dc4

08006930 <memcpy>:
 8006930:	b510      	push	{r4, lr}
 8006932:	1e43      	subs	r3, r0, #1
 8006934:	440a      	add	r2, r1
 8006936:	4291      	cmp	r1, r2
 8006938:	d100      	bne.n	800693c <memcpy+0xc>
 800693a:	bd10      	pop	{r4, pc}
 800693c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006940:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006944:	e7f7      	b.n	8006936 <memcpy+0x6>

08006946 <memset>:
 8006946:	4402      	add	r2, r0
 8006948:	4603      	mov	r3, r0
 800694a:	4293      	cmp	r3, r2
 800694c:	d100      	bne.n	8006950 <memset+0xa>
 800694e:	4770      	bx	lr
 8006950:	f803 1b01 	strb.w	r1, [r3], #1
 8006954:	e7f9      	b.n	800694a <memset+0x4>
	...

08006958 <iprintf>:
 8006958:	b40f      	push	{r0, r1, r2, r3}
 800695a:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <iprintf+0x2c>)
 800695c:	b513      	push	{r0, r1, r4, lr}
 800695e:	681c      	ldr	r4, [r3, #0]
 8006960:	b124      	cbz	r4, 800696c <iprintf+0x14>
 8006962:	69a3      	ldr	r3, [r4, #24]
 8006964:	b913      	cbnz	r3, 800696c <iprintf+0x14>
 8006966:	4620      	mov	r0, r4
 8006968:	f000 f9cc 	bl	8006d04 <__sinit>
 800696c:	ab05      	add	r3, sp, #20
 800696e:	9a04      	ldr	r2, [sp, #16]
 8006970:	68a1      	ldr	r1, [r4, #8]
 8006972:	9301      	str	r3, [sp, #4]
 8006974:	4620      	mov	r0, r4
 8006976:	f000 fcdf 	bl	8007338 <_vfiprintf_r>
 800697a:	b002      	add	sp, #8
 800697c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006980:	b004      	add	sp, #16
 8006982:	4770      	bx	lr
 8006984:	20000028 	.word	0x20000028

08006988 <setvbuf>:
 8006988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800698c:	461d      	mov	r5, r3
 800698e:	4b51      	ldr	r3, [pc, #324]	; (8006ad4 <setvbuf+0x14c>)
 8006990:	681e      	ldr	r6, [r3, #0]
 8006992:	4604      	mov	r4, r0
 8006994:	460f      	mov	r7, r1
 8006996:	4690      	mov	r8, r2
 8006998:	b126      	cbz	r6, 80069a4 <setvbuf+0x1c>
 800699a:	69b3      	ldr	r3, [r6, #24]
 800699c:	b913      	cbnz	r3, 80069a4 <setvbuf+0x1c>
 800699e:	4630      	mov	r0, r6
 80069a0:	f000 f9b0 	bl	8006d04 <__sinit>
 80069a4:	4b4c      	ldr	r3, [pc, #304]	; (8006ad8 <setvbuf+0x150>)
 80069a6:	429c      	cmp	r4, r3
 80069a8:	d152      	bne.n	8006a50 <setvbuf+0xc8>
 80069aa:	6874      	ldr	r4, [r6, #4]
 80069ac:	f1b8 0f02 	cmp.w	r8, #2
 80069b0:	d006      	beq.n	80069c0 <setvbuf+0x38>
 80069b2:	f1b8 0f01 	cmp.w	r8, #1
 80069b6:	f200 8089 	bhi.w	8006acc <setvbuf+0x144>
 80069ba:	2d00      	cmp	r5, #0
 80069bc:	f2c0 8086 	blt.w	8006acc <setvbuf+0x144>
 80069c0:	4621      	mov	r1, r4
 80069c2:	4630      	mov	r0, r6
 80069c4:	f000 f934 	bl	8006c30 <_fflush_r>
 80069c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ca:	b141      	cbz	r1, 80069de <setvbuf+0x56>
 80069cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069d0:	4299      	cmp	r1, r3
 80069d2:	d002      	beq.n	80069da <setvbuf+0x52>
 80069d4:	4630      	mov	r0, r6
 80069d6:	f000 fa8b 	bl	8006ef0 <_free_r>
 80069da:	2300      	movs	r3, #0
 80069dc:	6363      	str	r3, [r4, #52]	; 0x34
 80069de:	2300      	movs	r3, #0
 80069e0:	61a3      	str	r3, [r4, #24]
 80069e2:	6063      	str	r3, [r4, #4]
 80069e4:	89a3      	ldrh	r3, [r4, #12]
 80069e6:	061b      	lsls	r3, r3, #24
 80069e8:	d503      	bpl.n	80069f2 <setvbuf+0x6a>
 80069ea:	6921      	ldr	r1, [r4, #16]
 80069ec:	4630      	mov	r0, r6
 80069ee:	f000 fa7f 	bl	8006ef0 <_free_r>
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80069f8:	f023 0303 	bic.w	r3, r3, #3
 80069fc:	f1b8 0f02 	cmp.w	r8, #2
 8006a00:	81a3      	strh	r3, [r4, #12]
 8006a02:	d05d      	beq.n	8006ac0 <setvbuf+0x138>
 8006a04:	ab01      	add	r3, sp, #4
 8006a06:	466a      	mov	r2, sp
 8006a08:	4621      	mov	r1, r4
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f000 fa04 	bl	8006e18 <__swhatbuf_r>
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	4318      	orrs	r0, r3
 8006a14:	81a0      	strh	r0, [r4, #12]
 8006a16:	bb2d      	cbnz	r5, 8006a64 <setvbuf+0xdc>
 8006a18:	9d00      	ldr	r5, [sp, #0]
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f000 fa60 	bl	8006ee0 <malloc>
 8006a20:	4607      	mov	r7, r0
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d14e      	bne.n	8006ac4 <setvbuf+0x13c>
 8006a26:	f8dd 9000 	ldr.w	r9, [sp]
 8006a2a:	45a9      	cmp	r9, r5
 8006a2c:	d13c      	bne.n	8006aa8 <setvbuf+0x120>
 8006a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	f043 0302 	orr.w	r3, r3, #2
 8006a38:	81a3      	strh	r3, [r4, #12]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60a3      	str	r3, [r4, #8]
 8006a3e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	6123      	str	r3, [r4, #16]
 8006a46:	2301      	movs	r3, #1
 8006a48:	6163      	str	r3, [r4, #20]
 8006a4a:	b003      	add	sp, #12
 8006a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a50:	4b22      	ldr	r3, [pc, #136]	; (8006adc <setvbuf+0x154>)
 8006a52:	429c      	cmp	r4, r3
 8006a54:	d101      	bne.n	8006a5a <setvbuf+0xd2>
 8006a56:	68b4      	ldr	r4, [r6, #8]
 8006a58:	e7a8      	b.n	80069ac <setvbuf+0x24>
 8006a5a:	4b21      	ldr	r3, [pc, #132]	; (8006ae0 <setvbuf+0x158>)
 8006a5c:	429c      	cmp	r4, r3
 8006a5e:	bf08      	it	eq
 8006a60:	68f4      	ldreq	r4, [r6, #12]
 8006a62:	e7a3      	b.n	80069ac <setvbuf+0x24>
 8006a64:	2f00      	cmp	r7, #0
 8006a66:	d0d8      	beq.n	8006a1a <setvbuf+0x92>
 8006a68:	69b3      	ldr	r3, [r6, #24]
 8006a6a:	b913      	cbnz	r3, 8006a72 <setvbuf+0xea>
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f000 f949 	bl	8006d04 <__sinit>
 8006a72:	f1b8 0f01 	cmp.w	r8, #1
 8006a76:	bf08      	it	eq
 8006a78:	89a3      	ldrheq	r3, [r4, #12]
 8006a7a:	6027      	str	r7, [r4, #0]
 8006a7c:	bf04      	itt	eq
 8006a7e:	f043 0301 	orreq.w	r3, r3, #1
 8006a82:	81a3      	strheq	r3, [r4, #12]
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	f013 0008 	ands.w	r0, r3, #8
 8006a8a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8006a8e:	d01b      	beq.n	8006ac8 <setvbuf+0x140>
 8006a90:	f013 0001 	ands.w	r0, r3, #1
 8006a94:	bf18      	it	ne
 8006a96:	426d      	negne	r5, r5
 8006a98:	f04f 0300 	mov.w	r3, #0
 8006a9c:	bf1d      	ittte	ne
 8006a9e:	60a3      	strne	r3, [r4, #8]
 8006aa0:	61a5      	strne	r5, [r4, #24]
 8006aa2:	4618      	movne	r0, r3
 8006aa4:	60a5      	streq	r5, [r4, #8]
 8006aa6:	e7d0      	b.n	8006a4a <setvbuf+0xc2>
 8006aa8:	4648      	mov	r0, r9
 8006aaa:	f000 fa19 	bl	8006ee0 <malloc>
 8006aae:	4607      	mov	r7, r0
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d0bc      	beq.n	8006a2e <setvbuf+0xa6>
 8006ab4:	89a3      	ldrh	r3, [r4, #12]
 8006ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aba:	81a3      	strh	r3, [r4, #12]
 8006abc:	464d      	mov	r5, r9
 8006abe:	e7d3      	b.n	8006a68 <setvbuf+0xe0>
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e7b6      	b.n	8006a32 <setvbuf+0xaa>
 8006ac4:	46a9      	mov	r9, r5
 8006ac6:	e7f5      	b.n	8006ab4 <setvbuf+0x12c>
 8006ac8:	60a0      	str	r0, [r4, #8]
 8006aca:	e7be      	b.n	8006a4a <setvbuf+0xc2>
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	e7bb      	b.n	8006a4a <setvbuf+0xc2>
 8006ad2:	bf00      	nop
 8006ad4:	20000028 	.word	0x20000028
 8006ad8:	08007d44 	.word	0x08007d44
 8006adc:	08007d64 	.word	0x08007d64
 8006ae0:	08007d24 	.word	0x08007d24

08006ae4 <siprintf>:
 8006ae4:	b40e      	push	{r1, r2, r3}
 8006ae6:	b500      	push	{lr}
 8006ae8:	b09c      	sub	sp, #112	; 0x70
 8006aea:	ab1d      	add	r3, sp, #116	; 0x74
 8006aec:	9002      	str	r0, [sp, #8]
 8006aee:	9006      	str	r0, [sp, #24]
 8006af0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006af4:	4809      	ldr	r0, [pc, #36]	; (8006b1c <siprintf+0x38>)
 8006af6:	9107      	str	r1, [sp, #28]
 8006af8:	9104      	str	r1, [sp, #16]
 8006afa:	4909      	ldr	r1, [pc, #36]	; (8006b20 <siprintf+0x3c>)
 8006afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b00:	9105      	str	r1, [sp, #20]
 8006b02:	6800      	ldr	r0, [r0, #0]
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	a902      	add	r1, sp, #8
 8006b08:	f000 faf4 	bl	80070f4 <_svfiprintf_r>
 8006b0c:	9b02      	ldr	r3, [sp, #8]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	b01c      	add	sp, #112	; 0x70
 8006b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b18:	b003      	add	sp, #12
 8006b1a:	4770      	bx	lr
 8006b1c:	20000028 	.word	0x20000028
 8006b20:	ffff0208 	.word	0xffff0208

08006b24 <__sflush_r>:
 8006b24:	898a      	ldrh	r2, [r1, #12]
 8006b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	0710      	lsls	r0, r2, #28
 8006b2e:	460c      	mov	r4, r1
 8006b30:	d458      	bmi.n	8006be4 <__sflush_r+0xc0>
 8006b32:	684b      	ldr	r3, [r1, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	dc05      	bgt.n	8006b44 <__sflush_r+0x20>
 8006b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	dc02      	bgt.n	8006b44 <__sflush_r+0x20>
 8006b3e:	2000      	movs	r0, #0
 8006b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b46:	2e00      	cmp	r6, #0
 8006b48:	d0f9      	beq.n	8006b3e <__sflush_r+0x1a>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b50:	682f      	ldr	r7, [r5, #0]
 8006b52:	6a21      	ldr	r1, [r4, #32]
 8006b54:	602b      	str	r3, [r5, #0]
 8006b56:	d032      	beq.n	8006bbe <__sflush_r+0x9a>
 8006b58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	075a      	lsls	r2, r3, #29
 8006b5e:	d505      	bpl.n	8006b6c <__sflush_r+0x48>
 8006b60:	6863      	ldr	r3, [r4, #4]
 8006b62:	1ac0      	subs	r0, r0, r3
 8006b64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b66:	b10b      	cbz	r3, 8006b6c <__sflush_r+0x48>
 8006b68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b6a:	1ac0      	subs	r0, r0, r3
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4602      	mov	r2, r0
 8006b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b72:	6a21      	ldr	r1, [r4, #32]
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b0      	blx	r6
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	d106      	bne.n	8006b8c <__sflush_r+0x68>
 8006b7e:	6829      	ldr	r1, [r5, #0]
 8006b80:	291d      	cmp	r1, #29
 8006b82:	d848      	bhi.n	8006c16 <__sflush_r+0xf2>
 8006b84:	4a29      	ldr	r2, [pc, #164]	; (8006c2c <__sflush_r+0x108>)
 8006b86:	40ca      	lsrs	r2, r1
 8006b88:	07d6      	lsls	r6, r2, #31
 8006b8a:	d544      	bpl.n	8006c16 <__sflush_r+0xf2>
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	6062      	str	r2, [r4, #4]
 8006b90:	04d9      	lsls	r1, r3, #19
 8006b92:	6922      	ldr	r2, [r4, #16]
 8006b94:	6022      	str	r2, [r4, #0]
 8006b96:	d504      	bpl.n	8006ba2 <__sflush_r+0x7e>
 8006b98:	1c42      	adds	r2, r0, #1
 8006b9a:	d101      	bne.n	8006ba0 <__sflush_r+0x7c>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	b903      	cbnz	r3, 8006ba2 <__sflush_r+0x7e>
 8006ba0:	6560      	str	r0, [r4, #84]	; 0x54
 8006ba2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ba4:	602f      	str	r7, [r5, #0]
 8006ba6:	2900      	cmp	r1, #0
 8006ba8:	d0c9      	beq.n	8006b3e <__sflush_r+0x1a>
 8006baa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bae:	4299      	cmp	r1, r3
 8006bb0:	d002      	beq.n	8006bb8 <__sflush_r+0x94>
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 f99c 	bl	8006ef0 <_free_r>
 8006bb8:	2000      	movs	r0, #0
 8006bba:	6360      	str	r0, [r4, #52]	; 0x34
 8006bbc:	e7c0      	b.n	8006b40 <__sflush_r+0x1c>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	47b0      	blx	r6
 8006bc4:	1c41      	adds	r1, r0, #1
 8006bc6:	d1c8      	bne.n	8006b5a <__sflush_r+0x36>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0c5      	beq.n	8006b5a <__sflush_r+0x36>
 8006bce:	2b1d      	cmp	r3, #29
 8006bd0:	d001      	beq.n	8006bd6 <__sflush_r+0xb2>
 8006bd2:	2b16      	cmp	r3, #22
 8006bd4:	d101      	bne.n	8006bda <__sflush_r+0xb6>
 8006bd6:	602f      	str	r7, [r5, #0]
 8006bd8:	e7b1      	b.n	8006b3e <__sflush_r+0x1a>
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be0:	81a3      	strh	r3, [r4, #12]
 8006be2:	e7ad      	b.n	8006b40 <__sflush_r+0x1c>
 8006be4:	690f      	ldr	r7, [r1, #16]
 8006be6:	2f00      	cmp	r7, #0
 8006be8:	d0a9      	beq.n	8006b3e <__sflush_r+0x1a>
 8006bea:	0793      	lsls	r3, r2, #30
 8006bec:	680e      	ldr	r6, [r1, #0]
 8006bee:	bf08      	it	eq
 8006bf0:	694b      	ldreq	r3, [r1, #20]
 8006bf2:	600f      	str	r7, [r1, #0]
 8006bf4:	bf18      	it	ne
 8006bf6:	2300      	movne	r3, #0
 8006bf8:	eba6 0807 	sub.w	r8, r6, r7
 8006bfc:	608b      	str	r3, [r1, #8]
 8006bfe:	f1b8 0f00 	cmp.w	r8, #0
 8006c02:	dd9c      	ble.n	8006b3e <__sflush_r+0x1a>
 8006c04:	4643      	mov	r3, r8
 8006c06:	463a      	mov	r2, r7
 8006c08:	6a21      	ldr	r1, [r4, #32]
 8006c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	47b0      	blx	r6
 8006c10:	2800      	cmp	r0, #0
 8006c12:	dc06      	bgt.n	8006c22 <__sflush_r+0xfe>
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c1a:	81a3      	strh	r3, [r4, #12]
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c20:	e78e      	b.n	8006b40 <__sflush_r+0x1c>
 8006c22:	4407      	add	r7, r0
 8006c24:	eba8 0800 	sub.w	r8, r8, r0
 8006c28:	e7e9      	b.n	8006bfe <__sflush_r+0xda>
 8006c2a:	bf00      	nop
 8006c2c:	20400001 	.word	0x20400001

08006c30 <_fflush_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	690b      	ldr	r3, [r1, #16]
 8006c34:	4605      	mov	r5, r0
 8006c36:	460c      	mov	r4, r1
 8006c38:	b1db      	cbz	r3, 8006c72 <_fflush_r+0x42>
 8006c3a:	b118      	cbz	r0, 8006c44 <_fflush_r+0x14>
 8006c3c:	6983      	ldr	r3, [r0, #24]
 8006c3e:	b90b      	cbnz	r3, 8006c44 <_fflush_r+0x14>
 8006c40:	f000 f860 	bl	8006d04 <__sinit>
 8006c44:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <_fflush_r+0x48>)
 8006c46:	429c      	cmp	r4, r3
 8006c48:	d109      	bne.n	8006c5e <_fflush_r+0x2e>
 8006c4a:	686c      	ldr	r4, [r5, #4]
 8006c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c50:	b17b      	cbz	r3, 8006c72 <_fflush_r+0x42>
 8006c52:	4621      	mov	r1, r4
 8006c54:	4628      	mov	r0, r5
 8006c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c5a:	f7ff bf63 	b.w	8006b24 <__sflush_r>
 8006c5e:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <_fflush_r+0x4c>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	d101      	bne.n	8006c68 <_fflush_r+0x38>
 8006c64:	68ac      	ldr	r4, [r5, #8]
 8006c66:	e7f1      	b.n	8006c4c <_fflush_r+0x1c>
 8006c68:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <_fflush_r+0x50>)
 8006c6a:	429c      	cmp	r4, r3
 8006c6c:	bf08      	it	eq
 8006c6e:	68ec      	ldreq	r4, [r5, #12]
 8006c70:	e7ec      	b.n	8006c4c <_fflush_r+0x1c>
 8006c72:	2000      	movs	r0, #0
 8006c74:	bd38      	pop	{r3, r4, r5, pc}
 8006c76:	bf00      	nop
 8006c78:	08007d44 	.word	0x08007d44
 8006c7c:	08007d64 	.word	0x08007d64
 8006c80:	08007d24 	.word	0x08007d24

08006c84 <std>:
 8006c84:	2300      	movs	r3, #0
 8006c86:	b510      	push	{r4, lr}
 8006c88:	4604      	mov	r4, r0
 8006c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c8e:	6083      	str	r3, [r0, #8]
 8006c90:	8181      	strh	r1, [r0, #12]
 8006c92:	6643      	str	r3, [r0, #100]	; 0x64
 8006c94:	81c2      	strh	r2, [r0, #14]
 8006c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c9a:	6183      	str	r3, [r0, #24]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	2208      	movs	r2, #8
 8006ca0:	305c      	adds	r0, #92	; 0x5c
 8006ca2:	f7ff fe50 	bl	8006946 <memset>
 8006ca6:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <std+0x38>)
 8006ca8:	6263      	str	r3, [r4, #36]	; 0x24
 8006caa:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <std+0x3c>)
 8006cac:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cae:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <std+0x40>)
 8006cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cb2:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <std+0x44>)
 8006cb4:	6224      	str	r4, [r4, #32]
 8006cb6:	6323      	str	r3, [r4, #48]	; 0x30
 8006cb8:	bd10      	pop	{r4, pc}
 8006cba:	bf00      	nop
 8006cbc:	08007895 	.word	0x08007895
 8006cc0:	080078b7 	.word	0x080078b7
 8006cc4:	080078ef 	.word	0x080078ef
 8006cc8:	08007913 	.word	0x08007913

08006ccc <_cleanup_r>:
 8006ccc:	4901      	ldr	r1, [pc, #4]	; (8006cd4 <_cleanup_r+0x8>)
 8006cce:	f000 b885 	b.w	8006ddc <_fwalk_reent>
 8006cd2:	bf00      	nop
 8006cd4:	08006c31 	.word	0x08006c31

08006cd8 <__sfmoreglue>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	1e4a      	subs	r2, r1, #1
 8006cdc:	2568      	movs	r5, #104	; 0x68
 8006cde:	4355      	muls	r5, r2
 8006ce0:	460e      	mov	r6, r1
 8006ce2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ce6:	f000 f951 	bl	8006f8c <_malloc_r>
 8006cea:	4604      	mov	r4, r0
 8006cec:	b140      	cbz	r0, 8006d00 <__sfmoreglue+0x28>
 8006cee:	2100      	movs	r1, #0
 8006cf0:	e9c0 1600 	strd	r1, r6, [r0]
 8006cf4:	300c      	adds	r0, #12
 8006cf6:	60a0      	str	r0, [r4, #8]
 8006cf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cfc:	f7ff fe23 	bl	8006946 <memset>
 8006d00:	4620      	mov	r0, r4
 8006d02:	bd70      	pop	{r4, r5, r6, pc}

08006d04 <__sinit>:
 8006d04:	6983      	ldr	r3, [r0, #24]
 8006d06:	b510      	push	{r4, lr}
 8006d08:	4604      	mov	r4, r0
 8006d0a:	bb33      	cbnz	r3, 8006d5a <__sinit+0x56>
 8006d0c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006d10:	6503      	str	r3, [r0, #80]	; 0x50
 8006d12:	4b12      	ldr	r3, [pc, #72]	; (8006d5c <__sinit+0x58>)
 8006d14:	4a12      	ldr	r2, [pc, #72]	; (8006d60 <__sinit+0x5c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6282      	str	r2, [r0, #40]	; 0x28
 8006d1a:	4298      	cmp	r0, r3
 8006d1c:	bf04      	itt	eq
 8006d1e:	2301      	moveq	r3, #1
 8006d20:	6183      	streq	r3, [r0, #24]
 8006d22:	f000 f81f 	bl	8006d64 <__sfp>
 8006d26:	6060      	str	r0, [r4, #4]
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 f81b 	bl	8006d64 <__sfp>
 8006d2e:	60a0      	str	r0, [r4, #8]
 8006d30:	4620      	mov	r0, r4
 8006d32:	f000 f817 	bl	8006d64 <__sfp>
 8006d36:	2200      	movs	r2, #0
 8006d38:	60e0      	str	r0, [r4, #12]
 8006d3a:	2104      	movs	r1, #4
 8006d3c:	6860      	ldr	r0, [r4, #4]
 8006d3e:	f7ff ffa1 	bl	8006c84 <std>
 8006d42:	2201      	movs	r2, #1
 8006d44:	2109      	movs	r1, #9
 8006d46:	68a0      	ldr	r0, [r4, #8]
 8006d48:	f7ff ff9c 	bl	8006c84 <std>
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	2112      	movs	r1, #18
 8006d50:	68e0      	ldr	r0, [r4, #12]
 8006d52:	f7ff ff97 	bl	8006c84 <std>
 8006d56:	2301      	movs	r3, #1
 8006d58:	61a3      	str	r3, [r4, #24]
 8006d5a:	bd10      	pop	{r4, pc}
 8006d5c:	08007d20 	.word	0x08007d20
 8006d60:	08006ccd 	.word	0x08006ccd

08006d64 <__sfp>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	4b1b      	ldr	r3, [pc, #108]	; (8006dd4 <__sfp+0x70>)
 8006d68:	681e      	ldr	r6, [r3, #0]
 8006d6a:	69b3      	ldr	r3, [r6, #24]
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	b913      	cbnz	r3, 8006d76 <__sfp+0x12>
 8006d70:	4630      	mov	r0, r6
 8006d72:	f7ff ffc7 	bl	8006d04 <__sinit>
 8006d76:	3648      	adds	r6, #72	; 0x48
 8006d78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	d503      	bpl.n	8006d88 <__sfp+0x24>
 8006d80:	6833      	ldr	r3, [r6, #0]
 8006d82:	b133      	cbz	r3, 8006d92 <__sfp+0x2e>
 8006d84:	6836      	ldr	r6, [r6, #0]
 8006d86:	e7f7      	b.n	8006d78 <__sfp+0x14>
 8006d88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d8c:	b16d      	cbz	r5, 8006daa <__sfp+0x46>
 8006d8e:	3468      	adds	r4, #104	; 0x68
 8006d90:	e7f4      	b.n	8006d7c <__sfp+0x18>
 8006d92:	2104      	movs	r1, #4
 8006d94:	4638      	mov	r0, r7
 8006d96:	f7ff ff9f 	bl	8006cd8 <__sfmoreglue>
 8006d9a:	6030      	str	r0, [r6, #0]
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d1f1      	bne.n	8006d84 <__sfp+0x20>
 8006da0:	230c      	movs	r3, #12
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	4604      	mov	r4, r0
 8006da6:	4620      	mov	r0, r4
 8006da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006daa:	4b0b      	ldr	r3, [pc, #44]	; (8006dd8 <__sfp+0x74>)
 8006dac:	6665      	str	r5, [r4, #100]	; 0x64
 8006dae:	e9c4 5500 	strd	r5, r5, [r4]
 8006db2:	60a5      	str	r5, [r4, #8]
 8006db4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006db8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dc4:	f7ff fdbf 	bl	8006946 <memset>
 8006dc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dd0:	e7e9      	b.n	8006da6 <__sfp+0x42>
 8006dd2:	bf00      	nop
 8006dd4:	08007d20 	.word	0x08007d20
 8006dd8:	ffff0001 	.word	0xffff0001

08006ddc <_fwalk_reent>:
 8006ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de0:	4680      	mov	r8, r0
 8006de2:	4689      	mov	r9, r1
 8006de4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006de8:	2600      	movs	r6, #0
 8006dea:	b914      	cbnz	r4, 8006df2 <_fwalk_reent+0x16>
 8006dec:	4630      	mov	r0, r6
 8006dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006df2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006df6:	3f01      	subs	r7, #1
 8006df8:	d501      	bpl.n	8006dfe <_fwalk_reent+0x22>
 8006dfa:	6824      	ldr	r4, [r4, #0]
 8006dfc:	e7f5      	b.n	8006dea <_fwalk_reent+0xe>
 8006dfe:	89ab      	ldrh	r3, [r5, #12]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d907      	bls.n	8006e14 <_fwalk_reent+0x38>
 8006e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	d003      	beq.n	8006e14 <_fwalk_reent+0x38>
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	4640      	mov	r0, r8
 8006e10:	47c8      	blx	r9
 8006e12:	4306      	orrs	r6, r0
 8006e14:	3568      	adds	r5, #104	; 0x68
 8006e16:	e7ee      	b.n	8006df6 <_fwalk_reent+0x1a>

08006e18 <__swhatbuf_r>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	460e      	mov	r6, r1
 8006e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e20:	2900      	cmp	r1, #0
 8006e22:	b096      	sub	sp, #88	; 0x58
 8006e24:	4614      	mov	r4, r2
 8006e26:	461d      	mov	r5, r3
 8006e28:	da07      	bge.n	8006e3a <__swhatbuf_r+0x22>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	602b      	str	r3, [r5, #0]
 8006e2e:	89b3      	ldrh	r3, [r6, #12]
 8006e30:	061a      	lsls	r2, r3, #24
 8006e32:	d410      	bmi.n	8006e56 <__swhatbuf_r+0x3e>
 8006e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e38:	e00e      	b.n	8006e58 <__swhatbuf_r+0x40>
 8006e3a:	466a      	mov	r2, sp
 8006e3c:	f000 fe50 	bl	8007ae0 <_fstat_r>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	dbf2      	blt.n	8006e2a <__swhatbuf_r+0x12>
 8006e44:	9a01      	ldr	r2, [sp, #4]
 8006e46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e4e:	425a      	negs	r2, r3
 8006e50:	415a      	adcs	r2, r3
 8006e52:	602a      	str	r2, [r5, #0]
 8006e54:	e7ee      	b.n	8006e34 <__swhatbuf_r+0x1c>
 8006e56:	2340      	movs	r3, #64	; 0x40
 8006e58:	2000      	movs	r0, #0
 8006e5a:	6023      	str	r3, [r4, #0]
 8006e5c:	b016      	add	sp, #88	; 0x58
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}

08006e60 <__smakebuf_r>:
 8006e60:	898b      	ldrh	r3, [r1, #12]
 8006e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e64:	079d      	lsls	r5, r3, #30
 8006e66:	4606      	mov	r6, r0
 8006e68:	460c      	mov	r4, r1
 8006e6a:	d507      	bpl.n	8006e7c <__smakebuf_r+0x1c>
 8006e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e70:	6023      	str	r3, [r4, #0]
 8006e72:	6123      	str	r3, [r4, #16]
 8006e74:	2301      	movs	r3, #1
 8006e76:	6163      	str	r3, [r4, #20]
 8006e78:	b002      	add	sp, #8
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	ab01      	add	r3, sp, #4
 8006e7e:	466a      	mov	r2, sp
 8006e80:	f7ff ffca 	bl	8006e18 <__swhatbuf_r>
 8006e84:	9900      	ldr	r1, [sp, #0]
 8006e86:	4605      	mov	r5, r0
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f000 f87f 	bl	8006f8c <_malloc_r>
 8006e8e:	b948      	cbnz	r0, 8006ea4 <__smakebuf_r+0x44>
 8006e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e94:	059a      	lsls	r2, r3, #22
 8006e96:	d4ef      	bmi.n	8006e78 <__smakebuf_r+0x18>
 8006e98:	f023 0303 	bic.w	r3, r3, #3
 8006e9c:	f043 0302 	orr.w	r3, r3, #2
 8006ea0:	81a3      	strh	r3, [r4, #12]
 8006ea2:	e7e3      	b.n	8006e6c <__smakebuf_r+0xc>
 8006ea4:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <__smakebuf_r+0x7c>)
 8006ea6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	6020      	str	r0, [r4, #0]
 8006eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb0:	81a3      	strh	r3, [r4, #12]
 8006eb2:	9b00      	ldr	r3, [sp, #0]
 8006eb4:	6163      	str	r3, [r4, #20]
 8006eb6:	9b01      	ldr	r3, [sp, #4]
 8006eb8:	6120      	str	r0, [r4, #16]
 8006eba:	b15b      	cbz	r3, 8006ed4 <__smakebuf_r+0x74>
 8006ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f000 fe1f 	bl	8007b04 <_isatty_r>
 8006ec6:	b128      	cbz	r0, 8006ed4 <__smakebuf_r+0x74>
 8006ec8:	89a3      	ldrh	r3, [r4, #12]
 8006eca:	f023 0303 	bic.w	r3, r3, #3
 8006ece:	f043 0301 	orr.w	r3, r3, #1
 8006ed2:	81a3      	strh	r3, [r4, #12]
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	431d      	orrs	r5, r3
 8006ed8:	81a5      	strh	r5, [r4, #12]
 8006eda:	e7cd      	b.n	8006e78 <__smakebuf_r+0x18>
 8006edc:	08006ccd 	.word	0x08006ccd

08006ee0 <malloc>:
 8006ee0:	4b02      	ldr	r3, [pc, #8]	; (8006eec <malloc+0xc>)
 8006ee2:	4601      	mov	r1, r0
 8006ee4:	6818      	ldr	r0, [r3, #0]
 8006ee6:	f000 b851 	b.w	8006f8c <_malloc_r>
 8006eea:	bf00      	nop
 8006eec:	20000028 	.word	0x20000028

08006ef0 <_free_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	4605      	mov	r5, r0
 8006ef4:	2900      	cmp	r1, #0
 8006ef6:	d045      	beq.n	8006f84 <_free_r+0x94>
 8006ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006efc:	1f0c      	subs	r4, r1, #4
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bfb8      	it	lt
 8006f02:	18e4      	addlt	r4, r4, r3
 8006f04:	f000 fe39 	bl	8007b7a <__malloc_lock>
 8006f08:	4a1f      	ldr	r2, [pc, #124]	; (8006f88 <_free_r+0x98>)
 8006f0a:	6813      	ldr	r3, [r2, #0]
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	b933      	cbnz	r3, 8006f1e <_free_r+0x2e>
 8006f10:	6063      	str	r3, [r4, #4]
 8006f12:	6014      	str	r4, [r2, #0]
 8006f14:	4628      	mov	r0, r5
 8006f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f1a:	f000 be2f 	b.w	8007b7c <__malloc_unlock>
 8006f1e:	42a3      	cmp	r3, r4
 8006f20:	d90c      	bls.n	8006f3c <_free_r+0x4c>
 8006f22:	6821      	ldr	r1, [r4, #0]
 8006f24:	1862      	adds	r2, r4, r1
 8006f26:	4293      	cmp	r3, r2
 8006f28:	bf04      	itt	eq
 8006f2a:	681a      	ldreq	r2, [r3, #0]
 8006f2c:	685b      	ldreq	r3, [r3, #4]
 8006f2e:	6063      	str	r3, [r4, #4]
 8006f30:	bf04      	itt	eq
 8006f32:	1852      	addeq	r2, r2, r1
 8006f34:	6022      	streq	r2, [r4, #0]
 8006f36:	6004      	str	r4, [r0, #0]
 8006f38:	e7ec      	b.n	8006f14 <_free_r+0x24>
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	b10a      	cbz	r2, 8006f44 <_free_r+0x54>
 8006f40:	42a2      	cmp	r2, r4
 8006f42:	d9fa      	bls.n	8006f3a <_free_r+0x4a>
 8006f44:	6819      	ldr	r1, [r3, #0]
 8006f46:	1858      	adds	r0, r3, r1
 8006f48:	42a0      	cmp	r0, r4
 8006f4a:	d10b      	bne.n	8006f64 <_free_r+0x74>
 8006f4c:	6820      	ldr	r0, [r4, #0]
 8006f4e:	4401      	add	r1, r0
 8006f50:	1858      	adds	r0, r3, r1
 8006f52:	4282      	cmp	r2, r0
 8006f54:	6019      	str	r1, [r3, #0]
 8006f56:	d1dd      	bne.n	8006f14 <_free_r+0x24>
 8006f58:	6810      	ldr	r0, [r2, #0]
 8006f5a:	6852      	ldr	r2, [r2, #4]
 8006f5c:	605a      	str	r2, [r3, #4]
 8006f5e:	4401      	add	r1, r0
 8006f60:	6019      	str	r1, [r3, #0]
 8006f62:	e7d7      	b.n	8006f14 <_free_r+0x24>
 8006f64:	d902      	bls.n	8006f6c <_free_r+0x7c>
 8006f66:	230c      	movs	r3, #12
 8006f68:	602b      	str	r3, [r5, #0]
 8006f6a:	e7d3      	b.n	8006f14 <_free_r+0x24>
 8006f6c:	6820      	ldr	r0, [r4, #0]
 8006f6e:	1821      	adds	r1, r4, r0
 8006f70:	428a      	cmp	r2, r1
 8006f72:	bf04      	itt	eq
 8006f74:	6811      	ldreq	r1, [r2, #0]
 8006f76:	6852      	ldreq	r2, [r2, #4]
 8006f78:	6062      	str	r2, [r4, #4]
 8006f7a:	bf04      	itt	eq
 8006f7c:	1809      	addeq	r1, r1, r0
 8006f7e:	6021      	streq	r1, [r4, #0]
 8006f80:	605c      	str	r4, [r3, #4]
 8006f82:	e7c7      	b.n	8006f14 <_free_r+0x24>
 8006f84:	bd38      	pop	{r3, r4, r5, pc}
 8006f86:	bf00      	nop
 8006f88:	20004060 	.word	0x20004060

08006f8c <_malloc_r>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	1ccd      	adds	r5, r1, #3
 8006f90:	f025 0503 	bic.w	r5, r5, #3
 8006f94:	3508      	adds	r5, #8
 8006f96:	2d0c      	cmp	r5, #12
 8006f98:	bf38      	it	cc
 8006f9a:	250c      	movcc	r5, #12
 8006f9c:	2d00      	cmp	r5, #0
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	db01      	blt.n	8006fa6 <_malloc_r+0x1a>
 8006fa2:	42a9      	cmp	r1, r5
 8006fa4:	d903      	bls.n	8006fae <_malloc_r+0x22>
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	6033      	str	r3, [r6, #0]
 8006faa:	2000      	movs	r0, #0
 8006fac:	bd70      	pop	{r4, r5, r6, pc}
 8006fae:	f000 fde4 	bl	8007b7a <__malloc_lock>
 8006fb2:	4a21      	ldr	r2, [pc, #132]	; (8007038 <_malloc_r+0xac>)
 8006fb4:	6814      	ldr	r4, [r2, #0]
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	b991      	cbnz	r1, 8006fe0 <_malloc_r+0x54>
 8006fba:	4c20      	ldr	r4, [pc, #128]	; (800703c <_malloc_r+0xb0>)
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	b91b      	cbnz	r3, 8006fc8 <_malloc_r+0x3c>
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	f000 fc57 	bl	8007874 <_sbrk_r>
 8006fc6:	6020      	str	r0, [r4, #0]
 8006fc8:	4629      	mov	r1, r5
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f000 fc52 	bl	8007874 <_sbrk_r>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d124      	bne.n	800701e <_malloc_r+0x92>
 8006fd4:	230c      	movs	r3, #12
 8006fd6:	6033      	str	r3, [r6, #0]
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f000 fdcf 	bl	8007b7c <__malloc_unlock>
 8006fde:	e7e4      	b.n	8006faa <_malloc_r+0x1e>
 8006fe0:	680b      	ldr	r3, [r1, #0]
 8006fe2:	1b5b      	subs	r3, r3, r5
 8006fe4:	d418      	bmi.n	8007018 <_malloc_r+0x8c>
 8006fe6:	2b0b      	cmp	r3, #11
 8006fe8:	d90f      	bls.n	800700a <_malloc_r+0x7e>
 8006fea:	600b      	str	r3, [r1, #0]
 8006fec:	50cd      	str	r5, [r1, r3]
 8006fee:	18cc      	adds	r4, r1, r3
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f000 fdc3 	bl	8007b7c <__malloc_unlock>
 8006ff6:	f104 000b 	add.w	r0, r4, #11
 8006ffa:	1d23      	adds	r3, r4, #4
 8006ffc:	f020 0007 	bic.w	r0, r0, #7
 8007000:	1ac3      	subs	r3, r0, r3
 8007002:	d0d3      	beq.n	8006fac <_malloc_r+0x20>
 8007004:	425a      	negs	r2, r3
 8007006:	50e2      	str	r2, [r4, r3]
 8007008:	e7d0      	b.n	8006fac <_malloc_r+0x20>
 800700a:	428c      	cmp	r4, r1
 800700c:	684b      	ldr	r3, [r1, #4]
 800700e:	bf16      	itet	ne
 8007010:	6063      	strne	r3, [r4, #4]
 8007012:	6013      	streq	r3, [r2, #0]
 8007014:	460c      	movne	r4, r1
 8007016:	e7eb      	b.n	8006ff0 <_malloc_r+0x64>
 8007018:	460c      	mov	r4, r1
 800701a:	6849      	ldr	r1, [r1, #4]
 800701c:	e7cc      	b.n	8006fb8 <_malloc_r+0x2c>
 800701e:	1cc4      	adds	r4, r0, #3
 8007020:	f024 0403 	bic.w	r4, r4, #3
 8007024:	42a0      	cmp	r0, r4
 8007026:	d005      	beq.n	8007034 <_malloc_r+0xa8>
 8007028:	1a21      	subs	r1, r4, r0
 800702a:	4630      	mov	r0, r6
 800702c:	f000 fc22 	bl	8007874 <_sbrk_r>
 8007030:	3001      	adds	r0, #1
 8007032:	d0cf      	beq.n	8006fd4 <_malloc_r+0x48>
 8007034:	6025      	str	r5, [r4, #0]
 8007036:	e7db      	b.n	8006ff0 <_malloc_r+0x64>
 8007038:	20004060 	.word	0x20004060
 800703c:	20004064 	.word	0x20004064

08007040 <__ssputs_r>:
 8007040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007044:	688e      	ldr	r6, [r1, #8]
 8007046:	429e      	cmp	r6, r3
 8007048:	4682      	mov	sl, r0
 800704a:	460c      	mov	r4, r1
 800704c:	4690      	mov	r8, r2
 800704e:	4699      	mov	r9, r3
 8007050:	d837      	bhi.n	80070c2 <__ssputs_r+0x82>
 8007052:	898a      	ldrh	r2, [r1, #12]
 8007054:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007058:	d031      	beq.n	80070be <__ssputs_r+0x7e>
 800705a:	6825      	ldr	r5, [r4, #0]
 800705c:	6909      	ldr	r1, [r1, #16]
 800705e:	1a6f      	subs	r7, r5, r1
 8007060:	6965      	ldr	r5, [r4, #20]
 8007062:	2302      	movs	r3, #2
 8007064:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007068:	fb95 f5f3 	sdiv	r5, r5, r3
 800706c:	f109 0301 	add.w	r3, r9, #1
 8007070:	443b      	add	r3, r7
 8007072:	429d      	cmp	r5, r3
 8007074:	bf38      	it	cc
 8007076:	461d      	movcc	r5, r3
 8007078:	0553      	lsls	r3, r2, #21
 800707a:	d530      	bpl.n	80070de <__ssputs_r+0x9e>
 800707c:	4629      	mov	r1, r5
 800707e:	f7ff ff85 	bl	8006f8c <_malloc_r>
 8007082:	4606      	mov	r6, r0
 8007084:	b950      	cbnz	r0, 800709c <__ssputs_r+0x5c>
 8007086:	230c      	movs	r3, #12
 8007088:	f8ca 3000 	str.w	r3, [sl]
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007092:	81a3      	strh	r3, [r4, #12]
 8007094:	f04f 30ff 	mov.w	r0, #4294967295
 8007098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709c:	463a      	mov	r2, r7
 800709e:	6921      	ldr	r1, [r4, #16]
 80070a0:	f7ff fc46 	bl	8006930 <memcpy>
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ae:	81a3      	strh	r3, [r4, #12]
 80070b0:	6126      	str	r6, [r4, #16]
 80070b2:	6165      	str	r5, [r4, #20]
 80070b4:	443e      	add	r6, r7
 80070b6:	1bed      	subs	r5, r5, r7
 80070b8:	6026      	str	r6, [r4, #0]
 80070ba:	60a5      	str	r5, [r4, #8]
 80070bc:	464e      	mov	r6, r9
 80070be:	454e      	cmp	r6, r9
 80070c0:	d900      	bls.n	80070c4 <__ssputs_r+0x84>
 80070c2:	464e      	mov	r6, r9
 80070c4:	4632      	mov	r2, r6
 80070c6:	4641      	mov	r1, r8
 80070c8:	6820      	ldr	r0, [r4, #0]
 80070ca:	f000 fd3d 	bl	8007b48 <memmove>
 80070ce:	68a3      	ldr	r3, [r4, #8]
 80070d0:	1b9b      	subs	r3, r3, r6
 80070d2:	60a3      	str	r3, [r4, #8]
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	441e      	add	r6, r3
 80070d8:	6026      	str	r6, [r4, #0]
 80070da:	2000      	movs	r0, #0
 80070dc:	e7dc      	b.n	8007098 <__ssputs_r+0x58>
 80070de:	462a      	mov	r2, r5
 80070e0:	f000 fd4d 	bl	8007b7e <_realloc_r>
 80070e4:	4606      	mov	r6, r0
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d1e2      	bne.n	80070b0 <__ssputs_r+0x70>
 80070ea:	6921      	ldr	r1, [r4, #16]
 80070ec:	4650      	mov	r0, sl
 80070ee:	f7ff feff 	bl	8006ef0 <_free_r>
 80070f2:	e7c8      	b.n	8007086 <__ssputs_r+0x46>

080070f4 <_svfiprintf_r>:
 80070f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f8:	461d      	mov	r5, r3
 80070fa:	898b      	ldrh	r3, [r1, #12]
 80070fc:	061f      	lsls	r7, r3, #24
 80070fe:	b09d      	sub	sp, #116	; 0x74
 8007100:	4680      	mov	r8, r0
 8007102:	460c      	mov	r4, r1
 8007104:	4616      	mov	r6, r2
 8007106:	d50f      	bpl.n	8007128 <_svfiprintf_r+0x34>
 8007108:	690b      	ldr	r3, [r1, #16]
 800710a:	b96b      	cbnz	r3, 8007128 <_svfiprintf_r+0x34>
 800710c:	2140      	movs	r1, #64	; 0x40
 800710e:	f7ff ff3d 	bl	8006f8c <_malloc_r>
 8007112:	6020      	str	r0, [r4, #0]
 8007114:	6120      	str	r0, [r4, #16]
 8007116:	b928      	cbnz	r0, 8007124 <_svfiprintf_r+0x30>
 8007118:	230c      	movs	r3, #12
 800711a:	f8c8 3000 	str.w	r3, [r8]
 800711e:	f04f 30ff 	mov.w	r0, #4294967295
 8007122:	e0c8      	b.n	80072b6 <_svfiprintf_r+0x1c2>
 8007124:	2340      	movs	r3, #64	; 0x40
 8007126:	6163      	str	r3, [r4, #20]
 8007128:	2300      	movs	r3, #0
 800712a:	9309      	str	r3, [sp, #36]	; 0x24
 800712c:	2320      	movs	r3, #32
 800712e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007132:	2330      	movs	r3, #48	; 0x30
 8007134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007138:	9503      	str	r5, [sp, #12]
 800713a:	f04f 0b01 	mov.w	fp, #1
 800713e:	4637      	mov	r7, r6
 8007140:	463d      	mov	r5, r7
 8007142:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007146:	b10b      	cbz	r3, 800714c <_svfiprintf_r+0x58>
 8007148:	2b25      	cmp	r3, #37	; 0x25
 800714a:	d13e      	bne.n	80071ca <_svfiprintf_r+0xd6>
 800714c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007150:	d00b      	beq.n	800716a <_svfiprintf_r+0x76>
 8007152:	4653      	mov	r3, sl
 8007154:	4632      	mov	r2, r6
 8007156:	4621      	mov	r1, r4
 8007158:	4640      	mov	r0, r8
 800715a:	f7ff ff71 	bl	8007040 <__ssputs_r>
 800715e:	3001      	adds	r0, #1
 8007160:	f000 80a4 	beq.w	80072ac <_svfiprintf_r+0x1b8>
 8007164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007166:	4453      	add	r3, sl
 8007168:	9309      	str	r3, [sp, #36]	; 0x24
 800716a:	783b      	ldrb	r3, [r7, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 809d 	beq.w	80072ac <_svfiprintf_r+0x1b8>
 8007172:	2300      	movs	r3, #0
 8007174:	f04f 32ff 	mov.w	r2, #4294967295
 8007178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800717c:	9304      	str	r3, [sp, #16]
 800717e:	9307      	str	r3, [sp, #28]
 8007180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007184:	931a      	str	r3, [sp, #104]	; 0x68
 8007186:	462f      	mov	r7, r5
 8007188:	2205      	movs	r2, #5
 800718a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800718e:	4850      	ldr	r0, [pc, #320]	; (80072d0 <_svfiprintf_r+0x1dc>)
 8007190:	f7f9 f82e 	bl	80001f0 <memchr>
 8007194:	9b04      	ldr	r3, [sp, #16]
 8007196:	b9d0      	cbnz	r0, 80071ce <_svfiprintf_r+0xda>
 8007198:	06d9      	lsls	r1, r3, #27
 800719a:	bf44      	itt	mi
 800719c:	2220      	movmi	r2, #32
 800719e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071a2:	071a      	lsls	r2, r3, #28
 80071a4:	bf44      	itt	mi
 80071a6:	222b      	movmi	r2, #43	; 0x2b
 80071a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071ac:	782a      	ldrb	r2, [r5, #0]
 80071ae:	2a2a      	cmp	r2, #42	; 0x2a
 80071b0:	d015      	beq.n	80071de <_svfiprintf_r+0xea>
 80071b2:	9a07      	ldr	r2, [sp, #28]
 80071b4:	462f      	mov	r7, r5
 80071b6:	2000      	movs	r0, #0
 80071b8:	250a      	movs	r5, #10
 80071ba:	4639      	mov	r1, r7
 80071bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071c0:	3b30      	subs	r3, #48	; 0x30
 80071c2:	2b09      	cmp	r3, #9
 80071c4:	d94d      	bls.n	8007262 <_svfiprintf_r+0x16e>
 80071c6:	b1b8      	cbz	r0, 80071f8 <_svfiprintf_r+0x104>
 80071c8:	e00f      	b.n	80071ea <_svfiprintf_r+0xf6>
 80071ca:	462f      	mov	r7, r5
 80071cc:	e7b8      	b.n	8007140 <_svfiprintf_r+0x4c>
 80071ce:	4a40      	ldr	r2, [pc, #256]	; (80072d0 <_svfiprintf_r+0x1dc>)
 80071d0:	1a80      	subs	r0, r0, r2
 80071d2:	fa0b f000 	lsl.w	r0, fp, r0
 80071d6:	4318      	orrs	r0, r3
 80071d8:	9004      	str	r0, [sp, #16]
 80071da:	463d      	mov	r5, r7
 80071dc:	e7d3      	b.n	8007186 <_svfiprintf_r+0x92>
 80071de:	9a03      	ldr	r2, [sp, #12]
 80071e0:	1d11      	adds	r1, r2, #4
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	9103      	str	r1, [sp, #12]
 80071e6:	2a00      	cmp	r2, #0
 80071e8:	db01      	blt.n	80071ee <_svfiprintf_r+0xfa>
 80071ea:	9207      	str	r2, [sp, #28]
 80071ec:	e004      	b.n	80071f8 <_svfiprintf_r+0x104>
 80071ee:	4252      	negs	r2, r2
 80071f0:	f043 0302 	orr.w	r3, r3, #2
 80071f4:	9207      	str	r2, [sp, #28]
 80071f6:	9304      	str	r3, [sp, #16]
 80071f8:	783b      	ldrb	r3, [r7, #0]
 80071fa:	2b2e      	cmp	r3, #46	; 0x2e
 80071fc:	d10c      	bne.n	8007218 <_svfiprintf_r+0x124>
 80071fe:	787b      	ldrb	r3, [r7, #1]
 8007200:	2b2a      	cmp	r3, #42	; 0x2a
 8007202:	d133      	bne.n	800726c <_svfiprintf_r+0x178>
 8007204:	9b03      	ldr	r3, [sp, #12]
 8007206:	1d1a      	adds	r2, r3, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	9203      	str	r2, [sp, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	bfb8      	it	lt
 8007210:	f04f 33ff 	movlt.w	r3, #4294967295
 8007214:	3702      	adds	r7, #2
 8007216:	9305      	str	r3, [sp, #20]
 8007218:	4d2e      	ldr	r5, [pc, #184]	; (80072d4 <_svfiprintf_r+0x1e0>)
 800721a:	7839      	ldrb	r1, [r7, #0]
 800721c:	2203      	movs	r2, #3
 800721e:	4628      	mov	r0, r5
 8007220:	f7f8 ffe6 	bl	80001f0 <memchr>
 8007224:	b138      	cbz	r0, 8007236 <_svfiprintf_r+0x142>
 8007226:	2340      	movs	r3, #64	; 0x40
 8007228:	1b40      	subs	r0, r0, r5
 800722a:	fa03 f000 	lsl.w	r0, r3, r0
 800722e:	9b04      	ldr	r3, [sp, #16]
 8007230:	4303      	orrs	r3, r0
 8007232:	3701      	adds	r7, #1
 8007234:	9304      	str	r3, [sp, #16]
 8007236:	7839      	ldrb	r1, [r7, #0]
 8007238:	4827      	ldr	r0, [pc, #156]	; (80072d8 <_svfiprintf_r+0x1e4>)
 800723a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800723e:	2206      	movs	r2, #6
 8007240:	1c7e      	adds	r6, r7, #1
 8007242:	f7f8 ffd5 	bl	80001f0 <memchr>
 8007246:	2800      	cmp	r0, #0
 8007248:	d038      	beq.n	80072bc <_svfiprintf_r+0x1c8>
 800724a:	4b24      	ldr	r3, [pc, #144]	; (80072dc <_svfiprintf_r+0x1e8>)
 800724c:	bb13      	cbnz	r3, 8007294 <_svfiprintf_r+0x1a0>
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	3307      	adds	r3, #7
 8007252:	f023 0307 	bic.w	r3, r3, #7
 8007256:	3308      	adds	r3, #8
 8007258:	9303      	str	r3, [sp, #12]
 800725a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800725c:	444b      	add	r3, r9
 800725e:	9309      	str	r3, [sp, #36]	; 0x24
 8007260:	e76d      	b.n	800713e <_svfiprintf_r+0x4a>
 8007262:	fb05 3202 	mla	r2, r5, r2, r3
 8007266:	2001      	movs	r0, #1
 8007268:	460f      	mov	r7, r1
 800726a:	e7a6      	b.n	80071ba <_svfiprintf_r+0xc6>
 800726c:	2300      	movs	r3, #0
 800726e:	3701      	adds	r7, #1
 8007270:	9305      	str	r3, [sp, #20]
 8007272:	4619      	mov	r1, r3
 8007274:	250a      	movs	r5, #10
 8007276:	4638      	mov	r0, r7
 8007278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800727c:	3a30      	subs	r2, #48	; 0x30
 800727e:	2a09      	cmp	r2, #9
 8007280:	d903      	bls.n	800728a <_svfiprintf_r+0x196>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0c8      	beq.n	8007218 <_svfiprintf_r+0x124>
 8007286:	9105      	str	r1, [sp, #20]
 8007288:	e7c6      	b.n	8007218 <_svfiprintf_r+0x124>
 800728a:	fb05 2101 	mla	r1, r5, r1, r2
 800728e:	2301      	movs	r3, #1
 8007290:	4607      	mov	r7, r0
 8007292:	e7f0      	b.n	8007276 <_svfiprintf_r+0x182>
 8007294:	ab03      	add	r3, sp, #12
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	4622      	mov	r2, r4
 800729a:	4b11      	ldr	r3, [pc, #68]	; (80072e0 <_svfiprintf_r+0x1ec>)
 800729c:	a904      	add	r1, sp, #16
 800729e:	4640      	mov	r0, r8
 80072a0:	f3af 8000 	nop.w
 80072a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072a8:	4681      	mov	r9, r0
 80072aa:	d1d6      	bne.n	800725a <_svfiprintf_r+0x166>
 80072ac:	89a3      	ldrh	r3, [r4, #12]
 80072ae:	065b      	lsls	r3, r3, #25
 80072b0:	f53f af35 	bmi.w	800711e <_svfiprintf_r+0x2a>
 80072b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072b6:	b01d      	add	sp, #116	; 0x74
 80072b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072bc:	ab03      	add	r3, sp, #12
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4622      	mov	r2, r4
 80072c2:	4b07      	ldr	r3, [pc, #28]	; (80072e0 <_svfiprintf_r+0x1ec>)
 80072c4:	a904      	add	r1, sp, #16
 80072c6:	4640      	mov	r0, r8
 80072c8:	f000 f9c2 	bl	8007650 <_printf_i>
 80072cc:	e7ea      	b.n	80072a4 <_svfiprintf_r+0x1b0>
 80072ce:	bf00      	nop
 80072d0:	08007d84 	.word	0x08007d84
 80072d4:	08007d8a 	.word	0x08007d8a
 80072d8:	08007d8e 	.word	0x08007d8e
 80072dc:	00000000 	.word	0x00000000
 80072e0:	08007041 	.word	0x08007041

080072e4 <__sfputc_r>:
 80072e4:	6893      	ldr	r3, [r2, #8]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	b410      	push	{r4}
 80072ec:	6093      	str	r3, [r2, #8]
 80072ee:	da08      	bge.n	8007302 <__sfputc_r+0x1e>
 80072f0:	6994      	ldr	r4, [r2, #24]
 80072f2:	42a3      	cmp	r3, r4
 80072f4:	db01      	blt.n	80072fa <__sfputc_r+0x16>
 80072f6:	290a      	cmp	r1, #10
 80072f8:	d103      	bne.n	8007302 <__sfputc_r+0x1e>
 80072fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072fe:	f000 bb0d 	b.w	800791c <__swbuf_r>
 8007302:	6813      	ldr	r3, [r2, #0]
 8007304:	1c58      	adds	r0, r3, #1
 8007306:	6010      	str	r0, [r2, #0]
 8007308:	7019      	strb	r1, [r3, #0]
 800730a:	4608      	mov	r0, r1
 800730c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007310:	4770      	bx	lr

08007312 <__sfputs_r>:
 8007312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007314:	4606      	mov	r6, r0
 8007316:	460f      	mov	r7, r1
 8007318:	4614      	mov	r4, r2
 800731a:	18d5      	adds	r5, r2, r3
 800731c:	42ac      	cmp	r4, r5
 800731e:	d101      	bne.n	8007324 <__sfputs_r+0x12>
 8007320:	2000      	movs	r0, #0
 8007322:	e007      	b.n	8007334 <__sfputs_r+0x22>
 8007324:	463a      	mov	r2, r7
 8007326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732a:	4630      	mov	r0, r6
 800732c:	f7ff ffda 	bl	80072e4 <__sfputc_r>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d1f3      	bne.n	800731c <__sfputs_r+0xa>
 8007334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007338 <_vfiprintf_r>:
 8007338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733c:	460c      	mov	r4, r1
 800733e:	b09d      	sub	sp, #116	; 0x74
 8007340:	4617      	mov	r7, r2
 8007342:	461d      	mov	r5, r3
 8007344:	4606      	mov	r6, r0
 8007346:	b118      	cbz	r0, 8007350 <_vfiprintf_r+0x18>
 8007348:	6983      	ldr	r3, [r0, #24]
 800734a:	b90b      	cbnz	r3, 8007350 <_vfiprintf_r+0x18>
 800734c:	f7ff fcda 	bl	8006d04 <__sinit>
 8007350:	4b7c      	ldr	r3, [pc, #496]	; (8007544 <_vfiprintf_r+0x20c>)
 8007352:	429c      	cmp	r4, r3
 8007354:	d158      	bne.n	8007408 <_vfiprintf_r+0xd0>
 8007356:	6874      	ldr	r4, [r6, #4]
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	0718      	lsls	r0, r3, #28
 800735c:	d55e      	bpl.n	800741c <_vfiprintf_r+0xe4>
 800735e:	6923      	ldr	r3, [r4, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d05b      	beq.n	800741c <_vfiprintf_r+0xe4>
 8007364:	2300      	movs	r3, #0
 8007366:	9309      	str	r3, [sp, #36]	; 0x24
 8007368:	2320      	movs	r3, #32
 800736a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800736e:	2330      	movs	r3, #48	; 0x30
 8007370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007374:	9503      	str	r5, [sp, #12]
 8007376:	f04f 0b01 	mov.w	fp, #1
 800737a:	46b8      	mov	r8, r7
 800737c:	4645      	mov	r5, r8
 800737e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007382:	b10b      	cbz	r3, 8007388 <_vfiprintf_r+0x50>
 8007384:	2b25      	cmp	r3, #37	; 0x25
 8007386:	d154      	bne.n	8007432 <_vfiprintf_r+0xfa>
 8007388:	ebb8 0a07 	subs.w	sl, r8, r7
 800738c:	d00b      	beq.n	80073a6 <_vfiprintf_r+0x6e>
 800738e:	4653      	mov	r3, sl
 8007390:	463a      	mov	r2, r7
 8007392:	4621      	mov	r1, r4
 8007394:	4630      	mov	r0, r6
 8007396:	f7ff ffbc 	bl	8007312 <__sfputs_r>
 800739a:	3001      	adds	r0, #1
 800739c:	f000 80c2 	beq.w	8007524 <_vfiprintf_r+0x1ec>
 80073a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a2:	4453      	add	r3, sl
 80073a4:	9309      	str	r3, [sp, #36]	; 0x24
 80073a6:	f898 3000 	ldrb.w	r3, [r8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 80ba 	beq.w	8007524 <_vfiprintf_r+0x1ec>
 80073b0:	2300      	movs	r3, #0
 80073b2:	f04f 32ff 	mov.w	r2, #4294967295
 80073b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073ba:	9304      	str	r3, [sp, #16]
 80073bc:	9307      	str	r3, [sp, #28]
 80073be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073c2:	931a      	str	r3, [sp, #104]	; 0x68
 80073c4:	46a8      	mov	r8, r5
 80073c6:	2205      	movs	r2, #5
 80073c8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80073cc:	485e      	ldr	r0, [pc, #376]	; (8007548 <_vfiprintf_r+0x210>)
 80073ce:	f7f8 ff0f 	bl	80001f0 <memchr>
 80073d2:	9b04      	ldr	r3, [sp, #16]
 80073d4:	bb78      	cbnz	r0, 8007436 <_vfiprintf_r+0xfe>
 80073d6:	06d9      	lsls	r1, r3, #27
 80073d8:	bf44      	itt	mi
 80073da:	2220      	movmi	r2, #32
 80073dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073e0:	071a      	lsls	r2, r3, #28
 80073e2:	bf44      	itt	mi
 80073e4:	222b      	movmi	r2, #43	; 0x2b
 80073e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073ea:	782a      	ldrb	r2, [r5, #0]
 80073ec:	2a2a      	cmp	r2, #42	; 0x2a
 80073ee:	d02a      	beq.n	8007446 <_vfiprintf_r+0x10e>
 80073f0:	9a07      	ldr	r2, [sp, #28]
 80073f2:	46a8      	mov	r8, r5
 80073f4:	2000      	movs	r0, #0
 80073f6:	250a      	movs	r5, #10
 80073f8:	4641      	mov	r1, r8
 80073fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073fe:	3b30      	subs	r3, #48	; 0x30
 8007400:	2b09      	cmp	r3, #9
 8007402:	d969      	bls.n	80074d8 <_vfiprintf_r+0x1a0>
 8007404:	b360      	cbz	r0, 8007460 <_vfiprintf_r+0x128>
 8007406:	e024      	b.n	8007452 <_vfiprintf_r+0x11a>
 8007408:	4b50      	ldr	r3, [pc, #320]	; (800754c <_vfiprintf_r+0x214>)
 800740a:	429c      	cmp	r4, r3
 800740c:	d101      	bne.n	8007412 <_vfiprintf_r+0xda>
 800740e:	68b4      	ldr	r4, [r6, #8]
 8007410:	e7a2      	b.n	8007358 <_vfiprintf_r+0x20>
 8007412:	4b4f      	ldr	r3, [pc, #316]	; (8007550 <_vfiprintf_r+0x218>)
 8007414:	429c      	cmp	r4, r3
 8007416:	bf08      	it	eq
 8007418:	68f4      	ldreq	r4, [r6, #12]
 800741a:	e79d      	b.n	8007358 <_vfiprintf_r+0x20>
 800741c:	4621      	mov	r1, r4
 800741e:	4630      	mov	r0, r6
 8007420:	f000 fae0 	bl	80079e4 <__swsetup_r>
 8007424:	2800      	cmp	r0, #0
 8007426:	d09d      	beq.n	8007364 <_vfiprintf_r+0x2c>
 8007428:	f04f 30ff 	mov.w	r0, #4294967295
 800742c:	b01d      	add	sp, #116	; 0x74
 800742e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007432:	46a8      	mov	r8, r5
 8007434:	e7a2      	b.n	800737c <_vfiprintf_r+0x44>
 8007436:	4a44      	ldr	r2, [pc, #272]	; (8007548 <_vfiprintf_r+0x210>)
 8007438:	1a80      	subs	r0, r0, r2
 800743a:	fa0b f000 	lsl.w	r0, fp, r0
 800743e:	4318      	orrs	r0, r3
 8007440:	9004      	str	r0, [sp, #16]
 8007442:	4645      	mov	r5, r8
 8007444:	e7be      	b.n	80073c4 <_vfiprintf_r+0x8c>
 8007446:	9a03      	ldr	r2, [sp, #12]
 8007448:	1d11      	adds	r1, r2, #4
 800744a:	6812      	ldr	r2, [r2, #0]
 800744c:	9103      	str	r1, [sp, #12]
 800744e:	2a00      	cmp	r2, #0
 8007450:	db01      	blt.n	8007456 <_vfiprintf_r+0x11e>
 8007452:	9207      	str	r2, [sp, #28]
 8007454:	e004      	b.n	8007460 <_vfiprintf_r+0x128>
 8007456:	4252      	negs	r2, r2
 8007458:	f043 0302 	orr.w	r3, r3, #2
 800745c:	9207      	str	r2, [sp, #28]
 800745e:	9304      	str	r3, [sp, #16]
 8007460:	f898 3000 	ldrb.w	r3, [r8]
 8007464:	2b2e      	cmp	r3, #46	; 0x2e
 8007466:	d10e      	bne.n	8007486 <_vfiprintf_r+0x14e>
 8007468:	f898 3001 	ldrb.w	r3, [r8, #1]
 800746c:	2b2a      	cmp	r3, #42	; 0x2a
 800746e:	d138      	bne.n	80074e2 <_vfiprintf_r+0x1aa>
 8007470:	9b03      	ldr	r3, [sp, #12]
 8007472:	1d1a      	adds	r2, r3, #4
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	9203      	str	r2, [sp, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	bfb8      	it	lt
 800747c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007480:	f108 0802 	add.w	r8, r8, #2
 8007484:	9305      	str	r3, [sp, #20]
 8007486:	4d33      	ldr	r5, [pc, #204]	; (8007554 <_vfiprintf_r+0x21c>)
 8007488:	f898 1000 	ldrb.w	r1, [r8]
 800748c:	2203      	movs	r2, #3
 800748e:	4628      	mov	r0, r5
 8007490:	f7f8 feae 	bl	80001f0 <memchr>
 8007494:	b140      	cbz	r0, 80074a8 <_vfiprintf_r+0x170>
 8007496:	2340      	movs	r3, #64	; 0x40
 8007498:	1b40      	subs	r0, r0, r5
 800749a:	fa03 f000 	lsl.w	r0, r3, r0
 800749e:	9b04      	ldr	r3, [sp, #16]
 80074a0:	4303      	orrs	r3, r0
 80074a2:	f108 0801 	add.w	r8, r8, #1
 80074a6:	9304      	str	r3, [sp, #16]
 80074a8:	f898 1000 	ldrb.w	r1, [r8]
 80074ac:	482a      	ldr	r0, [pc, #168]	; (8007558 <_vfiprintf_r+0x220>)
 80074ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074b2:	2206      	movs	r2, #6
 80074b4:	f108 0701 	add.w	r7, r8, #1
 80074b8:	f7f8 fe9a 	bl	80001f0 <memchr>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d037      	beq.n	8007530 <_vfiprintf_r+0x1f8>
 80074c0:	4b26      	ldr	r3, [pc, #152]	; (800755c <_vfiprintf_r+0x224>)
 80074c2:	bb1b      	cbnz	r3, 800750c <_vfiprintf_r+0x1d4>
 80074c4:	9b03      	ldr	r3, [sp, #12]
 80074c6:	3307      	adds	r3, #7
 80074c8:	f023 0307 	bic.w	r3, r3, #7
 80074cc:	3308      	adds	r3, #8
 80074ce:	9303      	str	r3, [sp, #12]
 80074d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d2:	444b      	add	r3, r9
 80074d4:	9309      	str	r3, [sp, #36]	; 0x24
 80074d6:	e750      	b.n	800737a <_vfiprintf_r+0x42>
 80074d8:	fb05 3202 	mla	r2, r5, r2, r3
 80074dc:	2001      	movs	r0, #1
 80074de:	4688      	mov	r8, r1
 80074e0:	e78a      	b.n	80073f8 <_vfiprintf_r+0xc0>
 80074e2:	2300      	movs	r3, #0
 80074e4:	f108 0801 	add.w	r8, r8, #1
 80074e8:	9305      	str	r3, [sp, #20]
 80074ea:	4619      	mov	r1, r3
 80074ec:	250a      	movs	r5, #10
 80074ee:	4640      	mov	r0, r8
 80074f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074f4:	3a30      	subs	r2, #48	; 0x30
 80074f6:	2a09      	cmp	r2, #9
 80074f8:	d903      	bls.n	8007502 <_vfiprintf_r+0x1ca>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0c3      	beq.n	8007486 <_vfiprintf_r+0x14e>
 80074fe:	9105      	str	r1, [sp, #20]
 8007500:	e7c1      	b.n	8007486 <_vfiprintf_r+0x14e>
 8007502:	fb05 2101 	mla	r1, r5, r1, r2
 8007506:	2301      	movs	r3, #1
 8007508:	4680      	mov	r8, r0
 800750a:	e7f0      	b.n	80074ee <_vfiprintf_r+0x1b6>
 800750c:	ab03      	add	r3, sp, #12
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	4622      	mov	r2, r4
 8007512:	4b13      	ldr	r3, [pc, #76]	; (8007560 <_vfiprintf_r+0x228>)
 8007514:	a904      	add	r1, sp, #16
 8007516:	4630      	mov	r0, r6
 8007518:	f3af 8000 	nop.w
 800751c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007520:	4681      	mov	r9, r0
 8007522:	d1d5      	bne.n	80074d0 <_vfiprintf_r+0x198>
 8007524:	89a3      	ldrh	r3, [r4, #12]
 8007526:	065b      	lsls	r3, r3, #25
 8007528:	f53f af7e 	bmi.w	8007428 <_vfiprintf_r+0xf0>
 800752c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800752e:	e77d      	b.n	800742c <_vfiprintf_r+0xf4>
 8007530:	ab03      	add	r3, sp, #12
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	4622      	mov	r2, r4
 8007536:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <_vfiprintf_r+0x228>)
 8007538:	a904      	add	r1, sp, #16
 800753a:	4630      	mov	r0, r6
 800753c:	f000 f888 	bl	8007650 <_printf_i>
 8007540:	e7ec      	b.n	800751c <_vfiprintf_r+0x1e4>
 8007542:	bf00      	nop
 8007544:	08007d44 	.word	0x08007d44
 8007548:	08007d84 	.word	0x08007d84
 800754c:	08007d64 	.word	0x08007d64
 8007550:	08007d24 	.word	0x08007d24
 8007554:	08007d8a 	.word	0x08007d8a
 8007558:	08007d8e 	.word	0x08007d8e
 800755c:	00000000 	.word	0x00000000
 8007560:	08007313 	.word	0x08007313

08007564 <_printf_common>:
 8007564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007568:	4691      	mov	r9, r2
 800756a:	461f      	mov	r7, r3
 800756c:	688a      	ldr	r2, [r1, #8]
 800756e:	690b      	ldr	r3, [r1, #16]
 8007570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007574:	4293      	cmp	r3, r2
 8007576:	bfb8      	it	lt
 8007578:	4613      	movlt	r3, r2
 800757a:	f8c9 3000 	str.w	r3, [r9]
 800757e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007582:	4606      	mov	r6, r0
 8007584:	460c      	mov	r4, r1
 8007586:	b112      	cbz	r2, 800758e <_printf_common+0x2a>
 8007588:	3301      	adds	r3, #1
 800758a:	f8c9 3000 	str.w	r3, [r9]
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	0699      	lsls	r1, r3, #26
 8007592:	bf42      	ittt	mi
 8007594:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007598:	3302      	addmi	r3, #2
 800759a:	f8c9 3000 	strmi.w	r3, [r9]
 800759e:	6825      	ldr	r5, [r4, #0]
 80075a0:	f015 0506 	ands.w	r5, r5, #6
 80075a4:	d107      	bne.n	80075b6 <_printf_common+0x52>
 80075a6:	f104 0a19 	add.w	sl, r4, #25
 80075aa:	68e3      	ldr	r3, [r4, #12]
 80075ac:	f8d9 2000 	ldr.w	r2, [r9]
 80075b0:	1a9b      	subs	r3, r3, r2
 80075b2:	42ab      	cmp	r3, r5
 80075b4:	dc28      	bgt.n	8007608 <_printf_common+0xa4>
 80075b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80075ba:	6822      	ldr	r2, [r4, #0]
 80075bc:	3300      	adds	r3, #0
 80075be:	bf18      	it	ne
 80075c0:	2301      	movne	r3, #1
 80075c2:	0692      	lsls	r2, r2, #26
 80075c4:	d42d      	bmi.n	8007622 <_printf_common+0xbe>
 80075c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075ca:	4639      	mov	r1, r7
 80075cc:	4630      	mov	r0, r6
 80075ce:	47c0      	blx	r8
 80075d0:	3001      	adds	r0, #1
 80075d2:	d020      	beq.n	8007616 <_printf_common+0xb2>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	68e5      	ldr	r5, [r4, #12]
 80075d8:	f8d9 2000 	ldr.w	r2, [r9]
 80075dc:	f003 0306 	and.w	r3, r3, #6
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	bf08      	it	eq
 80075e4:	1aad      	subeq	r5, r5, r2
 80075e6:	68a3      	ldr	r3, [r4, #8]
 80075e8:	6922      	ldr	r2, [r4, #16]
 80075ea:	bf0c      	ite	eq
 80075ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075f0:	2500      	movne	r5, #0
 80075f2:	4293      	cmp	r3, r2
 80075f4:	bfc4      	itt	gt
 80075f6:	1a9b      	subgt	r3, r3, r2
 80075f8:	18ed      	addgt	r5, r5, r3
 80075fa:	f04f 0900 	mov.w	r9, #0
 80075fe:	341a      	adds	r4, #26
 8007600:	454d      	cmp	r5, r9
 8007602:	d11a      	bne.n	800763a <_printf_common+0xd6>
 8007604:	2000      	movs	r0, #0
 8007606:	e008      	b.n	800761a <_printf_common+0xb6>
 8007608:	2301      	movs	r3, #1
 800760a:	4652      	mov	r2, sl
 800760c:	4639      	mov	r1, r7
 800760e:	4630      	mov	r0, r6
 8007610:	47c0      	blx	r8
 8007612:	3001      	adds	r0, #1
 8007614:	d103      	bne.n	800761e <_printf_common+0xba>
 8007616:	f04f 30ff 	mov.w	r0, #4294967295
 800761a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761e:	3501      	adds	r5, #1
 8007620:	e7c3      	b.n	80075aa <_printf_common+0x46>
 8007622:	18e1      	adds	r1, r4, r3
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	2030      	movs	r0, #48	; 0x30
 8007628:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800762c:	4422      	add	r2, r4
 800762e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007632:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007636:	3302      	adds	r3, #2
 8007638:	e7c5      	b.n	80075c6 <_printf_common+0x62>
 800763a:	2301      	movs	r3, #1
 800763c:	4622      	mov	r2, r4
 800763e:	4639      	mov	r1, r7
 8007640:	4630      	mov	r0, r6
 8007642:	47c0      	blx	r8
 8007644:	3001      	adds	r0, #1
 8007646:	d0e6      	beq.n	8007616 <_printf_common+0xb2>
 8007648:	f109 0901 	add.w	r9, r9, #1
 800764c:	e7d8      	b.n	8007600 <_printf_common+0x9c>
	...

08007650 <_printf_i>:
 8007650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007654:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007658:	460c      	mov	r4, r1
 800765a:	7e09      	ldrb	r1, [r1, #24]
 800765c:	b085      	sub	sp, #20
 800765e:	296e      	cmp	r1, #110	; 0x6e
 8007660:	4617      	mov	r7, r2
 8007662:	4606      	mov	r6, r0
 8007664:	4698      	mov	r8, r3
 8007666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007668:	f000 80b3 	beq.w	80077d2 <_printf_i+0x182>
 800766c:	d822      	bhi.n	80076b4 <_printf_i+0x64>
 800766e:	2963      	cmp	r1, #99	; 0x63
 8007670:	d036      	beq.n	80076e0 <_printf_i+0x90>
 8007672:	d80a      	bhi.n	800768a <_printf_i+0x3a>
 8007674:	2900      	cmp	r1, #0
 8007676:	f000 80b9 	beq.w	80077ec <_printf_i+0x19c>
 800767a:	2958      	cmp	r1, #88	; 0x58
 800767c:	f000 8083 	beq.w	8007786 <_printf_i+0x136>
 8007680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007684:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007688:	e032      	b.n	80076f0 <_printf_i+0xa0>
 800768a:	2964      	cmp	r1, #100	; 0x64
 800768c:	d001      	beq.n	8007692 <_printf_i+0x42>
 800768e:	2969      	cmp	r1, #105	; 0x69
 8007690:	d1f6      	bne.n	8007680 <_printf_i+0x30>
 8007692:	6820      	ldr	r0, [r4, #0]
 8007694:	6813      	ldr	r3, [r2, #0]
 8007696:	0605      	lsls	r5, r0, #24
 8007698:	f103 0104 	add.w	r1, r3, #4
 800769c:	d52a      	bpl.n	80076f4 <_printf_i+0xa4>
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6011      	str	r1, [r2, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	da03      	bge.n	80076ae <_printf_i+0x5e>
 80076a6:	222d      	movs	r2, #45	; 0x2d
 80076a8:	425b      	negs	r3, r3
 80076aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80076ae:	486f      	ldr	r0, [pc, #444]	; (800786c <_printf_i+0x21c>)
 80076b0:	220a      	movs	r2, #10
 80076b2:	e039      	b.n	8007728 <_printf_i+0xd8>
 80076b4:	2973      	cmp	r1, #115	; 0x73
 80076b6:	f000 809d 	beq.w	80077f4 <_printf_i+0x1a4>
 80076ba:	d808      	bhi.n	80076ce <_printf_i+0x7e>
 80076bc:	296f      	cmp	r1, #111	; 0x6f
 80076be:	d020      	beq.n	8007702 <_printf_i+0xb2>
 80076c0:	2970      	cmp	r1, #112	; 0x70
 80076c2:	d1dd      	bne.n	8007680 <_printf_i+0x30>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	f043 0320 	orr.w	r3, r3, #32
 80076ca:	6023      	str	r3, [r4, #0]
 80076cc:	e003      	b.n	80076d6 <_printf_i+0x86>
 80076ce:	2975      	cmp	r1, #117	; 0x75
 80076d0:	d017      	beq.n	8007702 <_printf_i+0xb2>
 80076d2:	2978      	cmp	r1, #120	; 0x78
 80076d4:	d1d4      	bne.n	8007680 <_printf_i+0x30>
 80076d6:	2378      	movs	r3, #120	; 0x78
 80076d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076dc:	4864      	ldr	r0, [pc, #400]	; (8007870 <_printf_i+0x220>)
 80076de:	e055      	b.n	800778c <_printf_i+0x13c>
 80076e0:	6813      	ldr	r3, [r2, #0]
 80076e2:	1d19      	adds	r1, r3, #4
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6011      	str	r1, [r2, #0]
 80076e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076f0:	2301      	movs	r3, #1
 80076f2:	e08c      	b.n	800780e <_printf_i+0x1be>
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6011      	str	r1, [r2, #0]
 80076f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076fc:	bf18      	it	ne
 80076fe:	b21b      	sxthne	r3, r3
 8007700:	e7cf      	b.n	80076a2 <_printf_i+0x52>
 8007702:	6813      	ldr	r3, [r2, #0]
 8007704:	6825      	ldr	r5, [r4, #0]
 8007706:	1d18      	adds	r0, r3, #4
 8007708:	6010      	str	r0, [r2, #0]
 800770a:	0628      	lsls	r0, r5, #24
 800770c:	d501      	bpl.n	8007712 <_printf_i+0xc2>
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	e002      	b.n	8007718 <_printf_i+0xc8>
 8007712:	0668      	lsls	r0, r5, #25
 8007714:	d5fb      	bpl.n	800770e <_printf_i+0xbe>
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	4854      	ldr	r0, [pc, #336]	; (800786c <_printf_i+0x21c>)
 800771a:	296f      	cmp	r1, #111	; 0x6f
 800771c:	bf14      	ite	ne
 800771e:	220a      	movne	r2, #10
 8007720:	2208      	moveq	r2, #8
 8007722:	2100      	movs	r1, #0
 8007724:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007728:	6865      	ldr	r5, [r4, #4]
 800772a:	60a5      	str	r5, [r4, #8]
 800772c:	2d00      	cmp	r5, #0
 800772e:	f2c0 8095 	blt.w	800785c <_printf_i+0x20c>
 8007732:	6821      	ldr	r1, [r4, #0]
 8007734:	f021 0104 	bic.w	r1, r1, #4
 8007738:	6021      	str	r1, [r4, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d13d      	bne.n	80077ba <_printf_i+0x16a>
 800773e:	2d00      	cmp	r5, #0
 8007740:	f040 808e 	bne.w	8007860 <_printf_i+0x210>
 8007744:	4665      	mov	r5, ip
 8007746:	2a08      	cmp	r2, #8
 8007748:	d10b      	bne.n	8007762 <_printf_i+0x112>
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	07db      	lsls	r3, r3, #31
 800774e:	d508      	bpl.n	8007762 <_printf_i+0x112>
 8007750:	6923      	ldr	r3, [r4, #16]
 8007752:	6862      	ldr	r2, [r4, #4]
 8007754:	429a      	cmp	r2, r3
 8007756:	bfde      	ittt	le
 8007758:	2330      	movle	r3, #48	; 0x30
 800775a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800775e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007762:	ebac 0305 	sub.w	r3, ip, r5
 8007766:	6123      	str	r3, [r4, #16]
 8007768:	f8cd 8000 	str.w	r8, [sp]
 800776c:	463b      	mov	r3, r7
 800776e:	aa03      	add	r2, sp, #12
 8007770:	4621      	mov	r1, r4
 8007772:	4630      	mov	r0, r6
 8007774:	f7ff fef6 	bl	8007564 <_printf_common>
 8007778:	3001      	adds	r0, #1
 800777a:	d14d      	bne.n	8007818 <_printf_i+0x1c8>
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	b005      	add	sp, #20
 8007782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007786:	4839      	ldr	r0, [pc, #228]	; (800786c <_printf_i+0x21c>)
 8007788:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800778c:	6813      	ldr	r3, [r2, #0]
 800778e:	6821      	ldr	r1, [r4, #0]
 8007790:	1d1d      	adds	r5, r3, #4
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6015      	str	r5, [r2, #0]
 8007796:	060a      	lsls	r2, r1, #24
 8007798:	d50b      	bpl.n	80077b2 <_printf_i+0x162>
 800779a:	07ca      	lsls	r2, r1, #31
 800779c:	bf44      	itt	mi
 800779e:	f041 0120 	orrmi.w	r1, r1, #32
 80077a2:	6021      	strmi	r1, [r4, #0]
 80077a4:	b91b      	cbnz	r3, 80077ae <_printf_i+0x15e>
 80077a6:	6822      	ldr	r2, [r4, #0]
 80077a8:	f022 0220 	bic.w	r2, r2, #32
 80077ac:	6022      	str	r2, [r4, #0]
 80077ae:	2210      	movs	r2, #16
 80077b0:	e7b7      	b.n	8007722 <_printf_i+0xd2>
 80077b2:	064d      	lsls	r5, r1, #25
 80077b4:	bf48      	it	mi
 80077b6:	b29b      	uxthmi	r3, r3
 80077b8:	e7ef      	b.n	800779a <_printf_i+0x14a>
 80077ba:	4665      	mov	r5, ip
 80077bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80077c0:	fb02 3311 	mls	r3, r2, r1, r3
 80077c4:	5cc3      	ldrb	r3, [r0, r3]
 80077c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80077ca:	460b      	mov	r3, r1
 80077cc:	2900      	cmp	r1, #0
 80077ce:	d1f5      	bne.n	80077bc <_printf_i+0x16c>
 80077d0:	e7b9      	b.n	8007746 <_printf_i+0xf6>
 80077d2:	6813      	ldr	r3, [r2, #0]
 80077d4:	6825      	ldr	r5, [r4, #0]
 80077d6:	6961      	ldr	r1, [r4, #20]
 80077d8:	1d18      	adds	r0, r3, #4
 80077da:	6010      	str	r0, [r2, #0]
 80077dc:	0628      	lsls	r0, r5, #24
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	d501      	bpl.n	80077e6 <_printf_i+0x196>
 80077e2:	6019      	str	r1, [r3, #0]
 80077e4:	e002      	b.n	80077ec <_printf_i+0x19c>
 80077e6:	066a      	lsls	r2, r5, #25
 80077e8:	d5fb      	bpl.n	80077e2 <_printf_i+0x192>
 80077ea:	8019      	strh	r1, [r3, #0]
 80077ec:	2300      	movs	r3, #0
 80077ee:	6123      	str	r3, [r4, #16]
 80077f0:	4665      	mov	r5, ip
 80077f2:	e7b9      	b.n	8007768 <_printf_i+0x118>
 80077f4:	6813      	ldr	r3, [r2, #0]
 80077f6:	1d19      	adds	r1, r3, #4
 80077f8:	6011      	str	r1, [r2, #0]
 80077fa:	681d      	ldr	r5, [r3, #0]
 80077fc:	6862      	ldr	r2, [r4, #4]
 80077fe:	2100      	movs	r1, #0
 8007800:	4628      	mov	r0, r5
 8007802:	f7f8 fcf5 	bl	80001f0 <memchr>
 8007806:	b108      	cbz	r0, 800780c <_printf_i+0x1bc>
 8007808:	1b40      	subs	r0, r0, r5
 800780a:	6060      	str	r0, [r4, #4]
 800780c:	6863      	ldr	r3, [r4, #4]
 800780e:	6123      	str	r3, [r4, #16]
 8007810:	2300      	movs	r3, #0
 8007812:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007816:	e7a7      	b.n	8007768 <_printf_i+0x118>
 8007818:	6923      	ldr	r3, [r4, #16]
 800781a:	462a      	mov	r2, r5
 800781c:	4639      	mov	r1, r7
 800781e:	4630      	mov	r0, r6
 8007820:	47c0      	blx	r8
 8007822:	3001      	adds	r0, #1
 8007824:	d0aa      	beq.n	800777c <_printf_i+0x12c>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	079b      	lsls	r3, r3, #30
 800782a:	d413      	bmi.n	8007854 <_printf_i+0x204>
 800782c:	68e0      	ldr	r0, [r4, #12]
 800782e:	9b03      	ldr	r3, [sp, #12]
 8007830:	4298      	cmp	r0, r3
 8007832:	bfb8      	it	lt
 8007834:	4618      	movlt	r0, r3
 8007836:	e7a3      	b.n	8007780 <_printf_i+0x130>
 8007838:	2301      	movs	r3, #1
 800783a:	464a      	mov	r2, r9
 800783c:	4639      	mov	r1, r7
 800783e:	4630      	mov	r0, r6
 8007840:	47c0      	blx	r8
 8007842:	3001      	adds	r0, #1
 8007844:	d09a      	beq.n	800777c <_printf_i+0x12c>
 8007846:	3501      	adds	r5, #1
 8007848:	68e3      	ldr	r3, [r4, #12]
 800784a:	9a03      	ldr	r2, [sp, #12]
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	42ab      	cmp	r3, r5
 8007850:	dcf2      	bgt.n	8007838 <_printf_i+0x1e8>
 8007852:	e7eb      	b.n	800782c <_printf_i+0x1dc>
 8007854:	2500      	movs	r5, #0
 8007856:	f104 0919 	add.w	r9, r4, #25
 800785a:	e7f5      	b.n	8007848 <_printf_i+0x1f8>
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1ac      	bne.n	80077ba <_printf_i+0x16a>
 8007860:	7803      	ldrb	r3, [r0, #0]
 8007862:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007866:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800786a:	e76c      	b.n	8007746 <_printf_i+0xf6>
 800786c:	08007d95 	.word	0x08007d95
 8007870:	08007da6 	.word	0x08007da6

08007874 <_sbrk_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	4c06      	ldr	r4, [pc, #24]	; (8007890 <_sbrk_r+0x1c>)
 8007878:	2300      	movs	r3, #0
 800787a:	4605      	mov	r5, r0
 800787c:	4608      	mov	r0, r1
 800787e:	6023      	str	r3, [r4, #0]
 8007880:	f000 f9be 	bl	8007c00 <_sbrk>
 8007884:	1c43      	adds	r3, r0, #1
 8007886:	d102      	bne.n	800788e <_sbrk_r+0x1a>
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	b103      	cbz	r3, 800788e <_sbrk_r+0x1a>
 800788c:	602b      	str	r3, [r5, #0]
 800788e:	bd38      	pop	{r3, r4, r5, pc}
 8007890:	20004338 	.word	0x20004338

08007894 <__sread>:
 8007894:	b510      	push	{r4, lr}
 8007896:	460c      	mov	r4, r1
 8007898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789c:	f000 f996 	bl	8007bcc <_read_r>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	bfab      	itete	ge
 80078a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078a6:	89a3      	ldrhlt	r3, [r4, #12]
 80078a8:	181b      	addge	r3, r3, r0
 80078aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078ae:	bfac      	ite	ge
 80078b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80078b2:	81a3      	strhlt	r3, [r4, #12]
 80078b4:	bd10      	pop	{r4, pc}

080078b6 <__swrite>:
 80078b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ba:	461f      	mov	r7, r3
 80078bc:	898b      	ldrh	r3, [r1, #12]
 80078be:	05db      	lsls	r3, r3, #23
 80078c0:	4605      	mov	r5, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	4616      	mov	r6, r2
 80078c6:	d505      	bpl.n	80078d4 <__swrite+0x1e>
 80078c8:	2302      	movs	r3, #2
 80078ca:	2200      	movs	r2, #0
 80078cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d0:	f000 f928 	bl	8007b24 <_lseek_r>
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078de:	81a3      	strh	r3, [r4, #12]
 80078e0:	4632      	mov	r2, r6
 80078e2:	463b      	mov	r3, r7
 80078e4:	4628      	mov	r0, r5
 80078e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ea:	f000 b869 	b.w	80079c0 <_write_r>

080078ee <__sseek>:
 80078ee:	b510      	push	{r4, lr}
 80078f0:	460c      	mov	r4, r1
 80078f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f6:	f000 f915 	bl	8007b24 <_lseek_r>
 80078fa:	1c43      	adds	r3, r0, #1
 80078fc:	89a3      	ldrh	r3, [r4, #12]
 80078fe:	bf15      	itete	ne
 8007900:	6560      	strne	r0, [r4, #84]	; 0x54
 8007902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800790a:	81a3      	strheq	r3, [r4, #12]
 800790c:	bf18      	it	ne
 800790e:	81a3      	strhne	r3, [r4, #12]
 8007910:	bd10      	pop	{r4, pc}

08007912 <__sclose>:
 8007912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007916:	f000 b8d3 	b.w	8007ac0 <_close_r>
	...

0800791c <__swbuf_r>:
 800791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791e:	460e      	mov	r6, r1
 8007920:	4614      	mov	r4, r2
 8007922:	4605      	mov	r5, r0
 8007924:	b118      	cbz	r0, 800792e <__swbuf_r+0x12>
 8007926:	6983      	ldr	r3, [r0, #24]
 8007928:	b90b      	cbnz	r3, 800792e <__swbuf_r+0x12>
 800792a:	f7ff f9eb 	bl	8006d04 <__sinit>
 800792e:	4b21      	ldr	r3, [pc, #132]	; (80079b4 <__swbuf_r+0x98>)
 8007930:	429c      	cmp	r4, r3
 8007932:	d12a      	bne.n	800798a <__swbuf_r+0x6e>
 8007934:	686c      	ldr	r4, [r5, #4]
 8007936:	69a3      	ldr	r3, [r4, #24]
 8007938:	60a3      	str	r3, [r4, #8]
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	071a      	lsls	r2, r3, #28
 800793e:	d52e      	bpl.n	800799e <__swbuf_r+0x82>
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	b363      	cbz	r3, 800799e <__swbuf_r+0x82>
 8007944:	6923      	ldr	r3, [r4, #16]
 8007946:	6820      	ldr	r0, [r4, #0]
 8007948:	1ac0      	subs	r0, r0, r3
 800794a:	6963      	ldr	r3, [r4, #20]
 800794c:	b2f6      	uxtb	r6, r6
 800794e:	4283      	cmp	r3, r0
 8007950:	4637      	mov	r7, r6
 8007952:	dc04      	bgt.n	800795e <__swbuf_r+0x42>
 8007954:	4621      	mov	r1, r4
 8007956:	4628      	mov	r0, r5
 8007958:	f7ff f96a 	bl	8006c30 <_fflush_r>
 800795c:	bb28      	cbnz	r0, 80079aa <__swbuf_r+0x8e>
 800795e:	68a3      	ldr	r3, [r4, #8]
 8007960:	3b01      	subs	r3, #1
 8007962:	60a3      	str	r3, [r4, #8]
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	6022      	str	r2, [r4, #0]
 800796a:	701e      	strb	r6, [r3, #0]
 800796c:	6963      	ldr	r3, [r4, #20]
 800796e:	3001      	adds	r0, #1
 8007970:	4283      	cmp	r3, r0
 8007972:	d004      	beq.n	800797e <__swbuf_r+0x62>
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	07db      	lsls	r3, r3, #31
 8007978:	d519      	bpl.n	80079ae <__swbuf_r+0x92>
 800797a:	2e0a      	cmp	r6, #10
 800797c:	d117      	bne.n	80079ae <__swbuf_r+0x92>
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f7ff f955 	bl	8006c30 <_fflush_r>
 8007986:	b190      	cbz	r0, 80079ae <__swbuf_r+0x92>
 8007988:	e00f      	b.n	80079aa <__swbuf_r+0x8e>
 800798a:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <__swbuf_r+0x9c>)
 800798c:	429c      	cmp	r4, r3
 800798e:	d101      	bne.n	8007994 <__swbuf_r+0x78>
 8007990:	68ac      	ldr	r4, [r5, #8]
 8007992:	e7d0      	b.n	8007936 <__swbuf_r+0x1a>
 8007994:	4b09      	ldr	r3, [pc, #36]	; (80079bc <__swbuf_r+0xa0>)
 8007996:	429c      	cmp	r4, r3
 8007998:	bf08      	it	eq
 800799a:	68ec      	ldreq	r4, [r5, #12]
 800799c:	e7cb      	b.n	8007936 <__swbuf_r+0x1a>
 800799e:	4621      	mov	r1, r4
 80079a0:	4628      	mov	r0, r5
 80079a2:	f000 f81f 	bl	80079e4 <__swsetup_r>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d0cc      	beq.n	8007944 <__swbuf_r+0x28>
 80079aa:	f04f 37ff 	mov.w	r7, #4294967295
 80079ae:	4638      	mov	r0, r7
 80079b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b2:	bf00      	nop
 80079b4:	08007d44 	.word	0x08007d44
 80079b8:	08007d64 	.word	0x08007d64
 80079bc:	08007d24 	.word	0x08007d24

080079c0 <_write_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4c07      	ldr	r4, [pc, #28]	; (80079e0 <_write_r+0x20>)
 80079c4:	4605      	mov	r5, r0
 80079c6:	4608      	mov	r0, r1
 80079c8:	4611      	mov	r1, r2
 80079ca:	2200      	movs	r2, #0
 80079cc:	6022      	str	r2, [r4, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	f7f9 faf8 	bl	8000fc4 <_write>
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	d102      	bne.n	80079de <_write_r+0x1e>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	b103      	cbz	r3, 80079de <_write_r+0x1e>
 80079dc:	602b      	str	r3, [r5, #0]
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	20004338 	.word	0x20004338

080079e4 <__swsetup_r>:
 80079e4:	4b32      	ldr	r3, [pc, #200]	; (8007ab0 <__swsetup_r+0xcc>)
 80079e6:	b570      	push	{r4, r5, r6, lr}
 80079e8:	681d      	ldr	r5, [r3, #0]
 80079ea:	4606      	mov	r6, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	b125      	cbz	r5, 80079fa <__swsetup_r+0x16>
 80079f0:	69ab      	ldr	r3, [r5, #24]
 80079f2:	b913      	cbnz	r3, 80079fa <__swsetup_r+0x16>
 80079f4:	4628      	mov	r0, r5
 80079f6:	f7ff f985 	bl	8006d04 <__sinit>
 80079fa:	4b2e      	ldr	r3, [pc, #184]	; (8007ab4 <__swsetup_r+0xd0>)
 80079fc:	429c      	cmp	r4, r3
 80079fe:	d10f      	bne.n	8007a20 <__swsetup_r+0x3c>
 8007a00:	686c      	ldr	r4, [r5, #4]
 8007a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	0715      	lsls	r5, r2, #28
 8007a0a:	d42c      	bmi.n	8007a66 <__swsetup_r+0x82>
 8007a0c:	06d0      	lsls	r0, r2, #27
 8007a0e:	d411      	bmi.n	8007a34 <__swsetup_r+0x50>
 8007a10:	2209      	movs	r2, #9
 8007a12:	6032      	str	r2, [r6, #0]
 8007a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a18:	81a3      	strh	r3, [r4, #12]
 8007a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1e:	e03e      	b.n	8007a9e <__swsetup_r+0xba>
 8007a20:	4b25      	ldr	r3, [pc, #148]	; (8007ab8 <__swsetup_r+0xd4>)
 8007a22:	429c      	cmp	r4, r3
 8007a24:	d101      	bne.n	8007a2a <__swsetup_r+0x46>
 8007a26:	68ac      	ldr	r4, [r5, #8]
 8007a28:	e7eb      	b.n	8007a02 <__swsetup_r+0x1e>
 8007a2a:	4b24      	ldr	r3, [pc, #144]	; (8007abc <__swsetup_r+0xd8>)
 8007a2c:	429c      	cmp	r4, r3
 8007a2e:	bf08      	it	eq
 8007a30:	68ec      	ldreq	r4, [r5, #12]
 8007a32:	e7e6      	b.n	8007a02 <__swsetup_r+0x1e>
 8007a34:	0751      	lsls	r1, r2, #29
 8007a36:	d512      	bpl.n	8007a5e <__swsetup_r+0x7a>
 8007a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a3a:	b141      	cbz	r1, 8007a4e <__swsetup_r+0x6a>
 8007a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a40:	4299      	cmp	r1, r3
 8007a42:	d002      	beq.n	8007a4a <__swsetup_r+0x66>
 8007a44:	4630      	mov	r0, r6
 8007a46:	f7ff fa53 	bl	8006ef0 <_free_r>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	2300      	movs	r3, #0
 8007a58:	6063      	str	r3, [r4, #4]
 8007a5a:	6923      	ldr	r3, [r4, #16]
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	f043 0308 	orr.w	r3, r3, #8
 8007a64:	81a3      	strh	r3, [r4, #12]
 8007a66:	6923      	ldr	r3, [r4, #16]
 8007a68:	b94b      	cbnz	r3, 8007a7e <__swsetup_r+0x9a>
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a74:	d003      	beq.n	8007a7e <__swsetup_r+0x9a>
 8007a76:	4621      	mov	r1, r4
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f7ff f9f1 	bl	8006e60 <__smakebuf_r>
 8007a7e:	89a2      	ldrh	r2, [r4, #12]
 8007a80:	f012 0301 	ands.w	r3, r2, #1
 8007a84:	d00c      	beq.n	8007aa0 <__swsetup_r+0xbc>
 8007a86:	2300      	movs	r3, #0
 8007a88:	60a3      	str	r3, [r4, #8]
 8007a8a:	6963      	ldr	r3, [r4, #20]
 8007a8c:	425b      	negs	r3, r3
 8007a8e:	61a3      	str	r3, [r4, #24]
 8007a90:	6923      	ldr	r3, [r4, #16]
 8007a92:	b953      	cbnz	r3, 8007aaa <__swsetup_r+0xc6>
 8007a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a98:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007a9c:	d1ba      	bne.n	8007a14 <__swsetup_r+0x30>
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
 8007aa0:	0792      	lsls	r2, r2, #30
 8007aa2:	bf58      	it	pl
 8007aa4:	6963      	ldrpl	r3, [r4, #20]
 8007aa6:	60a3      	str	r3, [r4, #8]
 8007aa8:	e7f2      	b.n	8007a90 <__swsetup_r+0xac>
 8007aaa:	2000      	movs	r0, #0
 8007aac:	e7f7      	b.n	8007a9e <__swsetup_r+0xba>
 8007aae:	bf00      	nop
 8007ab0:	20000028 	.word	0x20000028
 8007ab4:	08007d44 	.word	0x08007d44
 8007ab8:	08007d64 	.word	0x08007d64
 8007abc:	08007d24 	.word	0x08007d24

08007ac0 <_close_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4c06      	ldr	r4, [pc, #24]	; (8007adc <_close_r+0x1c>)
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	4608      	mov	r0, r1
 8007aca:	6023      	str	r3, [r4, #0]
 8007acc:	f7f9 faa6 	bl	800101c <_close>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d102      	bne.n	8007ada <_close_r+0x1a>
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	b103      	cbz	r3, 8007ada <_close_r+0x1a>
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	20004338 	.word	0x20004338

08007ae0 <_fstat_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4c07      	ldr	r4, [pc, #28]	; (8007b00 <_fstat_r+0x20>)
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	4608      	mov	r0, r1
 8007aea:	4611      	mov	r1, r2
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	f7f9 fae5 	bl	80010bc <_fstat>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	d102      	bne.n	8007afc <_fstat_r+0x1c>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	b103      	cbz	r3, 8007afc <_fstat_r+0x1c>
 8007afa:	602b      	str	r3, [r5, #0]
 8007afc:	bd38      	pop	{r3, r4, r5, pc}
 8007afe:	bf00      	nop
 8007b00:	20004338 	.word	0x20004338

08007b04 <_isatty_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4c06      	ldr	r4, [pc, #24]	; (8007b20 <_isatty_r+0x1c>)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	f7f9 fa42 	bl	8000f98 <_isatty>
 8007b14:	1c43      	adds	r3, r0, #1
 8007b16:	d102      	bne.n	8007b1e <_isatty_r+0x1a>
 8007b18:	6823      	ldr	r3, [r4, #0]
 8007b1a:	b103      	cbz	r3, 8007b1e <_isatty_r+0x1a>
 8007b1c:	602b      	str	r3, [r5, #0]
 8007b1e:	bd38      	pop	{r3, r4, r5, pc}
 8007b20:	20004338 	.word	0x20004338

08007b24 <_lseek_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4c07      	ldr	r4, [pc, #28]	; (8007b44 <_lseek_r+0x20>)
 8007b28:	4605      	mov	r5, r0
 8007b2a:	4608      	mov	r0, r1
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	2200      	movs	r2, #0
 8007b30:	6022      	str	r2, [r4, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	f7f9 fa89 	bl	800104a <_lseek>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	d102      	bne.n	8007b42 <_lseek_r+0x1e>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	b103      	cbz	r3, 8007b42 <_lseek_r+0x1e>
 8007b40:	602b      	str	r3, [r5, #0]
 8007b42:	bd38      	pop	{r3, r4, r5, pc}
 8007b44:	20004338 	.word	0x20004338

08007b48 <memmove>:
 8007b48:	4288      	cmp	r0, r1
 8007b4a:	b510      	push	{r4, lr}
 8007b4c:	eb01 0302 	add.w	r3, r1, r2
 8007b50:	d807      	bhi.n	8007b62 <memmove+0x1a>
 8007b52:	1e42      	subs	r2, r0, #1
 8007b54:	4299      	cmp	r1, r3
 8007b56:	d00a      	beq.n	8007b6e <memmove+0x26>
 8007b58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b5c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007b60:	e7f8      	b.n	8007b54 <memmove+0xc>
 8007b62:	4283      	cmp	r3, r0
 8007b64:	d9f5      	bls.n	8007b52 <memmove+0xa>
 8007b66:	1881      	adds	r1, r0, r2
 8007b68:	1ad2      	subs	r2, r2, r3
 8007b6a:	42d3      	cmn	r3, r2
 8007b6c:	d100      	bne.n	8007b70 <memmove+0x28>
 8007b6e:	bd10      	pop	{r4, pc}
 8007b70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b74:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007b78:	e7f7      	b.n	8007b6a <memmove+0x22>

08007b7a <__malloc_lock>:
 8007b7a:	4770      	bx	lr

08007b7c <__malloc_unlock>:
 8007b7c:	4770      	bx	lr

08007b7e <_realloc_r>:
 8007b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b80:	4607      	mov	r7, r0
 8007b82:	4614      	mov	r4, r2
 8007b84:	460e      	mov	r6, r1
 8007b86:	b921      	cbnz	r1, 8007b92 <_realloc_r+0x14>
 8007b88:	4611      	mov	r1, r2
 8007b8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b8e:	f7ff b9fd 	b.w	8006f8c <_malloc_r>
 8007b92:	b922      	cbnz	r2, 8007b9e <_realloc_r+0x20>
 8007b94:	f7ff f9ac 	bl	8006ef0 <_free_r>
 8007b98:	4625      	mov	r5, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b9e:	f000 f827 	bl	8007bf0 <_malloc_usable_size_r>
 8007ba2:	42a0      	cmp	r0, r4
 8007ba4:	d20f      	bcs.n	8007bc6 <_realloc_r+0x48>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff f9ef 	bl	8006f8c <_malloc_r>
 8007bae:	4605      	mov	r5, r0
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d0f2      	beq.n	8007b9a <_realloc_r+0x1c>
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4622      	mov	r2, r4
 8007bb8:	f7fe feba 	bl	8006930 <memcpy>
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	f7ff f996 	bl	8006ef0 <_free_r>
 8007bc4:	e7e9      	b.n	8007b9a <_realloc_r+0x1c>
 8007bc6:	4635      	mov	r5, r6
 8007bc8:	e7e7      	b.n	8007b9a <_realloc_r+0x1c>
	...

08007bcc <_read_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4c07      	ldr	r4, [pc, #28]	; (8007bec <_read_r+0x20>)
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	6022      	str	r2, [r4, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f7f9 fa46 	bl	800106c <_read>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_read_r+0x1e>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_read_r+0x1e>
 8007be8:	602b      	str	r3, [r5, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	20004338 	.word	0x20004338

08007bf0 <_malloc_usable_size_r>:
 8007bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bf4:	1f18      	subs	r0, r3, #4
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bfbc      	itt	lt
 8007bfa:	580b      	ldrlt	r3, [r1, r0]
 8007bfc:	18c0      	addlt	r0, r0, r3
 8007bfe:	4770      	bx	lr

08007c00 <_sbrk>:
 8007c00:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <_sbrk+0x14>)
 8007c02:	6819      	ldr	r1, [r3, #0]
 8007c04:	4602      	mov	r2, r0
 8007c06:	b909      	cbnz	r1, 8007c0c <_sbrk+0xc>
 8007c08:	4903      	ldr	r1, [pc, #12]	; (8007c18 <_sbrk+0x18>)
 8007c0a:	6019      	str	r1, [r3, #0]
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	4402      	add	r2, r0
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	4770      	bx	lr
 8007c14:	20004068 	.word	0x20004068
 8007c18:	20004340 	.word	0x20004340

08007c1c <_init>:
 8007c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1e:	bf00      	nop
 8007c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c22:	bc08      	pop	{r3}
 8007c24:	469e      	mov	lr, r3
 8007c26:	4770      	bx	lr

08007c28 <_fini>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	bf00      	nop
 8007c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2e:	bc08      	pop	{r3}
 8007c30:	469e      	mov	lr, r3
 8007c32:	4770      	bx	lr
