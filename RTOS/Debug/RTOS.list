
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c0  080057c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080057c0  080057c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057c8  080057c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057cc  080057cc  000157cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080057d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004120  20000070  08005840  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004190  08005840  00024190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013093  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c19  00000000  00000000  00033133  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  00035d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  00036e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018e4f  00000000  00000000  00037dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d53b  00000000  00000000  00050c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000949ff  00000000  00000000  0005e152  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f2b51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b58  00000000  00000000  000f2bcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800566c 	.word	0x0800566c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800566c 	.word	0x0800566c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000008c 	.word	0x2000008c
 8000510:	200000e0 	.word	0x200000e0

08000514 <main>:
osThreadId Task2TID;



int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b096      	sub	sp, #88	; 0x58
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fca3 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f851 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f901 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 8000526:	f000 f8d7 	bl	80006d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f8ab 	bl	8000684 <MX_USART2_UART_Init>
  RetargetInit(&huart2); //use scanf and printf in UART2 which connected to COM3.
 800052e:	481e      	ldr	r0, [pc, #120]	; (80005a8 <main+0x94>)
 8000530:	f000 f9c4 	bl	80008bc <RetargetInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <main+0x98>)
 8000536:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800053a:	461d      	mov	r5, r3
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000548:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 ff37 	bl	80033c2 <osThreadCreate>
 8000554:	4602      	mov	r2, r0
 8000556:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <main+0x9c>)
 8000558:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(Task1,StartTask1,TASK1_PRIORITY,0,TASK1_STK_SIZE);
 800055a:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <main+0xa0>)
 800055c:	f107 0420 	add.w	r4, r7, #32
 8000560:	461d      	mov	r5, r3
 8000562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000566:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1TID = osThreadCreate(osThread(Task1), NULL);
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f002 ff24 	bl	80033c2 <osThreadCreate>
 800057a:	4602      	mov	r2, r0
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <main+0xa4>)
 800057e:	601a      	str	r2, [r3, #0]

  osThreadDef(Task2,StartTask2,TASK2_PRIORITY,0,TASK2_STK_SIZE);
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <main+0xa8>)
 8000582:	1d3c      	adds	r4, r7, #4
 8000584:	461d      	mov	r5, r3
 8000586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2TID = osThreadCreate(osThread(Task2), NULL);
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 ff13 	bl	80033c2 <osThreadCreate>
 800059c:	4602      	mov	r2, r0
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <main+0xac>)
 80005a0:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a2:	f002 ff07 	bl	80033b4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x92>
 80005a8:	20004104 	.word	0x20004104
 80005ac:	08005690 	.word	0x08005690
 80005b0:	20004038 	.word	0x20004038
 80005b4:	080056b4 	.word	0x080056b4
 80005b8:	2000409c 	.word	0x2000409c
 80005bc:	080056d8 	.word	0x080056d8
 80005c0:	20004100 	.word	0x20004100

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fb24 	bl	8004c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <SystemClock_Config+0xb8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a22      	ldr	r2, [pc, #136]	; (800067c <SystemClock_Config+0xb8>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <SystemClock_Config+0xb8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <SystemClock_Config+0xbc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000610:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <SystemClock_Config+0xbc>)
 8000612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <SystemClock_Config+0xbc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000630:	2300      	movs	r3, #0
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fa1b 	bl	8001a74 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000644:	f000 f932 	bl	80008ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fc48 	bl	8001ef8 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800066e:	f000 f91d 	bl	80008ac <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	; 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART2_UART_Init+0x4c>)
 800068a:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <MX_USART2_UART_Init+0x50>)
 800068c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_USART2_UART_Init+0x4c>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART2_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART2_UART_Init+0x4c>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART2_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_USART2_UART_Init+0x4c>)
 80006bc:	f002 f834 	bl	8002728 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006c6:	f000 f8f1 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20004104 	.word	0x20004104
 80006d4:	40004400 	.word	0x40004400

080006d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_DMA_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <MX_DMA_Init+0x4c>)
 80006e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_DMA_Init+0x4c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2105      	movs	r1, #5
 80006fe:	2010      	movs	r0, #16
 8000700:	f000 fcaa 	bl	8001058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000704:	2010      	movs	r0, #16
 8000706:	f000 fcc3 	bl	8001090 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2105      	movs	r1, #5
 800070e:	2011      	movs	r0, #17
 8000710:	f000 fca2 	bl	8001058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000714:	2011      	movs	r0, #17
 8000716:	f000 fcbb 	bl	8001090 <HAL_NVIC_EnableIRQ>

}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a29      	ldr	r2, [pc, #164]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a22      	ldr	r2, [pc, #136]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_GPIO_Init+0xc4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_GPIO_Init+0xc4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	4816      	ldr	r0, [pc, #88]	; (80007f0 <MX_GPIO_Init+0xc8>)
 8000798:	f001 f914 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800079c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_GPIO_Init+0xcc>)
 80007a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4811      	ldr	r0, [pc, #68]	; (80007f8 <MX_GPIO_Init+0xd0>)
 80007b2:	f000 ff85 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007b6:	2320      	movs	r3, #32
 80007b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <MX_GPIO_Init+0xc8>)
 80007ce:	f000 ff77 	bl	80016c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2105      	movs	r1, #5
 80007d6:	2028      	movs	r0, #40	; 0x28
 80007d8:	f000 fc3e 	bl	8001058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007dc:	2028      	movs	r0, #40	; 0x28
 80007de:	f000 fc57 	bl	8001090 <HAL_NVIC_EnableIRQ>

}
 80007e2:	bf00      	nop
 80007e4:	3720      	adds	r7, #32
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000
 80007f4:	10110000 	.word	0x10110000
 80007f8:	40020800 	.word	0x40020800

080007fc <StartTask1>:

/* USER CODE BEGIN 4 */
void StartTask1(void const* argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8000804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <StartTask1+0x1c>)
 800080a:	f001 f8f4 	bl	80019f6 <HAL_GPIO_TogglePin>
		osDelay(500);
 800080e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000812:	f002 fe22 	bl	800345a <osDelay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8000816:	e7f5      	b.n	8000804 <StartTask1+0x8>
 8000818:	40020c00 	.word	0x40020c00

0800081c <StartTask2>:
	}
	osThreadTerminate(NULL);
}
void StartTask2(void const* argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	int i=0;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
	while(1){
		i++;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	3301      	adds	r3, #1
 800082c:	60fb      	str	r3, [r7, #12]
		if (i==5){
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2b05      	cmp	r3, #5
 8000832:	d108      	bne.n	8000846 <StartTask2+0x2a>
			osThreadSuspend(Task1TID);
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <StartTask2+0x50>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fe22 	bl	8003482 <osThreadSuspend>
			printf("Your LED has been turned off\r\n");
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <StartTask2+0x54>)
 8000840:	f004 fa52 	bl	8004ce8 <puts>
 8000844:	e00c      	b.n	8000860 <StartTask2+0x44>
		}
		else if(i==10){
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2b0a      	cmp	r3, #10
 800084a:	d109      	bne.n	8000860 <StartTask2+0x44>
			i = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
			osThreadResume(Task1TID);
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <StartTask2+0x50>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fe21 	bl	800349c <osThreadResume>
			printf("Your LED has been turned on\r\n");
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <StartTask2+0x58>)
 800085c:	f004 fa44 	bl	8004ce8 <puts>
		}
		osDelay(1000);
 8000860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000864:	f002 fdf9 	bl	800345a <osDelay>
		i++;
 8000868:	e7de      	b.n	8000828 <StartTask2+0xc>
 800086a:	bf00      	nop
 800086c:	2000409c 	.word	0x2000409c
 8000870:	080056f4 	.word	0x080056f4
 8000874:	08005714 	.word	0x08005714

08000878 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f002 fdea 	bl	800345a <osDelay>
 8000886:	e7fb      	b.n	8000880 <StartDefaultTask+0x8>

08000888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d101      	bne.n	800089e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089a:	f000 fb05 	bl	8000ea8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40010000 	.word	0x40010000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <RetargetInit+0x28>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <RetargetInit+0x2c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6898      	ldr	r0, [r3, #8]
 80008d0:	2300      	movs	r3, #0
 80008d2:	2202      	movs	r2, #2
 80008d4:	2100      	movs	r1, #0
 80008d6:	f004 fa0f 	bl	8004cf8 <setvbuf>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20004144 	.word	0x20004144
 80008e8:	2000000c 	.word	0x2000000c

080008ec <_isatty>:

int _isatty(int fd) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	db04      	blt.n	8000904 <_isatty+0x18>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	dc01      	bgt.n	8000904 <_isatty+0x18>
    return 1;
 8000900:	2301      	movs	r3, #1
 8000902:	e005      	b.n	8000910 <_isatty+0x24>

  errno = EBADF;
 8000904:	f004 f962 	bl	8004bcc <__errno>
 8000908:	4602      	mov	r2, r0
 800090a:	2309      	movs	r3, #9
 800090c:	6013      	str	r3, [r2, #0]
  return 0;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <_write>:

int _write(int fd, char* ptr, int len) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d002      	beq.n	8000930 <_write+0x18>
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d111      	bne.n	8000954 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <_write+0x54>)
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	b29a      	uxth	r2, r3
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	f001 ff40 	bl	80027c2 <HAL_UART_Transmit>
 8000942:	4603      	mov	r3, r0
 8000944:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000946:	7dfb      	ldrb	r3, [r7, #23]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d101      	bne.n	8000950 <_write+0x38>
      return len;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	e008      	b.n	8000962 <_write+0x4a>
    else
      return EIO;
 8000950:	2305      	movs	r3, #5
 8000952:	e006      	b.n	8000962 <_write+0x4a>
  }
  errno = EBADF;
 8000954:	f004 f93a 	bl	8004bcc <__errno>
 8000958:	4602      	mov	r2, r0
 800095a:	2309      	movs	r3, #9
 800095c:	6013      	str	r3, [r2, #0]
  return -1;
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000962:	4618      	mov	r0, r3
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20004144 	.word	0x20004144

08000970 <_close>:

int _close(int fd) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	db04      	blt.n	8000988 <_close+0x18>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b02      	cmp	r3, #2
 8000982:	dc01      	bgt.n	8000988 <_close+0x18>
    return 0;
 8000984:	2300      	movs	r3, #0
 8000986:	e006      	b.n	8000996 <_close+0x26>

  errno = EBADF;
 8000988:	f004 f920 	bl	8004bcc <__errno>
 800098c:	4602      	mov	r2, r0
 800098e:	2309      	movs	r3, #9
 8000990:	6013      	str	r3, [r2, #0]
  return -1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800099e:	b580      	push	{r7, lr}
 80009a0:	b084      	sub	sp, #16
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80009aa:	f004 f90f 	bl	8004bcc <__errno>
 80009ae:	4602      	mov	r2, r0
 80009b0:	2309      	movs	r3, #9
 80009b2:	6013      	str	r3, [r2, #0]
  return -1;
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <_read>:

int _read(int fd, char* ptr, int len) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d110      	bne.n	80009f4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <_read+0x4c>)
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	2201      	movs	r2, #1
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	f001 ff89 	bl	80028f4 <HAL_UART_Receive>
 80009e2:	4603      	mov	r3, r0
 80009e4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80009e6:	7dfb      	ldrb	r3, [r7, #23]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d101      	bne.n	80009f0 <_read+0x30>
      return 1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e008      	b.n	8000a02 <_read+0x42>
    else
      return EIO;
 80009f0:	2305      	movs	r3, #5
 80009f2:	e006      	b.n	8000a02 <_read+0x42>
  }
  errno = EBADF;
 80009f4:	f004 f8ea 	bl	8004bcc <__errno>
 80009f8:	4602      	mov	r2, r0
 80009fa:	2309      	movs	r3, #9
 80009fc:	6013      	str	r3, [r2, #0]
  return -1;
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20004144 	.word	0x20004144

08000a10 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db08      	blt.n	8000a32 <_fstat+0x22>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	dc05      	bgt.n	8000a32 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2c:	605a      	str	r2, [r3, #4]
    return 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e005      	b.n	8000a3e <_fstat+0x2e>
  }

  errno = EBADF;
 8000a32:	f004 f8cb 	bl	8004bcc <__errno>
 8000a36:	4602      	mov	r2, r0
 8000a38:	2309      	movs	r3, #9
 8000a3a:	6013      	str	r3, [r2, #0]
  return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_MspInit+0x54>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <HAL_MspInit+0x54>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x54>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_MspInit+0x54>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_MspInit+0x54>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_MspInit+0x54>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	210f      	movs	r1, #15
 8000a8a:	f06f 0001 	mvn.w	r0, #1
 8000a8e:	f000 fae3 	bl	8001058 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a4b      	ldr	r2, [pc, #300]	; (8000bec <HAL_UART_MspInit+0x14c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	f040 8090 	bne.w	8000be4 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	4b49      	ldr	r3, [pc, #292]	; (8000bf0 <HAL_UART_MspInit+0x150>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	4a48      	ldr	r2, [pc, #288]	; (8000bf0 <HAL_UART_MspInit+0x150>)
 8000ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad4:	4b46      	ldr	r3, [pc, #280]	; (8000bf0 <HAL_UART_MspInit+0x150>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b42      	ldr	r3, [pc, #264]	; (8000bf0 <HAL_UART_MspInit+0x150>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a41      	ldr	r2, [pc, #260]	; (8000bf0 <HAL_UART_MspInit+0x150>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <HAL_UART_MspInit+0x150>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000afc:	230c      	movs	r3, #12
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4837      	ldr	r0, [pc, #220]	; (8000bf4 <HAL_UART_MspInit+0x154>)
 8000b18:	f000 fdd2 	bl	80016c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000b1c:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <HAL_UART_MspInit+0x158>)
 8000b1e:	4a37      	ldr	r2, [pc, #220]	; (8000bfc <HAL_UART_MspInit+0x15c>)
 8000b20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000b22:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <HAL_UART_MspInit+0x158>)
 8000b24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b28:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2a:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <HAL_UART_MspInit+0x158>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b30:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <HAL_UART_MspInit+0x158>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b36:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <HAL_UART_MspInit+0x158>)
 8000b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b3e:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <HAL_UART_MspInit+0x158>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b44:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <HAL_UART_MspInit+0x158>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000b4a:	4b2b      	ldr	r3, [pc, #172]	; (8000bf8 <HAL_UART_MspInit+0x158>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <HAL_UART_MspInit+0x158>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b56:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <HAL_UART_MspInit+0x158>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b5c:	4826      	ldr	r0, [pc, #152]	; (8000bf8 <HAL_UART_MspInit+0x158>)
 8000b5e:	f000 faa5 	bl	80010ac <HAL_DMA_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000b68:	f7ff fea0 	bl	80008ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <HAL_UART_MspInit+0x158>)
 8000b70:	635a      	str	r2, [r3, #52]	; 0x34
 8000b72:	4a21      	ldr	r2, [pc, #132]	; (8000bf8 <HAL_UART_MspInit+0x158>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <HAL_UART_MspInit+0x160>)
 8000b7a:	4a22      	ldr	r2, [pc, #136]	; (8000c04 <HAL_UART_MspInit+0x164>)
 8000b7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <HAL_UART_MspInit+0x160>)
 8000b80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b84:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <HAL_UART_MspInit+0x160>)
 8000b88:	2240      	movs	r2, #64	; 0x40
 8000b8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_UART_MspInit+0x160>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <HAL_UART_MspInit+0x160>)
 8000b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b98:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_UART_MspInit+0x160>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_UART_MspInit+0x160>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <HAL_UART_MspInit+0x160>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_UART_MspInit+0x160>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <HAL_UART_MspInit+0x160>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000bb8:	4811      	ldr	r0, [pc, #68]	; (8000c00 <HAL_UART_MspInit+0x160>)
 8000bba:	f000 fa77 	bl	80010ac <HAL_DMA_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000bc4:	f7ff fe72 	bl	80008ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <HAL_UART_MspInit+0x160>)
 8000bcc:	631a      	str	r2, [r3, #48]	; 0x30
 8000bce:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <HAL_UART_MspInit+0x160>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2105      	movs	r1, #5
 8000bd8:	2026      	movs	r0, #38	; 0x26
 8000bda:	f000 fa3d 	bl	8001058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bde:	2026      	movs	r0, #38	; 0x26
 8000be0:	f000 fa56 	bl	8001090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	; 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	2000403c 	.word	0x2000403c
 8000bfc:	40026088 	.word	0x40026088
 8000c00:	200040a0 	.word	0x200040a0
 8000c04:	400260a0 	.word	0x400260a0

08000c08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	2019      	movs	r0, #25
 8000c1e:	f000 fa1b 	bl	8001058 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000c22:	2019      	movs	r0, #25
 8000c24:	f000 fa34 	bl	8001090 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <HAL_InitTick+0xa0>)
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <HAL_InitTick+0xa0>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6453      	str	r3, [r2, #68]	; 0x44
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <HAL_InitTick+0xa0>)
 8000c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c44:	f107 0210 	add.w	r2, r7, #16
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 fb1a 	bl	8002288 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c54:	f001 fb04 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 8000c58:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5c:	4a13      	ldr	r2, [pc, #76]	; (8000cac <HAL_InitTick+0xa4>)
 8000c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c62:	0c9b      	lsrs	r3, r3, #18
 8000c64:	3b01      	subs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <HAL_InitTick+0xac>)
 8000c6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c8a:	f001 fb2f 	bl	80022ec <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d104      	bne.n	8000c9e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c94:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c96:	f001 fb5e 	bl	8002356 <HAL_TIM_Base_Start_IT>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3730      	adds	r7, #48	; 0x30
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	431bde83 	.word	0x431bde83
 8000cb0:	20004148 	.word	0x20004148
 8000cb4:	40010000 	.word	0x40010000

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <DMA1_Stream5_IRQHandler+0x10>)
 8000cf2:	f000 faab 	bl	800124c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000403c 	.word	0x2000403c

08000d00 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <DMA1_Stream6_IRQHandler+0x10>)
 8000d06:	f000 faa1 	bl	800124c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200040a0 	.word	0x200040a0

08000d14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d1a:	f001 fb40 	bl	800239e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20004148 	.word	0x20004148

08000d28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <USART2_IRQHandler+0x10>)
 8000d2e:	f001 fe87 	bl	8002a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20004104 	.word	0x20004104

08000d3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d44:	f000 fe72 	bl	8001a2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <_sbrk+0x50>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x16>
		heap_end = &end;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <_sbrk+0x50>)
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <_sbrk+0x54>)
 8000d60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <_sbrk+0x50>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <_sbrk+0x50>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4413      	add	r3, r2
 8000d70:	466a      	mov	r2, sp
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d907      	bls.n	8000d86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d76:	f003 ff29 	bl	8004bcc <__errno>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	230c      	movs	r3, #12
 8000d7e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	e006      	b.n	8000d94 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <_sbrk+0x50>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <_sbrk+0x50>)
 8000d90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200002e0 	.word	0x200002e0
 8000da0:	20004190 	.word	0x20004190

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <SystemInit+0x60>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <SystemInit+0x60>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <SystemInit+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <SystemInit+0x64>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <SystemInit+0x64>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <SystemInit+0x64>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <SystemInit+0x64>)
 8000dd0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <SystemInit+0x64>)
 8000ddc:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <SystemInit+0x68>)
 8000dde:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <SystemInit+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <SystemInit+0x64>)
 8000de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <SystemInit+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SystemInit+0x60>)
 8000df4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df8:	609a      	str	r2, [r3, #8]
#endif
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	24003010 	.word	0x24003010

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e16:	e003      	b.n	8000e20 <LoopCopyDataInit>

08000e18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e1e:	3104      	adds	r1, #4

08000e20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e20:	480b      	ldr	r0, [pc, #44]	; (8000e50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e28:	d3f6      	bcc.n	8000e18 <CopyDataInit>
  ldr  r2, =_sbss
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e2c:	e002      	b.n	8000e34 <LoopFillZerobss>

08000e2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e30:	f842 3b04 	str.w	r3, [r2], #4

08000e34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e38:	d3f9      	bcc.n	8000e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e3a:	f7ff ffb3 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f003 fecb 	bl	8004bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fb67 	bl	8000514 <main>
  bx  lr    
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e48:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000e4c:	080057d0 	.word	0x080057d0
  ldr  r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e54:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000e58:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000e5c:	20004190 	.word	0x20004190

08000e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_Init+0x40>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_Init+0x40>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_Init+0x40>)
 8000e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f8d8 	bl	8001042 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff feb8 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff fdd6 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023c00 	.word	0x40023c00

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000004 	.word	0x20000004
 8000ecc:	20004188 	.word	0x20004188

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20004188 	.word	0x20004188

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	; (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff4c 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106a:	f7ff ff61 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 800106e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	6978      	ldr	r0, [r7, #20]
 8001076:	f7ff ffb1 	bl	8000fdc <NVIC_EncodePriority>
 800107a:	4602      	mov	r2, r0
 800107c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff80 	bl	8000f88 <__NVIC_SetPriority>
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff54 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ff0a 	bl	8000ed0 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e099      	b.n	80011fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2202      	movs	r2, #2
 80010d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e8:	e00f      	b.n	800110a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ea:	f7ff fef1 	bl	8000ed0 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d908      	bls.n	800110a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2220      	movs	r2, #32
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2203      	movs	r2, #3
 8001102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e078      	b.n	80011fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1e8      	bne.n	80010ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	4b38      	ldr	r3, [pc, #224]	; (8001204 <HAL_DMA_Init+0x158>)
 8001124:	4013      	ands	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001136:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4313      	orrs	r3, r2
 800115a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	2b04      	cmp	r3, #4
 8001162:	d107      	bne.n	8001174 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4313      	orrs	r3, r2
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4313      	orrs	r3, r2
 8001172:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f023 0307 	bic.w	r3, r3, #7
 800118a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	4313      	orrs	r3, r2
 8001194:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	2b04      	cmp	r3, #4
 800119c:	d117      	bne.n	80011ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00e      	beq.n	80011ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fa0b 	bl	80015cc <DMA_CheckFifoParam>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011ca:	2301      	movs	r3, #1
 80011cc:	e016      	b.n	80011fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f9c2 	bl	8001560 <DMA_CalcBaseAndBitshift>
 80011dc:	4603      	mov	r3, r0
 80011de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e4:	223f      	movs	r2, #63	; 0x3f
 80011e6:	409a      	lsls	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	f010803f 	.word	0xf010803f

08001208 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d004      	beq.n	8001226 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00c      	b.n	8001240 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2205      	movs	r2, #5
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0201 	bic.w	r2, r2, #1
 800123c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001258:	4b92      	ldr	r3, [pc, #584]	; (80014a4 <HAL_DMA_IRQHandler+0x258>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a92      	ldr	r2, [pc, #584]	; (80014a8 <HAL_DMA_IRQHandler+0x25c>)
 800125e:	fba2 2303 	umull	r2, r3, r2, r3
 8001262:	0a9b      	lsrs	r3, r3, #10
 8001264:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001276:	2208      	movs	r2, #8
 8001278:	409a      	lsls	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d01a      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0204 	bic.w	r2, r2, #4
 800129e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a4:	2208      	movs	r2, #8
 80012a6:	409a      	lsls	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b0:	f043 0201 	orr.w	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012bc:	2201      	movs	r2, #1
 80012be:	409a      	lsls	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d012      	beq.n	80012ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00b      	beq.n	80012ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012da:	2201      	movs	r2, #1
 80012dc:	409a      	lsls	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e6:	f043 0202 	orr.w	r2, r3, #2
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f2:	2204      	movs	r2, #4
 80012f4:	409a      	lsls	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d012      	beq.n	8001324 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00b      	beq.n	8001324 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001310:	2204      	movs	r2, #4
 8001312:	409a      	lsls	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131c:	f043 0204 	orr.w	r2, r3, #4
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001328:	2210      	movs	r2, #16
 800132a:	409a      	lsls	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4013      	ands	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d043      	beq.n	80013bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d03c      	beq.n	80013bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001346:	2210      	movs	r2, #16
 8001348:	409a      	lsls	r2, r3
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d018      	beq.n	800138e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d108      	bne.n	800137c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	2b00      	cmp	r3, #0
 8001370:	d024      	beq.n	80013bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	4798      	blx	r3
 800137a:	e01f      	b.n	80013bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001380:	2b00      	cmp	r3, #0
 8001382:	d01b      	beq.n	80013bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	4798      	blx	r3
 800138c:	e016      	b.n	80013bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d107      	bne.n	80013ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0208 	bic.w	r2, r2, #8
 80013aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c0:	2220      	movs	r2, #32
 80013c2:	409a      	lsls	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 808e 	beq.w	80014ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 8086 	beq.w	80014ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e2:	2220      	movs	r2, #32
 80013e4:	409a      	lsls	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d136      	bne.n	8001464 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0216 	bic.w	r2, r2, #22
 8001404:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	695a      	ldr	r2, [r3, #20]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001414:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	2b00      	cmp	r3, #0
 800141c:	d103      	bne.n	8001426 <HAL_DMA_IRQHandler+0x1da>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0208 	bic.w	r2, r2, #8
 8001434:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143a:	223f      	movs	r2, #63	; 0x3f
 800143c:	409a      	lsls	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001456:	2b00      	cmp	r3, #0
 8001458:	d07d      	beq.n	8001556 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	4798      	blx	r3
        }
        return;
 8001462:	e078      	b.n	8001556 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d01c      	beq.n	80014ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d108      	bne.n	8001492 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001484:	2b00      	cmp	r3, #0
 8001486:	d030      	beq.n	80014ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	4798      	blx	r3
 8001490:	e02b      	b.n	80014ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001496:	2b00      	cmp	r3, #0
 8001498:	d027      	beq.n	80014ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	4798      	blx	r3
 80014a2:	e022      	b.n	80014ea <HAL_DMA_IRQHandler+0x29e>
 80014a4:	20000000 	.word	0x20000000
 80014a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0210 	bic.w	r2, r2, #16
 80014c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d032      	beq.n	8001558 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d022      	beq.n	8001544 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2205      	movs	r2, #5
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	3301      	adds	r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	429a      	cmp	r2, r3
 8001520:	d307      	bcc.n	8001532 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f2      	bne.n	8001516 <HAL_DMA_IRQHandler+0x2ca>
 8001530:	e000      	b.n	8001534 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001532:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	4798      	blx	r3
 8001554:	e000      	b.n	8001558 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001556:	bf00      	nop
    }
  }
}
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop

08001560 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	3b10      	subs	r3, #16
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <DMA_CalcBaseAndBitshift+0x64>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800157a:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <DMA_CalcBaseAndBitshift+0x68>)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d909      	bls.n	80015a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001596:	f023 0303 	bic.w	r3, r3, #3
 800159a:	1d1a      	adds	r2, r3, #4
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	659a      	str	r2, [r3, #88]	; 0x58
 80015a0:	e007      	b.n	80015b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015aa:	f023 0303 	bic.w	r3, r3, #3
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	aaaaaaab 	.word	0xaaaaaaab
 80015c8:	08005754 	.word	0x08005754

080015cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d11f      	bne.n	8001626 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d855      	bhi.n	8001698 <DMA_CheckFifoParam+0xcc>
 80015ec:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <DMA_CheckFifoParam+0x28>)
 80015ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f2:	bf00      	nop
 80015f4:	08001605 	.word	0x08001605
 80015f8:	08001617 	.word	0x08001617
 80015fc:	08001605 	.word	0x08001605
 8001600:	08001699 	.word	0x08001699
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d045      	beq.n	800169c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001614:	e042      	b.n	800169c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800161e:	d13f      	bne.n	80016a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001624:	e03c      	b.n	80016a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800162e:	d121      	bne.n	8001674 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d836      	bhi.n	80016a4 <DMA_CheckFifoParam+0xd8>
 8001636:	a201      	add	r2, pc, #4	; (adr r2, 800163c <DMA_CheckFifoParam+0x70>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	0800164d 	.word	0x0800164d
 8001640:	08001653 	.word	0x08001653
 8001644:	0800164d 	.word	0x0800164d
 8001648:	08001665 	.word	0x08001665
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
      break;
 8001650:	e02f      	b.n	80016b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d024      	beq.n	80016a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001662:	e021      	b.n	80016a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800166c:	d11e      	bne.n	80016ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001672:	e01b      	b.n	80016ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d902      	bls.n	8001680 <DMA_CheckFifoParam+0xb4>
 800167a:	2b03      	cmp	r3, #3
 800167c:	d003      	beq.n	8001686 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800167e:	e018      	b.n	80016b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
      break;
 8001684:	e015      	b.n	80016b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00e      	beq.n	80016b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
      break;
 8001696:	e00b      	b.n	80016b0 <DMA_CheckFifoParam+0xe4>
      break;
 8001698:	bf00      	nop
 800169a:	e00a      	b.n	80016b2 <DMA_CheckFifoParam+0xe6>
      break;
 800169c:	bf00      	nop
 800169e:	e008      	b.n	80016b2 <DMA_CheckFifoParam+0xe6>
      break;
 80016a0:	bf00      	nop
 80016a2:	e006      	b.n	80016b2 <DMA_CheckFifoParam+0xe6>
      break;
 80016a4:	bf00      	nop
 80016a6:	e004      	b.n	80016b2 <DMA_CheckFifoParam+0xe6>
      break;
 80016a8:	bf00      	nop
 80016aa:	e002      	b.n	80016b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80016ac:	bf00      	nop
 80016ae:	e000      	b.n	80016b2 <DMA_CheckFifoParam+0xe6>
      break;
 80016b0:	bf00      	nop
    }
  } 
  
  return status; 
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e159      	b.n	8001990 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f040 8148 	bne.w	800198a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x4a>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b12      	cmp	r3, #18
 8001708:	d123      	bne.n	8001752 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	69b9      	ldr	r1, [r7, #24]
 800174e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0203 	and.w	r2, r3, #3
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d00b      	beq.n	80017a6 <HAL_GPIO_Init+0xe6>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d007      	beq.n	80017a6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800179a:	2b11      	cmp	r3, #17
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	d130      	bne.n	8001808 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017dc:	2201      	movs	r2, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 0201 	and.w	r2, r3, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a2 	beq.w	800198a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <HAL_GPIO_Init+0x2e4>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a55      	ldr	r2, [pc, #340]	; (80019a4 <HAL_GPIO_Init+0x2e4>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_GPIO_Init+0x2e4>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001862:	4a51      	ldr	r2, [pc, #324]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a48      	ldr	r2, [pc, #288]	; (80019ac <HAL_GPIO_Init+0x2ec>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d019      	beq.n	80018c2 <HAL_GPIO_Init+0x202>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a47      	ldr	r2, [pc, #284]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0x1fe>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a46      	ldr	r2, [pc, #280]	; (80019b4 <HAL_GPIO_Init+0x2f4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00d      	beq.n	80018ba <HAL_GPIO_Init+0x1fa>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a45      	ldr	r2, [pc, #276]	; (80019b8 <HAL_GPIO_Init+0x2f8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d007      	beq.n	80018b6 <HAL_GPIO_Init+0x1f6>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a44      	ldr	r2, [pc, #272]	; (80019bc <HAL_GPIO_Init+0x2fc>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_GPIO_Init+0x1f2>
 80018ae:	2304      	movs	r3, #4
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018b2:	2307      	movs	r3, #7
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018c2:	2300      	movs	r3, #0
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d4:	4934      	ldr	r1, [pc, #208]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e2:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <HAL_GPIO_Init+0x300>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001906:	4a2e      	ldr	r2, [pc, #184]	; (80019c0 <HAL_GPIO_Init+0x300>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800190c:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <HAL_GPIO_Init+0x300>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <HAL_GPIO_Init+0x300>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_GPIO_Init+0x300>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800195a:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_GPIO_Init+0x300>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_GPIO_Init+0x300>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_GPIO_Init+0x300>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	f67f aea2 	bls.w	80016dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001998:	bf00      	nop
 800199a:	3724      	adds	r7, #36	; 0x24
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40013800 	.word	0x40013800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40020400 	.word	0x40020400
 80019b4:	40020800 	.word	0x40020800
 80019b8:	40020c00 	.word	0x40020c00
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40013c00 	.word	0x40013c00

080019c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
 80019d0:	4613      	mov	r3, r2
 80019d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d4:	787b      	ldrb	r3, [r7, #1]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019e0:	e003      	b.n	80019ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019e2:	887b      	ldrh	r3, [r7, #2]
 80019e4:	041a      	lsls	r2, r3, #16
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	619a      	str	r2, [r3, #24]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	401a      	ands	r2, r3
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d104      	bne.n	8001a1a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	041a      	lsls	r2, r3, #16
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001a18:	e002      	b.n	8001a20 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d006      	beq.n	8001a50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f806 	bl	8001a5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40013c00 	.word	0x40013c00

08001a5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e22d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d075      	beq.n	8001b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a92:	4ba3      	ldr	r3, [pc, #652]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d00c      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9e:	4ba0      	ldr	r3, [pc, #640]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d112      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aaa:	4b9d      	ldr	r3, [pc, #628]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	4b99      	ldr	r3, [pc, #612]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d05b      	beq.n	8001b7c <HAL_RCC_OscConfig+0x108>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d157      	bne.n	8001b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e208      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad8:	d106      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x74>
 8001ada:	4b91      	ldr	r3, [pc, #580]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a90      	ldr	r2, [pc, #576]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e01d      	b.n	8001b24 <HAL_RCC_OscConfig+0xb0>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x98>
 8001af2:	4b8b      	ldr	r3, [pc, #556]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a8a      	ldr	r2, [pc, #552]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b88      	ldr	r3, [pc, #544]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a87      	ldr	r2, [pc, #540]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0xb0>
 8001b0c:	4b84      	ldr	r3, [pc, #528]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a83      	ldr	r2, [pc, #524]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b81      	ldr	r3, [pc, #516]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a80      	ldr	r2, [pc, #512]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f9d0 	bl	8000ed0 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff f9cc 	bl	8000ed0 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e1cd      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b76      	ldr	r3, [pc, #472]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0xc0>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff f9bc 	bl	8000ed0 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f9b8 	bl	8000ed0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1b9      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	4b6c      	ldr	r3, [pc, #432]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0xe8>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d063      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b8a:	4b65      	ldr	r3, [pc, #404]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b96:	4b62      	ldr	r3, [pc, #392]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d11c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba2:	4b5f      	ldr	r3, [pc, #380]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d116      	bne.n	8001bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bae:	4b5c      	ldr	r3, [pc, #368]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x152>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e18d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4952      	ldr	r1, [pc, #328]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	e03a      	b.n	8001c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be4:	4b4f      	ldr	r3, [pc, #316]	; (8001d24 <HAL_RCC_OscConfig+0x2b0>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff f971 	bl	8000ed0 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f96d 	bl	8000ed0 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e16e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b43      	ldr	r3, [pc, #268]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4940      	ldr	r1, [pc, #256]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
 8001c24:	e015      	b.n	8001c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c26:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_RCC_OscConfig+0x2b0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f950 	bl	8000ed0 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c34:	f7ff f94c 	bl	8000ed0 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e14d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d030      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d016      	beq.n	8001c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c66:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <HAL_RCC_OscConfig+0x2b4>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6c:	f7ff f930 	bl	8000ed0 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c74:	f7ff f92c 	bl	8000ed0 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e12d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x200>
 8001c92:	e015      	b.n	8001cc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_OscConfig+0x2b4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f919 	bl	8000ed0 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca2:	f7ff f915 	bl	8000ed0 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e116      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80a0 	beq.w	8001e0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10f      	bne.n	8001cfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_OscConfig+0x2b8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d121      	bne.n	8001d4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_RCC_OscConfig+0x2b8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_RCC_OscConfig+0x2b8>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d16:	f7ff f8db 	bl	8000ed0 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	e011      	b.n	8001d42 <HAL_RCC_OscConfig+0x2ce>
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	42470000 	.word	0x42470000
 8001d28:	42470e80 	.word	0x42470e80
 8001d2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d30:	f7ff f8ce 	bl	8000ed0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e0cf      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d42:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x478>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d106      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2f0>
 8001d56:	4b66      	ldr	r3, [pc, #408]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	4a65      	ldr	r2, [pc, #404]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6713      	str	r3, [r2, #112]	; 0x70
 8001d62:	e01c      	b.n	8001d9e <HAL_RCC_OscConfig+0x32a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d10c      	bne.n	8001d86 <HAL_RCC_OscConfig+0x312>
 8001d6c:	4b60      	ldr	r3, [pc, #384]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	4a5f      	ldr	r2, [pc, #380]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	6713      	str	r3, [r2, #112]	; 0x70
 8001d78:	4b5d      	ldr	r3, [pc, #372]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	4a5c      	ldr	r2, [pc, #368]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70
 8001d84:	e00b      	b.n	8001d9e <HAL_RCC_OscConfig+0x32a>
 8001d86:	4b5a      	ldr	r3, [pc, #360]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	4a59      	ldr	r2, [pc, #356]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6713      	str	r3, [r2, #112]	; 0x70
 8001d92:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	4a56      	ldr	r2, [pc, #344]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d015      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da6:	f7ff f893 	bl	8000ed0 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7ff f88f 	bl	8000ed0 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e08e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc4:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ee      	beq.n	8001dae <HAL_RCC_OscConfig+0x33a>
 8001dd0:	e014      	b.n	8001dfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff f87d 	bl	8000ed0 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7ff f879 	bl	8000ed0 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e078      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1ee      	bne.n	8001dda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d105      	bne.n	8001e0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a3a      	ldr	r2, [pc, #232]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d064      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d05c      	beq.n	8001edc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d141      	bne.n	8001eae <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <HAL_RCC_OscConfig+0x480>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff f84e 	bl	8000ed0 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff f84a 	bl	8000ed0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e04b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	019b      	lsls	r3, r3, #6
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	085b      	lsrs	r3, r3, #1
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	041b      	lsls	r3, r3, #16
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	491d      	ldr	r1, [pc, #116]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e80:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <HAL_RCC_OscConfig+0x480>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff f823 	bl	8000ed0 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff f81f 	bl	8000ed0 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e020      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x41a>
 8001eac:	e018      	b.n	8001ee0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_RCC_OscConfig+0x480>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff f80c 	bl	8000ed0 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff f808 	bl	8000ed0 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e009      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_RCC_OscConfig+0x47c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x448>
 8001eda:	e001      	b.n	8001ee0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	42470060 	.word	0x42470060

08001ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0ca      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d90c      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b64      	ldr	r3, [pc, #400]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b62      	ldr	r3, [pc, #392]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0b6      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f4c:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a57      	ldr	r2, [pc, #348]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f64:	4b52      	ldr	r3, [pc, #328]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a51      	ldr	r2, [pc, #324]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b4f      	ldr	r3, [pc, #316]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	494c      	ldr	r1, [pc, #304]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d044      	beq.n	8002018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d119      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e07d      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e06d      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e065      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4933      	ldr	r1, [pc, #204]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe8:	f7fe ff72 	bl	8000ed0 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7fe ff6e 	bl	8000ed0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e04d      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d20c      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b21      	ldr	r3, [pc, #132]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <HAL_RCC_ClockConfig+0x1b4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e030      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4915      	ldr	r1, [pc, #84]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	490d      	ldr	r1, [pc, #52]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800207e:	f000 f81d 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8002082:	4601      	mov	r1, r0
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	fa21 f303 	lsr.w	r3, r1, r3
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800209a:	2000      	movs	r0, #0
 800209c:	f7fe fdb4 	bl	8000c08 <HAL_InitTick>

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023c00 	.word	0x40023c00
 80020b0:	40023800 	.word	0x40023800
 80020b4:	0800573c 	.word	0x0800573c
 80020b8:	20000000 	.word	0x20000000

080020bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	2300      	movs	r3, #0
 80020cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d2:	4b50      	ldr	r3, [pc, #320]	; (8002214 <HAL_RCC_GetSysClockFreq+0x158>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d007      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x32>
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d008      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x38>
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f040 808d 	bne.w	8002202 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020e8:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <HAL_RCC_GetSysClockFreq+0x15c>)
 80020ea:	60bb      	str	r3, [r7, #8]
       break;
 80020ec:	e08c      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ee:	4b4b      	ldr	r3, [pc, #300]	; (800221c <HAL_RCC_GetSysClockFreq+0x160>)
 80020f0:	60bb      	str	r3, [r7, #8]
      break;
 80020f2:	e089      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f4:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_RCC_GetSysClockFreq+0x158>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020fe:	4b45      	ldr	r3, [pc, #276]	; (8002214 <HAL_RCC_GetSysClockFreq+0x158>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d023      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210a:	4b42      	ldr	r3, [pc, #264]	; (8002214 <HAL_RCC_GetSysClockFreq+0x158>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	099b      	lsrs	r3, r3, #6
 8002110:	f04f 0400 	mov.w	r4, #0
 8002114:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	ea03 0501 	and.w	r5, r3, r1
 8002120:	ea04 0602 	and.w	r6, r4, r2
 8002124:	4a3d      	ldr	r2, [pc, #244]	; (800221c <HAL_RCC_GetSysClockFreq+0x160>)
 8002126:	fb02 f106 	mul.w	r1, r2, r6
 800212a:	2200      	movs	r2, #0
 800212c:	fb02 f205 	mul.w	r2, r2, r5
 8002130:	440a      	add	r2, r1
 8002132:	493a      	ldr	r1, [pc, #232]	; (800221c <HAL_RCC_GetSysClockFreq+0x160>)
 8002134:	fba5 0101 	umull	r0, r1, r5, r1
 8002138:	1853      	adds	r3, r2, r1
 800213a:	4619      	mov	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f04f 0400 	mov.w	r4, #0
 8002142:	461a      	mov	r2, r3
 8002144:	4623      	mov	r3, r4
 8002146:	f7fe f84b 	bl	80001e0 <__aeabi_uldivmod>
 800214a:	4603      	mov	r3, r0
 800214c:	460c      	mov	r4, r1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e049      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002152:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_RCC_GetSysClockFreq+0x158>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	099b      	lsrs	r3, r3, #6
 8002158:	f04f 0400 	mov.w	r4, #0
 800215c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	ea03 0501 	and.w	r5, r3, r1
 8002168:	ea04 0602 	and.w	r6, r4, r2
 800216c:	4629      	mov	r1, r5
 800216e:	4632      	mov	r2, r6
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	f04f 0400 	mov.w	r4, #0
 8002178:	0154      	lsls	r4, r2, #5
 800217a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800217e:	014b      	lsls	r3, r1, #5
 8002180:	4619      	mov	r1, r3
 8002182:	4622      	mov	r2, r4
 8002184:	1b49      	subs	r1, r1, r5
 8002186:	eb62 0206 	sbc.w	r2, r2, r6
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	f04f 0400 	mov.w	r4, #0
 8002192:	0194      	lsls	r4, r2, #6
 8002194:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002198:	018b      	lsls	r3, r1, #6
 800219a:	1a5b      	subs	r3, r3, r1
 800219c:	eb64 0402 	sbc.w	r4, r4, r2
 80021a0:	f04f 0100 	mov.w	r1, #0
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	00e2      	lsls	r2, r4, #3
 80021aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021ae:	00d9      	lsls	r1, r3, #3
 80021b0:	460b      	mov	r3, r1
 80021b2:	4614      	mov	r4, r2
 80021b4:	195b      	adds	r3, r3, r5
 80021b6:	eb44 0406 	adc.w	r4, r4, r6
 80021ba:	f04f 0100 	mov.w	r1, #0
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	02a2      	lsls	r2, r4, #10
 80021c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021c8:	0299      	lsls	r1, r3, #10
 80021ca:	460b      	mov	r3, r1
 80021cc:	4614      	mov	r4, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	4621      	mov	r1, r4
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f04f 0400 	mov.w	r4, #0
 80021d8:	461a      	mov	r2, r3
 80021da:	4623      	mov	r3, r4
 80021dc:	f7fe f800 	bl	80001e0 <__aeabi_uldivmod>
 80021e0:	4603      	mov	r3, r0
 80021e2:	460c      	mov	r4, r1
 80021e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_GetSysClockFreq+0x158>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	0c1b      	lsrs	r3, r3, #16
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	3301      	adds	r3, #1
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	60bb      	str	r3, [r7, #8]
      break;
 8002200:	e002      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002204:	60bb      	str	r3, [r7, #8]
      break;
 8002206:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002208:	68bb      	ldr	r3, [r7, #8]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	00f42400 	.word	0x00f42400
 800221c:	017d7840 	.word	0x017d7840

08002220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_RCC_GetHCLKFreq+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000000 	.word	0x20000000

08002238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800223c:	f7ff fff0 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 8002240:	4601      	mov	r1, r0
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	0a9b      	lsrs	r3, r3, #10
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	4a03      	ldr	r2, [pc, #12]	; (800225c <HAL_RCC_GetPCLK1Freq+0x24>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	0800574c 	.word	0x0800574c

08002260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002264:	f7ff ffdc 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 8002268:	4601      	mov	r1, r0
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	0b5b      	lsrs	r3, r3, #13
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4a03      	ldr	r2, [pc, #12]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002276:	5cd3      	ldrb	r3, [r2, r3]
 8002278:	fa21 f303 	lsr.w	r3, r1, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40023800 	.word	0x40023800
 8002284:	0800574c 	.word	0x0800574c

08002288 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	220f      	movs	r2, #15
 8002296:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_RCC_GetClockConfig+0x5c>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0203 	and.w	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_RCC_GetClockConfig+0x5c>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_RCC_GetClockConfig+0x5c>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_RCC_GetClockConfig+0x5c>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	08db      	lsrs	r3, r3, #3
 80022c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_RCC_GetClockConfig+0x60>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 020f 	and.w	r2, r3, #15
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	601a      	str	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40023c00 	.word	0x40023c00

080022ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e01d      	b.n	800233a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f815 	bl	8002342 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4610      	mov	r0, r2
 800232c:	f000 f968 	bl	8002600 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 0201 	orr.w	r2, r2, #1
 800236c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d007      	beq.n	8002390 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d122      	bne.n	80023fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d11b      	bne.n	80023fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f06f 0202 	mvn.w	r2, #2
 80023ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f8ee 	bl	80025c2 <HAL_TIM_IC_CaptureCallback>
 80023e6:	e005      	b.n	80023f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f8e0 	bl	80025ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8f1 	bl	80025d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b04      	cmp	r3, #4
 8002406:	d122      	bne.n	800244e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b04      	cmp	r3, #4
 8002414:	d11b      	bne.n	800244e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f06f 0204 	mvn.w	r2, #4
 800241e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f8c4 	bl	80025c2 <HAL_TIM_IC_CaptureCallback>
 800243a:	e005      	b.n	8002448 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f8b6 	bl	80025ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8c7 	bl	80025d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b08      	cmp	r3, #8
 800245a:	d122      	bne.n	80024a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b08      	cmp	r3, #8
 8002468:	d11b      	bne.n	80024a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f06f 0208 	mvn.w	r2, #8
 8002472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2204      	movs	r2, #4
 8002478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f89a 	bl	80025c2 <HAL_TIM_IC_CaptureCallback>
 800248e:	e005      	b.n	800249c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f88c 	bl	80025ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f89d 	bl	80025d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d122      	bne.n	80024f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b10      	cmp	r3, #16
 80024bc:	d11b      	bne.n	80024f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f06f 0210 	mvn.w	r2, #16
 80024c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2208      	movs	r2, #8
 80024cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f870 	bl	80025c2 <HAL_TIM_IC_CaptureCallback>
 80024e2:	e005      	b.n	80024f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f862 	bl	80025ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f873 	bl	80025d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d10e      	bne.n	8002522 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f06f 0201 	mvn.w	r2, #1
 800251a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7fe f9b3 	bl	8000888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d10e      	bne.n	800254e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253a:	2b80      	cmp	r3, #128	; 0x80
 800253c:	d107      	bne.n	800254e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f8e3 	bl	8002714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002558:	2b40      	cmp	r3, #64	; 0x40
 800255a:	d10e      	bne.n	800257a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b40      	cmp	r3, #64	; 0x40
 8002568:	d107      	bne.n	800257a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f838 	bl	80025ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b20      	cmp	r3, #32
 8002586:	d10e      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b20      	cmp	r3, #32
 8002594:	d107      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f06f 0220 	mvn.w	r2, #32
 800259e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f8ad 	bl	8002700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a34      	ldr	r2, [pc, #208]	; (80026e4 <TIM_Base_SetConfig+0xe4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00f      	beq.n	8002638 <TIM_Base_SetConfig+0x38>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261e:	d00b      	beq.n	8002638 <TIM_Base_SetConfig+0x38>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a31      	ldr	r2, [pc, #196]	; (80026e8 <TIM_Base_SetConfig+0xe8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d007      	beq.n	8002638 <TIM_Base_SetConfig+0x38>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a30      	ldr	r2, [pc, #192]	; (80026ec <TIM_Base_SetConfig+0xec>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d003      	beq.n	8002638 <TIM_Base_SetConfig+0x38>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a2f      	ldr	r2, [pc, #188]	; (80026f0 <TIM_Base_SetConfig+0xf0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d108      	bne.n	800264a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <TIM_Base_SetConfig+0xe4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01b      	beq.n	800268a <TIM_Base_SetConfig+0x8a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002658:	d017      	beq.n	800268a <TIM_Base_SetConfig+0x8a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <TIM_Base_SetConfig+0xe8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <TIM_Base_SetConfig+0x8a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a21      	ldr	r2, [pc, #132]	; (80026ec <TIM_Base_SetConfig+0xec>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00f      	beq.n	800268a <TIM_Base_SetConfig+0x8a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <TIM_Base_SetConfig+0xf0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00b      	beq.n	800268a <TIM_Base_SetConfig+0x8a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <TIM_Base_SetConfig+0xf4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <TIM_Base_SetConfig+0x8a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <TIM_Base_SetConfig+0xf8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d003      	beq.n	800268a <TIM_Base_SetConfig+0x8a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <TIM_Base_SetConfig+0xfc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d108      	bne.n	800269c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a08      	ldr	r2, [pc, #32]	; (80026e4 <TIM_Base_SetConfig+0xe4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d103      	bne.n	80026d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	615a      	str	r2, [r3, #20]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40010000 	.word	0x40010000
 80026e8:	40000400 	.word	0x40000400
 80026ec:	40000800 	.word	0x40000800
 80026f0:	40000c00 	.word	0x40000c00
 80026f4:	40014000 	.word	0x40014000
 80026f8:	40014400 	.word	0x40014400
 80026fc:	40014800 	.word	0x40014800

08002700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e03f      	b.n	80027ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe f9a6 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2224      	movs	r2, #36	; 0x24
 8002758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800276a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fbed 	bl	8002f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b088      	sub	sp, #32
 80027c6:	af02      	add	r7, sp, #8
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b20      	cmp	r3, #32
 80027e0:	f040 8083 	bne.w	80028ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_UART_Transmit+0x2e>
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e07b      	b.n	80028ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_UART_Transmit+0x40>
 80027fe:	2302      	movs	r3, #2
 8002800:	e074      	b.n	80028ec <HAL_UART_Transmit+0x12a>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2221      	movs	r2, #33	; 0x21
 8002814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002818:	f7fe fb5a 	bl	8000ed0 <HAL_GetTick>
 800281c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	88fa      	ldrh	r2, [r7, #6]
 8002822:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800282a:	e042      	b.n	80028b2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002842:	d122      	bne.n	800288a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2200      	movs	r2, #0
 800284c:	2180      	movs	r1, #128	; 0x80
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fa10 	bl	8002c74 <UART_WaitOnFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e046      	b.n	80028ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002870:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3302      	adds	r3, #2
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	e017      	b.n	80028b2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3301      	adds	r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	e013      	b.n	80028b2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2200      	movs	r2, #0
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f9ed 	bl	8002c74 <UART_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e023      	b.n	80028ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	60ba      	str	r2, [r7, #8]
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1b7      	bne.n	800282c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2140      	movs	r1, #64	; 0x40
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f9d4 	bl	8002c74 <UART_WaitOnFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e00a      	b.n	80028ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e000      	b.n	80028ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
  }
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b20      	cmp	r3, #32
 8002912:	f040 8090 	bne.w	8002a36 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_UART_Receive+0x2e>
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e088      	b.n	8002a38 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_UART_Receive+0x40>
 8002930:	2302      	movs	r3, #2
 8002932:	e081      	b.n	8002a38 <HAL_UART_Receive+0x144>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2222      	movs	r2, #34	; 0x22
 8002946:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800294a:	f7fe fac1 	bl	8000ed0 <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	88fa      	ldrh	r2, [r7, #6]
 8002954:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800295c:	e05c      	b.n	8002a18 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002974:	d12b      	bne.n	80029ce <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2200      	movs	r2, #0
 800297e:	2120      	movs	r1, #32
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f977 	bl	8002c74 <UART_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e053      	b.n	8002a38 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10c      	bne.n	80029b6 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	3302      	adds	r3, #2
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	e030      	b.n	8002a18 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3301      	adds	r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	e024      	b.n	8002a18 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2200      	movs	r2, #0
 80029d6:	2120      	movs	r1, #32
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f94b 	bl	8002c74 <UART_WaitOnFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e027      	b.n	8002a38 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d108      	bne.n	8002a02 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	60ba      	str	r2, [r7, #8]
 80029fc:	b2ca      	uxtb	r2, r1
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	e00a      	b.n	8002a18 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1c59      	adds	r1, r3, #1
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d19d      	bne.n	800295e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10d      	bne.n	8002a92 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_UART_IRQHandler+0x52>
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f9dc 	bl	8002e48 <UART_Receive_IT>
      return;
 8002a90:	e0cc      	b.n	8002c2c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80ab 	beq.w	8002bf0 <HAL_UART_IRQHandler+0x1b0>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x70>
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80a0 	beq.w	8002bf0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x90>
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	f043 0201 	orr.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_UART_IRQHandler+0xb0>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae8:	f043 0202 	orr.w	r2, r3, #2
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_UART_IRQHandler+0xd0>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b08:	f043 0204 	orr.w	r2, r3, #4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_UART_IRQHandler+0xf0>
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	f043 0208 	orr.w	r2, r3, #8
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d078      	beq.n	8002c2a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <HAL_UART_IRQHandler+0x112>
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f97b 	bl	8002e48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5c:	2b40      	cmp	r3, #64	; 0x40
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <HAL_UART_IRQHandler+0x13a>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d031      	beq.n	8002bde <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8c4 	bl	8002d08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d123      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d013      	beq.n	8002bce <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002baa:	4a22      	ldr	r2, [pc, #136]	; (8002c34 <HAL_UART_IRQHandler+0x1f4>)
 8002bac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe fb28 	bl	8001208 <HAL_DMA_Abort_IT>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	e00e      	b.n	8002bec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f846 	bl	8002c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	e00a      	b.n	8002bec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f842 	bl	8002c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bdc:	e006      	b.n	8002bec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f83e 	bl	8002c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002bea:	e01e      	b.n	8002c2a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bec:	bf00      	nop
    return;
 8002bee:	e01c      	b.n	8002c2a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_UART_IRQHandler+0x1cc>
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f8b1 	bl	8002d6c <UART_Transmit_IT>
    return;
 8002c0a:	e00f      	b.n	8002c2c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_UART_IRQHandler+0x1ec>
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f8f9 	bl	8002e18 <UART_EndTransmit_IT>
    return;
 8002c26:	bf00      	nop
 8002c28:	e000      	b.n	8002c2c <HAL_UART_IRQHandler+0x1ec>
    return;
 8002c2a:	bf00      	nop
  }
}
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	08002d45 	.word	0x08002d45

08002c38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c84:	e02c      	b.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d028      	beq.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c94:	f7fe f91c 	bl	8000ed0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d21d      	bcs.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002cb2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e00f      	b.n	8002d00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d0c3      	beq.n	8002c86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f7ff ff7e 	bl	8002c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b21      	cmp	r3, #33	; 0x21
 8002d7e:	d144      	bne.n	8002e0a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d11a      	bne.n	8002dc0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d9e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	1c9a      	adds	r2, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	621a      	str	r2, [r3, #32]
 8002db2:	e00e      	b.n	8002dd2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	621a      	str	r2, [r3, #32]
 8002dbe:	e008      	b.n	8002dd2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	1c59      	adds	r1, r3, #1
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6211      	str	r1, [r2, #32]
 8002dca:	781a      	ldrb	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4619      	mov	r1, r3
 8002de0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10f      	bne.n	8002e06 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002e0a:	2302      	movs	r3, #2
  }
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff fefd 	bl	8002c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b22      	cmp	r3, #34	; 0x22
 8002e5a:	d171      	bne.n	8002f40 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e64:	d123      	bne.n	8002eae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10e      	bne.n	8002e92 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	1c9a      	adds	r2, r3, #2
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e90:	e029      	b.n	8002ee6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8002eac:	e01b      	b.n	8002ee6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6858      	ldr	r0, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	1c59      	adds	r1, r3, #1
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6291      	str	r1, [r2, #40]	; 0x28
 8002ec6:	b2c2      	uxtb	r2, r0
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e00c      	b.n	8002ee6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	1c58      	adds	r0, r3, #1
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	6288      	str	r0, [r1, #40]	; 0x28
 8002ede:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d120      	bne.n	8002f3c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0220 	bic.w	r2, r2, #32
 8002f08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff fe8a 	bl	8002c4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e002      	b.n	8002f42 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f8c:	f023 030c 	bic.w	r3, r3, #12
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	68f9      	ldr	r1, [r7, #12]
 8002f96:	430b      	orrs	r3, r1
 8002f98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb8:	f040 80e4 	bne.w	8003184 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4aab      	ldr	r2, [pc, #684]	; (8003270 <UART_SetConfig+0x324>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <UART_SetConfig+0x84>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4aaa      	ldr	r2, [pc, #680]	; (8003274 <UART_SetConfig+0x328>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d16c      	bne.n	80030aa <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002fd0:	f7ff f946 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	009a      	lsls	r2, r3, #2
 8002fde:	441a      	add	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	4aa3      	ldr	r2, [pc, #652]	; (8003278 <UART_SetConfig+0x32c>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	011c      	lsls	r4, r3, #4
 8002ff4:	f7ff f934 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	009a      	lsls	r2, r3, #2
 8003002:	441a      	add	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fbb2 f5f3 	udiv	r5, r2, r3
 800300e:	f7ff f927 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 8003012:	4602      	mov	r2, r0
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009a      	lsls	r2, r3, #2
 800301c:	441a      	add	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	4a93      	ldr	r2, [pc, #588]	; (8003278 <UART_SetConfig+0x32c>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	2264      	movs	r2, #100	; 0x64
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	1aeb      	subs	r3, r5, r3
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	3332      	adds	r3, #50	; 0x32
 800303c:	4a8e      	ldr	r2, [pc, #568]	; (8003278 <UART_SetConfig+0x32c>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800304a:	441c      	add	r4, r3
 800304c:	f7ff f908 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 8003050:	4602      	mov	r2, r0
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	009a      	lsls	r2, r3, #2
 800305a:	441a      	add	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fbb2 f5f3 	udiv	r5, r2, r3
 8003066:	f7ff f8fb 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 800306a:	4602      	mov	r2, r0
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	009a      	lsls	r2, r3, #2
 8003074:	441a      	add	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	4a7d      	ldr	r2, [pc, #500]	; (8003278 <UART_SetConfig+0x32c>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2264      	movs	r2, #100	; 0x64
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	1aeb      	subs	r3, r5, r3
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	3332      	adds	r3, #50	; 0x32
 8003094:	4a78      	ldr	r2, [pc, #480]	; (8003278 <UART_SetConfig+0x32c>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	f003 0207 	and.w	r2, r3, #7
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4422      	add	r2, r4
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	e154      	b.n	8003354 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80030aa:	f7ff f8c5 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	009a      	lsls	r2, r3, #2
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	4a6c      	ldr	r2, [pc, #432]	; (8003278 <UART_SetConfig+0x32c>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	011c      	lsls	r4, r3, #4
 80030ce:	f7ff f8b3 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 80030d2:	4602      	mov	r2, r0
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	009a      	lsls	r2, r3, #2
 80030dc:	441a      	add	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fbb2 f5f3 	udiv	r5, r2, r3
 80030e8:	f7ff f8a6 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	009a      	lsls	r2, r3, #2
 80030f6:	441a      	add	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	4a5d      	ldr	r2, [pc, #372]	; (8003278 <UART_SetConfig+0x32c>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	2264      	movs	r2, #100	; 0x64
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	1aeb      	subs	r3, r5, r3
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	3332      	adds	r3, #50	; 0x32
 8003116:	4a58      	ldr	r2, [pc, #352]	; (8003278 <UART_SetConfig+0x32c>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003124:	441c      	add	r4, r3
 8003126:	f7ff f887 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 800312a:	4602      	mov	r2, r0
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009a      	lsls	r2, r3, #2
 8003134:	441a      	add	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003140:	f7ff f87a 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 8003144:	4602      	mov	r2, r0
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009a      	lsls	r2, r3, #2
 800314e:	441a      	add	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	4a47      	ldr	r2, [pc, #284]	; (8003278 <UART_SetConfig+0x32c>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	2264      	movs	r2, #100	; 0x64
 8003164:	fb02 f303 	mul.w	r3, r2, r3
 8003168:	1aeb      	subs	r3, r5, r3
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	3332      	adds	r3, #50	; 0x32
 800316e:	4a42      	ldr	r2, [pc, #264]	; (8003278 <UART_SetConfig+0x32c>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	f003 0207 	and.w	r2, r3, #7
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4422      	add	r2, r4
 8003180:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003182:	e0e7      	b.n	8003354 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a39      	ldr	r2, [pc, #228]	; (8003270 <UART_SetConfig+0x324>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <UART_SetConfig+0x24c>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a38      	ldr	r2, [pc, #224]	; (8003274 <UART_SetConfig+0x328>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d171      	bne.n	800327c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003198:	f7ff f862 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 800319c:	4602      	mov	r2, r0
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	009a      	lsls	r2, r3, #2
 80031a6:	441a      	add	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	4a31      	ldr	r2, [pc, #196]	; (8003278 <UART_SetConfig+0x32c>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	011c      	lsls	r4, r3, #4
 80031bc:	f7ff f850 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	009a      	lsls	r2, r3, #2
 80031ca:	441a      	add	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80031d6:	f7ff f843 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 80031da:	4602      	mov	r2, r0
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	009a      	lsls	r2, r3, #2
 80031e4:	441a      	add	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	4a21      	ldr	r2, [pc, #132]	; (8003278 <UART_SetConfig+0x32c>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	2264      	movs	r2, #100	; 0x64
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	1aeb      	subs	r3, r5, r3
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	3332      	adds	r3, #50	; 0x32
 8003204:	4a1c      	ldr	r2, [pc, #112]	; (8003278 <UART_SetConfig+0x32c>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003210:	441c      	add	r4, r3
 8003212:	f7ff f825 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 8003216:	4602      	mov	r2, r0
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009a      	lsls	r2, r3, #2
 8003220:	441a      	add	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	fbb2 f5f3 	udiv	r5, r2, r3
 800322c:	f7ff f818 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 8003230:	4602      	mov	r2, r0
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	009a      	lsls	r2, r3, #2
 800323a:	441a      	add	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	4a0c      	ldr	r2, [pc, #48]	; (8003278 <UART_SetConfig+0x32c>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	2264      	movs	r2, #100	; 0x64
 8003250:	fb02 f303 	mul.w	r3, r2, r3
 8003254:	1aeb      	subs	r3, r5, r3
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	3332      	adds	r3, #50	; 0x32
 800325a:	4a07      	ldr	r2, [pc, #28]	; (8003278 <UART_SetConfig+0x32c>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	f003 020f 	and.w	r2, r3, #15
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4422      	add	r2, r4
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	e071      	b.n	8003354 <UART_SetConfig+0x408>
 8003270:	40011000 	.word	0x40011000
 8003274:	40011400 	.word	0x40011400
 8003278:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800327c:	f7fe ffdc 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 8003280:	4602      	mov	r2, r0
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	009a      	lsls	r2, r3, #2
 800328a:	441a      	add	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	4a31      	ldr	r2, [pc, #196]	; (800335c <UART_SetConfig+0x410>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	011c      	lsls	r4, r3, #4
 80032a0:	f7fe ffca 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	009a      	lsls	r2, r3, #2
 80032ae:	441a      	add	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80032ba:	f7fe ffbd 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 80032be:	4602      	mov	r2, r0
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	009a      	lsls	r2, r3, #2
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	4a21      	ldr	r2, [pc, #132]	; (800335c <UART_SetConfig+0x410>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2264      	movs	r2, #100	; 0x64
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	1aeb      	subs	r3, r5, r3
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	3332      	adds	r3, #50	; 0x32
 80032e8:	4a1c      	ldr	r2, [pc, #112]	; (800335c <UART_SetConfig+0x410>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f4:	441c      	add	r4, r3
 80032f6:	f7fe ff9f 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 80032fa:	4602      	mov	r2, r0
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	009a      	lsls	r2, r3, #2
 8003304:	441a      	add	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003310:	f7fe ff92 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 8003314:	4602      	mov	r2, r0
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	009a      	lsls	r2, r3, #2
 800331e:	441a      	add	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	4a0c      	ldr	r2, [pc, #48]	; (800335c <UART_SetConfig+0x410>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	2264      	movs	r2, #100	; 0x64
 8003334:	fb02 f303 	mul.w	r3, r2, r3
 8003338:	1aeb      	subs	r3, r5, r3
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	3332      	adds	r3, #50	; 0x32
 800333e:	4a07      	ldr	r2, [pc, #28]	; (800335c <UART_SetConfig+0x410>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	f003 020f 	and.w	r2, r3, #15
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4422      	add	r2, r4
 8003350:	609a      	str	r2, [r3, #8]
}
 8003352:	e7ff      	b.n	8003354 <UART_SetConfig+0x408>
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bdb0      	pop	{r4, r5, r7, pc}
 800335c:	51eb851f 	.word	0x51eb851f

08003360 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800336e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003372:	2b84      	cmp	r3, #132	; 0x84
 8003374:	d005      	beq.n	8003382 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003376:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4413      	add	r3, r2
 800337e:	3303      	adds	r3, #3
 8003380:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003382:	68fb      	ldr	r3, [r7, #12]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003396:	f3ef 8305 	mrs	r3, IPSR
 800339a:	607b      	str	r3, [r7, #4]
  return(result);
 800339c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bf14      	ite	ne
 80033a2:	2301      	movne	r3, #1
 80033a4:	2300      	moveq	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033b8:	f000 fc98 	bl	8003cec <vTaskStartScheduler>
  
  return osOK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c4:	b089      	sub	sp, #36	; 0x24
 80033c6:	af04      	add	r7, sp, #16
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d020      	beq.n	8003416 <osThreadCreate+0x54>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01c      	beq.n	8003416 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685c      	ldr	r4, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681d      	ldr	r5, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691e      	ldr	r6, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ffb6 	bl	8003360 <makeFreeRtosPriority>
 80033f4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033fe:	9202      	str	r2, [sp, #8]
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	9100      	str	r1, [sp, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4632      	mov	r2, r6
 8003408:	4629      	mov	r1, r5
 800340a:	4620      	mov	r0, r4
 800340c:	f000 f91c 	bl	8003648 <xTaskCreateStatic>
 8003410:	4603      	mov	r3, r0
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e01c      	b.n	8003450 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685c      	ldr	r4, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003422:	b29e      	uxth	r6, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff ff98 	bl	8003360 <makeFreeRtosPriority>
 8003430:	4602      	mov	r2, r0
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	9200      	str	r2, [sp, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	4632      	mov	r2, r6
 800343e:	4629      	mov	r1, r5
 8003440:	4620      	mov	r0, r4
 8003442:	f000 f95a 	bl	80036fa <xTaskCreate>
 8003446:	4603      	mov	r3, r0
 8003448:	2b01      	cmp	r3, #1
 800344a:	d001      	beq.n	8003450 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800344c:	2300      	movs	r3, #0
 800344e:	e000      	b.n	8003452 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003450:	68fb      	ldr	r3, [r7, #12]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800345a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <osDelay+0x16>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	e000      	b.n	8003472 <osDelay+0x18>
 8003470:	2301      	movs	r3, #1
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fa6e 	bl	8003954 <vTaskDelay>
  
  return osOK;
 8003478:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fa96 	bl	80039bc <vTaskSuspend>
  
  return osOK;
 8003490:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80034a4:	f7ff ff74 	bl	8003390 <inHandlerMode>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00e      	beq.n	80034cc <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fbac 	bl	8003c0c <xTaskResumeFromISR>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d10b      	bne.n	80034d2 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80034ba:	4b08      	ldr	r3, [pc, #32]	; (80034dc <osThreadResume+0x40>)
 80034bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	e002      	b.n	80034d2 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fb41 	bl	8003b54 <vTaskResume>
  }
  return osOK;
 80034d2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	e000ed04 	.word	0xe000ed04

080034e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f103 0208 	add.w	r2, r3, #8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f04f 32ff 	mov.w	r2, #4294967295
 80034f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f103 0208 	add.w	r2, r3, #8
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f103 0208 	add.w	r2, r3, #8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800353a:	b480      	push	{r7}
 800353c:	b085      	sub	sp, #20
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	601a      	str	r2, [r3, #0]
}
 8003576:	bf00      	nop
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d103      	bne.n	80035a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e00c      	b.n	80035bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3308      	adds	r3, #8
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e002      	b.n	80035b0 <vListInsert+0x2e>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d2f6      	bcs.n	80035aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	601a      	str	r2, [r3, #0]
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6892      	ldr	r2, [r2, #8]
 800360a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6852      	ldr	r2, [r2, #4]
 8003614:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	d103      	bne.n	8003628 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	1e5a      	subs	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08e      	sub	sp, #56	; 0x38
 800364c:	af04      	add	r7, sp, #16
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	e7fe      	b.n	800366e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <xTaskCreateStatic+0x42>
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	e7fe      	b.n	8003688 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800368a:	2354      	movs	r3, #84	; 0x54
 800368c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b54      	cmp	r3, #84	; 0x54
 8003692:	d009      	beq.n	80036a8 <xTaskCreateStatic+0x60>
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	e7fe      	b.n	80036a6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01e      	beq.n	80036ec <xTaskCreateStatic+0xa4>
 80036ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01b      	beq.n	80036ec <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036c6:	2300      	movs	r3, #0
 80036c8:	9303      	str	r3, [sp, #12]
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	9302      	str	r3, [sp, #8]
 80036ce:	f107 0314 	add.w	r3, r7, #20
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f850 	bl	8003784 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036e6:	f000 f8cb 	bl	8003880 <prvAddNewTaskToReadyList>
 80036ea:	e001      	b.n	80036f0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036f0:	697b      	ldr	r3, [r7, #20]
	}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3728      	adds	r7, #40	; 0x28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b08c      	sub	sp, #48	; 0x30
 80036fe:	af04      	add	r7, sp, #16
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4618      	mov	r0, r3
 8003710:	f001 f886 	bl	8004820 <pvPortMalloc>
 8003714:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00e      	beq.n	800373a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800371c:	2054      	movs	r0, #84	; 0x54
 800371e:	f001 f87f 	bl	8004820 <pvPortMalloc>
 8003722:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
 8003730:	e005      	b.n	800373e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003732:	6978      	ldr	r0, [r7, #20]
 8003734:	f001 f936 	bl	80049a4 <vPortFree>
 8003738:	e001      	b.n	800373e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d017      	beq.n	8003774 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	2300      	movs	r3, #0
 8003750:	9303      	str	r3, [sp, #12]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	9302      	str	r3, [sp, #8]
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f80e 	bl	8003784 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003768:	69f8      	ldr	r0, [r7, #28]
 800376a:	f000 f889 	bl	8003880 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800376e:	2301      	movs	r3, #1
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	e002      	b.n	800377a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003774:	f04f 33ff 	mov.w	r3, #4294967295
 8003778:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800377a:	69bb      	ldr	r3, [r7, #24]
	}
 800377c:	4618      	mov	r0, r3
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800379c:	3b01      	subs	r3, #1
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f023 0307 	bic.w	r3, r3, #7
 80037aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <prvInitialiseNewTask+0x46>
 80037b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	e7fe      	b.n	80037c8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	e012      	b.n	80037f6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	7819      	ldrb	r1, [r3, #0]
 80037d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	4413      	add	r3, r2
 80037de:	3334      	adds	r3, #52	; 0x34
 80037e0:	460a      	mov	r2, r1
 80037e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d006      	beq.n	80037fe <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	3301      	adds	r3, #1
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	2b0f      	cmp	r3, #15
 80037fa:	d9e9      	bls.n	80037d0 <prvInitialiseNewTask+0x4c>
 80037fc:	e000      	b.n	8003800 <prvInitialiseNewTask+0x7c>
		{
			break;
 80037fe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	2b06      	cmp	r3, #6
 800380c:	d901      	bls.n	8003812 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800380e:	2306      	movs	r3, #6
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003816:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800381c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	2200      	movs	r2, #0
 8003822:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	3304      	adds	r3, #4
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff fe79 	bl	8003520 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	3318      	adds	r3, #24
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fe74 	bl	8003520 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	f1c3 0207 	rsb	r2, r3, #7
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	2200      	movs	r2, #0
 8003852:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	68f9      	ldr	r1, [r7, #12]
 8003860:	69b8      	ldr	r0, [r7, #24]
 8003862:	f000 fd9f 	bl	80043a4 <pxPortInitialiseStack>
 8003866:	4602      	mov	r2, r0
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003876:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003878:	bf00      	nop
 800387a:	3720      	adds	r7, #32
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003888:	f000 feb0 	bl	80045ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800388c:	4b2a      	ldr	r3, [pc, #168]	; (8003938 <prvAddNewTaskToReadyList+0xb8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3301      	adds	r3, #1
 8003892:	4a29      	ldr	r2, [pc, #164]	; (8003938 <prvAddNewTaskToReadyList+0xb8>)
 8003894:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003896:	4b29      	ldr	r3, [pc, #164]	; (800393c <prvAddNewTaskToReadyList+0xbc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800389e:	4a27      	ldr	r2, [pc, #156]	; (800393c <prvAddNewTaskToReadyList+0xbc>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <prvAddNewTaskToReadyList+0xb8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d110      	bne.n	80038ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038ac:	f000 fc54 	bl	8004158 <prvInitialiseTaskLists>
 80038b0:	e00d      	b.n	80038ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038b2:	4b23      	ldr	r3, [pc, #140]	; (8003940 <prvAddNewTaskToReadyList+0xc0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <prvAddNewTaskToReadyList+0xbc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d802      	bhi.n	80038ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038c8:	4a1c      	ldr	r2, [pc, #112]	; (800393c <prvAddNewTaskToReadyList+0xbc>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038ce:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <prvAddNewTaskToReadyList+0xc4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <prvAddNewTaskToReadyList+0xc4>)
 80038d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	2201      	movs	r2, #1
 80038de:	409a      	lsls	r2, r3
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <prvAddNewTaskToReadyList+0xc8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	4a18      	ldr	r2, [pc, #96]	; (8003948 <prvAddNewTaskToReadyList+0xc8>)
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <prvAddNewTaskToReadyList+0xcc>)
 80038f8:	441a      	add	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3304      	adds	r3, #4
 80038fe:	4619      	mov	r1, r3
 8003900:	4610      	mov	r0, r2
 8003902:	f7ff fe1a 	bl	800353a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003906:	f000 fe9f 	bl	8004648 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800390a:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <prvAddNewTaskToReadyList+0xc0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00e      	beq.n	8003930 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <prvAddNewTaskToReadyList+0xbc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	429a      	cmp	r2, r3
 800391e:	d207      	bcs.n	8003930 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <prvAddNewTaskToReadyList+0xd0>)
 8003922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200003e4 	.word	0x200003e4
 800393c:	200002e4 	.word	0x200002e4
 8003940:	200003f0 	.word	0x200003f0
 8003944:	20000400 	.word	0x20000400
 8003948:	200003ec 	.word	0x200003ec
 800394c:	200002e8 	.word	0x200002e8
 8003950:	e000ed04 	.word	0xe000ed04

08003954 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <vTaskDelay+0x60>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <vTaskDelay+0x2e>
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	e7fe      	b.n	8003980 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003982:	f000 fa11 	bl	8003da8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003986:	2100      	movs	r1, #0
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fca5 	bl	80042d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800398e:	f000 fa19 	bl	8003dc4 <xTaskResumeAll>
 8003992:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800399a:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <vTaskDelay+0x64>)
 800399c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	2000040c 	.word	0x2000040c
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80039c4:	f000 fe12 	bl	80045ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <vTaskSuspend+0x18>
 80039ce:	4b3c      	ldr	r3, [pc, #240]	; (8003ac0 <vTaskSuspend+0x104>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	e000      	b.n	80039d6 <vTaskSuspend+0x1a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3304      	adds	r3, #4
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fe09 	bl	80035f4 <uxListRemove>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d115      	bne.n	8003a14 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ec:	4935      	ldr	r1, [pc, #212]	; (8003ac4 <vTaskSuspend+0x108>)
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <vTaskSuspend+0x58>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	2201      	movs	r2, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	4b2f      	ldr	r3, [pc, #188]	; (8003ac8 <vTaskSuspend+0x10c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	4a2d      	ldr	r2, [pc, #180]	; (8003ac8 <vTaskSuspend+0x10c>)
 8003a12:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d004      	beq.n	8003a26 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3318      	adds	r3, #24
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fde7 	bl	80035f4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4827      	ldr	r0, [pc, #156]	; (8003acc <vTaskSuspend+0x110>)
 8003a2e:	f7ff fd84 	bl	800353a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d103      	bne.n	8003a46 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003a46:	f000 fdff 	bl	8004648 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003a4a:	4b21      	ldr	r3, [pc, #132]	; (8003ad0 <vTaskSuspend+0x114>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003a52:	f000 fdcb 	bl	80045ec <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003a56:	f000 fc19 	bl	800428c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003a5a:	f000 fdf5 	bl	8004648 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003a5e:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <vTaskSuspend+0x104>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d126      	bne.n	8003ab6 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <vTaskSuspend+0x114>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d016      	beq.n	8003a9e <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003a70:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <vTaskSuspend+0x118>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d009      	beq.n	8003a8c <vTaskSuspend+0xd0>
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	e7fe      	b.n	8003a8a <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8003a8c:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <vTaskSuspend+0x11c>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a9c:	e00b      	b.n	8003ab6 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <vTaskSuspend+0x110>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <vTaskSuspend+0x120>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d103      	bne.n	8003ab2 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <vTaskSuspend+0x104>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
	}
 8003ab0:	e001      	b.n	8003ab6 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8003ab2:	f000 fadf 	bl	8004074 <vTaskSwitchContext>
	}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200002e4 	.word	0x200002e4
 8003ac4:	200002e8 	.word	0x200002e8
 8003ac8:	200003ec 	.word	0x200003ec
 8003acc:	200003d0 	.word	0x200003d0
 8003ad0:	200003f0 	.word	0x200003f0
 8003ad4:	2000040c 	.word	0x2000040c
 8003ad8:	e000ed04 	.word	0xe000ed04
 8003adc:	200003e4 	.word	0x200003e4

08003ae0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <prvTaskIsTaskSuspended+0x2a>
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e7fe      	b.n	8003b08 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	4a0f      	ldr	r2, [pc, #60]	; (8003b4c <prvTaskIsTaskSuspended+0x6c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d101      	bne.n	8003b18 <prvTaskIsTaskSuspended+0x38>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <prvTaskIsTaskSuspended+0x3a>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00f      	beq.n	8003b3e <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	4a0b      	ldr	r2, [pc, #44]	; (8003b50 <prvTaskIsTaskSuspended+0x70>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00a      	beq.n	8003b3e <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <prvTaskIsTaskSuspended+0x54>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <prvTaskIsTaskSuspended+0x56>
 8003b34:	2300      	movs	r3, #0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b3e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003b40:	4618      	mov	r0, r3
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	200003d0 	.word	0x200003d0
 8003b50:	200003a4 	.word	0x200003a4

08003b54 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <vTaskResume+0x26>
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	e7fe      	b.n	8003b78 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d039      	beq.n	8003bf4 <vTaskResume+0xa0>
 8003b80:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <vTaskResume+0xa8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d034      	beq.n	8003bf4 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8003b8a:	f000 fd2f 	bl	80045ec <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f7ff ffa6 	bl	8003ae0 <prvTaskIsTaskSuspended>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d02a      	beq.n	8003bf0 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fd28 	bl	80035f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	2201      	movs	r2, #1
 8003baa:	409a      	lsls	r2, r3
 8003bac:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <vTaskResume+0xac>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	4a13      	ldr	r2, [pc, #76]	; (8003c00 <vTaskResume+0xac>)
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4a10      	ldr	r2, [pc, #64]	; (8003c04 <vTaskResume+0xb0>)
 8003bc4:	441a      	add	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	f7ff fcb4 	bl	800353a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <vTaskResume+0xa8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d307      	bcc.n	8003bf0 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003be0:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <vTaskResume+0xb4>)
 8003be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003bf0:	f000 fd2a 	bl	8004648 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	200002e4 	.word	0x200002e4
 8003c00:	200003ec 	.word	0x200003ec
 8003c04:	200002e8 	.word	0x200002e8
 8003c08:	e000ed04 	.word	0xe000ed04

08003c0c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	; 0x28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <xTaskResumeFromISR+0x2a>
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	61bb      	str	r3, [r7, #24]
 8003c34:	e7fe      	b.n	8003c34 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c36:	f000 fdb5 	bl	80047a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	617a      	str	r2, [r7, #20]
 8003c50:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c52:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c54:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003c56:	6a38      	ldr	r0, [r7, #32]
 8003c58:	f7ff ff42 	bl	8003ae0 <prvTaskIsTaskSuspended>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d02f      	beq.n	8003cc2 <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c62:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <xTaskResumeFromISR+0xcc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d125      	bne.n	8003cb6 <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <xTaskResumeFromISR+0xd0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d301      	bcc.n	8003c7c <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fcb7 	bl	80035f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <xTaskResumeFromISR+0xd4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <xTaskResumeFromISR+0xd4>)
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <xTaskResumeFromISR+0xd8>)
 8003ca6:	441a      	add	r2, r3
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	3304      	adds	r3, #4
 8003cac:	4619      	mov	r1, r3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	f7ff fc43 	bl	800353a <vListInsertEnd>
 8003cb4:	e005      	b.n	8003cc2 <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	3318      	adds	r3, #24
 8003cba:	4619      	mov	r1, r3
 8003cbc:	480a      	ldr	r0, [pc, #40]	; (8003ce8 <xTaskResumeFromISR+0xdc>)
 8003cbe:	f7ff fc3c 	bl	800353a <vListInsertEnd>
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3728      	adds	r7, #40	; 0x28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	2000040c 	.word	0x2000040c
 8003cdc:	200002e4 	.word	0x200002e4
 8003ce0:	200003ec 	.word	0x200003ec
 8003ce4:	200002e8 	.word	0x200002e8
 8003ce8:	200003a4 	.word	0x200003a4

08003cec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cfa:	463a      	mov	r2, r7
 8003cfc:	1d39      	adds	r1, r7, #4
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fbec 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	9202      	str	r2, [sp, #8]
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2300      	movs	r3, #0
 8003d18:	460a      	mov	r2, r1
 8003d1a:	491d      	ldr	r1, [pc, #116]	; (8003d90 <vTaskStartScheduler+0xa4>)
 8003d1c:	481d      	ldr	r0, [pc, #116]	; (8003d94 <vTaskStartScheduler+0xa8>)
 8003d1e:	f7ff fc93 	bl	8003648 <xTaskCreateStatic>
 8003d22:	4602      	mov	r2, r0
 8003d24:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <vTaskStartScheduler+0xac>)
 8003d26:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <vTaskStartScheduler+0xac>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d30:	2301      	movs	r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e001      	b.n	8003d3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d115      	bne.n	8003d6c <vTaskStartScheduler+0x80>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d52:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <vTaskStartScheduler+0xb0>)
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295
 8003d58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <vTaskStartScheduler+0xb4>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d60:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <vTaskStartScheduler+0xb8>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d66:	f000 fba3 	bl	80044b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d6a:	e00d      	b.n	8003d88 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d109      	bne.n	8003d88 <vTaskStartScheduler+0x9c>
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	e7fe      	b.n	8003d86 <vTaskStartScheduler+0x9a>
}
 8003d88:	bf00      	nop
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	08005734 	.word	0x08005734
 8003d94:	08004129 	.word	0x08004129
 8003d98:	20000408 	.word	0x20000408
 8003d9c:	20000404 	.word	0x20000404
 8003da0:	200003f0 	.word	0x200003f0
 8003da4:	200003e8 	.word	0x200003e8

08003da8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <vTaskSuspendAll+0x18>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	4a03      	ldr	r2, [pc, #12]	; (8003dc0 <vTaskSuspendAll+0x18>)
 8003db4:	6013      	str	r3, [r2, #0]
}
 8003db6:	bf00      	nop
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	2000040c 	.word	0x2000040c

08003dc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dd2:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <xTaskResumeAll+0x114>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <xTaskResumeAll+0x2a>
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	e7fe      	b.n	8003dec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dee:	f000 fbfd 	bl	80045ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003df2:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <xTaskResumeAll+0x114>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	4a37      	ldr	r2, [pc, #220]	; (8003ed8 <xTaskResumeAll+0x114>)
 8003dfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dfc:	4b36      	ldr	r3, [pc, #216]	; (8003ed8 <xTaskResumeAll+0x114>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d161      	bne.n	8003ec8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e04:	4b35      	ldr	r3, [pc, #212]	; (8003edc <xTaskResumeAll+0x118>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d05d      	beq.n	8003ec8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e0c:	e02e      	b.n	8003e6c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e0e:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <xTaskResumeAll+0x11c>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3318      	adds	r3, #24
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fbea 	bl	80035f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fbe5 	bl	80035f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	2201      	movs	r2, #1
 8003e30:	409a      	lsls	r2, r3
 8003e32:	4b2c      	ldr	r3, [pc, #176]	; (8003ee4 <xTaskResumeAll+0x120>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	4a2a      	ldr	r2, [pc, #168]	; (8003ee4 <xTaskResumeAll+0x120>)
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4a27      	ldr	r2, [pc, #156]	; (8003ee8 <xTaskResumeAll+0x124>)
 8003e4a:	441a      	add	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f7ff fb71 	bl	800353a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5c:	4b23      	ldr	r3, [pc, #140]	; (8003eec <xTaskResumeAll+0x128>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003e66:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <xTaskResumeAll+0x12c>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <xTaskResumeAll+0x11c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1cc      	bne.n	8003e0e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e7a:	f000 fa07 	bl	800428c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <xTaskResumeAll+0x130>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d010      	beq.n	8003eac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e8a:	f000 f837 	bl	8003efc <xTaskIncrementTick>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003e94:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <xTaskResumeAll+0x12c>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f1      	bne.n	8003e8a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <xTaskResumeAll+0x130>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <xTaskResumeAll+0x12c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <xTaskResumeAll+0x134>)
 8003eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ec8:	f000 fbbe 	bl	8004648 <vPortExitCritical>

	return xAlreadyYielded;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2000040c 	.word	0x2000040c
 8003edc:	200003e4 	.word	0x200003e4
 8003ee0:	200003a4 	.word	0x200003a4
 8003ee4:	200003ec 	.word	0x200003ec
 8003ee8:	200002e8 	.word	0x200002e8
 8003eec:	200002e4 	.word	0x200002e4
 8003ef0:	200003f8 	.word	0x200003f8
 8003ef4:	200003f4 	.word	0x200003f4
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f06:	4b50      	ldr	r3, [pc, #320]	; (8004048 <xTaskIncrementTick+0x14c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f040 808c 	bne.w	8004028 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f10:	4b4e      	ldr	r3, [pc, #312]	; (800404c <xTaskIncrementTick+0x150>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f18:	4a4c      	ldr	r2, [pc, #304]	; (800404c <xTaskIncrementTick+0x150>)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d11f      	bne.n	8003f64 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f24:	4b4a      	ldr	r3, [pc, #296]	; (8004050 <xTaskIncrementTick+0x154>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <xTaskIncrementTick+0x46>
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	e7fe      	b.n	8003f40 <xTaskIncrementTick+0x44>
 8003f42:	4b43      	ldr	r3, [pc, #268]	; (8004050 <xTaskIncrementTick+0x154>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	4b42      	ldr	r3, [pc, #264]	; (8004054 <xTaskIncrementTick+0x158>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a40      	ldr	r2, [pc, #256]	; (8004050 <xTaskIncrementTick+0x154>)
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	4a40      	ldr	r2, [pc, #256]	; (8004054 <xTaskIncrementTick+0x158>)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	4b40      	ldr	r3, [pc, #256]	; (8004058 <xTaskIncrementTick+0x15c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	4a3e      	ldr	r2, [pc, #248]	; (8004058 <xTaskIncrementTick+0x15c>)
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	f000 f994 	bl	800428c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f64:	4b3d      	ldr	r3, [pc, #244]	; (800405c <xTaskIncrementTick+0x160>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d34d      	bcc.n	800400a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f6e:	4b38      	ldr	r3, [pc, #224]	; (8004050 <xTaskIncrementTick+0x154>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <xTaskIncrementTick+0x80>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <xTaskIncrementTick+0x82>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f82:	4b36      	ldr	r3, [pc, #216]	; (800405c <xTaskIncrementTick+0x160>)
 8003f84:	f04f 32ff 	mov.w	r2, #4294967295
 8003f88:	601a      	str	r2, [r3, #0]
					break;
 8003f8a:	e03e      	b.n	800400a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f8c:	4b30      	ldr	r3, [pc, #192]	; (8004050 <xTaskIncrementTick+0x154>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d203      	bcs.n	8003fac <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fa4:	4a2d      	ldr	r2, [pc, #180]	; (800405c <xTaskIncrementTick+0x160>)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6013      	str	r3, [r2, #0]
						break;
 8003faa:	e02e      	b.n	800400a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fb1f 	bl	80035f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	3318      	adds	r3, #24
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff fb16 	bl	80035f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	2201      	movs	r2, #1
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	4b23      	ldr	r3, [pc, #140]	; (8004060 <xTaskIncrementTick+0x164>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	4a22      	ldr	r2, [pc, #136]	; (8004060 <xTaskIncrementTick+0x164>)
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4a1f      	ldr	r2, [pc, #124]	; (8004064 <xTaskIncrementTick+0x168>)
 8003fe8:	441a      	add	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3304      	adds	r3, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f7ff faa2 	bl	800353a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <xTaskIncrementTick+0x16c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	429a      	cmp	r2, r3
 8004002:	d3b4      	bcc.n	8003f6e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004004:	2301      	movs	r3, #1
 8004006:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004008:	e7b1      	b.n	8003f6e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800400a:	4b17      	ldr	r3, [pc, #92]	; (8004068 <xTaskIncrementTick+0x16c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	4914      	ldr	r1, [pc, #80]	; (8004064 <xTaskIncrementTick+0x168>)
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d907      	bls.n	8004032 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004022:	2301      	movs	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e004      	b.n	8004032 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004028:	4b10      	ldr	r3, [pc, #64]	; (800406c <xTaskIncrementTick+0x170>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3301      	adds	r3, #1
 800402e:	4a0f      	ldr	r2, [pc, #60]	; (800406c <xTaskIncrementTick+0x170>)
 8004030:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004032:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <xTaskIncrementTick+0x174>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800403a:	2301      	movs	r3, #1
 800403c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800403e:	697b      	ldr	r3, [r7, #20]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	2000040c 	.word	0x2000040c
 800404c:	200003e8 	.word	0x200003e8
 8004050:	2000039c 	.word	0x2000039c
 8004054:	200003a0 	.word	0x200003a0
 8004058:	200003fc 	.word	0x200003fc
 800405c:	20000404 	.word	0x20000404
 8004060:	200003ec 	.word	0x200003ec
 8004064:	200002e8 	.word	0x200002e8
 8004068:	200002e4 	.word	0x200002e4
 800406c:	200003f4 	.word	0x200003f4
 8004070:	200003f8 	.word	0x200003f8

08004074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800407a:	4b26      	ldr	r3, [pc, #152]	; (8004114 <vTaskSwitchContext+0xa0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004082:	4b25      	ldr	r3, [pc, #148]	; (8004118 <vTaskSwitchContext+0xa4>)
 8004084:	2201      	movs	r2, #1
 8004086:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004088:	e03e      	b.n	8004108 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800408a:	4b23      	ldr	r3, [pc, #140]	; (8004118 <vTaskSwitchContext+0xa4>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004090:	4b22      	ldr	r3, [pc, #136]	; (800411c <vTaskSwitchContext+0xa8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	fab3 f383 	clz	r3, r3
 800409c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800409e:	7afb      	ldrb	r3, [r7, #11]
 80040a0:	f1c3 031f 	rsb	r3, r3, #31
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	491e      	ldr	r1, [pc, #120]	; (8004120 <vTaskSwitchContext+0xac>)
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <vTaskSwitchContext+0x5a>
	__asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	607b      	str	r3, [r7, #4]
 80040cc:	e7fe      	b.n	80040cc <vTaskSwitchContext+0x58>
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4a11      	ldr	r2, [pc, #68]	; (8004120 <vTaskSwitchContext+0xac>)
 80040da:	4413      	add	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	3308      	adds	r3, #8
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d104      	bne.n	80040fe <vTaskSwitchContext+0x8a>
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4a07      	ldr	r2, [pc, #28]	; (8004124 <vTaskSwitchContext+0xb0>)
 8004106:	6013      	str	r3, [r2, #0]
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	2000040c 	.word	0x2000040c
 8004118:	200003f8 	.word	0x200003f8
 800411c:	200003ec 	.word	0x200003ec
 8004120:	200002e8 	.word	0x200002e8
 8004124:	200002e4 	.word	0x200002e4

08004128 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004130:	f000 f852 	bl	80041d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <prvIdleTask+0x28>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d9f9      	bls.n	8004130 <prvIdleTask+0x8>
			{
				taskYIELD();
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <prvIdleTask+0x2c>)
 800413e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800414c:	e7f0      	b.n	8004130 <prvIdleTask+0x8>
 800414e:	bf00      	nop
 8004150:	200002e8 	.word	0x200002e8
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800415e:	2300      	movs	r3, #0
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	e00c      	b.n	800417e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <prvInitialiseTaskLists+0x60>)
 8004170:	4413      	add	r3, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff f9b4 	bl	80034e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3301      	adds	r3, #1
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b06      	cmp	r3, #6
 8004182:	d9ef      	bls.n	8004164 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004184:	480d      	ldr	r0, [pc, #52]	; (80041bc <prvInitialiseTaskLists+0x64>)
 8004186:	f7ff f9ab 	bl	80034e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800418a:	480d      	ldr	r0, [pc, #52]	; (80041c0 <prvInitialiseTaskLists+0x68>)
 800418c:	f7ff f9a8 	bl	80034e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004190:	480c      	ldr	r0, [pc, #48]	; (80041c4 <prvInitialiseTaskLists+0x6c>)
 8004192:	f7ff f9a5 	bl	80034e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004196:	480c      	ldr	r0, [pc, #48]	; (80041c8 <prvInitialiseTaskLists+0x70>)
 8004198:	f7ff f9a2 	bl	80034e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800419c:	480b      	ldr	r0, [pc, #44]	; (80041cc <prvInitialiseTaskLists+0x74>)
 800419e:	f7ff f99f 	bl	80034e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041a2:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <prvInitialiseTaskLists+0x78>)
 80041a4:	4a05      	ldr	r2, [pc, #20]	; (80041bc <prvInitialiseTaskLists+0x64>)
 80041a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <prvInitialiseTaskLists+0x7c>)
 80041aa:	4a05      	ldr	r2, [pc, #20]	; (80041c0 <prvInitialiseTaskLists+0x68>)
 80041ac:	601a      	str	r2, [r3, #0]
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200002e8 	.word	0x200002e8
 80041bc:	20000374 	.word	0x20000374
 80041c0:	20000388 	.word	0x20000388
 80041c4:	200003a4 	.word	0x200003a4
 80041c8:	200003b8 	.word	0x200003b8
 80041cc:	200003d0 	.word	0x200003d0
 80041d0:	2000039c 	.word	0x2000039c
 80041d4:	200003a0 	.word	0x200003a0

080041d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041de:	e019      	b.n	8004214 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041e0:	f000 fa04 	bl	80045ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041e4:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <prvCheckTasksWaitingTermination+0x4c>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3304      	adds	r3, #4
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff f9ff 	bl	80035f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <prvCheckTasksWaitingTermination+0x50>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <prvCheckTasksWaitingTermination+0x50>)
 80041fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <prvCheckTasksWaitingTermination+0x54>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3b01      	subs	r3, #1
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <prvCheckTasksWaitingTermination+0x54>)
 8004208:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800420a:	f000 fa1d 	bl	8004648 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f80e 	bl	8004230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <prvCheckTasksWaitingTermination+0x54>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e1      	bne.n	80041e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	200003b8 	.word	0x200003b8
 8004228:	200003e4 	.word	0x200003e4
 800422c:	200003cc 	.word	0x200003cc

08004230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800423e:	2b00      	cmp	r3, #0
 8004240:	d108      	bne.n	8004254 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fbac 	bl	80049a4 <vPortFree>
				vPortFree( pxTCB );
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fba9 	bl	80049a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004252:	e017      	b.n	8004284 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800425a:	2b01      	cmp	r3, #1
 800425c:	d103      	bne.n	8004266 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fba0 	bl	80049a4 <vPortFree>
	}
 8004264:	e00e      	b.n	8004284 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800426c:	2b02      	cmp	r3, #2
 800426e:	d009      	beq.n	8004284 <prvDeleteTCB+0x54>
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e7fe      	b.n	8004282 <prvDeleteTCB+0x52>
	}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <prvResetNextTaskUnblockTime+0x44>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <prvResetNextTaskUnblockTime+0x14>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <prvResetNextTaskUnblockTime+0x16>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d004      	beq.n	80042b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <prvResetNextTaskUnblockTime+0x48>)
 80042a8:	f04f 32ff 	mov.w	r2, #4294967295
 80042ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042ae:	e008      	b.n	80042c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <prvResetNextTaskUnblockTime+0x44>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4a05      	ldr	r2, [pc, #20]	; (80042d4 <prvResetNextTaskUnblockTime+0x48>)
 80042c0:	6013      	str	r3, [r2, #0]
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	2000039c 	.word	0x2000039c
 80042d4:	20000404 	.word	0x20000404

080042d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042e2:	4b29      	ldr	r3, [pc, #164]	; (8004388 <prvAddCurrentTaskToDelayedList+0xb0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042e8:	4b28      	ldr	r3, [pc, #160]	; (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3304      	adds	r3, #4
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff f980 	bl	80035f4 <uxListRemove>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80042fa:	4b24      	ldr	r3, [pc, #144]	; (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	2201      	movs	r2, #1
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	43da      	mvns	r2, r3
 8004308:	4b21      	ldr	r3, [pc, #132]	; (8004390 <prvAddCurrentTaskToDelayedList+0xb8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4013      	ands	r3, r2
 800430e:	4a20      	ldr	r2, [pc, #128]	; (8004390 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004310:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d10a      	bne.n	8004330 <prvAddCurrentTaskToDelayedList+0x58>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004320:	4b1a      	ldr	r3, [pc, #104]	; (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3304      	adds	r3, #4
 8004326:	4619      	mov	r1, r3
 8004328:	481a      	ldr	r0, [pc, #104]	; (8004394 <prvAddCurrentTaskToDelayedList+0xbc>)
 800432a:	f7ff f906 	bl	800353a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800432e:	e026      	b.n	800437e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4413      	add	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004338:	4b14      	ldr	r3, [pc, #80]	; (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	429a      	cmp	r2, r3
 8004346:	d209      	bcs.n	800435c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <prvAddCurrentTaskToDelayedList+0xc0>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f7ff f914 	bl	8003582 <vListInsert>
}
 800435a:	e010      	b.n	800437e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <prvAddCurrentTaskToDelayedList+0xc4>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3304      	adds	r3, #4
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f7ff f90a 	bl	8003582 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	429a      	cmp	r2, r3
 8004376:	d202      	bcs.n	800437e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004378:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	6013      	str	r3, [r2, #0]
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	200003e8 	.word	0x200003e8
 800438c:	200002e4 	.word	0x200002e4
 8004390:	200003ec 	.word	0x200003ec
 8004394:	200003d0 	.word	0x200003d0
 8004398:	200003a0 	.word	0x200003a0
 800439c:	2000039c 	.word	0x2000039c
 80043a0:	20000404 	.word	0x20000404

080043a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3b04      	subs	r3, #4
 80043b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3b04      	subs	r3, #4
 80043c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f023 0201 	bic.w	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3b04      	subs	r3, #4
 80043d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043d4:	4a0c      	ldr	r2, [pc, #48]	; (8004408 <pxPortInitialiseStack+0x64>)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3b14      	subs	r3, #20
 80043de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3b04      	subs	r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f06f 0202 	mvn.w	r2, #2
 80043f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3b20      	subs	r3, #32
 80043f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043fa:	68fb      	ldr	r3, [r7, #12]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	0800440d 	.word	0x0800440d

0800440c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <prvTaskExitError+0x50>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441e:	d009      	beq.n	8004434 <prvTaskExitError+0x28>
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	e7fe      	b.n	8004432 <prvTaskExitError+0x26>
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004446:	bf00      	nop
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0fc      	beq.n	8004448 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000008 	.word	0x20000008

08004460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <pxCurrentTCBConst2>)
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	6808      	ldr	r0, [r1, #0]
 8004466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446a:	f380 8809 	msr	PSP, r0
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f380 8811 	msr	BASEPRI, r0
 800447a:	4770      	bx	lr
 800447c:	f3af 8000 	nop.w

08004480 <pxCurrentTCBConst2>:
 8004480:	200002e4 	.word	0x200002e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop

08004488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004488:	4808      	ldr	r0, [pc, #32]	; (80044ac <prvPortStartFirstTask+0x24>)
 800448a:	6800      	ldr	r0, [r0, #0]
 800448c:	6800      	ldr	r0, [r0, #0]
 800448e:	f380 8808 	msr	MSP, r0
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f380 8814 	msr	CONTROL, r0
 800449a:	b662      	cpsie	i
 800449c:	b661      	cpsie	f
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	df00      	svc	0
 80044a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044aa:	bf00      	nop
 80044ac:	e000ed08 	.word	0xe000ed08

080044b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044b6:	4b44      	ldr	r3, [pc, #272]	; (80045c8 <xPortStartScheduler+0x118>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a44      	ldr	r2, [pc, #272]	; (80045cc <xPortStartScheduler+0x11c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d109      	bne.n	80044d4 <xPortStartScheduler+0x24>
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e7fe      	b.n	80044d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044d4:	4b3c      	ldr	r3, [pc, #240]	; (80045c8 <xPortStartScheduler+0x118>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a3d      	ldr	r2, [pc, #244]	; (80045d0 <xPortStartScheduler+0x120>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d109      	bne.n	80044f2 <xPortStartScheduler+0x42>
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	e7fe      	b.n	80044f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044f2:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <xPortStartScheduler+0x124>)
 80044f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	22ff      	movs	r2, #255	; 0xff
 8004502:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004514:	b2da      	uxtb	r2, r3
 8004516:	4b30      	ldr	r3, [pc, #192]	; (80045d8 <xPortStartScheduler+0x128>)
 8004518:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800451a:	4b30      	ldr	r3, [pc, #192]	; (80045dc <xPortStartScheduler+0x12c>)
 800451c:	2207      	movs	r2, #7
 800451e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004520:	e009      	b.n	8004536 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004522:	4b2e      	ldr	r3, [pc, #184]	; (80045dc <xPortStartScheduler+0x12c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3b01      	subs	r3, #1
 8004528:	4a2c      	ldr	r2, [pc, #176]	; (80045dc <xPortStartScheduler+0x12c>)
 800452a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	b2db      	uxtb	r3, r3
 8004534:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453e:	2b80      	cmp	r3, #128	; 0x80
 8004540:	d0ef      	beq.n	8004522 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004542:	4b26      	ldr	r3, [pc, #152]	; (80045dc <xPortStartScheduler+0x12c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f1c3 0307 	rsb	r3, r3, #7
 800454a:	2b04      	cmp	r3, #4
 800454c:	d009      	beq.n	8004562 <xPortStartScheduler+0xb2>
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	e7fe      	b.n	8004560 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004562:	4b1e      	ldr	r3, [pc, #120]	; (80045dc <xPortStartScheduler+0x12c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <xPortStartScheduler+0x12c>)
 800456a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800456c:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <xPortStartScheduler+0x12c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004574:	4a19      	ldr	r2, [pc, #100]	; (80045dc <xPortStartScheduler+0x12c>)
 8004576:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004580:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <xPortStartScheduler+0x130>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <xPortStartScheduler+0x130>)
 8004586:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800458a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800458c:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <xPortStartScheduler+0x130>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <xPortStartScheduler+0x130>)
 8004592:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004596:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004598:	f000 f8d6 	bl	8004748 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800459c:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <xPortStartScheduler+0x134>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045a2:	f000 f8f5 	bl	8004790 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <xPortStartScheduler+0x138>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a0f      	ldr	r2, [pc, #60]	; (80045e8 <xPortStartScheduler+0x138>)
 80045ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045b2:	f7ff ff69 	bl	8004488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045b6:	f7ff fd5d 	bl	8004074 <vTaskSwitchContext>
	prvTaskExitError();
 80045ba:	f7ff ff27 	bl	800440c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	e000ed00 	.word	0xe000ed00
 80045cc:	410fc271 	.word	0x410fc271
 80045d0:	410fc270 	.word	0x410fc270
 80045d4:	e000e400 	.word	0xe000e400
 80045d8:	20000410 	.word	0x20000410
 80045dc:	20000414 	.word	0x20000414
 80045e0:	e000ed20 	.word	0xe000ed20
 80045e4:	20000008 	.word	0x20000008
 80045e8:	e000ef34 	.word	0xe000ef34

080045ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004604:	4b0e      	ldr	r3, [pc, #56]	; (8004640 <vPortEnterCritical+0x54>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	4a0d      	ldr	r2, [pc, #52]	; (8004640 <vPortEnterCritical+0x54>)
 800460c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <vPortEnterCritical+0x54>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d10e      	bne.n	8004634 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <vPortEnterCritical+0x58>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <vPortEnterCritical+0x48>
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	603b      	str	r3, [r7, #0]
 8004632:	e7fe      	b.n	8004632 <vPortEnterCritical+0x46>
	}
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	20000008 	.word	0x20000008
 8004644:	e000ed04 	.word	0xe000ed04

08004648 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800464e:	4b11      	ldr	r3, [pc, #68]	; (8004694 <vPortExitCritical+0x4c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <vPortExitCritical+0x22>
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	607b      	str	r3, [r7, #4]
 8004668:	e7fe      	b.n	8004668 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800466a:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <vPortExitCritical+0x4c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3b01      	subs	r3, #1
 8004670:	4a08      	ldr	r2, [pc, #32]	; (8004694 <vPortExitCritical+0x4c>)
 8004672:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004674:	4b07      	ldr	r3, [pc, #28]	; (8004694 <vPortExitCritical+0x4c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d104      	bne.n	8004686 <vPortExitCritical+0x3e>
 800467c:	2300      	movs	r3, #0
 800467e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000008 	.word	0x20000008
	...

080046a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046a0:	f3ef 8009 	mrs	r0, PSP
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <pxCurrentTCBConst>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	f01e 0f10 	tst.w	lr, #16
 80046b0:	bf08      	it	eq
 80046b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ba:	6010      	str	r0, [r2, #0]
 80046bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046c4:	f380 8811 	msr	BASEPRI, r0
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f7ff fcd0 	bl	8004074 <vTaskSwitchContext>
 80046d4:	f04f 0000 	mov.w	r0, #0
 80046d8:	f380 8811 	msr	BASEPRI, r0
 80046dc:	bc09      	pop	{r0, r3}
 80046de:	6819      	ldr	r1, [r3, #0]
 80046e0:	6808      	ldr	r0, [r1, #0]
 80046e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e6:	f01e 0f10 	tst.w	lr, #16
 80046ea:	bf08      	it	eq
 80046ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046f0:	f380 8809 	msr	PSP, r0
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	f3af 8000 	nop.w

08004700 <pxCurrentTCBConst>:
 8004700:	200002e4 	.word	0x200002e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop

08004708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004720:	f7ff fbec 	bl	8003efc <xTaskIncrementTick>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <SysTick_Handler+0x3c>)
 800472c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	2300      	movs	r3, #0
 8004734:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	e000ed04 	.word	0xe000ed04

08004748 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <vPortSetupTimerInterrupt+0x34>)
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004752:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <vPortSetupTimerInterrupt+0x38>)
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <vPortSetupTimerInterrupt+0x3c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <vPortSetupTimerInterrupt+0x40>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	099b      	lsrs	r3, r3, #6
 8004764:	4a09      	ldr	r2, [pc, #36]	; (800478c <vPortSetupTimerInterrupt+0x44>)
 8004766:	3b01      	subs	r3, #1
 8004768:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800476a:	4b04      	ldr	r3, [pc, #16]	; (800477c <vPortSetupTimerInterrupt+0x34>)
 800476c:	2207      	movs	r2, #7
 800476e:	601a      	str	r2, [r3, #0]
}
 8004770:	bf00      	nop
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	e000e010 	.word	0xe000e010
 8004780:	e000e018 	.word	0xe000e018
 8004784:	20000000 	.word	0x20000000
 8004788:	10624dd3 	.word	0x10624dd3
 800478c:	e000e014 	.word	0xe000e014

08004790 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004790:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047a0 <vPortEnableVFP+0x10>
 8004794:	6801      	ldr	r1, [r0, #0]
 8004796:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800479a:	6001      	str	r1, [r0, #0]
 800479c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800479e:	bf00      	nop
 80047a0:	e000ed88 	.word	0xe000ed88

080047a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80047aa:	f3ef 8305 	mrs	r3, IPSR
 80047ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b0f      	cmp	r3, #15
 80047b4:	d913      	bls.n	80047de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047b6:	4a16      	ldr	r2, [pc, #88]	; (8004810 <vPortValidateInterruptPriority+0x6c>)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047c0:	4b14      	ldr	r3, [pc, #80]	; (8004814 <vPortValidateInterruptPriority+0x70>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	7afa      	ldrb	r2, [r7, #11]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d209      	bcs.n	80047de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	e7fe      	b.n	80047dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047de:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <vPortValidateInterruptPriority+0x74>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047e6:	4b0d      	ldr	r3, [pc, #52]	; (800481c <vPortValidateInterruptPriority+0x78>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d909      	bls.n	8004802 <vPortValidateInterruptPriority+0x5e>
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	e7fe      	b.n	8004800 <vPortValidateInterruptPriority+0x5c>
	}
 8004802:	bf00      	nop
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000e3f0 	.word	0xe000e3f0
 8004814:	20000410 	.word	0x20000410
 8004818:	e000ed0c 	.word	0xe000ed0c
 800481c:	20000414 	.word	0x20000414

08004820 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	; 0x28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004828:	2300      	movs	r3, #0
 800482a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800482c:	f7ff fabc 	bl	8003da8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004830:	4b57      	ldr	r3, [pc, #348]	; (8004990 <pvPortMalloc+0x170>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004838:	f000 f90c 	bl	8004a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800483c:	4b55      	ldr	r3, [pc, #340]	; (8004994 <pvPortMalloc+0x174>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	f040 808c 	bne.w	8004962 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01c      	beq.n	800488a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004850:	2208      	movs	r2, #8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	2b00      	cmp	r3, #0
 8004860:	d013      	beq.n	800488a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f023 0307 	bic.w	r3, r3, #7
 8004868:	3308      	adds	r3, #8
 800486a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <pvPortMalloc+0x6a>
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	e7fe      	b.n	8004888 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d068      	beq.n	8004962 <pvPortMalloc+0x142>
 8004890:	4b41      	ldr	r3, [pc, #260]	; (8004998 <pvPortMalloc+0x178>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	429a      	cmp	r2, r3
 8004898:	d863      	bhi.n	8004962 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800489a:	4b40      	ldr	r3, [pc, #256]	; (800499c <pvPortMalloc+0x17c>)
 800489c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800489e:	4b3f      	ldr	r3, [pc, #252]	; (800499c <pvPortMalloc+0x17c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048a4:	e004      	b.n	80048b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d903      	bls.n	80048c2 <pvPortMalloc+0xa2>
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f1      	bne.n	80048a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048c2:	4b33      	ldr	r3, [pc, #204]	; (8004990 <pvPortMalloc+0x170>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d04a      	beq.n	8004962 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2208      	movs	r2, #8
 80048d2:	4413      	add	r3, r2
 80048d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	1ad2      	subs	r2, r2, r3
 80048e6:	2308      	movs	r3, #8
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d91e      	bls.n	800492c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4413      	add	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d009      	beq.n	8004914 <pvPortMalloc+0xf4>
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e7fe      	b.n	8004912 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	1ad2      	subs	r2, r2, r3
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004926:	69b8      	ldr	r0, [r7, #24]
 8004928:	f000 f8f6 	bl	8004b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800492c:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <pvPortMalloc+0x178>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	4a18      	ldr	r2, [pc, #96]	; (8004998 <pvPortMalloc+0x178>)
 8004938:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800493a:	4b17      	ldr	r3, [pc, #92]	; (8004998 <pvPortMalloc+0x178>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4b18      	ldr	r3, [pc, #96]	; (80049a0 <pvPortMalloc+0x180>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d203      	bcs.n	800494e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004946:	4b14      	ldr	r3, [pc, #80]	; (8004998 <pvPortMalloc+0x178>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <pvPortMalloc+0x180>)
 800494c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	4b10      	ldr	r3, [pc, #64]	; (8004994 <pvPortMalloc+0x174>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	431a      	orrs	r2, r3
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004962:	f7ff fa2f 	bl	8003dc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	2b00      	cmp	r3, #0
 800496e:	d009      	beq.n	8004984 <pvPortMalloc+0x164>
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	e7fe      	b.n	8004982 <pvPortMalloc+0x162>
	return pvReturn;
 8004984:	69fb      	ldr	r3, [r7, #28]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3728      	adds	r7, #40	; 0x28
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20004020 	.word	0x20004020
 8004994:	2000402c 	.word	0x2000402c
 8004998:	20004024 	.word	0x20004024
 800499c:	20004018 	.word	0x20004018
 80049a0:	20004028 	.word	0x20004028

080049a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d046      	beq.n	8004a44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049b6:	2308      	movs	r3, #8
 80049b8:	425b      	negs	r3, r3
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4413      	add	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <vPortFree+0xa8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <vPortFree+0x42>
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e7fe      	b.n	80049e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <vPortFree+0x5e>
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	e7fe      	b.n	8004a00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <vPortFree+0xa8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d019      	beq.n	8004a44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d115      	bne.n	8004a44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <vPortFree+0xa8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	401a      	ands	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a28:	f7ff f9be 	bl	8003da8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <vPortFree+0xac>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4413      	add	r3, r2
 8004a36:	4a06      	ldr	r2, [pc, #24]	; (8004a50 <vPortFree+0xac>)
 8004a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a3a:	6938      	ldr	r0, [r7, #16]
 8004a3c:	f000 f86c 	bl	8004b18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a40:	f7ff f9c0 	bl	8003dc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a44:	bf00      	nop
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	2000402c 	.word	0x2000402c
 8004a50:	20004024 	.word	0x20004024

08004a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a60:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <prvHeapInit+0xac>)
 8004a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00c      	beq.n	8004a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3307      	adds	r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <prvHeapInit+0xac>)
 8004a84:	4413      	add	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <prvHeapInit+0xb0>)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a92:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <prvHeapInit+0xb0>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0307 	bic.w	r3, r3, #7
 8004aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <prvHeapInit+0xb4>)
 8004ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <prvHeapInit+0xb4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004abe:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <prvHeapInit+0xb4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	1ad2      	subs	r2, r2, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <prvHeapInit+0xb4>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <prvHeapInit+0xb8>)
 8004ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <prvHeapInit+0xbc>)
 8004aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004aec:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <prvHeapInit+0xc0>)
 8004aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	20000418 	.word	0x20000418
 8004b04:	20004018 	.word	0x20004018
 8004b08:	20004020 	.word	0x20004020
 8004b0c:	20004028 	.word	0x20004028
 8004b10:	20004024 	.word	0x20004024
 8004b14:	2000402c 	.word	0x2000402c

08004b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b20:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <prvInsertBlockIntoFreeList+0xac>)
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e002      	b.n	8004b2c <prvInsertBlockIntoFreeList+0x14>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d8f7      	bhi.n	8004b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	4413      	add	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d108      	bne.n	8004b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	441a      	add	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	441a      	add	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d118      	bne.n	8004ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d00d      	beq.n	8004b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	441a      	add	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	e008      	b.n	8004ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e003      	b.n	8004ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d002      	beq.n	8004bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20004018 	.word	0x20004018
 8004bc8:	20004020 	.word	0x20004020

08004bcc <__errno>:
 8004bcc:	4b01      	ldr	r3, [pc, #4]	; (8004bd4 <__errno+0x8>)
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	2000000c 	.word	0x2000000c

08004bd8 <__libc_init_array>:
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	4e0d      	ldr	r6, [pc, #52]	; (8004c10 <__libc_init_array+0x38>)
 8004bdc:	4c0d      	ldr	r4, [pc, #52]	; (8004c14 <__libc_init_array+0x3c>)
 8004bde:	1ba4      	subs	r4, r4, r6
 8004be0:	10a4      	asrs	r4, r4, #2
 8004be2:	2500      	movs	r5, #0
 8004be4:	42a5      	cmp	r5, r4
 8004be6:	d109      	bne.n	8004bfc <__libc_init_array+0x24>
 8004be8:	4e0b      	ldr	r6, [pc, #44]	; (8004c18 <__libc_init_array+0x40>)
 8004bea:	4c0c      	ldr	r4, [pc, #48]	; (8004c1c <__libc_init_array+0x44>)
 8004bec:	f000 fd3e 	bl	800566c <_init>
 8004bf0:	1ba4      	subs	r4, r4, r6
 8004bf2:	10a4      	asrs	r4, r4, #2
 8004bf4:	2500      	movs	r5, #0
 8004bf6:	42a5      	cmp	r5, r4
 8004bf8:	d105      	bne.n	8004c06 <__libc_init_array+0x2e>
 8004bfa:	bd70      	pop	{r4, r5, r6, pc}
 8004bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c00:	4798      	blx	r3
 8004c02:	3501      	adds	r5, #1
 8004c04:	e7ee      	b.n	8004be4 <__libc_init_array+0xc>
 8004c06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c0a:	4798      	blx	r3
 8004c0c:	3501      	adds	r5, #1
 8004c0e:	e7f2      	b.n	8004bf6 <__libc_init_array+0x1e>
 8004c10:	080057c8 	.word	0x080057c8
 8004c14:	080057c8 	.word	0x080057c8
 8004c18:	080057c8 	.word	0x080057c8
 8004c1c:	080057cc 	.word	0x080057cc

08004c20 <memset>:
 8004c20:	4402      	add	r2, r0
 8004c22:	4603      	mov	r3, r0
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d100      	bne.n	8004c2a <memset+0xa>
 8004c28:	4770      	bx	lr
 8004c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c2e:	e7f9      	b.n	8004c24 <memset+0x4>

08004c30 <_puts_r>:
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	460e      	mov	r6, r1
 8004c34:	4605      	mov	r5, r0
 8004c36:	b118      	cbz	r0, 8004c40 <_puts_r+0x10>
 8004c38:	6983      	ldr	r3, [r0, #24]
 8004c3a:	b90b      	cbnz	r3, 8004c40 <_puts_r+0x10>
 8004c3c:	f000 faba 	bl	80051b4 <__sinit>
 8004c40:	69ab      	ldr	r3, [r5, #24]
 8004c42:	68ac      	ldr	r4, [r5, #8]
 8004c44:	b913      	cbnz	r3, 8004c4c <_puts_r+0x1c>
 8004c46:	4628      	mov	r0, r5
 8004c48:	f000 fab4 	bl	80051b4 <__sinit>
 8004c4c:	4b23      	ldr	r3, [pc, #140]	; (8004cdc <_puts_r+0xac>)
 8004c4e:	429c      	cmp	r4, r3
 8004c50:	d117      	bne.n	8004c82 <_puts_r+0x52>
 8004c52:	686c      	ldr	r4, [r5, #4]
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	071b      	lsls	r3, r3, #28
 8004c58:	d51d      	bpl.n	8004c96 <_puts_r+0x66>
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	b1db      	cbz	r3, 8004c96 <_puts_r+0x66>
 8004c5e:	3e01      	subs	r6, #1
 8004c60:	68a3      	ldr	r3, [r4, #8]
 8004c62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c66:	3b01      	subs	r3, #1
 8004c68:	60a3      	str	r3, [r4, #8]
 8004c6a:	b9e9      	cbnz	r1, 8004ca8 <_puts_r+0x78>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	da2e      	bge.n	8004cce <_puts_r+0x9e>
 8004c70:	4622      	mov	r2, r4
 8004c72:	210a      	movs	r1, #10
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 f8ed 	bl	8004e54 <__swbuf_r>
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d011      	beq.n	8004ca2 <_puts_r+0x72>
 8004c7e:	200a      	movs	r0, #10
 8004c80:	e011      	b.n	8004ca6 <_puts_r+0x76>
 8004c82:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <_puts_r+0xb0>)
 8004c84:	429c      	cmp	r4, r3
 8004c86:	d101      	bne.n	8004c8c <_puts_r+0x5c>
 8004c88:	68ac      	ldr	r4, [r5, #8]
 8004c8a:	e7e3      	b.n	8004c54 <_puts_r+0x24>
 8004c8c:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <_puts_r+0xb4>)
 8004c8e:	429c      	cmp	r4, r3
 8004c90:	bf08      	it	eq
 8004c92:	68ec      	ldreq	r4, [r5, #12]
 8004c94:	e7de      	b.n	8004c54 <_puts_r+0x24>
 8004c96:	4621      	mov	r1, r4
 8004c98:	4628      	mov	r0, r5
 8004c9a:	f000 f92d 	bl	8004ef8 <__swsetup_r>
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d0dd      	beq.n	8004c5e <_puts_r+0x2e>
 8004ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da04      	bge.n	8004cb6 <_puts_r+0x86>
 8004cac:	69a2      	ldr	r2, [r4, #24]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	dc06      	bgt.n	8004cc0 <_puts_r+0x90>
 8004cb2:	290a      	cmp	r1, #10
 8004cb4:	d004      	beq.n	8004cc0 <_puts_r+0x90>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	6022      	str	r2, [r4, #0]
 8004cbc:	7019      	strb	r1, [r3, #0]
 8004cbe:	e7cf      	b.n	8004c60 <_puts_r+0x30>
 8004cc0:	4622      	mov	r2, r4
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f000 f8c6 	bl	8004e54 <__swbuf_r>
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d1c9      	bne.n	8004c60 <_puts_r+0x30>
 8004ccc:	e7e9      	b.n	8004ca2 <_puts_r+0x72>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	200a      	movs	r0, #10
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	6022      	str	r2, [r4, #0]
 8004cd6:	7018      	strb	r0, [r3, #0]
 8004cd8:	e7e5      	b.n	8004ca6 <_puts_r+0x76>
 8004cda:	bf00      	nop
 8004cdc:	08005780 	.word	0x08005780
 8004ce0:	080057a0 	.word	0x080057a0
 8004ce4:	08005760 	.word	0x08005760

08004ce8 <puts>:
 8004ce8:	4b02      	ldr	r3, [pc, #8]	; (8004cf4 <puts+0xc>)
 8004cea:	4601      	mov	r1, r0
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	f7ff bf9f 	b.w	8004c30 <_puts_r>
 8004cf2:	bf00      	nop
 8004cf4:	2000000c 	.word	0x2000000c

08004cf8 <setvbuf>:
 8004cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004cfc:	461d      	mov	r5, r3
 8004cfe:	4b51      	ldr	r3, [pc, #324]	; (8004e44 <setvbuf+0x14c>)
 8004d00:	681e      	ldr	r6, [r3, #0]
 8004d02:	4604      	mov	r4, r0
 8004d04:	460f      	mov	r7, r1
 8004d06:	4690      	mov	r8, r2
 8004d08:	b126      	cbz	r6, 8004d14 <setvbuf+0x1c>
 8004d0a:	69b3      	ldr	r3, [r6, #24]
 8004d0c:	b913      	cbnz	r3, 8004d14 <setvbuf+0x1c>
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f000 fa50 	bl	80051b4 <__sinit>
 8004d14:	4b4c      	ldr	r3, [pc, #304]	; (8004e48 <setvbuf+0x150>)
 8004d16:	429c      	cmp	r4, r3
 8004d18:	d152      	bne.n	8004dc0 <setvbuf+0xc8>
 8004d1a:	6874      	ldr	r4, [r6, #4]
 8004d1c:	f1b8 0f02 	cmp.w	r8, #2
 8004d20:	d006      	beq.n	8004d30 <setvbuf+0x38>
 8004d22:	f1b8 0f01 	cmp.w	r8, #1
 8004d26:	f200 8089 	bhi.w	8004e3c <setvbuf+0x144>
 8004d2a:	2d00      	cmp	r5, #0
 8004d2c:	f2c0 8086 	blt.w	8004e3c <setvbuf+0x144>
 8004d30:	4621      	mov	r1, r4
 8004d32:	4630      	mov	r0, r6
 8004d34:	f000 f9d4 	bl	80050e0 <_fflush_r>
 8004d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d3a:	b141      	cbz	r1, 8004d4e <setvbuf+0x56>
 8004d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d40:	4299      	cmp	r1, r3
 8004d42:	d002      	beq.n	8004d4a <setvbuf+0x52>
 8004d44:	4630      	mov	r0, r6
 8004d46:	f000 fb2b 	bl	80053a0 <_free_r>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61a3      	str	r3, [r4, #24]
 8004d52:	6063      	str	r3, [r4, #4]
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	061b      	lsls	r3, r3, #24
 8004d58:	d503      	bpl.n	8004d62 <setvbuf+0x6a>
 8004d5a:	6921      	ldr	r1, [r4, #16]
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f000 fb1f 	bl	80053a0 <_free_r>
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004d68:	f023 0303 	bic.w	r3, r3, #3
 8004d6c:	f1b8 0f02 	cmp.w	r8, #2
 8004d70:	81a3      	strh	r3, [r4, #12]
 8004d72:	d05d      	beq.n	8004e30 <setvbuf+0x138>
 8004d74:	ab01      	add	r3, sp, #4
 8004d76:	466a      	mov	r2, sp
 8004d78:	4621      	mov	r1, r4
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f000 faa4 	bl	80052c8 <__swhatbuf_r>
 8004d80:	89a3      	ldrh	r3, [r4, #12]
 8004d82:	4318      	orrs	r0, r3
 8004d84:	81a0      	strh	r0, [r4, #12]
 8004d86:	bb2d      	cbnz	r5, 8004dd4 <setvbuf+0xdc>
 8004d88:	9d00      	ldr	r5, [sp, #0]
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	f000 fb00 	bl	8005390 <malloc>
 8004d90:	4607      	mov	r7, r0
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d14e      	bne.n	8004e34 <setvbuf+0x13c>
 8004d96:	f8dd 9000 	ldr.w	r9, [sp]
 8004d9a:	45a9      	cmp	r9, r5
 8004d9c:	d13c      	bne.n	8004e18 <setvbuf+0x120>
 8004d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	81a3      	strh	r3, [r4, #12]
 8004daa:	2300      	movs	r3, #0
 8004dac:	60a3      	str	r3, [r4, #8]
 8004dae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004db2:	6023      	str	r3, [r4, #0]
 8004db4:	6123      	str	r3, [r4, #16]
 8004db6:	2301      	movs	r3, #1
 8004db8:	6163      	str	r3, [r4, #20]
 8004dba:	b003      	add	sp, #12
 8004dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dc0:	4b22      	ldr	r3, [pc, #136]	; (8004e4c <setvbuf+0x154>)
 8004dc2:	429c      	cmp	r4, r3
 8004dc4:	d101      	bne.n	8004dca <setvbuf+0xd2>
 8004dc6:	68b4      	ldr	r4, [r6, #8]
 8004dc8:	e7a8      	b.n	8004d1c <setvbuf+0x24>
 8004dca:	4b21      	ldr	r3, [pc, #132]	; (8004e50 <setvbuf+0x158>)
 8004dcc:	429c      	cmp	r4, r3
 8004dce:	bf08      	it	eq
 8004dd0:	68f4      	ldreq	r4, [r6, #12]
 8004dd2:	e7a3      	b.n	8004d1c <setvbuf+0x24>
 8004dd4:	2f00      	cmp	r7, #0
 8004dd6:	d0d8      	beq.n	8004d8a <setvbuf+0x92>
 8004dd8:	69b3      	ldr	r3, [r6, #24]
 8004dda:	b913      	cbnz	r3, 8004de2 <setvbuf+0xea>
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f000 f9e9 	bl	80051b4 <__sinit>
 8004de2:	f1b8 0f01 	cmp.w	r8, #1
 8004de6:	bf08      	it	eq
 8004de8:	89a3      	ldrheq	r3, [r4, #12]
 8004dea:	6027      	str	r7, [r4, #0]
 8004dec:	bf04      	itt	eq
 8004dee:	f043 0301 	orreq.w	r3, r3, #1
 8004df2:	81a3      	strheq	r3, [r4, #12]
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	f013 0008 	ands.w	r0, r3, #8
 8004dfa:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004dfe:	d01b      	beq.n	8004e38 <setvbuf+0x140>
 8004e00:	f013 0001 	ands.w	r0, r3, #1
 8004e04:	bf18      	it	ne
 8004e06:	426d      	negne	r5, r5
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	bf1d      	ittte	ne
 8004e0e:	60a3      	strne	r3, [r4, #8]
 8004e10:	61a5      	strne	r5, [r4, #24]
 8004e12:	4618      	movne	r0, r3
 8004e14:	60a5      	streq	r5, [r4, #8]
 8004e16:	e7d0      	b.n	8004dba <setvbuf+0xc2>
 8004e18:	4648      	mov	r0, r9
 8004e1a:	f000 fab9 	bl	8005390 <malloc>
 8004e1e:	4607      	mov	r7, r0
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d0bc      	beq.n	8004d9e <setvbuf+0xa6>
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2a:	81a3      	strh	r3, [r4, #12]
 8004e2c:	464d      	mov	r5, r9
 8004e2e:	e7d3      	b.n	8004dd8 <setvbuf+0xe0>
 8004e30:	2000      	movs	r0, #0
 8004e32:	e7b6      	b.n	8004da2 <setvbuf+0xaa>
 8004e34:	46a9      	mov	r9, r5
 8004e36:	e7f5      	b.n	8004e24 <setvbuf+0x12c>
 8004e38:	60a0      	str	r0, [r4, #8]
 8004e3a:	e7be      	b.n	8004dba <setvbuf+0xc2>
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	e7bb      	b.n	8004dba <setvbuf+0xc2>
 8004e42:	bf00      	nop
 8004e44:	2000000c 	.word	0x2000000c
 8004e48:	08005780 	.word	0x08005780
 8004e4c:	080057a0 	.word	0x080057a0
 8004e50:	08005760 	.word	0x08005760

08004e54 <__swbuf_r>:
 8004e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e56:	460e      	mov	r6, r1
 8004e58:	4614      	mov	r4, r2
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	b118      	cbz	r0, 8004e66 <__swbuf_r+0x12>
 8004e5e:	6983      	ldr	r3, [r0, #24]
 8004e60:	b90b      	cbnz	r3, 8004e66 <__swbuf_r+0x12>
 8004e62:	f000 f9a7 	bl	80051b4 <__sinit>
 8004e66:	4b21      	ldr	r3, [pc, #132]	; (8004eec <__swbuf_r+0x98>)
 8004e68:	429c      	cmp	r4, r3
 8004e6a:	d12a      	bne.n	8004ec2 <__swbuf_r+0x6e>
 8004e6c:	686c      	ldr	r4, [r5, #4]
 8004e6e:	69a3      	ldr	r3, [r4, #24]
 8004e70:	60a3      	str	r3, [r4, #8]
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	071a      	lsls	r2, r3, #28
 8004e76:	d52e      	bpl.n	8004ed6 <__swbuf_r+0x82>
 8004e78:	6923      	ldr	r3, [r4, #16]
 8004e7a:	b363      	cbz	r3, 8004ed6 <__swbuf_r+0x82>
 8004e7c:	6923      	ldr	r3, [r4, #16]
 8004e7e:	6820      	ldr	r0, [r4, #0]
 8004e80:	1ac0      	subs	r0, r0, r3
 8004e82:	6963      	ldr	r3, [r4, #20]
 8004e84:	b2f6      	uxtb	r6, r6
 8004e86:	4283      	cmp	r3, r0
 8004e88:	4637      	mov	r7, r6
 8004e8a:	dc04      	bgt.n	8004e96 <__swbuf_r+0x42>
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 f926 	bl	80050e0 <_fflush_r>
 8004e94:	bb28      	cbnz	r0, 8004ee2 <__swbuf_r+0x8e>
 8004e96:	68a3      	ldr	r3, [r4, #8]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	60a3      	str	r3, [r4, #8]
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	6022      	str	r2, [r4, #0]
 8004ea2:	701e      	strb	r6, [r3, #0]
 8004ea4:	6963      	ldr	r3, [r4, #20]
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	4283      	cmp	r3, r0
 8004eaa:	d004      	beq.n	8004eb6 <__swbuf_r+0x62>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	07db      	lsls	r3, r3, #31
 8004eb0:	d519      	bpl.n	8004ee6 <__swbuf_r+0x92>
 8004eb2:	2e0a      	cmp	r6, #10
 8004eb4:	d117      	bne.n	8004ee6 <__swbuf_r+0x92>
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f000 f911 	bl	80050e0 <_fflush_r>
 8004ebe:	b190      	cbz	r0, 8004ee6 <__swbuf_r+0x92>
 8004ec0:	e00f      	b.n	8004ee2 <__swbuf_r+0x8e>
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <__swbuf_r+0x9c>)
 8004ec4:	429c      	cmp	r4, r3
 8004ec6:	d101      	bne.n	8004ecc <__swbuf_r+0x78>
 8004ec8:	68ac      	ldr	r4, [r5, #8]
 8004eca:	e7d0      	b.n	8004e6e <__swbuf_r+0x1a>
 8004ecc:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <__swbuf_r+0xa0>)
 8004ece:	429c      	cmp	r4, r3
 8004ed0:	bf08      	it	eq
 8004ed2:	68ec      	ldreq	r4, [r5, #12]
 8004ed4:	e7cb      	b.n	8004e6e <__swbuf_r+0x1a>
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f000 f80d 	bl	8004ef8 <__swsetup_r>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d0cc      	beq.n	8004e7c <__swbuf_r+0x28>
 8004ee2:	f04f 37ff 	mov.w	r7, #4294967295
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eea:	bf00      	nop
 8004eec:	08005780 	.word	0x08005780
 8004ef0:	080057a0 	.word	0x080057a0
 8004ef4:	08005760 	.word	0x08005760

08004ef8 <__swsetup_r>:
 8004ef8:	4b32      	ldr	r3, [pc, #200]	; (8004fc4 <__swsetup_r+0xcc>)
 8004efa:	b570      	push	{r4, r5, r6, lr}
 8004efc:	681d      	ldr	r5, [r3, #0]
 8004efe:	4606      	mov	r6, r0
 8004f00:	460c      	mov	r4, r1
 8004f02:	b125      	cbz	r5, 8004f0e <__swsetup_r+0x16>
 8004f04:	69ab      	ldr	r3, [r5, #24]
 8004f06:	b913      	cbnz	r3, 8004f0e <__swsetup_r+0x16>
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 f953 	bl	80051b4 <__sinit>
 8004f0e:	4b2e      	ldr	r3, [pc, #184]	; (8004fc8 <__swsetup_r+0xd0>)
 8004f10:	429c      	cmp	r4, r3
 8004f12:	d10f      	bne.n	8004f34 <__swsetup_r+0x3c>
 8004f14:	686c      	ldr	r4, [r5, #4]
 8004f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	0715      	lsls	r5, r2, #28
 8004f1e:	d42c      	bmi.n	8004f7a <__swsetup_r+0x82>
 8004f20:	06d0      	lsls	r0, r2, #27
 8004f22:	d411      	bmi.n	8004f48 <__swsetup_r+0x50>
 8004f24:	2209      	movs	r2, #9
 8004f26:	6032      	str	r2, [r6, #0]
 8004f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f2c:	81a3      	strh	r3, [r4, #12]
 8004f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f32:	e03e      	b.n	8004fb2 <__swsetup_r+0xba>
 8004f34:	4b25      	ldr	r3, [pc, #148]	; (8004fcc <__swsetup_r+0xd4>)
 8004f36:	429c      	cmp	r4, r3
 8004f38:	d101      	bne.n	8004f3e <__swsetup_r+0x46>
 8004f3a:	68ac      	ldr	r4, [r5, #8]
 8004f3c:	e7eb      	b.n	8004f16 <__swsetup_r+0x1e>
 8004f3e:	4b24      	ldr	r3, [pc, #144]	; (8004fd0 <__swsetup_r+0xd8>)
 8004f40:	429c      	cmp	r4, r3
 8004f42:	bf08      	it	eq
 8004f44:	68ec      	ldreq	r4, [r5, #12]
 8004f46:	e7e6      	b.n	8004f16 <__swsetup_r+0x1e>
 8004f48:	0751      	lsls	r1, r2, #29
 8004f4a:	d512      	bpl.n	8004f72 <__swsetup_r+0x7a>
 8004f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f4e:	b141      	cbz	r1, 8004f62 <__swsetup_r+0x6a>
 8004f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f54:	4299      	cmp	r1, r3
 8004f56:	d002      	beq.n	8004f5e <__swsetup_r+0x66>
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f000 fa21 	bl	80053a0 <_free_r>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	6363      	str	r3, [r4, #52]	; 0x34
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f68:	81a3      	strh	r3, [r4, #12]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	6063      	str	r3, [r4, #4]
 8004f6e:	6923      	ldr	r3, [r4, #16]
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	89a3      	ldrh	r3, [r4, #12]
 8004f74:	f043 0308 	orr.w	r3, r3, #8
 8004f78:	81a3      	strh	r3, [r4, #12]
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	b94b      	cbnz	r3, 8004f92 <__swsetup_r+0x9a>
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f88:	d003      	beq.n	8004f92 <__swsetup_r+0x9a>
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	f000 f9bf 	bl	8005310 <__smakebuf_r>
 8004f92:	89a2      	ldrh	r2, [r4, #12]
 8004f94:	f012 0301 	ands.w	r3, r2, #1
 8004f98:	d00c      	beq.n	8004fb4 <__swsetup_r+0xbc>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60a3      	str	r3, [r4, #8]
 8004f9e:	6963      	ldr	r3, [r4, #20]
 8004fa0:	425b      	negs	r3, r3
 8004fa2:	61a3      	str	r3, [r4, #24]
 8004fa4:	6923      	ldr	r3, [r4, #16]
 8004fa6:	b953      	cbnz	r3, 8004fbe <__swsetup_r+0xc6>
 8004fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004fb0:	d1ba      	bne.n	8004f28 <__swsetup_r+0x30>
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}
 8004fb4:	0792      	lsls	r2, r2, #30
 8004fb6:	bf58      	it	pl
 8004fb8:	6963      	ldrpl	r3, [r4, #20]
 8004fba:	60a3      	str	r3, [r4, #8]
 8004fbc:	e7f2      	b.n	8004fa4 <__swsetup_r+0xac>
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	e7f7      	b.n	8004fb2 <__swsetup_r+0xba>
 8004fc2:	bf00      	nop
 8004fc4:	2000000c 	.word	0x2000000c
 8004fc8:	08005780 	.word	0x08005780
 8004fcc:	080057a0 	.word	0x080057a0
 8004fd0:	08005760 	.word	0x08005760

08004fd4 <__sflush_r>:
 8004fd4:	898a      	ldrh	r2, [r1, #12]
 8004fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fda:	4605      	mov	r5, r0
 8004fdc:	0710      	lsls	r0, r2, #28
 8004fde:	460c      	mov	r4, r1
 8004fe0:	d458      	bmi.n	8005094 <__sflush_r+0xc0>
 8004fe2:	684b      	ldr	r3, [r1, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	dc05      	bgt.n	8004ff4 <__sflush_r+0x20>
 8004fe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dc02      	bgt.n	8004ff4 <__sflush_r+0x20>
 8004fee:	2000      	movs	r0, #0
 8004ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ff6:	2e00      	cmp	r6, #0
 8004ff8:	d0f9      	beq.n	8004fee <__sflush_r+0x1a>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005000:	682f      	ldr	r7, [r5, #0]
 8005002:	6a21      	ldr	r1, [r4, #32]
 8005004:	602b      	str	r3, [r5, #0]
 8005006:	d032      	beq.n	800506e <__sflush_r+0x9a>
 8005008:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	075a      	lsls	r2, r3, #29
 800500e:	d505      	bpl.n	800501c <__sflush_r+0x48>
 8005010:	6863      	ldr	r3, [r4, #4]
 8005012:	1ac0      	subs	r0, r0, r3
 8005014:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005016:	b10b      	cbz	r3, 800501c <__sflush_r+0x48>
 8005018:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800501a:	1ac0      	subs	r0, r0, r3
 800501c:	2300      	movs	r3, #0
 800501e:	4602      	mov	r2, r0
 8005020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005022:	6a21      	ldr	r1, [r4, #32]
 8005024:	4628      	mov	r0, r5
 8005026:	47b0      	blx	r6
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	d106      	bne.n	800503c <__sflush_r+0x68>
 800502e:	6829      	ldr	r1, [r5, #0]
 8005030:	291d      	cmp	r1, #29
 8005032:	d848      	bhi.n	80050c6 <__sflush_r+0xf2>
 8005034:	4a29      	ldr	r2, [pc, #164]	; (80050dc <__sflush_r+0x108>)
 8005036:	40ca      	lsrs	r2, r1
 8005038:	07d6      	lsls	r6, r2, #31
 800503a:	d544      	bpl.n	80050c6 <__sflush_r+0xf2>
 800503c:	2200      	movs	r2, #0
 800503e:	6062      	str	r2, [r4, #4]
 8005040:	04d9      	lsls	r1, r3, #19
 8005042:	6922      	ldr	r2, [r4, #16]
 8005044:	6022      	str	r2, [r4, #0]
 8005046:	d504      	bpl.n	8005052 <__sflush_r+0x7e>
 8005048:	1c42      	adds	r2, r0, #1
 800504a:	d101      	bne.n	8005050 <__sflush_r+0x7c>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b903      	cbnz	r3, 8005052 <__sflush_r+0x7e>
 8005050:	6560      	str	r0, [r4, #84]	; 0x54
 8005052:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005054:	602f      	str	r7, [r5, #0]
 8005056:	2900      	cmp	r1, #0
 8005058:	d0c9      	beq.n	8004fee <__sflush_r+0x1a>
 800505a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800505e:	4299      	cmp	r1, r3
 8005060:	d002      	beq.n	8005068 <__sflush_r+0x94>
 8005062:	4628      	mov	r0, r5
 8005064:	f000 f99c 	bl	80053a0 <_free_r>
 8005068:	2000      	movs	r0, #0
 800506a:	6360      	str	r0, [r4, #52]	; 0x34
 800506c:	e7c0      	b.n	8004ff0 <__sflush_r+0x1c>
 800506e:	2301      	movs	r3, #1
 8005070:	4628      	mov	r0, r5
 8005072:	47b0      	blx	r6
 8005074:	1c41      	adds	r1, r0, #1
 8005076:	d1c8      	bne.n	800500a <__sflush_r+0x36>
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0c5      	beq.n	800500a <__sflush_r+0x36>
 800507e:	2b1d      	cmp	r3, #29
 8005080:	d001      	beq.n	8005086 <__sflush_r+0xb2>
 8005082:	2b16      	cmp	r3, #22
 8005084:	d101      	bne.n	800508a <__sflush_r+0xb6>
 8005086:	602f      	str	r7, [r5, #0]
 8005088:	e7b1      	b.n	8004fee <__sflush_r+0x1a>
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	e7ad      	b.n	8004ff0 <__sflush_r+0x1c>
 8005094:	690f      	ldr	r7, [r1, #16]
 8005096:	2f00      	cmp	r7, #0
 8005098:	d0a9      	beq.n	8004fee <__sflush_r+0x1a>
 800509a:	0793      	lsls	r3, r2, #30
 800509c:	680e      	ldr	r6, [r1, #0]
 800509e:	bf08      	it	eq
 80050a0:	694b      	ldreq	r3, [r1, #20]
 80050a2:	600f      	str	r7, [r1, #0]
 80050a4:	bf18      	it	ne
 80050a6:	2300      	movne	r3, #0
 80050a8:	eba6 0807 	sub.w	r8, r6, r7
 80050ac:	608b      	str	r3, [r1, #8]
 80050ae:	f1b8 0f00 	cmp.w	r8, #0
 80050b2:	dd9c      	ble.n	8004fee <__sflush_r+0x1a>
 80050b4:	4643      	mov	r3, r8
 80050b6:	463a      	mov	r2, r7
 80050b8:	6a21      	ldr	r1, [r4, #32]
 80050ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050bc:	4628      	mov	r0, r5
 80050be:	47b0      	blx	r6
 80050c0:	2800      	cmp	r0, #0
 80050c2:	dc06      	bgt.n	80050d2 <__sflush_r+0xfe>
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ca:	81a3      	strh	r3, [r4, #12]
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	e78e      	b.n	8004ff0 <__sflush_r+0x1c>
 80050d2:	4407      	add	r7, r0
 80050d4:	eba8 0800 	sub.w	r8, r8, r0
 80050d8:	e7e9      	b.n	80050ae <__sflush_r+0xda>
 80050da:	bf00      	nop
 80050dc:	20400001 	.word	0x20400001

080050e0 <_fflush_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	690b      	ldr	r3, [r1, #16]
 80050e4:	4605      	mov	r5, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	b1db      	cbz	r3, 8005122 <_fflush_r+0x42>
 80050ea:	b118      	cbz	r0, 80050f4 <_fflush_r+0x14>
 80050ec:	6983      	ldr	r3, [r0, #24]
 80050ee:	b90b      	cbnz	r3, 80050f4 <_fflush_r+0x14>
 80050f0:	f000 f860 	bl	80051b4 <__sinit>
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <_fflush_r+0x48>)
 80050f6:	429c      	cmp	r4, r3
 80050f8:	d109      	bne.n	800510e <_fflush_r+0x2e>
 80050fa:	686c      	ldr	r4, [r5, #4]
 80050fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005100:	b17b      	cbz	r3, 8005122 <_fflush_r+0x42>
 8005102:	4621      	mov	r1, r4
 8005104:	4628      	mov	r0, r5
 8005106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800510a:	f7ff bf63 	b.w	8004fd4 <__sflush_r>
 800510e:	4b07      	ldr	r3, [pc, #28]	; (800512c <_fflush_r+0x4c>)
 8005110:	429c      	cmp	r4, r3
 8005112:	d101      	bne.n	8005118 <_fflush_r+0x38>
 8005114:	68ac      	ldr	r4, [r5, #8]
 8005116:	e7f1      	b.n	80050fc <_fflush_r+0x1c>
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <_fflush_r+0x50>)
 800511a:	429c      	cmp	r4, r3
 800511c:	bf08      	it	eq
 800511e:	68ec      	ldreq	r4, [r5, #12]
 8005120:	e7ec      	b.n	80050fc <_fflush_r+0x1c>
 8005122:	2000      	movs	r0, #0
 8005124:	bd38      	pop	{r3, r4, r5, pc}
 8005126:	bf00      	nop
 8005128:	08005780 	.word	0x08005780
 800512c:	080057a0 	.word	0x080057a0
 8005130:	08005760 	.word	0x08005760

08005134 <std>:
 8005134:	2300      	movs	r3, #0
 8005136:	b510      	push	{r4, lr}
 8005138:	4604      	mov	r4, r0
 800513a:	e9c0 3300 	strd	r3, r3, [r0]
 800513e:	6083      	str	r3, [r0, #8]
 8005140:	8181      	strh	r1, [r0, #12]
 8005142:	6643      	str	r3, [r0, #100]	; 0x64
 8005144:	81c2      	strh	r2, [r0, #14]
 8005146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800514a:	6183      	str	r3, [r0, #24]
 800514c:	4619      	mov	r1, r3
 800514e:	2208      	movs	r2, #8
 8005150:	305c      	adds	r0, #92	; 0x5c
 8005152:	f7ff fd65 	bl	8004c20 <memset>
 8005156:	4b05      	ldr	r3, [pc, #20]	; (800516c <std+0x38>)
 8005158:	6263      	str	r3, [r4, #36]	; 0x24
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <std+0x3c>)
 800515c:	62a3      	str	r3, [r4, #40]	; 0x28
 800515e:	4b05      	ldr	r3, [pc, #20]	; (8005174 <std+0x40>)
 8005160:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005162:	4b05      	ldr	r3, [pc, #20]	; (8005178 <std+0x44>)
 8005164:	6224      	str	r4, [r4, #32]
 8005166:	6323      	str	r3, [r4, #48]	; 0x30
 8005168:	bd10      	pop	{r4, pc}
 800516a:	bf00      	nop
 800516c:	08005511 	.word	0x08005511
 8005170:	08005533 	.word	0x08005533
 8005174:	0800556b 	.word	0x0800556b
 8005178:	0800558f 	.word	0x0800558f

0800517c <_cleanup_r>:
 800517c:	4901      	ldr	r1, [pc, #4]	; (8005184 <_cleanup_r+0x8>)
 800517e:	f000 b885 	b.w	800528c <_fwalk_reent>
 8005182:	bf00      	nop
 8005184:	080050e1 	.word	0x080050e1

08005188 <__sfmoreglue>:
 8005188:	b570      	push	{r4, r5, r6, lr}
 800518a:	1e4a      	subs	r2, r1, #1
 800518c:	2568      	movs	r5, #104	; 0x68
 800518e:	4355      	muls	r5, r2
 8005190:	460e      	mov	r6, r1
 8005192:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005196:	f000 f951 	bl	800543c <_malloc_r>
 800519a:	4604      	mov	r4, r0
 800519c:	b140      	cbz	r0, 80051b0 <__sfmoreglue+0x28>
 800519e:	2100      	movs	r1, #0
 80051a0:	e9c0 1600 	strd	r1, r6, [r0]
 80051a4:	300c      	adds	r0, #12
 80051a6:	60a0      	str	r0, [r4, #8]
 80051a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051ac:	f7ff fd38 	bl	8004c20 <memset>
 80051b0:	4620      	mov	r0, r4
 80051b2:	bd70      	pop	{r4, r5, r6, pc}

080051b4 <__sinit>:
 80051b4:	6983      	ldr	r3, [r0, #24]
 80051b6:	b510      	push	{r4, lr}
 80051b8:	4604      	mov	r4, r0
 80051ba:	bb33      	cbnz	r3, 800520a <__sinit+0x56>
 80051bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80051c0:	6503      	str	r3, [r0, #80]	; 0x50
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <__sinit+0x58>)
 80051c4:	4a12      	ldr	r2, [pc, #72]	; (8005210 <__sinit+0x5c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6282      	str	r2, [r0, #40]	; 0x28
 80051ca:	4298      	cmp	r0, r3
 80051cc:	bf04      	itt	eq
 80051ce:	2301      	moveq	r3, #1
 80051d0:	6183      	streq	r3, [r0, #24]
 80051d2:	f000 f81f 	bl	8005214 <__sfp>
 80051d6:	6060      	str	r0, [r4, #4]
 80051d8:	4620      	mov	r0, r4
 80051da:	f000 f81b 	bl	8005214 <__sfp>
 80051de:	60a0      	str	r0, [r4, #8]
 80051e0:	4620      	mov	r0, r4
 80051e2:	f000 f817 	bl	8005214 <__sfp>
 80051e6:	2200      	movs	r2, #0
 80051e8:	60e0      	str	r0, [r4, #12]
 80051ea:	2104      	movs	r1, #4
 80051ec:	6860      	ldr	r0, [r4, #4]
 80051ee:	f7ff ffa1 	bl	8005134 <std>
 80051f2:	2201      	movs	r2, #1
 80051f4:	2109      	movs	r1, #9
 80051f6:	68a0      	ldr	r0, [r4, #8]
 80051f8:	f7ff ff9c 	bl	8005134 <std>
 80051fc:	2202      	movs	r2, #2
 80051fe:	2112      	movs	r1, #18
 8005200:	68e0      	ldr	r0, [r4, #12]
 8005202:	f7ff ff97 	bl	8005134 <std>
 8005206:	2301      	movs	r3, #1
 8005208:	61a3      	str	r3, [r4, #24]
 800520a:	bd10      	pop	{r4, pc}
 800520c:	0800575c 	.word	0x0800575c
 8005210:	0800517d 	.word	0x0800517d

08005214 <__sfp>:
 8005214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005216:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <__sfp+0x70>)
 8005218:	681e      	ldr	r6, [r3, #0]
 800521a:	69b3      	ldr	r3, [r6, #24]
 800521c:	4607      	mov	r7, r0
 800521e:	b913      	cbnz	r3, 8005226 <__sfp+0x12>
 8005220:	4630      	mov	r0, r6
 8005222:	f7ff ffc7 	bl	80051b4 <__sinit>
 8005226:	3648      	adds	r6, #72	; 0x48
 8005228:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800522c:	3b01      	subs	r3, #1
 800522e:	d503      	bpl.n	8005238 <__sfp+0x24>
 8005230:	6833      	ldr	r3, [r6, #0]
 8005232:	b133      	cbz	r3, 8005242 <__sfp+0x2e>
 8005234:	6836      	ldr	r6, [r6, #0]
 8005236:	e7f7      	b.n	8005228 <__sfp+0x14>
 8005238:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800523c:	b16d      	cbz	r5, 800525a <__sfp+0x46>
 800523e:	3468      	adds	r4, #104	; 0x68
 8005240:	e7f4      	b.n	800522c <__sfp+0x18>
 8005242:	2104      	movs	r1, #4
 8005244:	4638      	mov	r0, r7
 8005246:	f7ff ff9f 	bl	8005188 <__sfmoreglue>
 800524a:	6030      	str	r0, [r6, #0]
 800524c:	2800      	cmp	r0, #0
 800524e:	d1f1      	bne.n	8005234 <__sfp+0x20>
 8005250:	230c      	movs	r3, #12
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4604      	mov	r4, r0
 8005256:	4620      	mov	r0, r4
 8005258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <__sfp+0x74>)
 800525c:	6665      	str	r5, [r4, #100]	; 0x64
 800525e:	e9c4 5500 	strd	r5, r5, [r4]
 8005262:	60a5      	str	r5, [r4, #8]
 8005264:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005268:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800526c:	2208      	movs	r2, #8
 800526e:	4629      	mov	r1, r5
 8005270:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005274:	f7ff fcd4 	bl	8004c20 <memset>
 8005278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800527c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005280:	e7e9      	b.n	8005256 <__sfp+0x42>
 8005282:	bf00      	nop
 8005284:	0800575c 	.word	0x0800575c
 8005288:	ffff0001 	.word	0xffff0001

0800528c <_fwalk_reent>:
 800528c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005290:	4680      	mov	r8, r0
 8005292:	4689      	mov	r9, r1
 8005294:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005298:	2600      	movs	r6, #0
 800529a:	b914      	cbnz	r4, 80052a2 <_fwalk_reent+0x16>
 800529c:	4630      	mov	r0, r6
 800529e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052a2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80052a6:	3f01      	subs	r7, #1
 80052a8:	d501      	bpl.n	80052ae <_fwalk_reent+0x22>
 80052aa:	6824      	ldr	r4, [r4, #0]
 80052ac:	e7f5      	b.n	800529a <_fwalk_reent+0xe>
 80052ae:	89ab      	ldrh	r3, [r5, #12]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d907      	bls.n	80052c4 <_fwalk_reent+0x38>
 80052b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052b8:	3301      	adds	r3, #1
 80052ba:	d003      	beq.n	80052c4 <_fwalk_reent+0x38>
 80052bc:	4629      	mov	r1, r5
 80052be:	4640      	mov	r0, r8
 80052c0:	47c8      	blx	r9
 80052c2:	4306      	orrs	r6, r0
 80052c4:	3568      	adds	r5, #104	; 0x68
 80052c6:	e7ee      	b.n	80052a6 <_fwalk_reent+0x1a>

080052c8 <__swhatbuf_r>:
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	460e      	mov	r6, r1
 80052cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d0:	2900      	cmp	r1, #0
 80052d2:	b096      	sub	sp, #88	; 0x58
 80052d4:	4614      	mov	r4, r2
 80052d6:	461d      	mov	r5, r3
 80052d8:	da07      	bge.n	80052ea <__swhatbuf_r+0x22>
 80052da:	2300      	movs	r3, #0
 80052dc:	602b      	str	r3, [r5, #0]
 80052de:	89b3      	ldrh	r3, [r6, #12]
 80052e0:	061a      	lsls	r2, r3, #24
 80052e2:	d410      	bmi.n	8005306 <__swhatbuf_r+0x3e>
 80052e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052e8:	e00e      	b.n	8005308 <__swhatbuf_r+0x40>
 80052ea:	466a      	mov	r2, sp
 80052ec:	f000 f976 	bl	80055dc <_fstat_r>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	dbf2      	blt.n	80052da <__swhatbuf_r+0x12>
 80052f4:	9a01      	ldr	r2, [sp, #4]
 80052f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052fe:	425a      	negs	r2, r3
 8005300:	415a      	adcs	r2, r3
 8005302:	602a      	str	r2, [r5, #0]
 8005304:	e7ee      	b.n	80052e4 <__swhatbuf_r+0x1c>
 8005306:	2340      	movs	r3, #64	; 0x40
 8005308:	2000      	movs	r0, #0
 800530a:	6023      	str	r3, [r4, #0]
 800530c:	b016      	add	sp, #88	; 0x58
 800530e:	bd70      	pop	{r4, r5, r6, pc}

08005310 <__smakebuf_r>:
 8005310:	898b      	ldrh	r3, [r1, #12]
 8005312:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005314:	079d      	lsls	r5, r3, #30
 8005316:	4606      	mov	r6, r0
 8005318:	460c      	mov	r4, r1
 800531a:	d507      	bpl.n	800532c <__smakebuf_r+0x1c>
 800531c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	6123      	str	r3, [r4, #16]
 8005324:	2301      	movs	r3, #1
 8005326:	6163      	str	r3, [r4, #20]
 8005328:	b002      	add	sp, #8
 800532a:	bd70      	pop	{r4, r5, r6, pc}
 800532c:	ab01      	add	r3, sp, #4
 800532e:	466a      	mov	r2, sp
 8005330:	f7ff ffca 	bl	80052c8 <__swhatbuf_r>
 8005334:	9900      	ldr	r1, [sp, #0]
 8005336:	4605      	mov	r5, r0
 8005338:	4630      	mov	r0, r6
 800533a:	f000 f87f 	bl	800543c <_malloc_r>
 800533e:	b948      	cbnz	r0, 8005354 <__smakebuf_r+0x44>
 8005340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005344:	059a      	lsls	r2, r3, #22
 8005346:	d4ef      	bmi.n	8005328 <__smakebuf_r+0x18>
 8005348:	f023 0303 	bic.w	r3, r3, #3
 800534c:	f043 0302 	orr.w	r3, r3, #2
 8005350:	81a3      	strh	r3, [r4, #12]
 8005352:	e7e3      	b.n	800531c <__smakebuf_r+0xc>
 8005354:	4b0d      	ldr	r3, [pc, #52]	; (800538c <__smakebuf_r+0x7c>)
 8005356:	62b3      	str	r3, [r6, #40]	; 0x28
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	6020      	str	r0, [r4, #0]
 800535c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005360:	81a3      	strh	r3, [r4, #12]
 8005362:	9b00      	ldr	r3, [sp, #0]
 8005364:	6163      	str	r3, [r4, #20]
 8005366:	9b01      	ldr	r3, [sp, #4]
 8005368:	6120      	str	r0, [r4, #16]
 800536a:	b15b      	cbz	r3, 8005384 <__smakebuf_r+0x74>
 800536c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005370:	4630      	mov	r0, r6
 8005372:	f000 f945 	bl	8005600 <_isatty_r>
 8005376:	b128      	cbz	r0, 8005384 <__smakebuf_r+0x74>
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	f023 0303 	bic.w	r3, r3, #3
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	431d      	orrs	r5, r3
 8005388:	81a5      	strh	r5, [r4, #12]
 800538a:	e7cd      	b.n	8005328 <__smakebuf_r+0x18>
 800538c:	0800517d 	.word	0x0800517d

08005390 <malloc>:
 8005390:	4b02      	ldr	r3, [pc, #8]	; (800539c <malloc+0xc>)
 8005392:	4601      	mov	r1, r0
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	f000 b851 	b.w	800543c <_malloc_r>
 800539a:	bf00      	nop
 800539c:	2000000c 	.word	0x2000000c

080053a0 <_free_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4605      	mov	r5, r0
 80053a4:	2900      	cmp	r1, #0
 80053a6:	d045      	beq.n	8005434 <_free_r+0x94>
 80053a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ac:	1f0c      	subs	r4, r1, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	bfb8      	it	lt
 80053b2:	18e4      	addlt	r4, r4, r3
 80053b4:	f000 f946 	bl	8005644 <__malloc_lock>
 80053b8:	4a1f      	ldr	r2, [pc, #124]	; (8005438 <_free_r+0x98>)
 80053ba:	6813      	ldr	r3, [r2, #0]
 80053bc:	4610      	mov	r0, r2
 80053be:	b933      	cbnz	r3, 80053ce <_free_r+0x2e>
 80053c0:	6063      	str	r3, [r4, #4]
 80053c2:	6014      	str	r4, [r2, #0]
 80053c4:	4628      	mov	r0, r5
 80053c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053ca:	f000 b93c 	b.w	8005646 <__malloc_unlock>
 80053ce:	42a3      	cmp	r3, r4
 80053d0:	d90c      	bls.n	80053ec <_free_r+0x4c>
 80053d2:	6821      	ldr	r1, [r4, #0]
 80053d4:	1862      	adds	r2, r4, r1
 80053d6:	4293      	cmp	r3, r2
 80053d8:	bf04      	itt	eq
 80053da:	681a      	ldreq	r2, [r3, #0]
 80053dc:	685b      	ldreq	r3, [r3, #4]
 80053de:	6063      	str	r3, [r4, #4]
 80053e0:	bf04      	itt	eq
 80053e2:	1852      	addeq	r2, r2, r1
 80053e4:	6022      	streq	r2, [r4, #0]
 80053e6:	6004      	str	r4, [r0, #0]
 80053e8:	e7ec      	b.n	80053c4 <_free_r+0x24>
 80053ea:	4613      	mov	r3, r2
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	b10a      	cbz	r2, 80053f4 <_free_r+0x54>
 80053f0:	42a2      	cmp	r2, r4
 80053f2:	d9fa      	bls.n	80053ea <_free_r+0x4a>
 80053f4:	6819      	ldr	r1, [r3, #0]
 80053f6:	1858      	adds	r0, r3, r1
 80053f8:	42a0      	cmp	r0, r4
 80053fa:	d10b      	bne.n	8005414 <_free_r+0x74>
 80053fc:	6820      	ldr	r0, [r4, #0]
 80053fe:	4401      	add	r1, r0
 8005400:	1858      	adds	r0, r3, r1
 8005402:	4282      	cmp	r2, r0
 8005404:	6019      	str	r1, [r3, #0]
 8005406:	d1dd      	bne.n	80053c4 <_free_r+0x24>
 8005408:	6810      	ldr	r0, [r2, #0]
 800540a:	6852      	ldr	r2, [r2, #4]
 800540c:	605a      	str	r2, [r3, #4]
 800540e:	4401      	add	r1, r0
 8005410:	6019      	str	r1, [r3, #0]
 8005412:	e7d7      	b.n	80053c4 <_free_r+0x24>
 8005414:	d902      	bls.n	800541c <_free_r+0x7c>
 8005416:	230c      	movs	r3, #12
 8005418:	602b      	str	r3, [r5, #0]
 800541a:	e7d3      	b.n	80053c4 <_free_r+0x24>
 800541c:	6820      	ldr	r0, [r4, #0]
 800541e:	1821      	adds	r1, r4, r0
 8005420:	428a      	cmp	r2, r1
 8005422:	bf04      	itt	eq
 8005424:	6811      	ldreq	r1, [r2, #0]
 8005426:	6852      	ldreq	r2, [r2, #4]
 8005428:	6062      	str	r2, [r4, #4]
 800542a:	bf04      	itt	eq
 800542c:	1809      	addeq	r1, r1, r0
 800542e:	6021      	streq	r1, [r4, #0]
 8005430:	605c      	str	r4, [r3, #4]
 8005432:	e7c7      	b.n	80053c4 <_free_r+0x24>
 8005434:	bd38      	pop	{r3, r4, r5, pc}
 8005436:	bf00      	nop
 8005438:	20004030 	.word	0x20004030

0800543c <_malloc_r>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	1ccd      	adds	r5, r1, #3
 8005440:	f025 0503 	bic.w	r5, r5, #3
 8005444:	3508      	adds	r5, #8
 8005446:	2d0c      	cmp	r5, #12
 8005448:	bf38      	it	cc
 800544a:	250c      	movcc	r5, #12
 800544c:	2d00      	cmp	r5, #0
 800544e:	4606      	mov	r6, r0
 8005450:	db01      	blt.n	8005456 <_malloc_r+0x1a>
 8005452:	42a9      	cmp	r1, r5
 8005454:	d903      	bls.n	800545e <_malloc_r+0x22>
 8005456:	230c      	movs	r3, #12
 8005458:	6033      	str	r3, [r6, #0]
 800545a:	2000      	movs	r0, #0
 800545c:	bd70      	pop	{r4, r5, r6, pc}
 800545e:	f000 f8f1 	bl	8005644 <__malloc_lock>
 8005462:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <_malloc_r+0xac>)
 8005464:	6814      	ldr	r4, [r2, #0]
 8005466:	4621      	mov	r1, r4
 8005468:	b991      	cbnz	r1, 8005490 <_malloc_r+0x54>
 800546a:	4c20      	ldr	r4, [pc, #128]	; (80054ec <_malloc_r+0xb0>)
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	b91b      	cbnz	r3, 8005478 <_malloc_r+0x3c>
 8005470:	4630      	mov	r0, r6
 8005472:	f000 f83d 	bl	80054f0 <_sbrk_r>
 8005476:	6020      	str	r0, [r4, #0]
 8005478:	4629      	mov	r1, r5
 800547a:	4630      	mov	r0, r6
 800547c:	f000 f838 	bl	80054f0 <_sbrk_r>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d124      	bne.n	80054ce <_malloc_r+0x92>
 8005484:	230c      	movs	r3, #12
 8005486:	6033      	str	r3, [r6, #0]
 8005488:	4630      	mov	r0, r6
 800548a:	f000 f8dc 	bl	8005646 <__malloc_unlock>
 800548e:	e7e4      	b.n	800545a <_malloc_r+0x1e>
 8005490:	680b      	ldr	r3, [r1, #0]
 8005492:	1b5b      	subs	r3, r3, r5
 8005494:	d418      	bmi.n	80054c8 <_malloc_r+0x8c>
 8005496:	2b0b      	cmp	r3, #11
 8005498:	d90f      	bls.n	80054ba <_malloc_r+0x7e>
 800549a:	600b      	str	r3, [r1, #0]
 800549c:	50cd      	str	r5, [r1, r3]
 800549e:	18cc      	adds	r4, r1, r3
 80054a0:	4630      	mov	r0, r6
 80054a2:	f000 f8d0 	bl	8005646 <__malloc_unlock>
 80054a6:	f104 000b 	add.w	r0, r4, #11
 80054aa:	1d23      	adds	r3, r4, #4
 80054ac:	f020 0007 	bic.w	r0, r0, #7
 80054b0:	1ac3      	subs	r3, r0, r3
 80054b2:	d0d3      	beq.n	800545c <_malloc_r+0x20>
 80054b4:	425a      	negs	r2, r3
 80054b6:	50e2      	str	r2, [r4, r3]
 80054b8:	e7d0      	b.n	800545c <_malloc_r+0x20>
 80054ba:	428c      	cmp	r4, r1
 80054bc:	684b      	ldr	r3, [r1, #4]
 80054be:	bf16      	itet	ne
 80054c0:	6063      	strne	r3, [r4, #4]
 80054c2:	6013      	streq	r3, [r2, #0]
 80054c4:	460c      	movne	r4, r1
 80054c6:	e7eb      	b.n	80054a0 <_malloc_r+0x64>
 80054c8:	460c      	mov	r4, r1
 80054ca:	6849      	ldr	r1, [r1, #4]
 80054cc:	e7cc      	b.n	8005468 <_malloc_r+0x2c>
 80054ce:	1cc4      	adds	r4, r0, #3
 80054d0:	f024 0403 	bic.w	r4, r4, #3
 80054d4:	42a0      	cmp	r0, r4
 80054d6:	d005      	beq.n	80054e4 <_malloc_r+0xa8>
 80054d8:	1a21      	subs	r1, r4, r0
 80054da:	4630      	mov	r0, r6
 80054dc:	f000 f808 	bl	80054f0 <_sbrk_r>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d0cf      	beq.n	8005484 <_malloc_r+0x48>
 80054e4:	6025      	str	r5, [r4, #0]
 80054e6:	e7db      	b.n	80054a0 <_malloc_r+0x64>
 80054e8:	20004030 	.word	0x20004030
 80054ec:	20004034 	.word	0x20004034

080054f0 <_sbrk_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4c06      	ldr	r4, [pc, #24]	; (800550c <_sbrk_r+0x1c>)
 80054f4:	2300      	movs	r3, #0
 80054f6:	4605      	mov	r5, r0
 80054f8:	4608      	mov	r0, r1
 80054fa:	6023      	str	r3, [r4, #0]
 80054fc:	f7fb fc26 	bl	8000d4c <_sbrk>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_sbrk_r+0x1a>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	b103      	cbz	r3, 800550a <_sbrk_r+0x1a>
 8005508:	602b      	str	r3, [r5, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	2000418c 	.word	0x2000418c

08005510 <__sread>:
 8005510:	b510      	push	{r4, lr}
 8005512:	460c      	mov	r4, r1
 8005514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005518:	f000 f896 	bl	8005648 <_read_r>
 800551c:	2800      	cmp	r0, #0
 800551e:	bfab      	itete	ge
 8005520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005522:	89a3      	ldrhlt	r3, [r4, #12]
 8005524:	181b      	addge	r3, r3, r0
 8005526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800552a:	bfac      	ite	ge
 800552c:	6563      	strge	r3, [r4, #84]	; 0x54
 800552e:	81a3      	strhlt	r3, [r4, #12]
 8005530:	bd10      	pop	{r4, pc}

08005532 <__swrite>:
 8005532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005536:	461f      	mov	r7, r3
 8005538:	898b      	ldrh	r3, [r1, #12]
 800553a:	05db      	lsls	r3, r3, #23
 800553c:	4605      	mov	r5, r0
 800553e:	460c      	mov	r4, r1
 8005540:	4616      	mov	r6, r2
 8005542:	d505      	bpl.n	8005550 <__swrite+0x1e>
 8005544:	2302      	movs	r3, #2
 8005546:	2200      	movs	r2, #0
 8005548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800554c:	f000 f868 	bl	8005620 <_lseek_r>
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800555a:	81a3      	strh	r3, [r4, #12]
 800555c:	4632      	mov	r2, r6
 800555e:	463b      	mov	r3, r7
 8005560:	4628      	mov	r0, r5
 8005562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005566:	f000 b817 	b.w	8005598 <_write_r>

0800556a <__sseek>:
 800556a:	b510      	push	{r4, lr}
 800556c:	460c      	mov	r4, r1
 800556e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005572:	f000 f855 	bl	8005620 <_lseek_r>
 8005576:	1c43      	adds	r3, r0, #1
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	bf15      	itete	ne
 800557c:	6560      	strne	r0, [r4, #84]	; 0x54
 800557e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005586:	81a3      	strheq	r3, [r4, #12]
 8005588:	bf18      	it	ne
 800558a:	81a3      	strhne	r3, [r4, #12]
 800558c:	bd10      	pop	{r4, pc}

0800558e <__sclose>:
 800558e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005592:	f000 b813 	b.w	80055bc <_close_r>
	...

08005598 <_write_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4c07      	ldr	r4, [pc, #28]	; (80055b8 <_write_r+0x20>)
 800559c:	4605      	mov	r5, r0
 800559e:	4608      	mov	r0, r1
 80055a0:	4611      	mov	r1, r2
 80055a2:	2200      	movs	r2, #0
 80055a4:	6022      	str	r2, [r4, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f7fb f9b6 	bl	8000918 <_write>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_write_r+0x1e>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_write_r+0x1e>
 80055b4:	602b      	str	r3, [r5, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	2000418c 	.word	0x2000418c

080055bc <_close_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4c06      	ldr	r4, [pc, #24]	; (80055d8 <_close_r+0x1c>)
 80055c0:	2300      	movs	r3, #0
 80055c2:	4605      	mov	r5, r0
 80055c4:	4608      	mov	r0, r1
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	f7fb f9d2 	bl	8000970 <_close>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_close_r+0x1a>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_close_r+0x1a>
 80055d4:	602b      	str	r3, [r5, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	2000418c 	.word	0x2000418c

080055dc <_fstat_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4c07      	ldr	r4, [pc, #28]	; (80055fc <_fstat_r+0x20>)
 80055e0:	2300      	movs	r3, #0
 80055e2:	4605      	mov	r5, r0
 80055e4:	4608      	mov	r0, r1
 80055e6:	4611      	mov	r1, r2
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	f7fb fa11 	bl	8000a10 <_fstat>
 80055ee:	1c43      	adds	r3, r0, #1
 80055f0:	d102      	bne.n	80055f8 <_fstat_r+0x1c>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	b103      	cbz	r3, 80055f8 <_fstat_r+0x1c>
 80055f6:	602b      	str	r3, [r5, #0]
 80055f8:	bd38      	pop	{r3, r4, r5, pc}
 80055fa:	bf00      	nop
 80055fc:	2000418c 	.word	0x2000418c

08005600 <_isatty_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	4c06      	ldr	r4, [pc, #24]	; (800561c <_isatty_r+0x1c>)
 8005604:	2300      	movs	r3, #0
 8005606:	4605      	mov	r5, r0
 8005608:	4608      	mov	r0, r1
 800560a:	6023      	str	r3, [r4, #0]
 800560c:	f7fb f96e 	bl	80008ec <_isatty>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d102      	bne.n	800561a <_isatty_r+0x1a>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	b103      	cbz	r3, 800561a <_isatty_r+0x1a>
 8005618:	602b      	str	r3, [r5, #0]
 800561a:	bd38      	pop	{r3, r4, r5, pc}
 800561c:	2000418c 	.word	0x2000418c

08005620 <_lseek_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4c07      	ldr	r4, [pc, #28]	; (8005640 <_lseek_r+0x20>)
 8005624:	4605      	mov	r5, r0
 8005626:	4608      	mov	r0, r1
 8005628:	4611      	mov	r1, r2
 800562a:	2200      	movs	r2, #0
 800562c:	6022      	str	r2, [r4, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	f7fb f9b5 	bl	800099e <_lseek>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d102      	bne.n	800563e <_lseek_r+0x1e>
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	b103      	cbz	r3, 800563e <_lseek_r+0x1e>
 800563c:	602b      	str	r3, [r5, #0]
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	2000418c 	.word	0x2000418c

08005644 <__malloc_lock>:
 8005644:	4770      	bx	lr

08005646 <__malloc_unlock>:
 8005646:	4770      	bx	lr

08005648 <_read_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4c07      	ldr	r4, [pc, #28]	; (8005668 <_read_r+0x20>)
 800564c:	4605      	mov	r5, r0
 800564e:	4608      	mov	r0, r1
 8005650:	4611      	mov	r1, r2
 8005652:	2200      	movs	r2, #0
 8005654:	6022      	str	r2, [r4, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	f7fb f9b2 	bl	80009c0 <_read>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d102      	bne.n	8005666 <_read_r+0x1e>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	b103      	cbz	r3, 8005666 <_read_r+0x1e>
 8005664:	602b      	str	r3, [r5, #0]
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	2000418c 	.word	0x2000418c

0800566c <_init>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr

08005678 <_fini>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	bf00      	nop
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr
