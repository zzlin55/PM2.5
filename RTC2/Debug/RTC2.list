
RTC2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08004558  08004558  00014558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e8  080046e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080046e8  080046e8  000146e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046f0  080046f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08004768  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004768  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b042  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000198a  00000000  00000000  0002b0e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000940  00000000  00000000  0002ca70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  0002d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001627e  00000000  00000000  0002dc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008772  00000000  00000000  00043eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008731f  00000000  00000000  0004c628  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3947  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d30  00000000  00000000  000d39c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004540 	.word	0x08004540

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004540 	.word	0x08004540

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fd6f 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f827 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f903 	bl	8000798 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000592:	f000 f883 	bl	800069c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8d5 	bl	8000744 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800059a:	480e      	ldr	r0, [pc, #56]	; (80005d4 <main+0x54>)
 800059c:	f000 f93a 	bl	8000814 <RetargetInit>
  printf("init\r\n");
 80005a0:	480d      	ldr	r0, [pc, #52]	; (80005d8 <main+0x58>)
 80005a2:	f003 f843 	bl	800362c <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  WriteRTC(0,20,16,5,6,12,2019);
 80005a6:	f240 73e3 	movw	r3, #2019	; 0x7e3
 80005aa:	9302      	str	r3, [sp, #8]
 80005ac:	230c      	movs	r3, #12
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2306      	movs	r3, #6
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2305      	movs	r3, #5
 80005b6:	2210      	movs	r2, #16
 80005b8:	2114      	movs	r1, #20
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fb10 	bl	8000be0 <WriteRTC>
		  printf("\r\n");

	  }
	  HAL_Delay(500); */
    /* USER CODE BEGIN 3 */
	  ReadRTC();
 80005c0:	463b      	mov	r3, r7
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fa28 	bl	8000a18 <ReadRTC>
	  HAL_Delay(1000);
 80005c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005cc:	f000 fdbe 	bl	800114c <HAL_Delay>
	  ReadRTC();
 80005d0:	e7f6      	b.n	80005c0 <main+0x40>
 80005d2:	bf00      	nop
 80005d4:	200000f0 	.word	0x200000f0
 80005d8:	08004558 	.word	0x08004558

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 ffa2 	bl	8003534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b23      	ldr	r3, [pc, #140]	; (8000694 <SystemClock_Config+0xb8>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a22      	ldr	r2, [pc, #136]	; (8000694 <SystemClock_Config+0xb8>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <SystemClock_Config+0xb8>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <SystemClock_Config+0xbc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000628:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <SystemClock_Config+0xbc>)
 800062a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <SystemClock_Config+0xbc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000648:	2300      	movs	r3, #0
 800064a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f001 ff5b 	bl	800250c <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800065c:	f000 f8d2 	bl	8000804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f002 f988 	bl	8002990 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000686:	f000 f8bd 	bl	8000804 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	; 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_I2C1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_I2C1_Init+0x94>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	4a21      	ldr	r2, [pc, #132]	; (8000730 <MX_I2C1_Init+0x94>)
 80006ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006b0:	6413      	str	r3, [r2, #64]	; 0x40
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_I2C1_Init+0x94>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_I2C1_Init+0x98>)
 80006c0:	4a1d      	ldr	r2, [pc, #116]	; (8000738 <MX_I2C1_Init+0x9c>)
 80006c2:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_I2C1_Init+0x98>)
 80006c6:	4a1d      	ldr	r2, [pc, #116]	; (800073c <MX_I2C1_Init+0xa0>)
 80006c8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_I2C1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_I2C1_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_I2C1_Init+0x98>)
 80006d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_I2C1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_I2C1_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_I2C1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006fc:	2312      	movs	r3, #18
 80006fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000700:	2301      	movs	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000708:	2304      	movs	r3, #4
 800070a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4619      	mov	r1, r3
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <MX_I2C1_Init+0xa4>)
 8000712:	f000 fe23 	bl	800135c <HAL_GPIO_Init>
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <MX_I2C1_Init+0x98>)
 8000718:	f000 ffa2 	bl	8001660 <HAL_I2C_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_I2C1_Init+0x8a>
  {
    Error_Handler();
 8000722:	f000 f86f 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	2000009c 	.word	0x2000009c
 8000738:	40005400 	.word	0x40005400
 800073c:	000186a0 	.word	0x000186a0
 8000740:	40020400 	.word	0x40020400

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_USART2_UART_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800077c:	f002 fad0 	bl	8002d20 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000786:	f000 f83d 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000f0 	.word	0x200000f0
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_GPIO_Init+0x68>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <MX_GPIO_Init+0x68>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_GPIO_Init+0x68>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_GPIO_Init+0x68>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MX_GPIO_Init+0x68>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_GPIO_Init+0x68>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_GPIO_Init+0x68>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <MX_GPIO_Init+0x68>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_GPIO_Init+0x68>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <RetargetInit+0x28>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <RetargetInit+0x2c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6898      	ldr	r0, [r3, #8]
 8000828:	2300      	movs	r3, #0
 800082a:	2202      	movs	r2, #2
 800082c:	2100      	movs	r1, #0
 800082e:	f002 ff05 	bl	800363c <setvbuf>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000130 	.word	0x20000130
 8000840:	2000000c 	.word	0x2000000c

08000844 <_isatty>:

int _isatty(int fd) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	db04      	blt.n	800085c <_isatty+0x18>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b02      	cmp	r3, #2
 8000856:	dc01      	bgt.n	800085c <_isatty+0x18>
    return 1;
 8000858:	2301      	movs	r3, #1
 800085a:	e005      	b.n	8000868 <_isatty+0x24>

  errno = EBADF;
 800085c:	f002 fe40 	bl	80034e0 <__errno>
 8000860:	4602      	mov	r2, r0
 8000862:	2309      	movs	r3, #9
 8000864:	6013      	str	r3, [r2, #0]
  return 0;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <_write>:

int _write(int fd, char* ptr, int len) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d002      	beq.n	8000888 <_write+0x18>
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2b02      	cmp	r3, #2
 8000886:	d111      	bne.n	80008ac <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <_write+0x54>)
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	b29a      	uxth	r2, r3
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	f002 fa90 	bl	8002dba <HAL_UART_Transmit>
 800089a:	4603      	mov	r3, r0
 800089c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800089e:	7dfb      	ldrb	r3, [r7, #23]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <_write+0x38>
      return len;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	e008      	b.n	80008ba <_write+0x4a>
    else
      return EIO;
 80008a8:	2305      	movs	r3, #5
 80008aa:	e006      	b.n	80008ba <_write+0x4a>
  }
  errno = EBADF;
 80008ac:	f002 fe18 	bl	80034e0 <__errno>
 80008b0:	4602      	mov	r2, r0
 80008b2:	2309      	movs	r3, #9
 80008b4:	6013      	str	r3, [r2, #0]
  return -1;
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000130 	.word	0x20000130

080008c8 <_close>:

int _close(int fd) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	db04      	blt.n	80008e0 <_close+0x18>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	dc01      	bgt.n	80008e0 <_close+0x18>
    return 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	e006      	b.n	80008ee <_close+0x26>

  errno = EBADF;
 80008e0:	f002 fdfe 	bl	80034e0 <__errno>
 80008e4:	4602      	mov	r2, r0
 80008e6:	2309      	movs	r3, #9
 80008e8:	6013      	str	r3, [r2, #0]
  return -1;
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000902:	f002 fded 	bl	80034e0 <__errno>
 8000906:	4602      	mov	r2, r0
 8000908:	2309      	movs	r3, #9
 800090a:	6013      	str	r3, [r2, #0]
  return -1;
 800090c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <_read>:

int _read(int fd, char* ptr, int len) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d110      	bne.n	800094c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <_read+0x4c>)
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	2201      	movs	r2, #1
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	f002 fad9 	bl	8002eec <HAL_UART_Receive>
 800093a:	4603      	mov	r3, r0
 800093c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800093e:	7dfb      	ldrb	r3, [r7, #23]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <_read+0x30>
      return 1;
 8000944:	2301      	movs	r3, #1
 8000946:	e008      	b.n	800095a <_read+0x42>
    else
      return EIO;
 8000948:	2305      	movs	r3, #5
 800094a:	e006      	b.n	800095a <_read+0x42>
  }
  errno = EBADF;
 800094c:	f002 fdc8 	bl	80034e0 <__errno>
 8000950:	4602      	mov	r2, r0
 8000952:	2309      	movs	r3, #9
 8000954:	6013      	str	r3, [r2, #0]
  return -1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000130 	.word	0x20000130

08000968 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db08      	blt.n	800098a <_fstat+0x22>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b02      	cmp	r3, #2
 800097c:	dc05      	bgt.n	800098a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000984:	605a      	str	r2, [r3, #4]
    return 0;
 8000986:	2300      	movs	r3, #0
 8000988:	e005      	b.n	8000996 <_fstat+0x2e>
  }

  errno = EBADF;
 800098a:	f002 fda9 	bl	80034e0 <__errno>
 800098e:	4602      	mov	r2, r0
 8000990:	2309      	movs	r3, #9
 8000992:	6013      	str	r3, [r2, #0]
  return 0;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <DecToBcd>:
#include "retarget.h"
#include <stdio.h>


/* Decimal to BCD*/
uint8_t DecToBcd(uint8_t val){
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
	return ((val/10 *16)+(val%10));
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <DecToBcd+0x40>)
 80009ae:	fba2 2303 	umull	r2, r3, r2, r3
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	b2d8      	uxtb	r0, r3
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <DecToBcd+0x40>)
 80009be:	fba3 1302 	umull	r1, r3, r3, r2
 80009c2:	08d9      	lsrs	r1, r3, #3
 80009c4:	460b      	mov	r3, r1
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	440b      	add	r3, r1
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4403      	add	r3, r0
 80009d2:	b2db      	uxtb	r3, r3
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	cccccccd 	.word	0xcccccccd

080009e4 <BcdToDec>:

/* BCD to Decimal*/
uint8_t BcdToDec(uint8_t val)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  return( (val/16*10) + (val%16) );
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	091b      	lsrs	r3, r3, #4
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	461a      	mov	r2, r3
 80009f6:	0092      	lsls	r2, r2, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f003 030f 	and.w	r3, r3, #15
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4413      	add	r3, r2
 8000a08:	b2db      	uxtb	r3, r3
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <ReadRTC>:

/*
 * Read Data from RTC
 */
rtc_HandleTypeDef ReadRTC()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	rtc_HandleTypeDef rtc;
	uint8_t raw_data_from_rtc[7];
	GetRawRTC(&I2CX,raw_data_from_rtc);
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	4619      	mov	r1, r3
 8000a26:	483b      	ldr	r0, [pc, #236]	; (8000b14 <ReadRTC+0xfc>)
 8000a28:	f000 f886 	bl	8000b38 <GetRawRTC>
	rtc.second = BcdToDec(raw_data_from_rtc[0]);
 8000a2c:	7a3b      	ldrb	r3, [r7, #8]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ffd8 	bl	80009e4 <BcdToDec>
 8000a34:	4603      	mov	r3, r0
 8000a36:	75fb      	strb	r3, [r7, #23]
	rtc.minute = BcdToDec(raw_data_from_rtc[1]);
 8000a38:	7a7b      	ldrb	r3, [r7, #9]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ffd2 	bl	80009e4 <BcdToDec>
 8000a40:	4603      	mov	r3, r0
 8000a42:	75bb      	strb	r3, [r7, #22]
	raw_data_from_rtc[2] = (raw_data_from_rtc[2] & 0x7f);
 8000a44:	7abb      	ldrb	r3, [r7, #10]
 8000a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	72bb      	strb	r3, [r7, #10]
	raw_data_from_rtc[2] = (((raw_data_from_rtc[2] & 0xf0) >> 4) * 10) + (raw_data_from_rtc[2] & 0x0f);
 8000a4e:	7abb      	ldrb	r3, [r7, #10]
 8000a50:	091b      	lsrs	r3, r3, #4
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	461a      	mov	r2, r3
 8000a56:	0092      	lsls	r2, r2, #2
 8000a58:	4413      	add	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	7abb      	ldrb	r3, [r7, #10]
 8000a60:	f003 030f 	and.w	r3, r3, #15
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4413      	add	r3, r2
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	72bb      	strb	r3, [r7, #10]
	rtc.hour = raw_data_from_rtc[2];
 8000a6c:	7abb      	ldrb	r3, [r7, #10]
 8000a6e:	757b      	strb	r3, [r7, #21]
	rtc.week = BcdToDec(raw_data_from_rtc[3])+1;//add 1 since week range from 0-6
 8000a70:	7afb      	ldrb	r3, [r7, #11]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ffb6 	bl	80009e4 <BcdToDec>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	753b      	strb	r3, [r7, #20]
	rtc.day = BcdToDec(raw_data_from_rtc[4]);
 8000a80:	7b3b      	ldrb	r3, [r7, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ffae 	bl	80009e4 <BcdToDec>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	74fb      	strb	r3, [r7, #19]
	rtc.month = BcdToDec(raw_data_from_rtc[5]);
 8000a8c:	7b7b      	ldrb	r3, [r7, #13]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ffa8 	bl	80009e4 <BcdToDec>
 8000a94:	4603      	mov	r3, r0
 8000a96:	74bb      	strb	r3, [r7, #18]
	rtc.year = (uint16_t) BcdToDec(raw_data_from_rtc[6]);
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ffa2 	bl	80009e4 <BcdToDec>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	823b      	strh	r3, [r7, #16]
	rtc.year += 2000;
 8000aa6:	8a3b      	ldrh	r3, [r7, #16]
 8000aa8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	823b      	strh	r3, [r7, #16]
	if(DebugLevel>=DEBUG_MODULE){
		printf("RTC processed data:\n\r");
 8000ab0:	4819      	ldr	r0, [pc, #100]	; (8000b18 <ReadRTC+0x100>)
 8000ab2:	f002 fd47 	bl	8003544 <iprintf>
		printf("Second: %d\r\n",rtc.second);
 8000ab6:	7dfb      	ldrb	r3, [r7, #23]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4818      	ldr	r0, [pc, #96]	; (8000b1c <ReadRTC+0x104>)
 8000abc:	f002 fd42 	bl	8003544 <iprintf>
		printf("Minutes: %d\r\n",rtc.minute);
 8000ac0:	7dbb      	ldrb	r3, [r7, #22]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4816      	ldr	r0, [pc, #88]	; (8000b20 <ReadRTC+0x108>)
 8000ac6:	f002 fd3d 	bl	8003544 <iprintf>
		printf("Hour: %d\r\n",rtc.hour);
 8000aca:	7d7b      	ldrb	r3, [r7, #21]
 8000acc:	4619      	mov	r1, r3
 8000ace:	4815      	ldr	r0, [pc, #84]	; (8000b24 <ReadRTC+0x10c>)
 8000ad0:	f002 fd38 	bl	8003544 <iprintf>
		printf("Week: %d\r\n",rtc.week);
 8000ad4:	7d3b      	ldrb	r3, [r7, #20]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4813      	ldr	r0, [pc, #76]	; (8000b28 <ReadRTC+0x110>)
 8000ada:	f002 fd33 	bl	8003544 <iprintf>
		printf("Day: %d\r\n",rtc.day);
 8000ade:	7cfb      	ldrb	r3, [r7, #19]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4812      	ldr	r0, [pc, #72]	; (8000b2c <ReadRTC+0x114>)
 8000ae4:	f002 fd2e 	bl	8003544 <iprintf>
		printf("Month: %d\r\n",rtc.month);
 8000ae8:	7cbb      	ldrb	r3, [r7, #18]
 8000aea:	4619      	mov	r1, r3
 8000aec:	4810      	ldr	r0, [pc, #64]	; (8000b30 <ReadRTC+0x118>)
 8000aee:	f002 fd29 	bl	8003544 <iprintf>
		printf("Year: %d\r\n",rtc.year);
 8000af2:	8a3b      	ldrh	r3, [r7, #16]
 8000af4:	4619      	mov	r1, r3
 8000af6:	480f      	ldr	r0, [pc, #60]	; (8000b34 <ReadRTC+0x11c>)
 8000af8:	f002 fd24 	bl	8003544 <iprintf>
	}
	//Return rtc handler
	return rtc;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	461a      	mov	r2, r3
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	cb03      	ldmia	r3!, {r0, r1}
 8000b06:	6010      	str	r0, [r2, #0]
 8000b08:	6051      	str	r1, [r2, #4]
}
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000009c 	.word	0x2000009c
 8000b18:	08004560 	.word	0x08004560
 8000b1c:	08004578 	.word	0x08004578
 8000b20:	08004588 	.word	0x08004588
 8000b24:	08004598 	.word	0x08004598
 8000b28:	080045a4 	.word	0x080045a4
 8000b2c:	080045b0 	.word	0x080045b0
 8000b30:	080045bc 	.word	0x080045bc
 8000b34:	080045c8 	.word	0x080045c8

08000b38 <GetRawRTC>:
/*
 * Receive Raw Data from RTC.
 */
void GetRawRTC(I2C_HandleTypeDef *i2c,uint8_t* rawdata)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af02      	add	r7, sp, #8
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef I2Cflag;
	I2Cflag = HAL_I2C_Master_Transmit(i2c, RTC_ADDR, RTC_READ_ADDR, 1, HAL_MAX_DELAY);
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2164      	movs	r1, #100	; 0x64
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 feae 	bl	80018b0 <HAL_I2C_Master_Transmit>
 8000b54:	4603      	mov	r3, r0
 8000b56:	73bb      	strb	r3, [r7, #14]
	if (I2Cflag!=HAL_OK)
 8000b58:	7bbb      	ldrb	r3, [r7, #14]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d002      	beq.n	8000b64 <GetRawRTC+0x2c>
	{
		if(DebugLevel>=DEBUG_MODULE){
			printf("RTC Module Writing Error\n\r");
 8000b5e:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <GetRawRTC+0x90>)
 8000b60:	f002 fcf0 	bl	8003544 <iprintf>
		}
	}
	I2Cflag = HAL_I2C_Master_Receive(i2c, RTC_ADDR, rawdata, RTC_REG_NUM, HAL_MAX_DELAY);
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	2164      	movs	r1, #100	; 0x64
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 ff9b 	bl	8001aac <HAL_I2C_Master_Receive>
 8000b76:	4603      	mov	r3, r0
 8000b78:	73bb      	strb	r3, [r7, #14]
	if (I2Cflag!=HAL_OK)
 8000b7a:	7bbb      	ldrb	r3, [r7, #14]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <GetRawRTC+0x50>
	{
		if(DebugLevel>=DEBUG_MODULE){
			printf("RTC Module Reading Error\n\r");
 8000b80:	4812      	ldr	r0, [pc, #72]	; (8000bcc <GetRawRTC+0x94>)
 8000b82:	f002 fcdf 	bl	8003544 <iprintf>
				printf("Raw:%x\r\n",*(rawdata+i));
			}
			printf("\r\n");
		}
	}
}
 8000b86:	e01a      	b.n	8000bbe <GetRawRTC+0x86>
		if(DebugLevel>=INFO){
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <GetRawRTC+0x98>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d916      	bls.n	8000bbe <GetRawRTC+0x86>
			printf("The Raw Data From RTC is:\r\n");
 8000b90:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <GetRawRTC+0x9c>)
 8000b92:	f002 fd4b 	bl	800362c <puts>
			for (i=0;i<RTC_REG_NUM;i++){
 8000b96:	2300      	movs	r3, #0
 8000b98:	73fb      	strb	r3, [r7, #15]
 8000b9a:	e00a      	b.n	8000bb2 <GetRawRTC+0x7a>
				printf("Raw:%x\r\n",*(rawdata+i));
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <GetRawRTC+0xa0>)
 8000ba8:	f002 fccc 	bl	8003544 <iprintf>
			for (i=0;i<RTC_REG_NUM;i++){
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	2b06      	cmp	r3, #6
 8000bb6:	d9f1      	bls.n	8000b9c <GetRawRTC+0x64>
			printf("\r\n");
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <GetRawRTC+0xa4>)
 8000bba:	f002 fd37 	bl	800362c <puts>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	080045d4 	.word	0x080045d4
 8000bcc:	080045f0 	.word	0x080045f0
 8000bd0:	2000008c 	.word	0x2000008c
 8000bd4:	0800460c 	.word	0x0800460c
 8000bd8:	08004628 	.word	0x08004628
 8000bdc:	08004634 	.word	0x08004634

08000be0 <WriteRTC>:
				uint8_t hour,
				uint8_t week,
				uint8_t day,
				uint8_t month,
				uint16_t year)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	4604      	mov	r4, r0
 8000be8:	4608      	mov	r0, r1
 8000bea:	4611      	mov	r1, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	4623      	mov	r3, r4
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71bb      	strb	r3, [r7, #6]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	717b      	strb	r3, [r7, #5]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	713b      	strb	r3, [r7, #4]
	uint8_t writedata[RTC_REG_NUM+1];
	HAL_StatusTypeDef I2Cflag;

	if (year>=2000)
 8000bfe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000c00:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c04:	d304      	bcc.n	8000c10 <WriteRTC+0x30>
	{
		year = (uint8_t)(year -2000);
 8000c06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	3330      	adds	r3, #48	; 0x30
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	863b      	strh	r3, [r7, #48]	; 0x30
	}
	hour = hour+80; //set 24 hours format.
 8000c10:	797b      	ldrb	r3, [r7, #5]
 8000c12:	3350      	adds	r3, #80	; 0x50
 8000c14:	717b      	strb	r3, [r7, #5]
	writedata[0] = 0x00;
 8000c16:	2300      	movs	r3, #0
 8000c18:	733b      	strb	r3, [r7, #12]
	writedata[1] = DecToBcd(second);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff febf 	bl	80009a0 <DecToBcd>
 8000c22:	4603      	mov	r3, r0
 8000c24:	737b      	strb	r3, [r7, #13]
	writedata[2] = DecToBcd(minute);
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff feb9 	bl	80009a0 <DecToBcd>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73bb      	strb	r3, [r7, #14]
	writedata[3] = DecToBcd(hour);
 8000c32:	797b      	ldrb	r3, [r7, #5]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff feb3 	bl	80009a0 <DecToBcd>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	73fb      	strb	r3, [r7, #15]
	writedata[4] = DecToBcd(week-1);
 8000c3e:	793b      	ldrb	r3, [r7, #4]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff feab 	bl	80009a0 <DecToBcd>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	743b      	strb	r3, [r7, #16]
	writedata[5] = DecToBcd(day);
 8000c4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fea4 	bl	80009a0 <DecToBcd>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	747b      	strb	r3, [r7, #17]
	writedata[6] = DecToBcd(month);
 8000c5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fe9d 	bl	80009a0 <DecToBcd>
 8000c66:	4603      	mov	r3, r0
 8000c68:	74bb      	strb	r3, [r7, #18]
	writedata[7] = DecToBcd(year);
 8000c6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fe96 	bl	80009a0 <DecToBcd>
 8000c74:	4603      	mov	r3, r0
 8000c76:	74fb      	strb	r3, [r7, #19]

	WriteRTCEnable();
 8000c78:	f000 f81c 	bl	8000cb4 <WriteRTCEnable>
	I2Cflag = HAL_I2C_Master_Transmit(&I2CX, RTC_ADDR, writedata, RTC_REG_NUM+1, HAL_MAX_DELAY);
 8000c7c:	f107 020c 	add.w	r2, r7, #12
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2308      	movs	r3, #8
 8000c88:	2164      	movs	r1, #100	; 0x64
 8000c8a:	4808      	ldr	r0, [pc, #32]	; (8000cac <WriteRTC+0xcc>)
 8000c8c:	f000 fe10 	bl	80018b0 <HAL_I2C_Master_Transmit>
 8000c90:	4603      	mov	r3, r0
 8000c92:	75fb      	strb	r3, [r7, #23]
	if (I2Cflag!=HAL_OK)
 8000c94:	7dfb      	ldrb	r3, [r7, #23]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d002      	beq.n	8000ca0 <WriteRTC+0xc0>
	{
		if(DebugLevel>=DEBUG_MODULE){
			printf("RTC Module Writing Error\n\r");
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <WriteRTC+0xd0>)
 8000c9c:	f002 fc52 	bl	8003544 <iprintf>
		}
	}
	WriteRTCDisable();
 8000ca0:	f000 f83c 	bl	8000d1c <WriteRTCDisable>
}
 8000ca4:	bf00      	nop
 8000ca6:	371c      	adds	r7, #28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	2000009c 	.word	0x2000009c
 8000cb0:	080045d4 	.word	0x080045d4

08000cb4 <WriteRTCEnable>:
 * 		Set WRTC1 to 1 first,then set WRTC2 and WRTC3 to 1
 * To Disable RTC writing:
 * 		Set WRTC2 and WRTC3 to 0 first, then set WRTC1 to 0
 */
void WriteRTCEnable()
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef I2Cflag;
	uint8_t WRTC1_ADDR = 0x10, WRTC23_ADDR = 0x0f;
 8000cba:	2310      	movs	r3, #16
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	73bb      	strb	r3, [r7, #14]
	uint8_t WRTC1_SET[2] ={WRTC1_ADDR,0x80};
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	723b      	strb	r3, [r7, #8]
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	727b      	strb	r3, [r7, #9]
	uint8_t WRTC23_SET[2] = {WRTC23_ADDR,0x84};
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	713b      	strb	r3, [r7, #4]
 8000cce:	2384      	movs	r3, #132	; 0x84
 8000cd0:	717b      	strb	r3, [r7, #5]
	I2Cflag = HAL_I2C_Master_Transmit(&I2CX, RTC_ADDR, WRTC1_SET, 2, HAL_MAX_DELAY);
 8000cd2:	f107 0208 	add.w	r2, r7, #8
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2302      	movs	r3, #2
 8000cde:	2164      	movs	r1, #100	; 0x64
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <WriteRTCEnable+0x60>)
 8000ce2:	f000 fde5 	bl	80018b0 <HAL_I2C_Master_Transmit>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	737b      	strb	r3, [r7, #13]
	I2Cflag = HAL_I2C_Master_Transmit(&I2CX, RTC_ADDR, WRTC23_SET, 2, HAL_MAX_DELAY);
 8000cea:	1d3a      	adds	r2, r7, #4
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	2164      	movs	r1, #100	; 0x64
 8000cf6:	4807      	ldr	r0, [pc, #28]	; (8000d14 <WriteRTCEnable+0x60>)
 8000cf8:	f000 fdda 	bl	80018b0 <HAL_I2C_Master_Transmit>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	737b      	strb	r3, [r7, #13]
	if (I2Cflag!=HAL_OK)
 8000d00:	7b7b      	ldrb	r3, [r7, #13]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <WriteRTCEnable+0x58>
	{
		if(DebugLevel>=DEBUG_MODULE){
			printf("RTC Module Writing Error\n\r");
 8000d06:	4804      	ldr	r0, [pc, #16]	; (8000d18 <WriteRTCEnable+0x64>)
 8000d08:	f002 fc1c 	bl	8003544 <iprintf>
		}
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2000009c 	.word	0x2000009c
 8000d18:	080045d4 	.word	0x080045d4

08000d1c <WriteRTCDisable>:

/*
 * Write RTC Disable
 */
void WriteRTCDisable()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef I2Cflag;
	uint8_t WRTC1_ADDR = 0x10, WRTC23_ADDR = 0x0f;
 8000d22:	2310      	movs	r3, #16
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	230f      	movs	r3, #15
 8000d28:	73bb      	strb	r3, [r7, #14]
	uint8_t WRTC1_SET[2] ={WRTC1_ADDR,0x00};
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	723b      	strb	r3, [r7, #8]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	727b      	strb	r3, [r7, #9]
	uint8_t WRTC23_SET[2] = {WRTC23_ADDR,0x00};
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
 8000d34:	713b      	strb	r3, [r7, #4]
 8000d36:	2300      	movs	r3, #0
 8000d38:	717b      	strb	r3, [r7, #5]
	I2Cflag = HAL_I2C_Master_Transmit(&I2CX, RTC_ADDR, WRTC1_SET, 2, HAL_MAX_DELAY);
 8000d3a:	f107 0208 	add.w	r2, r7, #8
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2302      	movs	r3, #2
 8000d46:	2164      	movs	r1, #100	; 0x64
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <WriteRTCDisable+0x60>)
 8000d4a:	f000 fdb1 	bl	80018b0 <HAL_I2C_Master_Transmit>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	737b      	strb	r3, [r7, #13]
	I2Cflag = HAL_I2C_Master_Transmit(&I2CX, RTC_ADDR, WRTC23_SET, 2, HAL_MAX_DELAY);
 8000d52:	1d3a      	adds	r2, r7, #4
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	2164      	movs	r1, #100	; 0x64
 8000d5e:	4807      	ldr	r0, [pc, #28]	; (8000d7c <WriteRTCDisable+0x60>)
 8000d60:	f000 fda6 	bl	80018b0 <HAL_I2C_Master_Transmit>
 8000d64:	4603      	mov	r3, r0
 8000d66:	737b      	strb	r3, [r7, #13]
	if (I2Cflag!=HAL_OK)
 8000d68:	7b7b      	ldrb	r3, [r7, #13]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <WriteRTCDisable+0x58>
	{
		if(DebugLevel>=DEBUG_MODULE){
			printf("RTC Module Writing Error\n\r");
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <WriteRTCDisable+0x64>)
 8000d70:	f002 fbe8 	bl	8003544 <iprintf>
		}
	}
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000009c 	.word	0x2000009c
 8000d80:	080045d4 	.word	0x080045d4

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <HAL_I2C_MspInit+0x84>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d12c      	bne.n	8000e50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_I2C_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <HAL_I2C_MspInit+0x88>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_I2C_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e18:	2312      	movs	r3, #18
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e24:	2304      	movs	r3, #4
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <HAL_I2C_MspInit+0x8c>)
 8000e30:	f000 fa94 	bl	800135c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_I2C_MspInit+0x88>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_I2C_MspInit+0x88>)
 8000e3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e42:	6413      	str	r3, [r2, #64]	; 0x40
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_I2C_MspInit+0x88>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020400 	.word	0x40020400

08000e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_UART_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12b      	bne.n	8000ede <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_UART_MspInit+0x8c>)
 8000eda:	f000 fa3f 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40004400 	.word	0x40004400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f8e0 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x50>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x16>
		heap_end = &end;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <_sbrk+0x50>)
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <_sbrk+0x54>)
 8000f64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <_sbrk+0x50>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <_sbrk+0x50>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	466a      	mov	r2, sp
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d907      	bls.n	8000f8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f7a:	f002 fab1 	bl	80034e0 <__errno>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	230c      	movs	r3, #12
 8000f82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	e006      	b.n	8000f98 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <_sbrk+0x50>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <_sbrk+0x50>)
 8000f94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000090 	.word	0x20000090
 8000fa4:	20000140 	.word	0x20000140

08000fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <SystemInit+0x60>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <SystemInit+0x60>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <SystemInit+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a12      	ldr	r2, [pc, #72]	; (800100c <SystemInit+0x64>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <SystemInit+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <SystemInit+0x64>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <SystemInit+0x64>)
 8000fd4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fdc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <SystemInit+0x64>)
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <SystemInit+0x68>)
 8000fe2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <SystemInit+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <SystemInit+0x64>)
 8000fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <SystemInit+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SystemInit+0x60>)
 8000ff8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ffc:	609a      	str	r2, [r3, #8]
#endif
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	40023800 	.word	0x40023800
 8001010:	24003010 	.word	0x24003010

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001018:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800101a:	e003      	b.n	8001024 <LoopCopyDataInit>

0800101c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800101e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001020:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001022:	3104      	adds	r1, #4

08001024 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001028:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800102a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800102c:	d3f6      	bcc.n	800101c <CopyDataInit>
  ldr  r2, =_sbss
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001030:	e002      	b.n	8001038 <LoopFillZerobss>

08001032 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001032:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001034:	f842 3b04 	str.w	r3, [r2], #4

08001038 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800103a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800103c:	d3f9      	bcc.n	8001032 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800103e:	f7ff ffb3 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001042:	f002 fa53 	bl	80034ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fa9b 	bl	8000580 <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800104c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001050:	080046f8 	.word	0x080046f8
  ldr  r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001058:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800105c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001060:	2000013c 	.word	0x2000013c

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <HAL_Init+0x40>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_Init+0x40>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_Init+0x40>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f92f 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	2000      	movs	r0, #0
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fe72 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023c00 	.word	0x40023c00

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f939 	bl	8001342 <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f90f 	bl	800130a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	20000134 	.word	0x20000134

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000134 	.word	0x20000134

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_Delay+0x40>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000008 	.word	0x20000008

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	; (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff8e 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff47 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff5c 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff8e 	bl	8001248 <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5d 	bl	80011f4 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffb0 	bl	80012b0 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e159      	b.n	800162c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 8148 	bne.w	8001626 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x4a>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b12      	cmp	r3, #18
 80013a4:	d123      	bne.n	80013ee <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	69b9      	ldr	r1, [r7, #24]
 80013ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0203 	and.w	r2, r3, #3
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d00b      	beq.n	8001442 <HAL_GPIO_Init+0xe6>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001436:	2b11      	cmp	r3, #17
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b12      	cmp	r3, #18
 8001440:	d130      	bne.n	80014a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001478:	2201      	movs	r2, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	f003 0201 	and.w	r2, r3, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a2 	beq.w	8001626 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b56      	ldr	r3, [pc, #344]	; (8001640 <HAL_GPIO_Init+0x2e4>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a55      	ldr	r2, [pc, #340]	; (8001640 <HAL_GPIO_Init+0x2e4>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b53      	ldr	r3, [pc, #332]	; (8001640 <HAL_GPIO_Init+0x2e4>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fe:	4a51      	ldr	r2, [pc, #324]	; (8001644 <HAL_GPIO_Init+0x2e8>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a48      	ldr	r2, [pc, #288]	; (8001648 <HAL_GPIO_Init+0x2ec>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d019      	beq.n	800155e <HAL_GPIO_Init+0x202>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a47      	ldr	r2, [pc, #284]	; (800164c <HAL_GPIO_Init+0x2f0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0x1fe>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a46      	ldr	r2, [pc, #280]	; (8001650 <HAL_GPIO_Init+0x2f4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x1fa>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a45      	ldr	r2, [pc, #276]	; (8001654 <HAL_GPIO_Init+0x2f8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x1f6>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a44      	ldr	r2, [pc, #272]	; (8001658 <HAL_GPIO_Init+0x2fc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x1f2>
 800154a:	2304      	movs	r3, #4
 800154c:	e008      	b.n	8001560 <HAL_GPIO_Init+0x204>
 800154e:	2307      	movs	r3, #7
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x204>
 8001552:	2303      	movs	r3, #3
 8001554:	e004      	b.n	8001560 <HAL_GPIO_Init+0x204>
 8001556:	2302      	movs	r3, #2
 8001558:	e002      	b.n	8001560 <HAL_GPIO_Init+0x204>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_GPIO_Init+0x204>
 800155e:	2300      	movs	r3, #0
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	f002 0203 	and.w	r2, r2, #3
 8001566:	0092      	lsls	r2, r2, #2
 8001568:	4093      	lsls	r3, r2
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001570:	4934      	ldr	r1, [pc, #208]	; (8001644 <HAL_GPIO_Init+0x2e8>)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800157e:	4b37      	ldr	r3, [pc, #220]	; (800165c <HAL_GPIO_Init+0x300>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a2:	4a2e      	ldr	r2, [pc, #184]	; (800165c <HAL_GPIO_Init+0x300>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015a8:	4b2c      	ldr	r3, [pc, #176]	; (800165c <HAL_GPIO_Init+0x300>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015cc:	4a23      	ldr	r2, [pc, #140]	; (800165c <HAL_GPIO_Init+0x300>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <HAL_GPIO_Init+0x300>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f6:	4a19      	ldr	r2, [pc, #100]	; (800165c <HAL_GPIO_Init+0x300>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_GPIO_Init+0x300>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_GPIO_Init+0x300>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3301      	adds	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	2b0f      	cmp	r3, #15
 8001630:	f67f aea2 	bls.w	8001378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001634:	bf00      	nop
 8001636:	3724      	adds	r7, #36	; 0x24
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40023800 	.word	0x40023800
 8001644:	40013800 	.word	0x40013800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020400 	.word	0x40020400
 8001650:	40020800 	.word	0x40020800
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40021000 	.word	0x40021000
 800165c:	40013c00 	.word	0x40013c00

08001660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e10f      	b.n	8001892 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d106      	bne.n	800168c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fba4 	bl	8000dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2224      	movs	r2, #36	; 0x24
 8001690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016a4:	f001 fb14 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 80016a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a7b      	ldr	r2, [pc, #492]	; (800189c <HAL_I2C_Init+0x23c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d807      	bhi.n	80016c4 <HAL_I2C_Init+0x64>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4a7a      	ldr	r2, [pc, #488]	; (80018a0 <HAL_I2C_Init+0x240>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	bf94      	ite	ls
 80016bc:	2301      	movls	r3, #1
 80016be:	2300      	movhi	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	e006      	b.n	80016d2 <HAL_I2C_Init+0x72>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4a77      	ldr	r2, [pc, #476]	; (80018a4 <HAL_I2C_Init+0x244>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	bf94      	ite	ls
 80016cc:	2301      	movls	r3, #1
 80016ce:	2300      	movhi	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e0db      	b.n	8001892 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4a72      	ldr	r2, [pc, #456]	; (80018a8 <HAL_I2C_Init+0x248>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	0c9b      	lsrs	r3, r3, #18
 80016e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a64      	ldr	r2, [pc, #400]	; (800189c <HAL_I2C_Init+0x23c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d802      	bhi.n	8001714 <HAL_I2C_Init+0xb4>
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	3301      	adds	r3, #1
 8001712:	e009      	b.n	8001728 <HAL_I2C_Init+0xc8>
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	4a63      	ldr	r2, [pc, #396]	; (80018ac <HAL_I2C_Init+0x24c>)
 8001720:	fba2 2303 	umull	r2, r3, r2, r3
 8001724:	099b      	lsrs	r3, r3, #6
 8001726:	3301      	adds	r3, #1
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	430b      	orrs	r3, r1
 800172e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800173a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4956      	ldr	r1, [pc, #344]	; (800189c <HAL_I2C_Init+0x23c>)
 8001744:	428b      	cmp	r3, r1
 8001746:	d80d      	bhi.n	8001764 <HAL_I2C_Init+0x104>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1e59      	subs	r1, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fbb1 f3f3 	udiv	r3, r1, r3
 8001756:	3301      	adds	r3, #1
 8001758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175c:	2b04      	cmp	r3, #4
 800175e:	bf38      	it	cc
 8001760:	2304      	movcc	r3, #4
 8001762:	e04f      	b.n	8001804 <HAL_I2C_Init+0x1a4>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d111      	bne.n	8001790 <HAL_I2C_Init+0x130>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1e58      	subs	r0, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	440b      	add	r3, r1
 800177a:	fbb0 f3f3 	udiv	r3, r0, r3
 800177e:	3301      	adds	r3, #1
 8001780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf0c      	ite	eq
 8001788:	2301      	moveq	r3, #1
 800178a:	2300      	movne	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	e012      	b.n	80017b6 <HAL_I2C_Init+0x156>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1e58      	subs	r0, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	0099      	lsls	r1, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_I2C_Init+0x15e>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e022      	b.n	8001804 <HAL_I2C_Init+0x1a4>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10e      	bne.n	80017e4 <HAL_I2C_Init+0x184>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1e58      	subs	r0, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6859      	ldr	r1, [r3, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	440b      	add	r3, r1
 80017d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d8:	3301      	adds	r3, #1
 80017da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e2:	e00f      	b.n	8001804 <HAL_I2C_Init+0x1a4>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1e58      	subs	r0, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	0099      	lsls	r1, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	6809      	ldr	r1, [r1, #0]
 8001808:	4313      	orrs	r3, r2
 800180a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6911      	ldr	r1, [r2, #16]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68d2      	ldr	r2, [r2, #12]
 800183e:	4311      	orrs	r1, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	430b      	orrs	r3, r1
 8001846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2220      	movs	r2, #32
 800187e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	000186a0 	.word	0x000186a0
 80018a0:	001e847f 	.word	0x001e847f
 80018a4:	003d08ff 	.word	0x003d08ff
 80018a8:	431bde83 	.word	0x431bde83
 80018ac:	10624dd3 	.word	0x10624dd3

080018b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	461a      	mov	r2, r3
 80018bc:	460b      	mov	r3, r1
 80018be:	817b      	strh	r3, [r7, #10]
 80018c0:	4613      	mov	r3, r2
 80018c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff fc36 	bl	8001134 <HAL_GetTick>
 80018c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	f040 80e0 	bne.w	8001a98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2319      	movs	r3, #25
 80018de:	2201      	movs	r2, #1
 80018e0:	4970      	ldr	r1, [pc, #448]	; (8001aa4 <HAL_I2C_Master_Transmit+0x1f4>)
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 fc34 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018ee:	2302      	movs	r3, #2
 80018f0:	e0d3      	b.n	8001a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_I2C_Master_Transmit+0x50>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e0cc      	b.n	8001a9a <HAL_I2C_Master_Transmit+0x1ea>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b01      	cmp	r3, #1
 8001914:	d007      	beq.n	8001926 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0201 	orr.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001934:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2221      	movs	r2, #33	; 0x21
 800193a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2210      	movs	r2, #16
 8001942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	893a      	ldrh	r2, [r7, #8]
 8001956:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4a50      	ldr	r2, [pc, #320]	; (8001aa8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001968:	8979      	ldrh	r1, [r7, #10]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	6a3a      	ldr	r2, [r7, #32]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 fac2 	bl	8001ef8 <I2C_MasterRequestWrite>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e08d      	b.n	8001a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001994:	e066      	b.n	8001a64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	6a39      	ldr	r1, [r7, #32]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fcae 	bl	80022fc <I2C_WaitOnTXEFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00d      	beq.n	80019c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d107      	bne.n	80019be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06b      	b.n	8001a9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ea:	3b01      	subs	r3, #1
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d11b      	bne.n	8001a38 <HAL_I2C_Master_Transmit+0x188>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d017      	beq.n	8001a38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	6a39      	ldr	r1, [r7, #32]
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 fc9e 	bl	800237e <I2C_WaitOnBTFFlagUntilTimeout>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00d      	beq.n	8001a64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d107      	bne.n	8001a60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e01a      	b.n	8001a9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d194      	bne.n	8001996 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e000      	b.n	8001a9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a98:	2302      	movs	r3, #2
  }
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	00100002 	.word	0x00100002
 8001aa8:	ffff0000 	.word	0xffff0000

08001aac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	460b      	mov	r3, r1
 8001aba:	817b      	strh	r3, [r7, #10]
 8001abc:	4613      	mov	r3, r2
 8001abe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff fb38 	bl	8001134 <HAL_GetTick>
 8001ac4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	f040 820b 	bne.w	8001eea <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2319      	movs	r3, #25
 8001ada:	2201      	movs	r2, #1
 8001adc:	497c      	ldr	r1, [pc, #496]	; (8001cd0 <HAL_I2C_Master_Receive+0x224>)
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 fb36 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001aea:	2302      	movs	r3, #2
 8001aec:	e1fe      	b.n	8001eec <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_I2C_Master_Receive+0x50>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e1f7      	b.n	8001eec <HAL_I2C_Master_Receive+0x440>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d007      	beq.n	8001b22 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2222      	movs	r2, #34	; 0x22
 8001b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	893a      	ldrh	r2, [r7, #8]
 8001b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4a5c      	ldr	r2, [pc, #368]	; (8001cd4 <HAL_I2C_Master_Receive+0x228>)
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b64:	8979      	ldrh	r1, [r7, #10]
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 fa3a 	bl	8001fe4 <I2C_MasterRequestRead>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e1b8      	b.n	8001eec <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d113      	bne.n	8001baa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	623b      	str	r3, [r7, #32]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	623b      	str	r3, [r7, #32]
 8001b96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e18c      	b.n	8001ec4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d11b      	bne.n	8001bea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	e16c      	b.n	8001ec4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d11b      	bne.n	8001c2a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	e14c      	b.n	8001ec4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c50:	e138      	b.n	8001ec4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	f200 80f1 	bhi.w	8001e3e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d123      	bne.n	8001cac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 fbc9 	bl	8002400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e139      	b.n	8001eec <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001caa:	e10b      	b.n	8001ec4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d14e      	bne.n	8001d52 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4906      	ldr	r1, [pc, #24]	; (8001cd8 <HAL_I2C_Master_Receive+0x22c>)
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fa46 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e10e      	b.n	8001eec <HAL_I2C_Master_Receive+0x440>
 8001cce:	bf00      	nop
 8001cd0:	00100002 	.word	0x00100002
 8001cd4:	ffff0000 	.word	0xffff0000
 8001cd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d50:	e0b8      	b.n	8001ec4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d58:	2200      	movs	r2, #0
 8001d5a:	4966      	ldr	r1, [pc, #408]	; (8001ef4 <HAL_I2C_Master_Receive+0x448>)
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f9f7 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0bf      	b.n	8001eec <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	2200      	movs	r2, #0
 8001db6:	494f      	ldr	r1, [pc, #316]	; (8001ef4 <HAL_I2C_Master_Receive+0x448>)
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f9c9 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e091      	b.n	8001eec <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e3c:	e042      	b.n	8001ec4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 fadc 	bl	8002400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e04c      	b.n	8001eec <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d118      	bne.n	8001ec4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f47f aec2 	bne.w	8001c52 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
  }
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	00010004 	.word	0x00010004

08001ef8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	460b      	mov	r3, r1
 8001f06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d006      	beq.n	8001f22 <I2C_MasterRequestWrite+0x2a>
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d003      	beq.n	8001f22 <I2C_MasterRequestWrite+0x2a>
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f20:	d108      	bne.n	8001f34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	e00b      	b.n	8001f4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	2b12      	cmp	r3, #18
 8001f3a:	d107      	bne.n	8001f4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f8f9 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e035      	b.n	8001fd4 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f70:	d108      	bne.n	8001f84 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f72:	897b      	ldrh	r3, [r7, #10]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f80:	611a      	str	r2, [r3, #16]
 8001f82:	e01b      	b.n	8001fbc <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f84:	897b      	ldrh	r3, [r7, #10]
 8001f86:	11db      	asrs	r3, r3, #7
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f003 0306 	and.w	r3, r3, #6
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f063 030f 	orn	r3, r3, #15
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	490e      	ldr	r1, [pc, #56]	; (8001fdc <I2C_MasterRequestWrite+0xe4>)
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f92b 	bl	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e010      	b.n	8001fd4 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fb2:	897b      	ldrh	r3, [r7, #10]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4907      	ldr	r1, [pc, #28]	; (8001fe0 <I2C_MasterRequestWrite+0xe8>)
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f91b 	bl	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	00010008 	.word	0x00010008
 8001fe0:	00010002 	.word	0x00010002

08001fe4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002008:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b08      	cmp	r3, #8
 800200e:	d006      	beq.n	800201e <I2C_MasterRequestRead+0x3a>
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d003      	beq.n	800201e <I2C_MasterRequestRead+0x3a>
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800201c:	d108      	bne.n	8002030 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e00b      	b.n	8002048 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	2b11      	cmp	r3, #17
 8002036:	d107      	bne.n	8002048 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002046:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f87b 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e06d      	b.n	8002140 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800206c:	d108      	bne.n	8002080 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800206e:	897b      	ldrh	r3, [r7, #10]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	b2da      	uxtb	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	e053      	b.n	8002128 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002080:	897b      	ldrh	r3, [r7, #10]
 8002082:	11db      	asrs	r3, r3, #7
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f003 0306 	and.w	r3, r3, #6
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f063 030f 	orn	r3, r3, #15
 8002090:	b2da      	uxtb	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	492a      	ldr	r1, [pc, #168]	; (8002148 <I2C_MasterRequestRead+0x164>)
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f8ad 	bl	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e048      	b.n	8002140 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020ae:	897b      	ldrh	r3, [r7, #10]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4923      	ldr	r1, [pc, #140]	; (800214c <I2C_MasterRequestRead+0x168>)
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f89d 	bl	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e038      	b.n	8002140 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f825 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e017      	b.n	8002140 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002110:	897b      	ldrh	r3, [r7, #10]
 8002112:	11db      	asrs	r3, r3, #7
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f003 0306 	and.w	r3, r3, #6
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f063 030e 	orn	r3, r3, #14
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <I2C_MasterRequestRead+0x168>)
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f865 	bl	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	00010008 	.word	0x00010008
 800214c:	00010002 	.word	0x00010002

08002150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002160:	e025      	b.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d021      	beq.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216a:	f7fe ffe3 	bl	8001134 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d302      	bcc.n	8002180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d116      	bne.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f043 0220 	orr.w	r2, r3, #32
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e023      	b.n	80021f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	0c1b      	lsrs	r3, r3, #16
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d10d      	bne.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4013      	ands	r3, r2
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	e00c      	b.n	80021ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4013      	ands	r3, r2
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d0b6      	beq.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800220c:	e051      	b.n	80022b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221c:	d123      	bne.n	8002266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002236:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f043 0204 	orr.w	r2, r3, #4
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e046      	b.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d021      	beq.n	80022b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800226e:	f7fe ff61 	bl	8001134 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	429a      	cmp	r2, r3
 800227c:	d302      	bcc.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d116      	bne.n	80022b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f043 0220 	orr.w	r2, r3, #32
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e020      	b.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d10c      	bne.n	80022d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	43da      	mvns	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4013      	ands	r3, r2
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bf14      	ite	ne
 80022ce:	2301      	movne	r3, #1
 80022d0:	2300      	moveq	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	e00b      	b.n	80022ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	43da      	mvns	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	4013      	ands	r3, r2
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf14      	ite	ne
 80022e8:	2301      	movne	r3, #1
 80022ea:	2300      	moveq	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d18d      	bne.n	800220e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002308:	e02d      	b.n	8002366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f8ce 	bl	80024ac <I2C_IsAcknowledgeFailed>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e02d      	b.n	8002376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d021      	beq.n	8002366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002322:	f7fe ff07 	bl	8001134 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	429a      	cmp	r2, r3
 8002330:	d302      	bcc.n	8002338 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d116      	bne.n	8002366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f043 0220 	orr.w	r2, r3, #32
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e007      	b.n	8002376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002370:	2b80      	cmp	r3, #128	; 0x80
 8002372:	d1ca      	bne.n	800230a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800238a:	e02d      	b.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f88d 	bl	80024ac <I2C_IsAcknowledgeFailed>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e02d      	b.n	80023f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a2:	d021      	beq.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a4:	f7fe fec6 	bl	8001134 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d302      	bcc.n	80023ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d116      	bne.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e007      	b.n	80023f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d1ca      	bne.n	800238c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800240c:	e042      	b.n	8002494 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b10      	cmp	r3, #16
 800241a:	d119      	bne.n	8002450 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0210 	mvn.w	r2, #16
 8002424:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e029      	b.n	80024a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002450:	f7fe fe70 	bl	8001134 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	429a      	cmp	r2, r3
 800245e:	d302      	bcc.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d116      	bne.n	8002494 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e007      	b.n	80024a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d1b5      	bne.n	800240e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c2:	d11b      	bne.n	80024fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f043 0204 	orr.w	r2, r3, #4
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e22d      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d075      	beq.n	8002616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800252a:	4ba3      	ldr	r3, [pc, #652]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b04      	cmp	r3, #4
 8002534:	d00c      	beq.n	8002550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002536:	4ba0      	ldr	r3, [pc, #640]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800253e:	2b08      	cmp	r3, #8
 8002540:	d112      	bne.n	8002568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002542:	4b9d      	ldr	r3, [pc, #628]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800254e:	d10b      	bne.n	8002568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	4b99      	ldr	r3, [pc, #612]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d05b      	beq.n	8002614 <HAL_RCC_OscConfig+0x108>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d157      	bne.n	8002614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e208      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002570:	d106      	bne.n	8002580 <HAL_RCC_OscConfig+0x74>
 8002572:	4b91      	ldr	r3, [pc, #580]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a90      	ldr	r2, [pc, #576]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0xb0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x98>
 800258a:	4b8b      	ldr	r3, [pc, #556]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a8a      	ldr	r2, [pc, #552]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b88      	ldr	r3, [pc, #544]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a87      	ldr	r2, [pc, #540]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0xb0>
 80025a4:	4b84      	ldr	r3, [pc, #528]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a83      	ldr	r2, [pc, #524]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b81      	ldr	r3, [pc, #516]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a80      	ldr	r2, [pc, #512]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe fdb6 	bl	8001134 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fdb2 	bl	8001134 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e1cd      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b76      	ldr	r3, [pc, #472]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0xc0>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fda2 	bl	8001134 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f4:	f7fe fd9e 	bl	8001134 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e1b9      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	4b6c      	ldr	r3, [pc, #432]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0xe8>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d063      	beq.n	80026ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002622:	4b65      	ldr	r3, [pc, #404]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262e:	4b62      	ldr	r3, [pc, #392]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002636:	2b08      	cmp	r3, #8
 8002638:	d11c      	bne.n	8002674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263a:	4b5f      	ldr	r3, [pc, #380]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d116      	bne.n	8002674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	4b5c      	ldr	r3, [pc, #368]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x152>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e18d      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	4b56      	ldr	r3, [pc, #344]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4952      	ldr	r1, [pc, #328]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	e03a      	b.n	80026ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267c:	4b4f      	ldr	r3, [pc, #316]	; (80027bc <HAL_RCC_OscConfig+0x2b0>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fe fd57 	bl	8001134 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268a:	f7fe fd53 	bl	8001134 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e16e      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	4b46      	ldr	r3, [pc, #280]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b43      	ldr	r3, [pc, #268]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4940      	ldr	r1, [pc, #256]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
 80026bc:	e015      	b.n	80026ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026be:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <HAL_RCC_OscConfig+0x2b0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe fd36 	bl	8001134 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026cc:	f7fe fd32 	bl	8001134 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e14d      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d030      	beq.n	8002758 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d016      	beq.n	800272c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fe:	4b30      	ldr	r3, [pc, #192]	; (80027c0 <HAL_RCC_OscConfig+0x2b4>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe fd16 	bl	8001134 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270c:	f7fe fd12 	bl	8001134 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e12d      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x200>
 800272a:	e015      	b.n	8002758 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272c:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_RCC_OscConfig+0x2b4>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe fcff 	bl	8001134 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273a:	f7fe fcfb 	bl	8001134 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e116      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 800274e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f0      	bne.n	800273a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80a0 	beq.w	80028a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10f      	bne.n	8002796 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002792:	2301      	movs	r3, #1
 8002794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_OscConfig+0x2b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d121      	bne.n	80027e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_RCC_OscConfig+0x2b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <HAL_RCC_OscConfig+0x2b8>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ae:	f7fe fcc1 	bl	8001134 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b4:	e011      	b.n	80027da <HAL_RCC_OscConfig+0x2ce>
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800
 80027bc:	42470000 	.word	0x42470000
 80027c0:	42470e80 	.word	0x42470e80
 80027c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c8:	f7fe fcb4 	bl	8001134 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0cf      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027da:	4b6a      	ldr	r3, [pc, #424]	; (8002984 <HAL_RCC_OscConfig+0x478>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d106      	bne.n	80027fc <HAL_RCC_OscConfig+0x2f0>
 80027ee:	4b66      	ldr	r3, [pc, #408]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a65      	ldr	r2, [pc, #404]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
 80027fa:	e01c      	b.n	8002836 <HAL_RCC_OscConfig+0x32a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b05      	cmp	r3, #5
 8002802:	d10c      	bne.n	800281e <HAL_RCC_OscConfig+0x312>
 8002804:	4b60      	ldr	r3, [pc, #384]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	4a5f      	ldr	r2, [pc, #380]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 800280a:	f043 0304 	orr.w	r3, r3, #4
 800280e:	6713      	str	r3, [r2, #112]	; 0x70
 8002810:	4b5d      	ldr	r3, [pc, #372]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	4a5c      	ldr	r2, [pc, #368]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6713      	str	r3, [r2, #112]	; 0x70
 800281c:	e00b      	b.n	8002836 <HAL_RCC_OscConfig+0x32a>
 800281e:	4b5a      	ldr	r3, [pc, #360]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	4a59      	ldr	r2, [pc, #356]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6713      	str	r3, [r2, #112]	; 0x70
 800282a:	4b57      	ldr	r3, [pc, #348]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a56      	ldr	r2, [pc, #344]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 8002830:	f023 0304 	bic.w	r3, r3, #4
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d015      	beq.n	800286a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283e:	f7fe fc79 	bl	8001134 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fe fc75 	bl	8001134 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e08e      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	4b4a      	ldr	r3, [pc, #296]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ee      	beq.n	8002846 <HAL_RCC_OscConfig+0x33a>
 8002868:	e014      	b.n	8002894 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286a:	f7fe fc63 	bl	8001134 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002870:	e00a      	b.n	8002888 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7fe fc5f 	bl	8001134 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e078      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002888:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1ee      	bne.n	8002872 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d105      	bne.n	80028a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289a:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a3a      	ldr	r2, [pc, #232]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 80028a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d064      	beq.n	8002978 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d05c      	beq.n	8002974 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d141      	bne.n	8002946 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c2:	4b32      	ldr	r3, [pc, #200]	; (800298c <HAL_RCC_OscConfig+0x480>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7fe fc34 	bl	8001134 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d0:	f7fe fc30 	bl	8001134 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e04b      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69da      	ldr	r2, [r3, #28]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	019b      	lsls	r3, r3, #6
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	085b      	lsrs	r3, r3, #1
 8002906:	3b01      	subs	r3, #1
 8002908:	041b      	lsls	r3, r3, #16
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	061b      	lsls	r3, r3, #24
 8002912:	491d      	ldr	r1, [pc, #116]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002918:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_RCC_OscConfig+0x480>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe fc09 	bl	8001134 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe fc05 	bl	8001134 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e020      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x41a>
 8002944:	e018      	b.n	8002978 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <HAL_RCC_OscConfig+0x480>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7fe fbf2 	bl	8001134 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe fbee 	bl	8001134 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e009      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_RCC_OscConfig+0x47c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x448>
 8002972:	e001      	b.n	8002978 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40007000 	.word	0x40007000
 8002988:	40023800 	.word	0x40023800
 800298c:	42470060 	.word	0x42470060

08002990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0ca      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_RCC_ClockConfig+0x1b4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d90c      	bls.n	80029cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <HAL_RCC_ClockConfig+0x1b4>)
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b62      	ldr	r3, [pc, #392]	; (8002b44 <HAL_RCC_ClockConfig+0x1b4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0b6      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e4:	4b58      	ldr	r3, [pc, #352]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a57      	ldr	r2, [pc, #348]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029fc:	4b52      	ldr	r3, [pc, #328]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a51      	ldr	r2, [pc, #324]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b4f      	ldr	r3, [pc, #316]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	494c      	ldr	r1, [pc, #304]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d044      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d119      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e07d      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4e:	4b3e      	ldr	r3, [pc, #248]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e06d      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5e:	4b3a      	ldr	r3, [pc, #232]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e065      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6e:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4933      	ldr	r1, [pc, #204]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a80:	f7fe fb58 	bl	8001134 <HAL_GetTick>
 8002a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a88:	f7fe fb54 	bl	8001134 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e04d      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 020c 	and.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d1eb      	bne.n	8002a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d20c      	bcs.n	8002ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e030      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae4:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4915      	ldr	r1, [pc, #84]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	490d      	ldr	r1, [pc, #52]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b16:	f000 f81d 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002b1a:	4601      	mov	r1, r0
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	5cd3      	ldrb	r3, [r2, r3]
 8002b2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b2e:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fe faba 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023c00 	.word	0x40023c00
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	08004638 	.word	0x08004638
 8002b50:	20000000 	.word	0x20000000

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	2300      	movs	r3, #0
 8002b64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b6a:	4b50      	ldr	r3, [pc, #320]	; (8002cac <HAL_RCC_GetSysClockFreq+0x158>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d007      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x32>
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d008      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x38>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 808d 	bne.w	8002c9a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b82:	60bb      	str	r3, [r7, #8]
       break;
 8002b84:	e08c      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b86:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b88:	60bb      	str	r3, [r7, #8]
      break;
 8002b8a:	e089      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b8c:	4b47      	ldr	r3, [pc, #284]	; (8002cac <HAL_RCC_GetSysClockFreq+0x158>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b96:	4b45      	ldr	r3, [pc, #276]	; (8002cac <HAL_RCC_GetSysClockFreq+0x158>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d023      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba2:	4b42      	ldr	r3, [pc, #264]	; (8002cac <HAL_RCC_GetSysClockFreq+0x158>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	f04f 0400 	mov.w	r4, #0
 8002bac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	ea03 0501 	and.w	r5, r3, r1
 8002bb8:	ea04 0602 	and.w	r6, r4, r2
 8002bbc:	4a3d      	ldr	r2, [pc, #244]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bbe:	fb02 f106 	mul.w	r1, r2, r6
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	fb02 f205 	mul.w	r2, r2, r5
 8002bc8:	440a      	add	r2, r1
 8002bca:	493a      	ldr	r1, [pc, #232]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bcc:	fba5 0101 	umull	r0, r1, r5, r1
 8002bd0:	1853      	adds	r3, r2, r1
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f04f 0400 	mov.w	r4, #0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4623      	mov	r3, r4
 8002bde:	f7fd fb4f 	bl	8000280 <__aeabi_uldivmod>
 8002be2:	4603      	mov	r3, r0
 8002be4:	460c      	mov	r4, r1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e049      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bea:	4b30      	ldr	r3, [pc, #192]	; (8002cac <HAL_RCC_GetSysClockFreq+0x158>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	099b      	lsrs	r3, r3, #6
 8002bf0:	f04f 0400 	mov.w	r4, #0
 8002bf4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	ea03 0501 	and.w	r5, r3, r1
 8002c00:	ea04 0602 	and.w	r6, r4, r2
 8002c04:	4629      	mov	r1, r5
 8002c06:	4632      	mov	r2, r6
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	f04f 0400 	mov.w	r4, #0
 8002c10:	0154      	lsls	r4, r2, #5
 8002c12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c16:	014b      	lsls	r3, r1, #5
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	1b49      	subs	r1, r1, r5
 8002c1e:	eb62 0206 	sbc.w	r2, r2, r6
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	f04f 0400 	mov.w	r4, #0
 8002c2a:	0194      	lsls	r4, r2, #6
 8002c2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c30:	018b      	lsls	r3, r1, #6
 8002c32:	1a5b      	subs	r3, r3, r1
 8002c34:	eb64 0402 	sbc.w	r4, r4, r2
 8002c38:	f04f 0100 	mov.w	r1, #0
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	00e2      	lsls	r2, r4, #3
 8002c42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c46:	00d9      	lsls	r1, r3, #3
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4614      	mov	r4, r2
 8002c4c:	195b      	adds	r3, r3, r5
 8002c4e:	eb44 0406 	adc.w	r4, r4, r6
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	02a2      	lsls	r2, r4, #10
 8002c5c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c60:	0299      	lsls	r1, r3, #10
 8002c62:	460b      	mov	r3, r1
 8002c64:	4614      	mov	r4, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	4621      	mov	r1, r4
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f04f 0400 	mov.w	r4, #0
 8002c70:	461a      	mov	r2, r3
 8002c72:	4623      	mov	r3, r4
 8002c74:	f7fd fb04 	bl	8000280 <__aeabi_uldivmod>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_RCC_GetSysClockFreq+0x158>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0c1b      	lsrs	r3, r3, #16
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	3301      	adds	r3, #1
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c96:	60bb      	str	r3, [r7, #8]
      break;
 8002c98:	e002      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c9c:	60bb      	str	r3, [r7, #8]
      break;
 8002c9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	00f42400 	.word	0x00f42400
 8002cb4:	017d7840 	.word	0x017d7840

08002cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000000 	.word	0x20000000

08002cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cd4:	f7ff fff0 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002cd8:	4601      	mov	r1, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0a9b      	lsrs	r3, r3, #10
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4a03      	ldr	r2, [pc, #12]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	08004648 	.word	0x08004648

08002cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cfc:	f7ff ffdc 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002d00:	4601      	mov	r1, r0
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0b5b      	lsrs	r3, r3, #13
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4a03      	ldr	r2, [pc, #12]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0e:	5cd3      	ldrb	r3, [r2, r3]
 8002d10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	08004648 	.word	0x08004648

08002d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e03f      	b.n	8002db2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe f88c 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	; 0x24
 8002d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f9b1 	bl	80030cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b088      	sub	sp, #32
 8002dbe:	af02      	add	r7, sp, #8
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	f040 8083 	bne.w	8002ee2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_UART_Transmit+0x2e>
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e07b      	b.n	8002ee4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Transmit+0x40>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e074      	b.n	8002ee4 <HAL_UART_Transmit+0x12a>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2221      	movs	r2, #33	; 0x21
 8002e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e10:	f7fe f990 	bl	8001134 <HAL_GetTick>
 8002e14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	88fa      	ldrh	r2, [r7, #6]
 8002e20:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e22:	e042      	b.n	8002eaa <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3a:	d122      	bne.n	8002e82 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2200      	movs	r2, #0
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f8f6 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e046      	b.n	8002ee4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e68:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	3302      	adds	r3, #2
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	e017      	b.n	8002eaa <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	e013      	b.n	8002eaa <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2180      	movs	r1, #128	; 0x80
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f8d3 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e023      	b.n	8002ee4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	60ba      	str	r2, [r7, #8]
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1b7      	bne.n	8002e24 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2140      	movs	r1, #64	; 0x40
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f8ba 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e00a      	b.n	8002ee4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e000      	b.n	8002ee4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002ee2:	2302      	movs	r3, #2
  }
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	f040 8090 	bne.w	800302e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_UART_Receive+0x2e>
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e088      	b.n	8003030 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_UART_Receive+0x40>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e081      	b.n	8003030 <HAL_UART_Receive+0x144>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2222      	movs	r2, #34	; 0x22
 8002f3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f42:	f7fe f8f7 	bl	8001134 <HAL_GetTick>
 8002f46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	88fa      	ldrh	r2, [r7, #6]
 8002f4c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	88fa      	ldrh	r2, [r7, #6]
 8002f52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f54:	e05c      	b.n	8003010 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	d12b      	bne.n	8002fc6 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2200      	movs	r2, #0
 8002f76:	2120      	movs	r1, #32
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f85d 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e053      	b.n	8003030 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10c      	bne.n	8002fae <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3302      	adds	r3, #2
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	e030      	b.n	8003010 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	e024      	b.n	8003010 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2120      	movs	r1, #32
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f831 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e027      	b.n	8003030 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d108      	bne.n	8002ffa <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	60ba      	str	r2, [r7, #8]
 8002ff4:	b2ca      	uxtb	r2, r1
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e00a      	b.n	8003010 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1c59      	adds	r1, r3, #1
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d19d      	bne.n	8002f56 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
  }
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003048:	e02c      	b.n	80030a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d028      	beq.n	80030a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <UART_WaitOnFlagUntilTimeout+0x30>
 8003058:	f7fe f86c 	bl	8001134 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	429a      	cmp	r2, r3
 8003066:	d21d      	bcs.n	80030a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003076:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e00f      	b.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4013      	ands	r3, r2
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d0c3      	beq.n	800304a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030cc:	b5b0      	push	{r4, r5, r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800310c:	f023 030c 	bic.w	r3, r3, #12
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	430b      	orrs	r3, r1
 8003118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003138:	f040 80e4 	bne.w	8003304 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4aab      	ldr	r2, [pc, #684]	; (80033f0 <UART_SetConfig+0x324>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d004      	beq.n	8003150 <UART_SetConfig+0x84>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4aaa      	ldr	r2, [pc, #680]	; (80033f4 <UART_SetConfig+0x328>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d16c      	bne.n	800322a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003150:	f7ff fdd2 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8003154:	4602      	mov	r2, r0
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	009a      	lsls	r2, r3, #2
 800315e:	441a      	add	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	4aa3      	ldr	r2, [pc, #652]	; (80033f8 <UART_SetConfig+0x32c>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	011c      	lsls	r4, r3, #4
 8003174:	f7ff fdc0 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8003178:	4602      	mov	r2, r0
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	009a      	lsls	r2, r3, #2
 8003182:	441a      	add	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	fbb2 f5f3 	udiv	r5, r2, r3
 800318e:	f7ff fdb3 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8003192:	4602      	mov	r2, r0
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	009a      	lsls	r2, r3, #2
 800319c:	441a      	add	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	4a93      	ldr	r2, [pc, #588]	; (80033f8 <UART_SetConfig+0x32c>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	2264      	movs	r2, #100	; 0x64
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	1aeb      	subs	r3, r5, r3
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	3332      	adds	r3, #50	; 0x32
 80031bc:	4a8e      	ldr	r2, [pc, #568]	; (80033f8 <UART_SetConfig+0x32c>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031ca:	441c      	add	r4, r3
 80031cc:	f7ff fd94 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	009a      	lsls	r2, r3, #2
 80031da:	441a      	add	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fbb2 f5f3 	udiv	r5, r2, r3
 80031e6:	f7ff fd87 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 80031ea:	4602      	mov	r2, r0
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	009a      	lsls	r2, r3, #2
 80031f4:	441a      	add	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	4a7d      	ldr	r2, [pc, #500]	; (80033f8 <UART_SetConfig+0x32c>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2264      	movs	r2, #100	; 0x64
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	1aeb      	subs	r3, r5, r3
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	3332      	adds	r3, #50	; 0x32
 8003214:	4a78      	ldr	r2, [pc, #480]	; (80033f8 <UART_SetConfig+0x32c>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	f003 0207 	and.w	r2, r3, #7
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4422      	add	r2, r4
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	e154      	b.n	80034d4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800322a:	f7ff fd51 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 800322e:	4602      	mov	r2, r0
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	441a      	add	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	4a6c      	ldr	r2, [pc, #432]	; (80033f8 <UART_SetConfig+0x32c>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	011c      	lsls	r4, r3, #4
 800324e:	f7ff fd3f 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 8003252:	4602      	mov	r2, r0
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009a      	lsls	r2, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fbb2 f5f3 	udiv	r5, r2, r3
 8003268:	f7ff fd32 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 800326c:	4602      	mov	r2, r0
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	009a      	lsls	r2, r3, #2
 8003276:	441a      	add	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003282:	4a5d      	ldr	r2, [pc, #372]	; (80033f8 <UART_SetConfig+0x32c>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	2264      	movs	r2, #100	; 0x64
 800328c:	fb02 f303 	mul.w	r3, r2, r3
 8003290:	1aeb      	subs	r3, r5, r3
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	3332      	adds	r3, #50	; 0x32
 8003296:	4a58      	ldr	r2, [pc, #352]	; (80033f8 <UART_SetConfig+0x32c>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032a4:	441c      	add	r4, r3
 80032a6:	f7ff fd13 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 80032aa:	4602      	mov	r2, r0
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009a      	lsls	r2, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fbb2 f5f3 	udiv	r5, r2, r3
 80032c0:	f7ff fd06 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	009a      	lsls	r2, r3, #2
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032da:	4a47      	ldr	r2, [pc, #284]	; (80033f8 <UART_SetConfig+0x32c>)
 80032dc:	fba2 2303 	umull	r2, r3, r2, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	2264      	movs	r2, #100	; 0x64
 80032e4:	fb02 f303 	mul.w	r3, r2, r3
 80032e8:	1aeb      	subs	r3, r5, r3
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	3332      	adds	r3, #50	; 0x32
 80032ee:	4a42      	ldr	r2, [pc, #264]	; (80033f8 <UART_SetConfig+0x32c>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	f003 0207 	and.w	r2, r3, #7
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4422      	add	r2, r4
 8003300:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003302:	e0e7      	b.n	80034d4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a39      	ldr	r2, [pc, #228]	; (80033f0 <UART_SetConfig+0x324>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d004      	beq.n	8003318 <UART_SetConfig+0x24c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a38      	ldr	r2, [pc, #224]	; (80033f4 <UART_SetConfig+0x328>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d171      	bne.n	80033fc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003318:	f7ff fcee 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 800331c:	4602      	mov	r2, r0
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	009a      	lsls	r2, r3, #2
 8003326:	441a      	add	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	4a31      	ldr	r2, [pc, #196]	; (80033f8 <UART_SetConfig+0x32c>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	011c      	lsls	r4, r3, #4
 800333c:	f7ff fcdc 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8003340:	4602      	mov	r2, r0
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	009a      	lsls	r2, r3, #2
 800334a:	441a      	add	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	fbb2 f5f3 	udiv	r5, r2, r3
 8003356:	f7ff fccf 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 800335a:	4602      	mov	r2, r0
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009a      	lsls	r2, r3, #2
 8003364:	441a      	add	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	4a21      	ldr	r2, [pc, #132]	; (80033f8 <UART_SetConfig+0x32c>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2264      	movs	r2, #100	; 0x64
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	1aeb      	subs	r3, r5, r3
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	3332      	adds	r3, #50	; 0x32
 8003384:	4a1c      	ldr	r2, [pc, #112]	; (80033f8 <UART_SetConfig+0x32c>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003390:	441c      	add	r4, r3
 8003392:	f7ff fcb1 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8003396:	4602      	mov	r2, r0
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009a      	lsls	r2, r3, #2
 80033a0:	441a      	add	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	fbb2 f5f3 	udiv	r5, r2, r3
 80033ac:	f7ff fca4 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009a      	lsls	r2, r3, #2
 80033ba:	441a      	add	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c6:	4a0c      	ldr	r2, [pc, #48]	; (80033f8 <UART_SetConfig+0x32c>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	2264      	movs	r2, #100	; 0x64
 80033d0:	fb02 f303 	mul.w	r3, r2, r3
 80033d4:	1aeb      	subs	r3, r5, r3
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	3332      	adds	r3, #50	; 0x32
 80033da:	4a07      	ldr	r2, [pc, #28]	; (80033f8 <UART_SetConfig+0x32c>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	f003 020f 	and.w	r2, r3, #15
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4422      	add	r2, r4
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	e071      	b.n	80034d4 <UART_SetConfig+0x408>
 80033f0:	40011000 	.word	0x40011000
 80033f4:	40011400 	.word	0x40011400
 80033f8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80033fc:	f7ff fc68 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 8003400:	4602      	mov	r2, r0
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	009a      	lsls	r2, r3, #2
 800340a:	441a      	add	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	4a31      	ldr	r2, [pc, #196]	; (80034dc <UART_SetConfig+0x410>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	011c      	lsls	r4, r3, #4
 8003420:	f7ff fc56 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 8003424:	4602      	mov	r2, r0
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	009a      	lsls	r2, r3, #2
 800342e:	441a      	add	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	fbb2 f5f3 	udiv	r5, r2, r3
 800343a:	f7ff fc49 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 800343e:	4602      	mov	r2, r0
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	009a      	lsls	r2, r3, #2
 8003448:	441a      	add	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	4a21      	ldr	r2, [pc, #132]	; (80034dc <UART_SetConfig+0x410>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2264      	movs	r2, #100	; 0x64
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	1aeb      	subs	r3, r5, r3
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	3332      	adds	r3, #50	; 0x32
 8003468:	4a1c      	ldr	r2, [pc, #112]	; (80034dc <UART_SetConfig+0x410>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003474:	441c      	add	r4, r3
 8003476:	f7ff fc2b 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 800347a:	4602      	mov	r2, r0
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	009a      	lsls	r2, r3, #2
 8003484:	441a      	add	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003490:	f7ff fc1e 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 8003494:	4602      	mov	r2, r0
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	009a      	lsls	r2, r3, #2
 800349e:	441a      	add	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034aa:	4a0c      	ldr	r2, [pc, #48]	; (80034dc <UART_SetConfig+0x410>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	2264      	movs	r2, #100	; 0x64
 80034b4:	fb02 f303 	mul.w	r3, r2, r3
 80034b8:	1aeb      	subs	r3, r5, r3
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	3332      	adds	r3, #50	; 0x32
 80034be:	4a07      	ldr	r2, [pc, #28]	; (80034dc <UART_SetConfig+0x410>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	f003 020f 	and.w	r2, r3, #15
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4422      	add	r2, r4
 80034d0:	609a      	str	r2, [r3, #8]
}
 80034d2:	e7ff      	b.n	80034d4 <UART_SetConfig+0x408>
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bdb0      	pop	{r4, r5, r7, pc}
 80034dc:	51eb851f 	.word	0x51eb851f

080034e0 <__errno>:
 80034e0:	4b01      	ldr	r3, [pc, #4]	; (80034e8 <__errno+0x8>)
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	2000000c 	.word	0x2000000c

080034ec <__libc_init_array>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	4e0d      	ldr	r6, [pc, #52]	; (8003524 <__libc_init_array+0x38>)
 80034f0:	4c0d      	ldr	r4, [pc, #52]	; (8003528 <__libc_init_array+0x3c>)
 80034f2:	1ba4      	subs	r4, r4, r6
 80034f4:	10a4      	asrs	r4, r4, #2
 80034f6:	2500      	movs	r5, #0
 80034f8:	42a5      	cmp	r5, r4
 80034fa:	d109      	bne.n	8003510 <__libc_init_array+0x24>
 80034fc:	4e0b      	ldr	r6, [pc, #44]	; (800352c <__libc_init_array+0x40>)
 80034fe:	4c0c      	ldr	r4, [pc, #48]	; (8003530 <__libc_init_array+0x44>)
 8003500:	f001 f81e 	bl	8004540 <_init>
 8003504:	1ba4      	subs	r4, r4, r6
 8003506:	10a4      	asrs	r4, r4, #2
 8003508:	2500      	movs	r5, #0
 800350a:	42a5      	cmp	r5, r4
 800350c:	d105      	bne.n	800351a <__libc_init_array+0x2e>
 800350e:	bd70      	pop	{r4, r5, r6, pc}
 8003510:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003514:	4798      	blx	r3
 8003516:	3501      	adds	r5, #1
 8003518:	e7ee      	b.n	80034f8 <__libc_init_array+0xc>
 800351a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800351e:	4798      	blx	r3
 8003520:	3501      	adds	r5, #1
 8003522:	e7f2      	b.n	800350a <__libc_init_array+0x1e>
 8003524:	080046f0 	.word	0x080046f0
 8003528:	080046f0 	.word	0x080046f0
 800352c:	080046f0 	.word	0x080046f0
 8003530:	080046f4 	.word	0x080046f4

08003534 <memset>:
 8003534:	4402      	add	r2, r0
 8003536:	4603      	mov	r3, r0
 8003538:	4293      	cmp	r3, r2
 800353a:	d100      	bne.n	800353e <memset+0xa>
 800353c:	4770      	bx	lr
 800353e:	f803 1b01 	strb.w	r1, [r3], #1
 8003542:	e7f9      	b.n	8003538 <memset+0x4>

08003544 <iprintf>:
 8003544:	b40f      	push	{r0, r1, r2, r3}
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <iprintf+0x2c>)
 8003548:	b513      	push	{r0, r1, r4, lr}
 800354a:	681c      	ldr	r4, [r3, #0]
 800354c:	b124      	cbz	r4, 8003558 <iprintf+0x14>
 800354e:	69a3      	ldr	r3, [r4, #24]
 8003550:	b913      	cbnz	r3, 8003558 <iprintf+0x14>
 8003552:	4620      	mov	r0, r4
 8003554:	f000 fad0 	bl	8003af8 <__sinit>
 8003558:	ab05      	add	r3, sp, #20
 800355a:	9a04      	ldr	r2, [sp, #16]
 800355c:	68a1      	ldr	r1, [r4, #8]
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	4620      	mov	r0, r4
 8003562:	f000 fc91 	bl	8003e88 <_vfiprintf_r>
 8003566:	b002      	add	sp, #8
 8003568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800356c:	b004      	add	sp, #16
 800356e:	4770      	bx	lr
 8003570:	2000000c 	.word	0x2000000c

08003574 <_puts_r>:
 8003574:	b570      	push	{r4, r5, r6, lr}
 8003576:	460e      	mov	r6, r1
 8003578:	4605      	mov	r5, r0
 800357a:	b118      	cbz	r0, 8003584 <_puts_r+0x10>
 800357c:	6983      	ldr	r3, [r0, #24]
 800357e:	b90b      	cbnz	r3, 8003584 <_puts_r+0x10>
 8003580:	f000 faba 	bl	8003af8 <__sinit>
 8003584:	69ab      	ldr	r3, [r5, #24]
 8003586:	68ac      	ldr	r4, [r5, #8]
 8003588:	b913      	cbnz	r3, 8003590 <_puts_r+0x1c>
 800358a:	4628      	mov	r0, r5
 800358c:	f000 fab4 	bl	8003af8 <__sinit>
 8003590:	4b23      	ldr	r3, [pc, #140]	; (8003620 <_puts_r+0xac>)
 8003592:	429c      	cmp	r4, r3
 8003594:	d117      	bne.n	80035c6 <_puts_r+0x52>
 8003596:	686c      	ldr	r4, [r5, #4]
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	071b      	lsls	r3, r3, #28
 800359c:	d51d      	bpl.n	80035da <_puts_r+0x66>
 800359e:	6923      	ldr	r3, [r4, #16]
 80035a0:	b1db      	cbz	r3, 80035da <_puts_r+0x66>
 80035a2:	3e01      	subs	r6, #1
 80035a4:	68a3      	ldr	r3, [r4, #8]
 80035a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035aa:	3b01      	subs	r3, #1
 80035ac:	60a3      	str	r3, [r4, #8]
 80035ae:	b9e9      	cbnz	r1, 80035ec <_puts_r+0x78>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	da2e      	bge.n	8003612 <_puts_r+0x9e>
 80035b4:	4622      	mov	r2, r4
 80035b6:	210a      	movs	r1, #10
 80035b8:	4628      	mov	r0, r5
 80035ba:	f000 f8ed 	bl	8003798 <__swbuf_r>
 80035be:	3001      	adds	r0, #1
 80035c0:	d011      	beq.n	80035e6 <_puts_r+0x72>
 80035c2:	200a      	movs	r0, #10
 80035c4:	e011      	b.n	80035ea <_puts_r+0x76>
 80035c6:	4b17      	ldr	r3, [pc, #92]	; (8003624 <_puts_r+0xb0>)
 80035c8:	429c      	cmp	r4, r3
 80035ca:	d101      	bne.n	80035d0 <_puts_r+0x5c>
 80035cc:	68ac      	ldr	r4, [r5, #8]
 80035ce:	e7e3      	b.n	8003598 <_puts_r+0x24>
 80035d0:	4b15      	ldr	r3, [pc, #84]	; (8003628 <_puts_r+0xb4>)
 80035d2:	429c      	cmp	r4, r3
 80035d4:	bf08      	it	eq
 80035d6:	68ec      	ldreq	r4, [r5, #12]
 80035d8:	e7de      	b.n	8003598 <_puts_r+0x24>
 80035da:	4621      	mov	r1, r4
 80035dc:	4628      	mov	r0, r5
 80035de:	f000 f92d 	bl	800383c <__swsetup_r>
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d0dd      	beq.n	80035a2 <_puts_r+0x2e>
 80035e6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ea:	bd70      	pop	{r4, r5, r6, pc}
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da04      	bge.n	80035fa <_puts_r+0x86>
 80035f0:	69a2      	ldr	r2, [r4, #24]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	dc06      	bgt.n	8003604 <_puts_r+0x90>
 80035f6:	290a      	cmp	r1, #10
 80035f8:	d004      	beq.n	8003604 <_puts_r+0x90>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	6022      	str	r2, [r4, #0]
 8003600:	7019      	strb	r1, [r3, #0]
 8003602:	e7cf      	b.n	80035a4 <_puts_r+0x30>
 8003604:	4622      	mov	r2, r4
 8003606:	4628      	mov	r0, r5
 8003608:	f000 f8c6 	bl	8003798 <__swbuf_r>
 800360c:	3001      	adds	r0, #1
 800360e:	d1c9      	bne.n	80035a4 <_puts_r+0x30>
 8003610:	e7e9      	b.n	80035e6 <_puts_r+0x72>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	200a      	movs	r0, #10
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	6022      	str	r2, [r4, #0]
 800361a:	7018      	strb	r0, [r3, #0]
 800361c:	e7e5      	b.n	80035ea <_puts_r+0x76>
 800361e:	bf00      	nop
 8003620:	08004674 	.word	0x08004674
 8003624:	08004694 	.word	0x08004694
 8003628:	08004654 	.word	0x08004654

0800362c <puts>:
 800362c:	4b02      	ldr	r3, [pc, #8]	; (8003638 <puts+0xc>)
 800362e:	4601      	mov	r1, r0
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	f7ff bf9f 	b.w	8003574 <_puts_r>
 8003636:	bf00      	nop
 8003638:	2000000c 	.word	0x2000000c

0800363c <setvbuf>:
 800363c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003640:	461d      	mov	r5, r3
 8003642:	4b51      	ldr	r3, [pc, #324]	; (8003788 <setvbuf+0x14c>)
 8003644:	681e      	ldr	r6, [r3, #0]
 8003646:	4604      	mov	r4, r0
 8003648:	460f      	mov	r7, r1
 800364a:	4690      	mov	r8, r2
 800364c:	b126      	cbz	r6, 8003658 <setvbuf+0x1c>
 800364e:	69b3      	ldr	r3, [r6, #24]
 8003650:	b913      	cbnz	r3, 8003658 <setvbuf+0x1c>
 8003652:	4630      	mov	r0, r6
 8003654:	f000 fa50 	bl	8003af8 <__sinit>
 8003658:	4b4c      	ldr	r3, [pc, #304]	; (800378c <setvbuf+0x150>)
 800365a:	429c      	cmp	r4, r3
 800365c:	d152      	bne.n	8003704 <setvbuf+0xc8>
 800365e:	6874      	ldr	r4, [r6, #4]
 8003660:	f1b8 0f02 	cmp.w	r8, #2
 8003664:	d006      	beq.n	8003674 <setvbuf+0x38>
 8003666:	f1b8 0f01 	cmp.w	r8, #1
 800366a:	f200 8089 	bhi.w	8003780 <setvbuf+0x144>
 800366e:	2d00      	cmp	r5, #0
 8003670:	f2c0 8086 	blt.w	8003780 <setvbuf+0x144>
 8003674:	4621      	mov	r1, r4
 8003676:	4630      	mov	r0, r6
 8003678:	f000 f9d4 	bl	8003a24 <_fflush_r>
 800367c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800367e:	b141      	cbz	r1, 8003692 <setvbuf+0x56>
 8003680:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003684:	4299      	cmp	r1, r3
 8003686:	d002      	beq.n	800368e <setvbuf+0x52>
 8003688:	4630      	mov	r0, r6
 800368a:	f000 fb2b 	bl	8003ce4 <_free_r>
 800368e:	2300      	movs	r3, #0
 8003690:	6363      	str	r3, [r4, #52]	; 0x34
 8003692:	2300      	movs	r3, #0
 8003694:	61a3      	str	r3, [r4, #24]
 8003696:	6063      	str	r3, [r4, #4]
 8003698:	89a3      	ldrh	r3, [r4, #12]
 800369a:	061b      	lsls	r3, r3, #24
 800369c:	d503      	bpl.n	80036a6 <setvbuf+0x6a>
 800369e:	6921      	ldr	r1, [r4, #16]
 80036a0:	4630      	mov	r0, r6
 80036a2:	f000 fb1f 	bl	8003ce4 <_free_r>
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80036ac:	f023 0303 	bic.w	r3, r3, #3
 80036b0:	f1b8 0f02 	cmp.w	r8, #2
 80036b4:	81a3      	strh	r3, [r4, #12]
 80036b6:	d05d      	beq.n	8003774 <setvbuf+0x138>
 80036b8:	ab01      	add	r3, sp, #4
 80036ba:	466a      	mov	r2, sp
 80036bc:	4621      	mov	r1, r4
 80036be:	4630      	mov	r0, r6
 80036c0:	f000 faa4 	bl	8003c0c <__swhatbuf_r>
 80036c4:	89a3      	ldrh	r3, [r4, #12]
 80036c6:	4318      	orrs	r0, r3
 80036c8:	81a0      	strh	r0, [r4, #12]
 80036ca:	bb2d      	cbnz	r5, 8003718 <setvbuf+0xdc>
 80036cc:	9d00      	ldr	r5, [sp, #0]
 80036ce:	4628      	mov	r0, r5
 80036d0:	f000 fb00 	bl	8003cd4 <malloc>
 80036d4:	4607      	mov	r7, r0
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d14e      	bne.n	8003778 <setvbuf+0x13c>
 80036da:	f8dd 9000 	ldr.w	r9, [sp]
 80036de:	45a9      	cmp	r9, r5
 80036e0:	d13c      	bne.n	800375c <setvbuf+0x120>
 80036e2:	f04f 30ff 	mov.w	r0, #4294967295
 80036e6:	89a3      	ldrh	r3, [r4, #12]
 80036e8:	f043 0302 	orr.w	r3, r3, #2
 80036ec:	81a3      	strh	r3, [r4, #12]
 80036ee:	2300      	movs	r3, #0
 80036f0:	60a3      	str	r3, [r4, #8]
 80036f2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036f6:	6023      	str	r3, [r4, #0]
 80036f8:	6123      	str	r3, [r4, #16]
 80036fa:	2301      	movs	r3, #1
 80036fc:	6163      	str	r3, [r4, #20]
 80036fe:	b003      	add	sp, #12
 8003700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003704:	4b22      	ldr	r3, [pc, #136]	; (8003790 <setvbuf+0x154>)
 8003706:	429c      	cmp	r4, r3
 8003708:	d101      	bne.n	800370e <setvbuf+0xd2>
 800370a:	68b4      	ldr	r4, [r6, #8]
 800370c:	e7a8      	b.n	8003660 <setvbuf+0x24>
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <setvbuf+0x158>)
 8003710:	429c      	cmp	r4, r3
 8003712:	bf08      	it	eq
 8003714:	68f4      	ldreq	r4, [r6, #12]
 8003716:	e7a3      	b.n	8003660 <setvbuf+0x24>
 8003718:	2f00      	cmp	r7, #0
 800371a:	d0d8      	beq.n	80036ce <setvbuf+0x92>
 800371c:	69b3      	ldr	r3, [r6, #24]
 800371e:	b913      	cbnz	r3, 8003726 <setvbuf+0xea>
 8003720:	4630      	mov	r0, r6
 8003722:	f000 f9e9 	bl	8003af8 <__sinit>
 8003726:	f1b8 0f01 	cmp.w	r8, #1
 800372a:	bf08      	it	eq
 800372c:	89a3      	ldrheq	r3, [r4, #12]
 800372e:	6027      	str	r7, [r4, #0]
 8003730:	bf04      	itt	eq
 8003732:	f043 0301 	orreq.w	r3, r3, #1
 8003736:	81a3      	strheq	r3, [r4, #12]
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	f013 0008 	ands.w	r0, r3, #8
 800373e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8003742:	d01b      	beq.n	800377c <setvbuf+0x140>
 8003744:	f013 0001 	ands.w	r0, r3, #1
 8003748:	bf18      	it	ne
 800374a:	426d      	negne	r5, r5
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	bf1d      	ittte	ne
 8003752:	60a3      	strne	r3, [r4, #8]
 8003754:	61a5      	strne	r5, [r4, #24]
 8003756:	4618      	movne	r0, r3
 8003758:	60a5      	streq	r5, [r4, #8]
 800375a:	e7d0      	b.n	80036fe <setvbuf+0xc2>
 800375c:	4648      	mov	r0, r9
 800375e:	f000 fab9 	bl	8003cd4 <malloc>
 8003762:	4607      	mov	r7, r0
 8003764:	2800      	cmp	r0, #0
 8003766:	d0bc      	beq.n	80036e2 <setvbuf+0xa6>
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376e:	81a3      	strh	r3, [r4, #12]
 8003770:	464d      	mov	r5, r9
 8003772:	e7d3      	b.n	800371c <setvbuf+0xe0>
 8003774:	2000      	movs	r0, #0
 8003776:	e7b6      	b.n	80036e6 <setvbuf+0xaa>
 8003778:	46a9      	mov	r9, r5
 800377a:	e7f5      	b.n	8003768 <setvbuf+0x12c>
 800377c:	60a0      	str	r0, [r4, #8]
 800377e:	e7be      	b.n	80036fe <setvbuf+0xc2>
 8003780:	f04f 30ff 	mov.w	r0, #4294967295
 8003784:	e7bb      	b.n	80036fe <setvbuf+0xc2>
 8003786:	bf00      	nop
 8003788:	2000000c 	.word	0x2000000c
 800378c:	08004674 	.word	0x08004674
 8003790:	08004694 	.word	0x08004694
 8003794:	08004654 	.word	0x08004654

08003798 <__swbuf_r>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	460e      	mov	r6, r1
 800379c:	4614      	mov	r4, r2
 800379e:	4605      	mov	r5, r0
 80037a0:	b118      	cbz	r0, 80037aa <__swbuf_r+0x12>
 80037a2:	6983      	ldr	r3, [r0, #24]
 80037a4:	b90b      	cbnz	r3, 80037aa <__swbuf_r+0x12>
 80037a6:	f000 f9a7 	bl	8003af8 <__sinit>
 80037aa:	4b21      	ldr	r3, [pc, #132]	; (8003830 <__swbuf_r+0x98>)
 80037ac:	429c      	cmp	r4, r3
 80037ae:	d12a      	bne.n	8003806 <__swbuf_r+0x6e>
 80037b0:	686c      	ldr	r4, [r5, #4]
 80037b2:	69a3      	ldr	r3, [r4, #24]
 80037b4:	60a3      	str	r3, [r4, #8]
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	071a      	lsls	r2, r3, #28
 80037ba:	d52e      	bpl.n	800381a <__swbuf_r+0x82>
 80037bc:	6923      	ldr	r3, [r4, #16]
 80037be:	b363      	cbz	r3, 800381a <__swbuf_r+0x82>
 80037c0:	6923      	ldr	r3, [r4, #16]
 80037c2:	6820      	ldr	r0, [r4, #0]
 80037c4:	1ac0      	subs	r0, r0, r3
 80037c6:	6963      	ldr	r3, [r4, #20]
 80037c8:	b2f6      	uxtb	r6, r6
 80037ca:	4283      	cmp	r3, r0
 80037cc:	4637      	mov	r7, r6
 80037ce:	dc04      	bgt.n	80037da <__swbuf_r+0x42>
 80037d0:	4621      	mov	r1, r4
 80037d2:	4628      	mov	r0, r5
 80037d4:	f000 f926 	bl	8003a24 <_fflush_r>
 80037d8:	bb28      	cbnz	r0, 8003826 <__swbuf_r+0x8e>
 80037da:	68a3      	ldr	r3, [r4, #8]
 80037dc:	3b01      	subs	r3, #1
 80037de:	60a3      	str	r3, [r4, #8]
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	6022      	str	r2, [r4, #0]
 80037e6:	701e      	strb	r6, [r3, #0]
 80037e8:	6963      	ldr	r3, [r4, #20]
 80037ea:	3001      	adds	r0, #1
 80037ec:	4283      	cmp	r3, r0
 80037ee:	d004      	beq.n	80037fa <__swbuf_r+0x62>
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	07db      	lsls	r3, r3, #31
 80037f4:	d519      	bpl.n	800382a <__swbuf_r+0x92>
 80037f6:	2e0a      	cmp	r6, #10
 80037f8:	d117      	bne.n	800382a <__swbuf_r+0x92>
 80037fa:	4621      	mov	r1, r4
 80037fc:	4628      	mov	r0, r5
 80037fe:	f000 f911 	bl	8003a24 <_fflush_r>
 8003802:	b190      	cbz	r0, 800382a <__swbuf_r+0x92>
 8003804:	e00f      	b.n	8003826 <__swbuf_r+0x8e>
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <__swbuf_r+0x9c>)
 8003808:	429c      	cmp	r4, r3
 800380a:	d101      	bne.n	8003810 <__swbuf_r+0x78>
 800380c:	68ac      	ldr	r4, [r5, #8]
 800380e:	e7d0      	b.n	80037b2 <__swbuf_r+0x1a>
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <__swbuf_r+0xa0>)
 8003812:	429c      	cmp	r4, r3
 8003814:	bf08      	it	eq
 8003816:	68ec      	ldreq	r4, [r5, #12]
 8003818:	e7cb      	b.n	80037b2 <__swbuf_r+0x1a>
 800381a:	4621      	mov	r1, r4
 800381c:	4628      	mov	r0, r5
 800381e:	f000 f80d 	bl	800383c <__swsetup_r>
 8003822:	2800      	cmp	r0, #0
 8003824:	d0cc      	beq.n	80037c0 <__swbuf_r+0x28>
 8003826:	f04f 37ff 	mov.w	r7, #4294967295
 800382a:	4638      	mov	r0, r7
 800382c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800382e:	bf00      	nop
 8003830:	08004674 	.word	0x08004674
 8003834:	08004694 	.word	0x08004694
 8003838:	08004654 	.word	0x08004654

0800383c <__swsetup_r>:
 800383c:	4b32      	ldr	r3, [pc, #200]	; (8003908 <__swsetup_r+0xcc>)
 800383e:	b570      	push	{r4, r5, r6, lr}
 8003840:	681d      	ldr	r5, [r3, #0]
 8003842:	4606      	mov	r6, r0
 8003844:	460c      	mov	r4, r1
 8003846:	b125      	cbz	r5, 8003852 <__swsetup_r+0x16>
 8003848:	69ab      	ldr	r3, [r5, #24]
 800384a:	b913      	cbnz	r3, 8003852 <__swsetup_r+0x16>
 800384c:	4628      	mov	r0, r5
 800384e:	f000 f953 	bl	8003af8 <__sinit>
 8003852:	4b2e      	ldr	r3, [pc, #184]	; (800390c <__swsetup_r+0xd0>)
 8003854:	429c      	cmp	r4, r3
 8003856:	d10f      	bne.n	8003878 <__swsetup_r+0x3c>
 8003858:	686c      	ldr	r4, [r5, #4]
 800385a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800385e:	b29a      	uxth	r2, r3
 8003860:	0715      	lsls	r5, r2, #28
 8003862:	d42c      	bmi.n	80038be <__swsetup_r+0x82>
 8003864:	06d0      	lsls	r0, r2, #27
 8003866:	d411      	bmi.n	800388c <__swsetup_r+0x50>
 8003868:	2209      	movs	r2, #9
 800386a:	6032      	str	r2, [r6, #0]
 800386c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003870:	81a3      	strh	r3, [r4, #12]
 8003872:	f04f 30ff 	mov.w	r0, #4294967295
 8003876:	e03e      	b.n	80038f6 <__swsetup_r+0xba>
 8003878:	4b25      	ldr	r3, [pc, #148]	; (8003910 <__swsetup_r+0xd4>)
 800387a:	429c      	cmp	r4, r3
 800387c:	d101      	bne.n	8003882 <__swsetup_r+0x46>
 800387e:	68ac      	ldr	r4, [r5, #8]
 8003880:	e7eb      	b.n	800385a <__swsetup_r+0x1e>
 8003882:	4b24      	ldr	r3, [pc, #144]	; (8003914 <__swsetup_r+0xd8>)
 8003884:	429c      	cmp	r4, r3
 8003886:	bf08      	it	eq
 8003888:	68ec      	ldreq	r4, [r5, #12]
 800388a:	e7e6      	b.n	800385a <__swsetup_r+0x1e>
 800388c:	0751      	lsls	r1, r2, #29
 800388e:	d512      	bpl.n	80038b6 <__swsetup_r+0x7a>
 8003890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003892:	b141      	cbz	r1, 80038a6 <__swsetup_r+0x6a>
 8003894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003898:	4299      	cmp	r1, r3
 800389a:	d002      	beq.n	80038a2 <__swsetup_r+0x66>
 800389c:	4630      	mov	r0, r6
 800389e:	f000 fa21 	bl	8003ce4 <_free_r>
 80038a2:	2300      	movs	r3, #0
 80038a4:	6363      	str	r3, [r4, #52]	; 0x34
 80038a6:	89a3      	ldrh	r3, [r4, #12]
 80038a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038ac:	81a3      	strh	r3, [r4, #12]
 80038ae:	2300      	movs	r3, #0
 80038b0:	6063      	str	r3, [r4, #4]
 80038b2:	6923      	ldr	r3, [r4, #16]
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	89a3      	ldrh	r3, [r4, #12]
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	81a3      	strh	r3, [r4, #12]
 80038be:	6923      	ldr	r3, [r4, #16]
 80038c0:	b94b      	cbnz	r3, 80038d6 <__swsetup_r+0x9a>
 80038c2:	89a3      	ldrh	r3, [r4, #12]
 80038c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038cc:	d003      	beq.n	80038d6 <__swsetup_r+0x9a>
 80038ce:	4621      	mov	r1, r4
 80038d0:	4630      	mov	r0, r6
 80038d2:	f000 f9bf 	bl	8003c54 <__smakebuf_r>
 80038d6:	89a2      	ldrh	r2, [r4, #12]
 80038d8:	f012 0301 	ands.w	r3, r2, #1
 80038dc:	d00c      	beq.n	80038f8 <__swsetup_r+0xbc>
 80038de:	2300      	movs	r3, #0
 80038e0:	60a3      	str	r3, [r4, #8]
 80038e2:	6963      	ldr	r3, [r4, #20]
 80038e4:	425b      	negs	r3, r3
 80038e6:	61a3      	str	r3, [r4, #24]
 80038e8:	6923      	ldr	r3, [r4, #16]
 80038ea:	b953      	cbnz	r3, 8003902 <__swsetup_r+0xc6>
 80038ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80038f4:	d1ba      	bne.n	800386c <__swsetup_r+0x30>
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
 80038f8:	0792      	lsls	r2, r2, #30
 80038fa:	bf58      	it	pl
 80038fc:	6963      	ldrpl	r3, [r4, #20]
 80038fe:	60a3      	str	r3, [r4, #8]
 8003900:	e7f2      	b.n	80038e8 <__swsetup_r+0xac>
 8003902:	2000      	movs	r0, #0
 8003904:	e7f7      	b.n	80038f6 <__swsetup_r+0xba>
 8003906:	bf00      	nop
 8003908:	2000000c 	.word	0x2000000c
 800390c:	08004674 	.word	0x08004674
 8003910:	08004694 	.word	0x08004694
 8003914:	08004654 	.word	0x08004654

08003918 <__sflush_r>:
 8003918:	898a      	ldrh	r2, [r1, #12]
 800391a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800391e:	4605      	mov	r5, r0
 8003920:	0710      	lsls	r0, r2, #28
 8003922:	460c      	mov	r4, r1
 8003924:	d458      	bmi.n	80039d8 <__sflush_r+0xc0>
 8003926:	684b      	ldr	r3, [r1, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	dc05      	bgt.n	8003938 <__sflush_r+0x20>
 800392c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	dc02      	bgt.n	8003938 <__sflush_r+0x20>
 8003932:	2000      	movs	r0, #0
 8003934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800393a:	2e00      	cmp	r6, #0
 800393c:	d0f9      	beq.n	8003932 <__sflush_r+0x1a>
 800393e:	2300      	movs	r3, #0
 8003940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003944:	682f      	ldr	r7, [r5, #0]
 8003946:	6a21      	ldr	r1, [r4, #32]
 8003948:	602b      	str	r3, [r5, #0]
 800394a:	d032      	beq.n	80039b2 <__sflush_r+0x9a>
 800394c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	075a      	lsls	r2, r3, #29
 8003952:	d505      	bpl.n	8003960 <__sflush_r+0x48>
 8003954:	6863      	ldr	r3, [r4, #4]
 8003956:	1ac0      	subs	r0, r0, r3
 8003958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800395a:	b10b      	cbz	r3, 8003960 <__sflush_r+0x48>
 800395c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800395e:	1ac0      	subs	r0, r0, r3
 8003960:	2300      	movs	r3, #0
 8003962:	4602      	mov	r2, r0
 8003964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003966:	6a21      	ldr	r1, [r4, #32]
 8003968:	4628      	mov	r0, r5
 800396a:	47b0      	blx	r6
 800396c:	1c43      	adds	r3, r0, #1
 800396e:	89a3      	ldrh	r3, [r4, #12]
 8003970:	d106      	bne.n	8003980 <__sflush_r+0x68>
 8003972:	6829      	ldr	r1, [r5, #0]
 8003974:	291d      	cmp	r1, #29
 8003976:	d848      	bhi.n	8003a0a <__sflush_r+0xf2>
 8003978:	4a29      	ldr	r2, [pc, #164]	; (8003a20 <__sflush_r+0x108>)
 800397a:	40ca      	lsrs	r2, r1
 800397c:	07d6      	lsls	r6, r2, #31
 800397e:	d544      	bpl.n	8003a0a <__sflush_r+0xf2>
 8003980:	2200      	movs	r2, #0
 8003982:	6062      	str	r2, [r4, #4]
 8003984:	04d9      	lsls	r1, r3, #19
 8003986:	6922      	ldr	r2, [r4, #16]
 8003988:	6022      	str	r2, [r4, #0]
 800398a:	d504      	bpl.n	8003996 <__sflush_r+0x7e>
 800398c:	1c42      	adds	r2, r0, #1
 800398e:	d101      	bne.n	8003994 <__sflush_r+0x7c>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	b903      	cbnz	r3, 8003996 <__sflush_r+0x7e>
 8003994:	6560      	str	r0, [r4, #84]	; 0x54
 8003996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003998:	602f      	str	r7, [r5, #0]
 800399a:	2900      	cmp	r1, #0
 800399c:	d0c9      	beq.n	8003932 <__sflush_r+0x1a>
 800399e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039a2:	4299      	cmp	r1, r3
 80039a4:	d002      	beq.n	80039ac <__sflush_r+0x94>
 80039a6:	4628      	mov	r0, r5
 80039a8:	f000 f99c 	bl	8003ce4 <_free_r>
 80039ac:	2000      	movs	r0, #0
 80039ae:	6360      	str	r0, [r4, #52]	; 0x34
 80039b0:	e7c0      	b.n	8003934 <__sflush_r+0x1c>
 80039b2:	2301      	movs	r3, #1
 80039b4:	4628      	mov	r0, r5
 80039b6:	47b0      	blx	r6
 80039b8:	1c41      	adds	r1, r0, #1
 80039ba:	d1c8      	bne.n	800394e <__sflush_r+0x36>
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0c5      	beq.n	800394e <__sflush_r+0x36>
 80039c2:	2b1d      	cmp	r3, #29
 80039c4:	d001      	beq.n	80039ca <__sflush_r+0xb2>
 80039c6:	2b16      	cmp	r3, #22
 80039c8:	d101      	bne.n	80039ce <__sflush_r+0xb6>
 80039ca:	602f      	str	r7, [r5, #0]
 80039cc:	e7b1      	b.n	8003932 <__sflush_r+0x1a>
 80039ce:	89a3      	ldrh	r3, [r4, #12]
 80039d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d4:	81a3      	strh	r3, [r4, #12]
 80039d6:	e7ad      	b.n	8003934 <__sflush_r+0x1c>
 80039d8:	690f      	ldr	r7, [r1, #16]
 80039da:	2f00      	cmp	r7, #0
 80039dc:	d0a9      	beq.n	8003932 <__sflush_r+0x1a>
 80039de:	0793      	lsls	r3, r2, #30
 80039e0:	680e      	ldr	r6, [r1, #0]
 80039e2:	bf08      	it	eq
 80039e4:	694b      	ldreq	r3, [r1, #20]
 80039e6:	600f      	str	r7, [r1, #0]
 80039e8:	bf18      	it	ne
 80039ea:	2300      	movne	r3, #0
 80039ec:	eba6 0807 	sub.w	r8, r6, r7
 80039f0:	608b      	str	r3, [r1, #8]
 80039f2:	f1b8 0f00 	cmp.w	r8, #0
 80039f6:	dd9c      	ble.n	8003932 <__sflush_r+0x1a>
 80039f8:	4643      	mov	r3, r8
 80039fa:	463a      	mov	r2, r7
 80039fc:	6a21      	ldr	r1, [r4, #32]
 80039fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a00:	4628      	mov	r0, r5
 8003a02:	47b0      	blx	r6
 8003a04:	2800      	cmp	r0, #0
 8003a06:	dc06      	bgt.n	8003a16 <__sflush_r+0xfe>
 8003a08:	89a3      	ldrh	r3, [r4, #12]
 8003a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a0e:	81a3      	strh	r3, [r4, #12]
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295
 8003a14:	e78e      	b.n	8003934 <__sflush_r+0x1c>
 8003a16:	4407      	add	r7, r0
 8003a18:	eba8 0800 	sub.w	r8, r8, r0
 8003a1c:	e7e9      	b.n	80039f2 <__sflush_r+0xda>
 8003a1e:	bf00      	nop
 8003a20:	20400001 	.word	0x20400001

08003a24 <_fflush_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	690b      	ldr	r3, [r1, #16]
 8003a28:	4605      	mov	r5, r0
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	b1db      	cbz	r3, 8003a66 <_fflush_r+0x42>
 8003a2e:	b118      	cbz	r0, 8003a38 <_fflush_r+0x14>
 8003a30:	6983      	ldr	r3, [r0, #24]
 8003a32:	b90b      	cbnz	r3, 8003a38 <_fflush_r+0x14>
 8003a34:	f000 f860 	bl	8003af8 <__sinit>
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <_fflush_r+0x48>)
 8003a3a:	429c      	cmp	r4, r3
 8003a3c:	d109      	bne.n	8003a52 <_fflush_r+0x2e>
 8003a3e:	686c      	ldr	r4, [r5, #4]
 8003a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a44:	b17b      	cbz	r3, 8003a66 <_fflush_r+0x42>
 8003a46:	4621      	mov	r1, r4
 8003a48:	4628      	mov	r0, r5
 8003a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a4e:	f7ff bf63 	b.w	8003918 <__sflush_r>
 8003a52:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <_fflush_r+0x4c>)
 8003a54:	429c      	cmp	r4, r3
 8003a56:	d101      	bne.n	8003a5c <_fflush_r+0x38>
 8003a58:	68ac      	ldr	r4, [r5, #8]
 8003a5a:	e7f1      	b.n	8003a40 <_fflush_r+0x1c>
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <_fflush_r+0x50>)
 8003a5e:	429c      	cmp	r4, r3
 8003a60:	bf08      	it	eq
 8003a62:	68ec      	ldreq	r4, [r5, #12]
 8003a64:	e7ec      	b.n	8003a40 <_fflush_r+0x1c>
 8003a66:	2000      	movs	r0, #0
 8003a68:	bd38      	pop	{r3, r4, r5, pc}
 8003a6a:	bf00      	nop
 8003a6c:	08004674 	.word	0x08004674
 8003a70:	08004694 	.word	0x08004694
 8003a74:	08004654 	.word	0x08004654

08003a78 <std>:
 8003a78:	2300      	movs	r3, #0
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a82:	6083      	str	r3, [r0, #8]
 8003a84:	8181      	strh	r1, [r0, #12]
 8003a86:	6643      	str	r3, [r0, #100]	; 0x64
 8003a88:	81c2      	strh	r2, [r0, #14]
 8003a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a8e:	6183      	str	r3, [r0, #24]
 8003a90:	4619      	mov	r1, r3
 8003a92:	2208      	movs	r2, #8
 8003a94:	305c      	adds	r0, #92	; 0x5c
 8003a96:	f7ff fd4d 	bl	8003534 <memset>
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <std+0x38>)
 8003a9c:	6263      	str	r3, [r4, #36]	; 0x24
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <std+0x3c>)
 8003aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <std+0x40>)
 8003aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <std+0x44>)
 8003aa8:	6224      	str	r4, [r4, #32]
 8003aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8003aac:	bd10      	pop	{r4, pc}
 8003aae:	bf00      	nop
 8003ab0:	080043e5 	.word	0x080043e5
 8003ab4:	08004407 	.word	0x08004407
 8003ab8:	0800443f 	.word	0x0800443f
 8003abc:	08004463 	.word	0x08004463

08003ac0 <_cleanup_r>:
 8003ac0:	4901      	ldr	r1, [pc, #4]	; (8003ac8 <_cleanup_r+0x8>)
 8003ac2:	f000 b885 	b.w	8003bd0 <_fwalk_reent>
 8003ac6:	bf00      	nop
 8003ac8:	08003a25 	.word	0x08003a25

08003acc <__sfmoreglue>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	1e4a      	subs	r2, r1, #1
 8003ad0:	2568      	movs	r5, #104	; 0x68
 8003ad2:	4355      	muls	r5, r2
 8003ad4:	460e      	mov	r6, r1
 8003ad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ada:	f000 f951 	bl	8003d80 <_malloc_r>
 8003ade:	4604      	mov	r4, r0
 8003ae0:	b140      	cbz	r0, 8003af4 <__sfmoreglue+0x28>
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	e9c0 1600 	strd	r1, r6, [r0]
 8003ae8:	300c      	adds	r0, #12
 8003aea:	60a0      	str	r0, [r4, #8]
 8003aec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003af0:	f7ff fd20 	bl	8003534 <memset>
 8003af4:	4620      	mov	r0, r4
 8003af6:	bd70      	pop	{r4, r5, r6, pc}

08003af8 <__sinit>:
 8003af8:	6983      	ldr	r3, [r0, #24]
 8003afa:	b510      	push	{r4, lr}
 8003afc:	4604      	mov	r4, r0
 8003afe:	bb33      	cbnz	r3, 8003b4e <__sinit+0x56>
 8003b00:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003b04:	6503      	str	r3, [r0, #80]	; 0x50
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <__sinit+0x58>)
 8003b08:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <__sinit+0x5c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6282      	str	r2, [r0, #40]	; 0x28
 8003b0e:	4298      	cmp	r0, r3
 8003b10:	bf04      	itt	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	6183      	streq	r3, [r0, #24]
 8003b16:	f000 f81f 	bl	8003b58 <__sfp>
 8003b1a:	6060      	str	r0, [r4, #4]
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f000 f81b 	bl	8003b58 <__sfp>
 8003b22:	60a0      	str	r0, [r4, #8]
 8003b24:	4620      	mov	r0, r4
 8003b26:	f000 f817 	bl	8003b58 <__sfp>
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	60e0      	str	r0, [r4, #12]
 8003b2e:	2104      	movs	r1, #4
 8003b30:	6860      	ldr	r0, [r4, #4]
 8003b32:	f7ff ffa1 	bl	8003a78 <std>
 8003b36:	2201      	movs	r2, #1
 8003b38:	2109      	movs	r1, #9
 8003b3a:	68a0      	ldr	r0, [r4, #8]
 8003b3c:	f7ff ff9c 	bl	8003a78 <std>
 8003b40:	2202      	movs	r2, #2
 8003b42:	2112      	movs	r1, #18
 8003b44:	68e0      	ldr	r0, [r4, #12]
 8003b46:	f7ff ff97 	bl	8003a78 <std>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61a3      	str	r3, [r4, #24]
 8003b4e:	bd10      	pop	{r4, pc}
 8003b50:	08004650 	.word	0x08004650
 8003b54:	08003ac1 	.word	0x08003ac1

08003b58 <__sfp>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <__sfp+0x70>)
 8003b5c:	681e      	ldr	r6, [r3, #0]
 8003b5e:	69b3      	ldr	r3, [r6, #24]
 8003b60:	4607      	mov	r7, r0
 8003b62:	b913      	cbnz	r3, 8003b6a <__sfp+0x12>
 8003b64:	4630      	mov	r0, r6
 8003b66:	f7ff ffc7 	bl	8003af8 <__sinit>
 8003b6a:	3648      	adds	r6, #72	; 0x48
 8003b6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	d503      	bpl.n	8003b7c <__sfp+0x24>
 8003b74:	6833      	ldr	r3, [r6, #0]
 8003b76:	b133      	cbz	r3, 8003b86 <__sfp+0x2e>
 8003b78:	6836      	ldr	r6, [r6, #0]
 8003b7a:	e7f7      	b.n	8003b6c <__sfp+0x14>
 8003b7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b80:	b16d      	cbz	r5, 8003b9e <__sfp+0x46>
 8003b82:	3468      	adds	r4, #104	; 0x68
 8003b84:	e7f4      	b.n	8003b70 <__sfp+0x18>
 8003b86:	2104      	movs	r1, #4
 8003b88:	4638      	mov	r0, r7
 8003b8a:	f7ff ff9f 	bl	8003acc <__sfmoreglue>
 8003b8e:	6030      	str	r0, [r6, #0]
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d1f1      	bne.n	8003b78 <__sfp+0x20>
 8003b94:	230c      	movs	r3, #12
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	4604      	mov	r4, r0
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <__sfp+0x74>)
 8003ba0:	6665      	str	r5, [r4, #100]	; 0x64
 8003ba2:	e9c4 5500 	strd	r5, r5, [r4]
 8003ba6:	60a5      	str	r5, [r4, #8]
 8003ba8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003bac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bb8:	f7ff fcbc 	bl	8003534 <memset>
 8003bbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003bc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003bc4:	e7e9      	b.n	8003b9a <__sfp+0x42>
 8003bc6:	bf00      	nop
 8003bc8:	08004650 	.word	0x08004650
 8003bcc:	ffff0001 	.word	0xffff0001

08003bd0 <_fwalk_reent>:
 8003bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bd4:	4680      	mov	r8, r0
 8003bd6:	4689      	mov	r9, r1
 8003bd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003bdc:	2600      	movs	r6, #0
 8003bde:	b914      	cbnz	r4, 8003be6 <_fwalk_reent+0x16>
 8003be0:	4630      	mov	r0, r6
 8003be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003be6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003bea:	3f01      	subs	r7, #1
 8003bec:	d501      	bpl.n	8003bf2 <_fwalk_reent+0x22>
 8003bee:	6824      	ldr	r4, [r4, #0]
 8003bf0:	e7f5      	b.n	8003bde <_fwalk_reent+0xe>
 8003bf2:	89ab      	ldrh	r3, [r5, #12]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d907      	bls.n	8003c08 <_fwalk_reent+0x38>
 8003bf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	d003      	beq.n	8003c08 <_fwalk_reent+0x38>
 8003c00:	4629      	mov	r1, r5
 8003c02:	4640      	mov	r0, r8
 8003c04:	47c8      	blx	r9
 8003c06:	4306      	orrs	r6, r0
 8003c08:	3568      	adds	r5, #104	; 0x68
 8003c0a:	e7ee      	b.n	8003bea <_fwalk_reent+0x1a>

08003c0c <__swhatbuf_r>:
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	460e      	mov	r6, r1
 8003c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c14:	2900      	cmp	r1, #0
 8003c16:	b096      	sub	sp, #88	; 0x58
 8003c18:	4614      	mov	r4, r2
 8003c1a:	461d      	mov	r5, r3
 8003c1c:	da07      	bge.n	8003c2e <__swhatbuf_r+0x22>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	602b      	str	r3, [r5, #0]
 8003c22:	89b3      	ldrh	r3, [r6, #12]
 8003c24:	061a      	lsls	r2, r3, #24
 8003c26:	d410      	bmi.n	8003c4a <__swhatbuf_r+0x3e>
 8003c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c2c:	e00e      	b.n	8003c4c <__swhatbuf_r+0x40>
 8003c2e:	466a      	mov	r2, sp
 8003c30:	f000 fc3e 	bl	80044b0 <_fstat_r>
 8003c34:	2800      	cmp	r0, #0
 8003c36:	dbf2      	blt.n	8003c1e <__swhatbuf_r+0x12>
 8003c38:	9a01      	ldr	r2, [sp, #4]
 8003c3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c42:	425a      	negs	r2, r3
 8003c44:	415a      	adcs	r2, r3
 8003c46:	602a      	str	r2, [r5, #0]
 8003c48:	e7ee      	b.n	8003c28 <__swhatbuf_r+0x1c>
 8003c4a:	2340      	movs	r3, #64	; 0x40
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	6023      	str	r3, [r4, #0]
 8003c50:	b016      	add	sp, #88	; 0x58
 8003c52:	bd70      	pop	{r4, r5, r6, pc}

08003c54 <__smakebuf_r>:
 8003c54:	898b      	ldrh	r3, [r1, #12]
 8003c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c58:	079d      	lsls	r5, r3, #30
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	d507      	bpl.n	8003c70 <__smakebuf_r+0x1c>
 8003c60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	6123      	str	r3, [r4, #16]
 8003c68:	2301      	movs	r3, #1
 8003c6a:	6163      	str	r3, [r4, #20]
 8003c6c:	b002      	add	sp, #8
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	ab01      	add	r3, sp, #4
 8003c72:	466a      	mov	r2, sp
 8003c74:	f7ff ffca 	bl	8003c0c <__swhatbuf_r>
 8003c78:	9900      	ldr	r1, [sp, #0]
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	4630      	mov	r0, r6
 8003c7e:	f000 f87f 	bl	8003d80 <_malloc_r>
 8003c82:	b948      	cbnz	r0, 8003c98 <__smakebuf_r+0x44>
 8003c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c88:	059a      	lsls	r2, r3, #22
 8003c8a:	d4ef      	bmi.n	8003c6c <__smakebuf_r+0x18>
 8003c8c:	f023 0303 	bic.w	r3, r3, #3
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	81a3      	strh	r3, [r4, #12]
 8003c96:	e7e3      	b.n	8003c60 <__smakebuf_r+0xc>
 8003c98:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <__smakebuf_r+0x7c>)
 8003c9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	6020      	str	r0, [r4, #0]
 8003ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca4:	81a3      	strh	r3, [r4, #12]
 8003ca6:	9b00      	ldr	r3, [sp, #0]
 8003ca8:	6163      	str	r3, [r4, #20]
 8003caa:	9b01      	ldr	r3, [sp, #4]
 8003cac:	6120      	str	r0, [r4, #16]
 8003cae:	b15b      	cbz	r3, 8003cc8 <__smakebuf_r+0x74>
 8003cb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	f000 fc0d 	bl	80044d4 <_isatty_r>
 8003cba:	b128      	cbz	r0, 8003cc8 <__smakebuf_r+0x74>
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	81a3      	strh	r3, [r4, #12]
 8003cc8:	89a3      	ldrh	r3, [r4, #12]
 8003cca:	431d      	orrs	r5, r3
 8003ccc:	81a5      	strh	r5, [r4, #12]
 8003cce:	e7cd      	b.n	8003c6c <__smakebuf_r+0x18>
 8003cd0:	08003ac1 	.word	0x08003ac1

08003cd4 <malloc>:
 8003cd4:	4b02      	ldr	r3, [pc, #8]	; (8003ce0 <malloc+0xc>)
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	f000 b851 	b.w	8003d80 <_malloc_r>
 8003cde:	bf00      	nop
 8003ce0:	2000000c 	.word	0x2000000c

08003ce4 <_free_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4605      	mov	r5, r0
 8003ce8:	2900      	cmp	r1, #0
 8003cea:	d045      	beq.n	8003d78 <_free_r+0x94>
 8003cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cf0:	1f0c      	subs	r4, r1, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bfb8      	it	lt
 8003cf6:	18e4      	addlt	r4, r4, r3
 8003cf8:	f000 fc0e 	bl	8004518 <__malloc_lock>
 8003cfc:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <_free_r+0x98>)
 8003cfe:	6813      	ldr	r3, [r2, #0]
 8003d00:	4610      	mov	r0, r2
 8003d02:	b933      	cbnz	r3, 8003d12 <_free_r+0x2e>
 8003d04:	6063      	str	r3, [r4, #4]
 8003d06:	6014      	str	r4, [r2, #0]
 8003d08:	4628      	mov	r0, r5
 8003d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d0e:	f000 bc04 	b.w	800451a <__malloc_unlock>
 8003d12:	42a3      	cmp	r3, r4
 8003d14:	d90c      	bls.n	8003d30 <_free_r+0x4c>
 8003d16:	6821      	ldr	r1, [r4, #0]
 8003d18:	1862      	adds	r2, r4, r1
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	bf04      	itt	eq
 8003d1e:	681a      	ldreq	r2, [r3, #0]
 8003d20:	685b      	ldreq	r3, [r3, #4]
 8003d22:	6063      	str	r3, [r4, #4]
 8003d24:	bf04      	itt	eq
 8003d26:	1852      	addeq	r2, r2, r1
 8003d28:	6022      	streq	r2, [r4, #0]
 8003d2a:	6004      	str	r4, [r0, #0]
 8003d2c:	e7ec      	b.n	8003d08 <_free_r+0x24>
 8003d2e:	4613      	mov	r3, r2
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	b10a      	cbz	r2, 8003d38 <_free_r+0x54>
 8003d34:	42a2      	cmp	r2, r4
 8003d36:	d9fa      	bls.n	8003d2e <_free_r+0x4a>
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	1858      	adds	r0, r3, r1
 8003d3c:	42a0      	cmp	r0, r4
 8003d3e:	d10b      	bne.n	8003d58 <_free_r+0x74>
 8003d40:	6820      	ldr	r0, [r4, #0]
 8003d42:	4401      	add	r1, r0
 8003d44:	1858      	adds	r0, r3, r1
 8003d46:	4282      	cmp	r2, r0
 8003d48:	6019      	str	r1, [r3, #0]
 8003d4a:	d1dd      	bne.n	8003d08 <_free_r+0x24>
 8003d4c:	6810      	ldr	r0, [r2, #0]
 8003d4e:	6852      	ldr	r2, [r2, #4]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	4401      	add	r1, r0
 8003d54:	6019      	str	r1, [r3, #0]
 8003d56:	e7d7      	b.n	8003d08 <_free_r+0x24>
 8003d58:	d902      	bls.n	8003d60 <_free_r+0x7c>
 8003d5a:	230c      	movs	r3, #12
 8003d5c:	602b      	str	r3, [r5, #0]
 8003d5e:	e7d3      	b.n	8003d08 <_free_r+0x24>
 8003d60:	6820      	ldr	r0, [r4, #0]
 8003d62:	1821      	adds	r1, r4, r0
 8003d64:	428a      	cmp	r2, r1
 8003d66:	bf04      	itt	eq
 8003d68:	6811      	ldreq	r1, [r2, #0]
 8003d6a:	6852      	ldreq	r2, [r2, #4]
 8003d6c:	6062      	str	r2, [r4, #4]
 8003d6e:	bf04      	itt	eq
 8003d70:	1809      	addeq	r1, r1, r0
 8003d72:	6021      	streq	r1, [r4, #0]
 8003d74:	605c      	str	r4, [r3, #4]
 8003d76:	e7c7      	b.n	8003d08 <_free_r+0x24>
 8003d78:	bd38      	pop	{r3, r4, r5, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000094 	.word	0x20000094

08003d80 <_malloc_r>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	1ccd      	adds	r5, r1, #3
 8003d84:	f025 0503 	bic.w	r5, r5, #3
 8003d88:	3508      	adds	r5, #8
 8003d8a:	2d0c      	cmp	r5, #12
 8003d8c:	bf38      	it	cc
 8003d8e:	250c      	movcc	r5, #12
 8003d90:	2d00      	cmp	r5, #0
 8003d92:	4606      	mov	r6, r0
 8003d94:	db01      	blt.n	8003d9a <_malloc_r+0x1a>
 8003d96:	42a9      	cmp	r1, r5
 8003d98:	d903      	bls.n	8003da2 <_malloc_r+0x22>
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	6033      	str	r3, [r6, #0]
 8003d9e:	2000      	movs	r0, #0
 8003da0:	bd70      	pop	{r4, r5, r6, pc}
 8003da2:	f000 fbb9 	bl	8004518 <__malloc_lock>
 8003da6:	4a21      	ldr	r2, [pc, #132]	; (8003e2c <_malloc_r+0xac>)
 8003da8:	6814      	ldr	r4, [r2, #0]
 8003daa:	4621      	mov	r1, r4
 8003dac:	b991      	cbnz	r1, 8003dd4 <_malloc_r+0x54>
 8003dae:	4c20      	ldr	r4, [pc, #128]	; (8003e30 <_malloc_r+0xb0>)
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	b91b      	cbnz	r3, 8003dbc <_malloc_r+0x3c>
 8003db4:	4630      	mov	r0, r6
 8003db6:	f000 fb05 	bl	80043c4 <_sbrk_r>
 8003dba:	6020      	str	r0, [r4, #0]
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	f000 fb00 	bl	80043c4 <_sbrk_r>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d124      	bne.n	8003e12 <_malloc_r+0x92>
 8003dc8:	230c      	movs	r3, #12
 8003dca:	6033      	str	r3, [r6, #0]
 8003dcc:	4630      	mov	r0, r6
 8003dce:	f000 fba4 	bl	800451a <__malloc_unlock>
 8003dd2:	e7e4      	b.n	8003d9e <_malloc_r+0x1e>
 8003dd4:	680b      	ldr	r3, [r1, #0]
 8003dd6:	1b5b      	subs	r3, r3, r5
 8003dd8:	d418      	bmi.n	8003e0c <_malloc_r+0x8c>
 8003dda:	2b0b      	cmp	r3, #11
 8003ddc:	d90f      	bls.n	8003dfe <_malloc_r+0x7e>
 8003dde:	600b      	str	r3, [r1, #0]
 8003de0:	50cd      	str	r5, [r1, r3]
 8003de2:	18cc      	adds	r4, r1, r3
 8003de4:	4630      	mov	r0, r6
 8003de6:	f000 fb98 	bl	800451a <__malloc_unlock>
 8003dea:	f104 000b 	add.w	r0, r4, #11
 8003dee:	1d23      	adds	r3, r4, #4
 8003df0:	f020 0007 	bic.w	r0, r0, #7
 8003df4:	1ac3      	subs	r3, r0, r3
 8003df6:	d0d3      	beq.n	8003da0 <_malloc_r+0x20>
 8003df8:	425a      	negs	r2, r3
 8003dfa:	50e2      	str	r2, [r4, r3]
 8003dfc:	e7d0      	b.n	8003da0 <_malloc_r+0x20>
 8003dfe:	428c      	cmp	r4, r1
 8003e00:	684b      	ldr	r3, [r1, #4]
 8003e02:	bf16      	itet	ne
 8003e04:	6063      	strne	r3, [r4, #4]
 8003e06:	6013      	streq	r3, [r2, #0]
 8003e08:	460c      	movne	r4, r1
 8003e0a:	e7eb      	b.n	8003de4 <_malloc_r+0x64>
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	6849      	ldr	r1, [r1, #4]
 8003e10:	e7cc      	b.n	8003dac <_malloc_r+0x2c>
 8003e12:	1cc4      	adds	r4, r0, #3
 8003e14:	f024 0403 	bic.w	r4, r4, #3
 8003e18:	42a0      	cmp	r0, r4
 8003e1a:	d005      	beq.n	8003e28 <_malloc_r+0xa8>
 8003e1c:	1a21      	subs	r1, r4, r0
 8003e1e:	4630      	mov	r0, r6
 8003e20:	f000 fad0 	bl	80043c4 <_sbrk_r>
 8003e24:	3001      	adds	r0, #1
 8003e26:	d0cf      	beq.n	8003dc8 <_malloc_r+0x48>
 8003e28:	6025      	str	r5, [r4, #0]
 8003e2a:	e7db      	b.n	8003de4 <_malloc_r+0x64>
 8003e2c:	20000094 	.word	0x20000094
 8003e30:	20000098 	.word	0x20000098

08003e34 <__sfputc_r>:
 8003e34:	6893      	ldr	r3, [r2, #8]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	b410      	push	{r4}
 8003e3c:	6093      	str	r3, [r2, #8]
 8003e3e:	da08      	bge.n	8003e52 <__sfputc_r+0x1e>
 8003e40:	6994      	ldr	r4, [r2, #24]
 8003e42:	42a3      	cmp	r3, r4
 8003e44:	db01      	blt.n	8003e4a <__sfputc_r+0x16>
 8003e46:	290a      	cmp	r1, #10
 8003e48:	d103      	bne.n	8003e52 <__sfputc_r+0x1e>
 8003e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e4e:	f7ff bca3 	b.w	8003798 <__swbuf_r>
 8003e52:	6813      	ldr	r3, [r2, #0]
 8003e54:	1c58      	adds	r0, r3, #1
 8003e56:	6010      	str	r0, [r2, #0]
 8003e58:	7019      	strb	r1, [r3, #0]
 8003e5a:	4608      	mov	r0, r1
 8003e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <__sfputs_r>:
 8003e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e64:	4606      	mov	r6, r0
 8003e66:	460f      	mov	r7, r1
 8003e68:	4614      	mov	r4, r2
 8003e6a:	18d5      	adds	r5, r2, r3
 8003e6c:	42ac      	cmp	r4, r5
 8003e6e:	d101      	bne.n	8003e74 <__sfputs_r+0x12>
 8003e70:	2000      	movs	r0, #0
 8003e72:	e007      	b.n	8003e84 <__sfputs_r+0x22>
 8003e74:	463a      	mov	r2, r7
 8003e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f7ff ffda 	bl	8003e34 <__sfputc_r>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d1f3      	bne.n	8003e6c <__sfputs_r+0xa>
 8003e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e88 <_vfiprintf_r>:
 8003e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	b09d      	sub	sp, #116	; 0x74
 8003e90:	4617      	mov	r7, r2
 8003e92:	461d      	mov	r5, r3
 8003e94:	4606      	mov	r6, r0
 8003e96:	b118      	cbz	r0, 8003ea0 <_vfiprintf_r+0x18>
 8003e98:	6983      	ldr	r3, [r0, #24]
 8003e9a:	b90b      	cbnz	r3, 8003ea0 <_vfiprintf_r+0x18>
 8003e9c:	f7ff fe2c 	bl	8003af8 <__sinit>
 8003ea0:	4b7c      	ldr	r3, [pc, #496]	; (8004094 <_vfiprintf_r+0x20c>)
 8003ea2:	429c      	cmp	r4, r3
 8003ea4:	d158      	bne.n	8003f58 <_vfiprintf_r+0xd0>
 8003ea6:	6874      	ldr	r4, [r6, #4]
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	0718      	lsls	r0, r3, #28
 8003eac:	d55e      	bpl.n	8003f6c <_vfiprintf_r+0xe4>
 8003eae:	6923      	ldr	r3, [r4, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d05b      	beq.n	8003f6c <_vfiprintf_r+0xe4>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb8:	2320      	movs	r3, #32
 8003eba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ebe:	2330      	movs	r3, #48	; 0x30
 8003ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ec4:	9503      	str	r5, [sp, #12]
 8003ec6:	f04f 0b01 	mov.w	fp, #1
 8003eca:	46b8      	mov	r8, r7
 8003ecc:	4645      	mov	r5, r8
 8003ece:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ed2:	b10b      	cbz	r3, 8003ed8 <_vfiprintf_r+0x50>
 8003ed4:	2b25      	cmp	r3, #37	; 0x25
 8003ed6:	d154      	bne.n	8003f82 <_vfiprintf_r+0xfa>
 8003ed8:	ebb8 0a07 	subs.w	sl, r8, r7
 8003edc:	d00b      	beq.n	8003ef6 <_vfiprintf_r+0x6e>
 8003ede:	4653      	mov	r3, sl
 8003ee0:	463a      	mov	r2, r7
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	f7ff ffbc 	bl	8003e62 <__sfputs_r>
 8003eea:	3001      	adds	r0, #1
 8003eec:	f000 80c2 	beq.w	8004074 <_vfiprintf_r+0x1ec>
 8003ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ef2:	4453      	add	r3, sl
 8003ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ef6:	f898 3000 	ldrb.w	r3, [r8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 80ba 	beq.w	8004074 <_vfiprintf_r+0x1ec>
 8003f00:	2300      	movs	r3, #0
 8003f02:	f04f 32ff 	mov.w	r2, #4294967295
 8003f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f0a:	9304      	str	r3, [sp, #16]
 8003f0c:	9307      	str	r3, [sp, #28]
 8003f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f12:	931a      	str	r3, [sp, #104]	; 0x68
 8003f14:	46a8      	mov	r8, r5
 8003f16:	2205      	movs	r2, #5
 8003f18:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003f1c:	485e      	ldr	r0, [pc, #376]	; (8004098 <_vfiprintf_r+0x210>)
 8003f1e:	f7fc f95f 	bl	80001e0 <memchr>
 8003f22:	9b04      	ldr	r3, [sp, #16]
 8003f24:	bb78      	cbnz	r0, 8003f86 <_vfiprintf_r+0xfe>
 8003f26:	06d9      	lsls	r1, r3, #27
 8003f28:	bf44      	itt	mi
 8003f2a:	2220      	movmi	r2, #32
 8003f2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f30:	071a      	lsls	r2, r3, #28
 8003f32:	bf44      	itt	mi
 8003f34:	222b      	movmi	r2, #43	; 0x2b
 8003f36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f3a:	782a      	ldrb	r2, [r5, #0]
 8003f3c:	2a2a      	cmp	r2, #42	; 0x2a
 8003f3e:	d02a      	beq.n	8003f96 <_vfiprintf_r+0x10e>
 8003f40:	9a07      	ldr	r2, [sp, #28]
 8003f42:	46a8      	mov	r8, r5
 8003f44:	2000      	movs	r0, #0
 8003f46:	250a      	movs	r5, #10
 8003f48:	4641      	mov	r1, r8
 8003f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f4e:	3b30      	subs	r3, #48	; 0x30
 8003f50:	2b09      	cmp	r3, #9
 8003f52:	d969      	bls.n	8004028 <_vfiprintf_r+0x1a0>
 8003f54:	b360      	cbz	r0, 8003fb0 <_vfiprintf_r+0x128>
 8003f56:	e024      	b.n	8003fa2 <_vfiprintf_r+0x11a>
 8003f58:	4b50      	ldr	r3, [pc, #320]	; (800409c <_vfiprintf_r+0x214>)
 8003f5a:	429c      	cmp	r4, r3
 8003f5c:	d101      	bne.n	8003f62 <_vfiprintf_r+0xda>
 8003f5e:	68b4      	ldr	r4, [r6, #8]
 8003f60:	e7a2      	b.n	8003ea8 <_vfiprintf_r+0x20>
 8003f62:	4b4f      	ldr	r3, [pc, #316]	; (80040a0 <_vfiprintf_r+0x218>)
 8003f64:	429c      	cmp	r4, r3
 8003f66:	bf08      	it	eq
 8003f68:	68f4      	ldreq	r4, [r6, #12]
 8003f6a:	e79d      	b.n	8003ea8 <_vfiprintf_r+0x20>
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4630      	mov	r0, r6
 8003f70:	f7ff fc64 	bl	800383c <__swsetup_r>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	d09d      	beq.n	8003eb4 <_vfiprintf_r+0x2c>
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	b01d      	add	sp, #116	; 0x74
 8003f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f82:	46a8      	mov	r8, r5
 8003f84:	e7a2      	b.n	8003ecc <_vfiprintf_r+0x44>
 8003f86:	4a44      	ldr	r2, [pc, #272]	; (8004098 <_vfiprintf_r+0x210>)
 8003f88:	1a80      	subs	r0, r0, r2
 8003f8a:	fa0b f000 	lsl.w	r0, fp, r0
 8003f8e:	4318      	orrs	r0, r3
 8003f90:	9004      	str	r0, [sp, #16]
 8003f92:	4645      	mov	r5, r8
 8003f94:	e7be      	b.n	8003f14 <_vfiprintf_r+0x8c>
 8003f96:	9a03      	ldr	r2, [sp, #12]
 8003f98:	1d11      	adds	r1, r2, #4
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	9103      	str	r1, [sp, #12]
 8003f9e:	2a00      	cmp	r2, #0
 8003fa0:	db01      	blt.n	8003fa6 <_vfiprintf_r+0x11e>
 8003fa2:	9207      	str	r2, [sp, #28]
 8003fa4:	e004      	b.n	8003fb0 <_vfiprintf_r+0x128>
 8003fa6:	4252      	negs	r2, r2
 8003fa8:	f043 0302 	orr.w	r3, r3, #2
 8003fac:	9207      	str	r2, [sp, #28]
 8003fae:	9304      	str	r3, [sp, #16]
 8003fb0:	f898 3000 	ldrb.w	r3, [r8]
 8003fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8003fb6:	d10e      	bne.n	8003fd6 <_vfiprintf_r+0x14e>
 8003fb8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8003fbe:	d138      	bne.n	8004032 <_vfiprintf_r+0x1aa>
 8003fc0:	9b03      	ldr	r3, [sp, #12]
 8003fc2:	1d1a      	adds	r2, r3, #4
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	9203      	str	r2, [sp, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bfb8      	it	lt
 8003fcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fd0:	f108 0802 	add.w	r8, r8, #2
 8003fd4:	9305      	str	r3, [sp, #20]
 8003fd6:	4d33      	ldr	r5, [pc, #204]	; (80040a4 <_vfiprintf_r+0x21c>)
 8003fd8:	f898 1000 	ldrb.w	r1, [r8]
 8003fdc:	2203      	movs	r2, #3
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f7fc f8fe 	bl	80001e0 <memchr>
 8003fe4:	b140      	cbz	r0, 8003ff8 <_vfiprintf_r+0x170>
 8003fe6:	2340      	movs	r3, #64	; 0x40
 8003fe8:	1b40      	subs	r0, r0, r5
 8003fea:	fa03 f000 	lsl.w	r0, r3, r0
 8003fee:	9b04      	ldr	r3, [sp, #16]
 8003ff0:	4303      	orrs	r3, r0
 8003ff2:	f108 0801 	add.w	r8, r8, #1
 8003ff6:	9304      	str	r3, [sp, #16]
 8003ff8:	f898 1000 	ldrb.w	r1, [r8]
 8003ffc:	482a      	ldr	r0, [pc, #168]	; (80040a8 <_vfiprintf_r+0x220>)
 8003ffe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004002:	2206      	movs	r2, #6
 8004004:	f108 0701 	add.w	r7, r8, #1
 8004008:	f7fc f8ea 	bl	80001e0 <memchr>
 800400c:	2800      	cmp	r0, #0
 800400e:	d037      	beq.n	8004080 <_vfiprintf_r+0x1f8>
 8004010:	4b26      	ldr	r3, [pc, #152]	; (80040ac <_vfiprintf_r+0x224>)
 8004012:	bb1b      	cbnz	r3, 800405c <_vfiprintf_r+0x1d4>
 8004014:	9b03      	ldr	r3, [sp, #12]
 8004016:	3307      	adds	r3, #7
 8004018:	f023 0307 	bic.w	r3, r3, #7
 800401c:	3308      	adds	r3, #8
 800401e:	9303      	str	r3, [sp, #12]
 8004020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004022:	444b      	add	r3, r9
 8004024:	9309      	str	r3, [sp, #36]	; 0x24
 8004026:	e750      	b.n	8003eca <_vfiprintf_r+0x42>
 8004028:	fb05 3202 	mla	r2, r5, r2, r3
 800402c:	2001      	movs	r0, #1
 800402e:	4688      	mov	r8, r1
 8004030:	e78a      	b.n	8003f48 <_vfiprintf_r+0xc0>
 8004032:	2300      	movs	r3, #0
 8004034:	f108 0801 	add.w	r8, r8, #1
 8004038:	9305      	str	r3, [sp, #20]
 800403a:	4619      	mov	r1, r3
 800403c:	250a      	movs	r5, #10
 800403e:	4640      	mov	r0, r8
 8004040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004044:	3a30      	subs	r2, #48	; 0x30
 8004046:	2a09      	cmp	r2, #9
 8004048:	d903      	bls.n	8004052 <_vfiprintf_r+0x1ca>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0c3      	beq.n	8003fd6 <_vfiprintf_r+0x14e>
 800404e:	9105      	str	r1, [sp, #20]
 8004050:	e7c1      	b.n	8003fd6 <_vfiprintf_r+0x14e>
 8004052:	fb05 2101 	mla	r1, r5, r1, r2
 8004056:	2301      	movs	r3, #1
 8004058:	4680      	mov	r8, r0
 800405a:	e7f0      	b.n	800403e <_vfiprintf_r+0x1b6>
 800405c:	ab03      	add	r3, sp, #12
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	4622      	mov	r2, r4
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <_vfiprintf_r+0x228>)
 8004064:	a904      	add	r1, sp, #16
 8004066:	4630      	mov	r0, r6
 8004068:	f3af 8000 	nop.w
 800406c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004070:	4681      	mov	r9, r0
 8004072:	d1d5      	bne.n	8004020 <_vfiprintf_r+0x198>
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	065b      	lsls	r3, r3, #25
 8004078:	f53f af7e 	bmi.w	8003f78 <_vfiprintf_r+0xf0>
 800407c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800407e:	e77d      	b.n	8003f7c <_vfiprintf_r+0xf4>
 8004080:	ab03      	add	r3, sp, #12
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	4622      	mov	r2, r4
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <_vfiprintf_r+0x228>)
 8004088:	a904      	add	r1, sp, #16
 800408a:	4630      	mov	r0, r6
 800408c:	f000 f888 	bl	80041a0 <_printf_i>
 8004090:	e7ec      	b.n	800406c <_vfiprintf_r+0x1e4>
 8004092:	bf00      	nop
 8004094:	08004674 	.word	0x08004674
 8004098:	080046b4 	.word	0x080046b4
 800409c:	08004694 	.word	0x08004694
 80040a0:	08004654 	.word	0x08004654
 80040a4:	080046ba 	.word	0x080046ba
 80040a8:	080046be 	.word	0x080046be
 80040ac:	00000000 	.word	0x00000000
 80040b0:	08003e63 	.word	0x08003e63

080040b4 <_printf_common>:
 80040b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b8:	4691      	mov	r9, r2
 80040ba:	461f      	mov	r7, r3
 80040bc:	688a      	ldr	r2, [r1, #8]
 80040be:	690b      	ldr	r3, [r1, #16]
 80040c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040c4:	4293      	cmp	r3, r2
 80040c6:	bfb8      	it	lt
 80040c8:	4613      	movlt	r3, r2
 80040ca:	f8c9 3000 	str.w	r3, [r9]
 80040ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040d2:	4606      	mov	r6, r0
 80040d4:	460c      	mov	r4, r1
 80040d6:	b112      	cbz	r2, 80040de <_printf_common+0x2a>
 80040d8:	3301      	adds	r3, #1
 80040da:	f8c9 3000 	str.w	r3, [r9]
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	0699      	lsls	r1, r3, #26
 80040e2:	bf42      	ittt	mi
 80040e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80040e8:	3302      	addmi	r3, #2
 80040ea:	f8c9 3000 	strmi.w	r3, [r9]
 80040ee:	6825      	ldr	r5, [r4, #0]
 80040f0:	f015 0506 	ands.w	r5, r5, #6
 80040f4:	d107      	bne.n	8004106 <_printf_common+0x52>
 80040f6:	f104 0a19 	add.w	sl, r4, #25
 80040fa:	68e3      	ldr	r3, [r4, #12]
 80040fc:	f8d9 2000 	ldr.w	r2, [r9]
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	42ab      	cmp	r3, r5
 8004104:	dc28      	bgt.n	8004158 <_printf_common+0xa4>
 8004106:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	3300      	adds	r3, #0
 800410e:	bf18      	it	ne
 8004110:	2301      	movne	r3, #1
 8004112:	0692      	lsls	r2, r2, #26
 8004114:	d42d      	bmi.n	8004172 <_printf_common+0xbe>
 8004116:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800411a:	4639      	mov	r1, r7
 800411c:	4630      	mov	r0, r6
 800411e:	47c0      	blx	r8
 8004120:	3001      	adds	r0, #1
 8004122:	d020      	beq.n	8004166 <_printf_common+0xb2>
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	68e5      	ldr	r5, [r4, #12]
 8004128:	f8d9 2000 	ldr.w	r2, [r9]
 800412c:	f003 0306 	and.w	r3, r3, #6
 8004130:	2b04      	cmp	r3, #4
 8004132:	bf08      	it	eq
 8004134:	1aad      	subeq	r5, r5, r2
 8004136:	68a3      	ldr	r3, [r4, #8]
 8004138:	6922      	ldr	r2, [r4, #16]
 800413a:	bf0c      	ite	eq
 800413c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004140:	2500      	movne	r5, #0
 8004142:	4293      	cmp	r3, r2
 8004144:	bfc4      	itt	gt
 8004146:	1a9b      	subgt	r3, r3, r2
 8004148:	18ed      	addgt	r5, r5, r3
 800414a:	f04f 0900 	mov.w	r9, #0
 800414e:	341a      	adds	r4, #26
 8004150:	454d      	cmp	r5, r9
 8004152:	d11a      	bne.n	800418a <_printf_common+0xd6>
 8004154:	2000      	movs	r0, #0
 8004156:	e008      	b.n	800416a <_printf_common+0xb6>
 8004158:	2301      	movs	r3, #1
 800415a:	4652      	mov	r2, sl
 800415c:	4639      	mov	r1, r7
 800415e:	4630      	mov	r0, r6
 8004160:	47c0      	blx	r8
 8004162:	3001      	adds	r0, #1
 8004164:	d103      	bne.n	800416e <_printf_common+0xba>
 8004166:	f04f 30ff 	mov.w	r0, #4294967295
 800416a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800416e:	3501      	adds	r5, #1
 8004170:	e7c3      	b.n	80040fa <_printf_common+0x46>
 8004172:	18e1      	adds	r1, r4, r3
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	2030      	movs	r0, #48	; 0x30
 8004178:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800417c:	4422      	add	r2, r4
 800417e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004182:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004186:	3302      	adds	r3, #2
 8004188:	e7c5      	b.n	8004116 <_printf_common+0x62>
 800418a:	2301      	movs	r3, #1
 800418c:	4622      	mov	r2, r4
 800418e:	4639      	mov	r1, r7
 8004190:	4630      	mov	r0, r6
 8004192:	47c0      	blx	r8
 8004194:	3001      	adds	r0, #1
 8004196:	d0e6      	beq.n	8004166 <_printf_common+0xb2>
 8004198:	f109 0901 	add.w	r9, r9, #1
 800419c:	e7d8      	b.n	8004150 <_printf_common+0x9c>
	...

080041a0 <_printf_i>:
 80041a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80041a8:	460c      	mov	r4, r1
 80041aa:	7e09      	ldrb	r1, [r1, #24]
 80041ac:	b085      	sub	sp, #20
 80041ae:	296e      	cmp	r1, #110	; 0x6e
 80041b0:	4617      	mov	r7, r2
 80041b2:	4606      	mov	r6, r0
 80041b4:	4698      	mov	r8, r3
 80041b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041b8:	f000 80b3 	beq.w	8004322 <_printf_i+0x182>
 80041bc:	d822      	bhi.n	8004204 <_printf_i+0x64>
 80041be:	2963      	cmp	r1, #99	; 0x63
 80041c0:	d036      	beq.n	8004230 <_printf_i+0x90>
 80041c2:	d80a      	bhi.n	80041da <_printf_i+0x3a>
 80041c4:	2900      	cmp	r1, #0
 80041c6:	f000 80b9 	beq.w	800433c <_printf_i+0x19c>
 80041ca:	2958      	cmp	r1, #88	; 0x58
 80041cc:	f000 8083 	beq.w	80042d6 <_printf_i+0x136>
 80041d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80041d8:	e032      	b.n	8004240 <_printf_i+0xa0>
 80041da:	2964      	cmp	r1, #100	; 0x64
 80041dc:	d001      	beq.n	80041e2 <_printf_i+0x42>
 80041de:	2969      	cmp	r1, #105	; 0x69
 80041e0:	d1f6      	bne.n	80041d0 <_printf_i+0x30>
 80041e2:	6820      	ldr	r0, [r4, #0]
 80041e4:	6813      	ldr	r3, [r2, #0]
 80041e6:	0605      	lsls	r5, r0, #24
 80041e8:	f103 0104 	add.w	r1, r3, #4
 80041ec:	d52a      	bpl.n	8004244 <_printf_i+0xa4>
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6011      	str	r1, [r2, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	da03      	bge.n	80041fe <_printf_i+0x5e>
 80041f6:	222d      	movs	r2, #45	; 0x2d
 80041f8:	425b      	negs	r3, r3
 80041fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80041fe:	486f      	ldr	r0, [pc, #444]	; (80043bc <_printf_i+0x21c>)
 8004200:	220a      	movs	r2, #10
 8004202:	e039      	b.n	8004278 <_printf_i+0xd8>
 8004204:	2973      	cmp	r1, #115	; 0x73
 8004206:	f000 809d 	beq.w	8004344 <_printf_i+0x1a4>
 800420a:	d808      	bhi.n	800421e <_printf_i+0x7e>
 800420c:	296f      	cmp	r1, #111	; 0x6f
 800420e:	d020      	beq.n	8004252 <_printf_i+0xb2>
 8004210:	2970      	cmp	r1, #112	; 0x70
 8004212:	d1dd      	bne.n	80041d0 <_printf_i+0x30>
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	f043 0320 	orr.w	r3, r3, #32
 800421a:	6023      	str	r3, [r4, #0]
 800421c:	e003      	b.n	8004226 <_printf_i+0x86>
 800421e:	2975      	cmp	r1, #117	; 0x75
 8004220:	d017      	beq.n	8004252 <_printf_i+0xb2>
 8004222:	2978      	cmp	r1, #120	; 0x78
 8004224:	d1d4      	bne.n	80041d0 <_printf_i+0x30>
 8004226:	2378      	movs	r3, #120	; 0x78
 8004228:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800422c:	4864      	ldr	r0, [pc, #400]	; (80043c0 <_printf_i+0x220>)
 800422e:	e055      	b.n	80042dc <_printf_i+0x13c>
 8004230:	6813      	ldr	r3, [r2, #0]
 8004232:	1d19      	adds	r1, r3, #4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6011      	str	r1, [r2, #0]
 8004238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800423c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004240:	2301      	movs	r3, #1
 8004242:	e08c      	b.n	800435e <_printf_i+0x1be>
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6011      	str	r1, [r2, #0]
 8004248:	f010 0f40 	tst.w	r0, #64	; 0x40
 800424c:	bf18      	it	ne
 800424e:	b21b      	sxthne	r3, r3
 8004250:	e7cf      	b.n	80041f2 <_printf_i+0x52>
 8004252:	6813      	ldr	r3, [r2, #0]
 8004254:	6825      	ldr	r5, [r4, #0]
 8004256:	1d18      	adds	r0, r3, #4
 8004258:	6010      	str	r0, [r2, #0]
 800425a:	0628      	lsls	r0, r5, #24
 800425c:	d501      	bpl.n	8004262 <_printf_i+0xc2>
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	e002      	b.n	8004268 <_printf_i+0xc8>
 8004262:	0668      	lsls	r0, r5, #25
 8004264:	d5fb      	bpl.n	800425e <_printf_i+0xbe>
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	4854      	ldr	r0, [pc, #336]	; (80043bc <_printf_i+0x21c>)
 800426a:	296f      	cmp	r1, #111	; 0x6f
 800426c:	bf14      	ite	ne
 800426e:	220a      	movne	r2, #10
 8004270:	2208      	moveq	r2, #8
 8004272:	2100      	movs	r1, #0
 8004274:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004278:	6865      	ldr	r5, [r4, #4]
 800427a:	60a5      	str	r5, [r4, #8]
 800427c:	2d00      	cmp	r5, #0
 800427e:	f2c0 8095 	blt.w	80043ac <_printf_i+0x20c>
 8004282:	6821      	ldr	r1, [r4, #0]
 8004284:	f021 0104 	bic.w	r1, r1, #4
 8004288:	6021      	str	r1, [r4, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d13d      	bne.n	800430a <_printf_i+0x16a>
 800428e:	2d00      	cmp	r5, #0
 8004290:	f040 808e 	bne.w	80043b0 <_printf_i+0x210>
 8004294:	4665      	mov	r5, ip
 8004296:	2a08      	cmp	r2, #8
 8004298:	d10b      	bne.n	80042b2 <_printf_i+0x112>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	07db      	lsls	r3, r3, #31
 800429e:	d508      	bpl.n	80042b2 <_printf_i+0x112>
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	6862      	ldr	r2, [r4, #4]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	bfde      	ittt	le
 80042a8:	2330      	movle	r3, #48	; 0x30
 80042aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042b2:	ebac 0305 	sub.w	r3, ip, r5
 80042b6:	6123      	str	r3, [r4, #16]
 80042b8:	f8cd 8000 	str.w	r8, [sp]
 80042bc:	463b      	mov	r3, r7
 80042be:	aa03      	add	r2, sp, #12
 80042c0:	4621      	mov	r1, r4
 80042c2:	4630      	mov	r0, r6
 80042c4:	f7ff fef6 	bl	80040b4 <_printf_common>
 80042c8:	3001      	adds	r0, #1
 80042ca:	d14d      	bne.n	8004368 <_printf_i+0x1c8>
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	b005      	add	sp, #20
 80042d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042d6:	4839      	ldr	r0, [pc, #228]	; (80043bc <_printf_i+0x21c>)
 80042d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80042dc:	6813      	ldr	r3, [r2, #0]
 80042de:	6821      	ldr	r1, [r4, #0]
 80042e0:	1d1d      	adds	r5, r3, #4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6015      	str	r5, [r2, #0]
 80042e6:	060a      	lsls	r2, r1, #24
 80042e8:	d50b      	bpl.n	8004302 <_printf_i+0x162>
 80042ea:	07ca      	lsls	r2, r1, #31
 80042ec:	bf44      	itt	mi
 80042ee:	f041 0120 	orrmi.w	r1, r1, #32
 80042f2:	6021      	strmi	r1, [r4, #0]
 80042f4:	b91b      	cbnz	r3, 80042fe <_printf_i+0x15e>
 80042f6:	6822      	ldr	r2, [r4, #0]
 80042f8:	f022 0220 	bic.w	r2, r2, #32
 80042fc:	6022      	str	r2, [r4, #0]
 80042fe:	2210      	movs	r2, #16
 8004300:	e7b7      	b.n	8004272 <_printf_i+0xd2>
 8004302:	064d      	lsls	r5, r1, #25
 8004304:	bf48      	it	mi
 8004306:	b29b      	uxthmi	r3, r3
 8004308:	e7ef      	b.n	80042ea <_printf_i+0x14a>
 800430a:	4665      	mov	r5, ip
 800430c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004310:	fb02 3311 	mls	r3, r2, r1, r3
 8004314:	5cc3      	ldrb	r3, [r0, r3]
 8004316:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800431a:	460b      	mov	r3, r1
 800431c:	2900      	cmp	r1, #0
 800431e:	d1f5      	bne.n	800430c <_printf_i+0x16c>
 8004320:	e7b9      	b.n	8004296 <_printf_i+0xf6>
 8004322:	6813      	ldr	r3, [r2, #0]
 8004324:	6825      	ldr	r5, [r4, #0]
 8004326:	6961      	ldr	r1, [r4, #20]
 8004328:	1d18      	adds	r0, r3, #4
 800432a:	6010      	str	r0, [r2, #0]
 800432c:	0628      	lsls	r0, r5, #24
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	d501      	bpl.n	8004336 <_printf_i+0x196>
 8004332:	6019      	str	r1, [r3, #0]
 8004334:	e002      	b.n	800433c <_printf_i+0x19c>
 8004336:	066a      	lsls	r2, r5, #25
 8004338:	d5fb      	bpl.n	8004332 <_printf_i+0x192>
 800433a:	8019      	strh	r1, [r3, #0]
 800433c:	2300      	movs	r3, #0
 800433e:	6123      	str	r3, [r4, #16]
 8004340:	4665      	mov	r5, ip
 8004342:	e7b9      	b.n	80042b8 <_printf_i+0x118>
 8004344:	6813      	ldr	r3, [r2, #0]
 8004346:	1d19      	adds	r1, r3, #4
 8004348:	6011      	str	r1, [r2, #0]
 800434a:	681d      	ldr	r5, [r3, #0]
 800434c:	6862      	ldr	r2, [r4, #4]
 800434e:	2100      	movs	r1, #0
 8004350:	4628      	mov	r0, r5
 8004352:	f7fb ff45 	bl	80001e0 <memchr>
 8004356:	b108      	cbz	r0, 800435c <_printf_i+0x1bc>
 8004358:	1b40      	subs	r0, r0, r5
 800435a:	6060      	str	r0, [r4, #4]
 800435c:	6863      	ldr	r3, [r4, #4]
 800435e:	6123      	str	r3, [r4, #16]
 8004360:	2300      	movs	r3, #0
 8004362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004366:	e7a7      	b.n	80042b8 <_printf_i+0x118>
 8004368:	6923      	ldr	r3, [r4, #16]
 800436a:	462a      	mov	r2, r5
 800436c:	4639      	mov	r1, r7
 800436e:	4630      	mov	r0, r6
 8004370:	47c0      	blx	r8
 8004372:	3001      	adds	r0, #1
 8004374:	d0aa      	beq.n	80042cc <_printf_i+0x12c>
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	079b      	lsls	r3, r3, #30
 800437a:	d413      	bmi.n	80043a4 <_printf_i+0x204>
 800437c:	68e0      	ldr	r0, [r4, #12]
 800437e:	9b03      	ldr	r3, [sp, #12]
 8004380:	4298      	cmp	r0, r3
 8004382:	bfb8      	it	lt
 8004384:	4618      	movlt	r0, r3
 8004386:	e7a3      	b.n	80042d0 <_printf_i+0x130>
 8004388:	2301      	movs	r3, #1
 800438a:	464a      	mov	r2, r9
 800438c:	4639      	mov	r1, r7
 800438e:	4630      	mov	r0, r6
 8004390:	47c0      	blx	r8
 8004392:	3001      	adds	r0, #1
 8004394:	d09a      	beq.n	80042cc <_printf_i+0x12c>
 8004396:	3501      	adds	r5, #1
 8004398:	68e3      	ldr	r3, [r4, #12]
 800439a:	9a03      	ldr	r2, [sp, #12]
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	42ab      	cmp	r3, r5
 80043a0:	dcf2      	bgt.n	8004388 <_printf_i+0x1e8>
 80043a2:	e7eb      	b.n	800437c <_printf_i+0x1dc>
 80043a4:	2500      	movs	r5, #0
 80043a6:	f104 0919 	add.w	r9, r4, #25
 80043aa:	e7f5      	b.n	8004398 <_printf_i+0x1f8>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ac      	bne.n	800430a <_printf_i+0x16a>
 80043b0:	7803      	ldrb	r3, [r0, #0]
 80043b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043ba:	e76c      	b.n	8004296 <_printf_i+0xf6>
 80043bc:	080046c5 	.word	0x080046c5
 80043c0:	080046d6 	.word	0x080046d6

080043c4 <_sbrk_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4c06      	ldr	r4, [pc, #24]	; (80043e0 <_sbrk_r+0x1c>)
 80043c8:	2300      	movs	r3, #0
 80043ca:	4605      	mov	r5, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	6023      	str	r3, [r4, #0]
 80043d0:	f7fc fdbe 	bl	8000f50 <_sbrk>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d102      	bne.n	80043de <_sbrk_r+0x1a>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	b103      	cbz	r3, 80043de <_sbrk_r+0x1a>
 80043dc:	602b      	str	r3, [r5, #0]
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	20000138 	.word	0x20000138

080043e4 <__sread>:
 80043e4:	b510      	push	{r4, lr}
 80043e6:	460c      	mov	r4, r1
 80043e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ec:	f000 f896 	bl	800451c <_read_r>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	bfab      	itete	ge
 80043f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043f6:	89a3      	ldrhlt	r3, [r4, #12]
 80043f8:	181b      	addge	r3, r3, r0
 80043fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043fe:	bfac      	ite	ge
 8004400:	6563      	strge	r3, [r4, #84]	; 0x54
 8004402:	81a3      	strhlt	r3, [r4, #12]
 8004404:	bd10      	pop	{r4, pc}

08004406 <__swrite>:
 8004406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800440a:	461f      	mov	r7, r3
 800440c:	898b      	ldrh	r3, [r1, #12]
 800440e:	05db      	lsls	r3, r3, #23
 8004410:	4605      	mov	r5, r0
 8004412:	460c      	mov	r4, r1
 8004414:	4616      	mov	r6, r2
 8004416:	d505      	bpl.n	8004424 <__swrite+0x1e>
 8004418:	2302      	movs	r3, #2
 800441a:	2200      	movs	r2, #0
 800441c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004420:	f000 f868 	bl	80044f4 <_lseek_r>
 8004424:	89a3      	ldrh	r3, [r4, #12]
 8004426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800442a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800442e:	81a3      	strh	r3, [r4, #12]
 8004430:	4632      	mov	r2, r6
 8004432:	463b      	mov	r3, r7
 8004434:	4628      	mov	r0, r5
 8004436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800443a:	f000 b817 	b.w	800446c <_write_r>

0800443e <__sseek>:
 800443e:	b510      	push	{r4, lr}
 8004440:	460c      	mov	r4, r1
 8004442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004446:	f000 f855 	bl	80044f4 <_lseek_r>
 800444a:	1c43      	adds	r3, r0, #1
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	bf15      	itete	ne
 8004450:	6560      	strne	r0, [r4, #84]	; 0x54
 8004452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800445a:	81a3      	strheq	r3, [r4, #12]
 800445c:	bf18      	it	ne
 800445e:	81a3      	strhne	r3, [r4, #12]
 8004460:	bd10      	pop	{r4, pc}

08004462 <__sclose>:
 8004462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004466:	f000 b813 	b.w	8004490 <_close_r>
	...

0800446c <_write_r>:
 800446c:	b538      	push	{r3, r4, r5, lr}
 800446e:	4c07      	ldr	r4, [pc, #28]	; (800448c <_write_r+0x20>)
 8004470:	4605      	mov	r5, r0
 8004472:	4608      	mov	r0, r1
 8004474:	4611      	mov	r1, r2
 8004476:	2200      	movs	r2, #0
 8004478:	6022      	str	r2, [r4, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	f7fc f9f8 	bl	8000870 <_write>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	d102      	bne.n	800448a <_write_r+0x1e>
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	b103      	cbz	r3, 800448a <_write_r+0x1e>
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	bd38      	pop	{r3, r4, r5, pc}
 800448c:	20000138 	.word	0x20000138

08004490 <_close_r>:
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	4c06      	ldr	r4, [pc, #24]	; (80044ac <_close_r+0x1c>)
 8004494:	2300      	movs	r3, #0
 8004496:	4605      	mov	r5, r0
 8004498:	4608      	mov	r0, r1
 800449a:	6023      	str	r3, [r4, #0]
 800449c:	f7fc fa14 	bl	80008c8 <_close>
 80044a0:	1c43      	adds	r3, r0, #1
 80044a2:	d102      	bne.n	80044aa <_close_r+0x1a>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	b103      	cbz	r3, 80044aa <_close_r+0x1a>
 80044a8:	602b      	str	r3, [r5, #0]
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
 80044ac:	20000138 	.word	0x20000138

080044b0 <_fstat_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4c07      	ldr	r4, [pc, #28]	; (80044d0 <_fstat_r+0x20>)
 80044b4:	2300      	movs	r3, #0
 80044b6:	4605      	mov	r5, r0
 80044b8:	4608      	mov	r0, r1
 80044ba:	4611      	mov	r1, r2
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	f7fc fa53 	bl	8000968 <_fstat>
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	d102      	bne.n	80044cc <_fstat_r+0x1c>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	b103      	cbz	r3, 80044cc <_fstat_r+0x1c>
 80044ca:	602b      	str	r3, [r5, #0]
 80044cc:	bd38      	pop	{r3, r4, r5, pc}
 80044ce:	bf00      	nop
 80044d0:	20000138 	.word	0x20000138

080044d4 <_isatty_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4c06      	ldr	r4, [pc, #24]	; (80044f0 <_isatty_r+0x1c>)
 80044d8:	2300      	movs	r3, #0
 80044da:	4605      	mov	r5, r0
 80044dc:	4608      	mov	r0, r1
 80044de:	6023      	str	r3, [r4, #0]
 80044e0:	f7fc f9b0 	bl	8000844 <_isatty>
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	d102      	bne.n	80044ee <_isatty_r+0x1a>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	b103      	cbz	r3, 80044ee <_isatty_r+0x1a>
 80044ec:	602b      	str	r3, [r5, #0]
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
 80044f0:	20000138 	.word	0x20000138

080044f4 <_lseek_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	4c07      	ldr	r4, [pc, #28]	; (8004514 <_lseek_r+0x20>)
 80044f8:	4605      	mov	r5, r0
 80044fa:	4608      	mov	r0, r1
 80044fc:	4611      	mov	r1, r2
 80044fe:	2200      	movs	r2, #0
 8004500:	6022      	str	r2, [r4, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	f7fc f9f7 	bl	80008f6 <_lseek>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d102      	bne.n	8004512 <_lseek_r+0x1e>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	b103      	cbz	r3, 8004512 <_lseek_r+0x1e>
 8004510:	602b      	str	r3, [r5, #0]
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	20000138 	.word	0x20000138

08004518 <__malloc_lock>:
 8004518:	4770      	bx	lr

0800451a <__malloc_unlock>:
 800451a:	4770      	bx	lr

0800451c <_read_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	4c07      	ldr	r4, [pc, #28]	; (800453c <_read_r+0x20>)
 8004520:	4605      	mov	r5, r0
 8004522:	4608      	mov	r0, r1
 8004524:	4611      	mov	r1, r2
 8004526:	2200      	movs	r2, #0
 8004528:	6022      	str	r2, [r4, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	f7fc f9f4 	bl	8000918 <_read>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_read_r+0x1e>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	b103      	cbz	r3, 800453a <_read_r+0x1e>
 8004538:	602b      	str	r3, [r5, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	20000138 	.word	0x20000138

08004540 <_init>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr

0800454c <_fini>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	bf00      	nop
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr
