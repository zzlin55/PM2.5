
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003538  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080036cc  080036cc  000136cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003770  08003770  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003778  08003778  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003778  08003778  00013778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800377c  0800377c  0001377c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000006c  080037ec  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  080037ec  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011094  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002331  00000000  00000000  00031130  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001080  00000000  00000000  00033468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  000344e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000180f7  00000000  00000000  00035470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c7cc  00000000  00000000  0004d567  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090826  00000000  00000000  00059d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea559  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b40  00000000  00000000  000ea5d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000006c 	.word	0x2000006c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080036b4 	.word	0x080036b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000070 	.word	0x20000070
 80001d0:	080036b4 	.word	0x080036b4

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b972 	b.w	80004e0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	4688      	mov	r8, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14b      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000222:	428a      	cmp	r2, r1
 8000224:	4615      	mov	r5, r2
 8000226:	d967      	bls.n	80002f8 <__udivmoddi4+0xe4>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0720 	rsb	r7, r2, #32
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	fa20 f707 	lsr.w	r7, r0, r7
 800023a:	4095      	lsls	r5, r2
 800023c:	ea47 0803 	orr.w	r8, r7, r3
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbb8 f7fe 	udiv	r7, r8, lr
 800024c:	fa1f fc85 	uxth.w	ip, r5
 8000250:	fb0e 8817 	mls	r8, lr, r7, r8
 8000254:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000258:	fb07 f10c 	mul.w	r1, r7, ip
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18eb      	adds	r3, r5, r3
 8000262:	f107 30ff 	add.w	r0, r7, #4294967295
 8000266:	f080 811b 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8118 	bls.w	80004a0 <__udivmoddi4+0x28c>
 8000270:	3f02      	subs	r7, #2
 8000272:	442b      	add	r3, r5
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0fe 	udiv	r0, r3, lr
 800027c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fc0c 	mul.w	ip, r0, ip
 8000288:	45a4      	cmp	ip, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	192c      	adds	r4, r5, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x290>
 8000296:	45a4      	cmp	ip, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x290>
 800029c:	3802      	subs	r0, #2
 800029e:	442c      	add	r4, r5
 80002a0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a4:	eba4 040c 	sub.w	r4, r4, ip
 80002a8:	2700      	movs	r7, #0
 80002aa:	b11e      	cbz	r6, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c6 4300 	strd	r4, r3, [r6]
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xbe>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80eb 	beq.w	800049a <__udivmoddi4+0x286>
 80002c4:	2700      	movs	r7, #0
 80002c6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ca:	4638      	mov	r0, r7
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f783 	clz	r7, r3
 80002d6:	2f00      	cmp	r7, #0
 80002d8:	d147      	bne.n	800036a <__udivmoddi4+0x156>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd0>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2c4>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4698      	mov	r8, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa0>
 80002f2:	e9c6 4800 	strd	r4, r8, [r6]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa0>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xe8>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 808f 	bne.w	8000424 <__udivmoddi4+0x210>
 8000306:	1b49      	subs	r1, r1, r5
 8000308:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800030c:	fa1f f885 	uxth.w	r8, r5
 8000310:	2701      	movs	r7, #1
 8000312:	fbb1 fcfe 	udiv	ip, r1, lr
 8000316:	0c23      	lsrs	r3, r4, #16
 8000318:	fb0e 111c 	mls	r1, lr, ip, r1
 800031c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000320:	fb08 f10c 	mul.w	r1, r8, ip
 8000324:	4299      	cmp	r1, r3
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x124>
 8000328:	18eb      	adds	r3, r5, r3
 800032a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4299      	cmp	r1, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 8000336:	4684      	mov	ip, r0
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000340:	fb0e 1410 	mls	r4, lr, r0, r1
 8000344:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000348:	fb08 f800 	mul.w	r8, r8, r0
 800034c:	45a0      	cmp	r8, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x14c>
 8000350:	192c      	adds	r4, r5, r4
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x14a>
 8000358:	45a0      	cmp	r8, r4
 800035a:	f200 80b6 	bhi.w	80004ca <__udivmoddi4+0x2b6>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 0408 	sub.w	r4, r4, r8
 8000364:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000368:	e79f      	b.n	80002aa <__udivmoddi4+0x96>
 800036a:	f1c7 0c20 	rsb	ip, r7, #32
 800036e:	40bb      	lsls	r3, r7
 8000370:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000374:	ea4e 0e03 	orr.w	lr, lr, r3
 8000378:	fa01 f407 	lsl.w	r4, r1, r7
 800037c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000380:	fa21 f30c 	lsr.w	r3, r1, ip
 8000384:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000388:	4325      	orrs	r5, r4
 800038a:	fbb3 f9f8 	udiv	r9, r3, r8
 800038e:	0c2c      	lsrs	r4, r5, #16
 8000390:	fb08 3319 	mls	r3, r8, r9, r3
 8000394:	fa1f fa8e 	uxth.w	sl, lr
 8000398:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800039c:	fb09 f40a 	mul.w	r4, r9, sl
 80003a0:	429c      	cmp	r4, r3
 80003a2:	fa02 f207 	lsl.w	r2, r2, r7
 80003a6:	fa00 f107 	lsl.w	r1, r0, r7
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1e 0303 	adds.w	r3, lr, r3
 80003b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b4:	f080 8087 	bcs.w	80004c6 <__udivmoddi4+0x2b2>
 80003b8:	429c      	cmp	r4, r3
 80003ba:	f240 8084 	bls.w	80004c6 <__udivmoddi4+0x2b2>
 80003be:	f1a9 0902 	sub.w	r9, r9, #2
 80003c2:	4473      	add	r3, lr
 80003c4:	1b1b      	subs	r3, r3, r4
 80003c6:	b2ad      	uxth	r5, r5
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1e 0404 	adds.w	r4, lr, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e4:	d26b      	bcs.n	80004be <__udivmoddi4+0x2aa>
 80003e6:	45a2      	cmp	sl, r4
 80003e8:	d969      	bls.n	80004be <__udivmoddi4+0x2aa>
 80003ea:	3802      	subs	r0, #2
 80003ec:	4474      	add	r4, lr
 80003ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f2:	fba0 8902 	umull	r8, r9, r0, r2
 80003f6:	eba4 040a 	sub.w	r4, r4, sl
 80003fa:	454c      	cmp	r4, r9
 80003fc:	46c2      	mov	sl, r8
 80003fe:	464b      	mov	r3, r9
 8000400:	d354      	bcc.n	80004ac <__udivmoddi4+0x298>
 8000402:	d051      	beq.n	80004a8 <__udivmoddi4+0x294>
 8000404:	2e00      	cmp	r6, #0
 8000406:	d069      	beq.n	80004dc <__udivmoddi4+0x2c8>
 8000408:	ebb1 050a 	subs.w	r5, r1, sl
 800040c:	eb64 0403 	sbc.w	r4, r4, r3
 8000410:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000414:	40fd      	lsrs	r5, r7
 8000416:	40fc      	lsrs	r4, r7
 8000418:	ea4c 0505 	orr.w	r5, ip, r5
 800041c:	e9c6 5400 	strd	r5, r4, [r6]
 8000420:	2700      	movs	r7, #0
 8000422:	e747      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f703 	lsr.w	r7, r0, r3
 800042c:	4095      	lsls	r5, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	fa21 f303 	lsr.w	r3, r1, r3
 8000436:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043a:	4338      	orrs	r0, r7
 800043c:	0c01      	lsrs	r1, r0, #16
 800043e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000442:	fa1f f885 	uxth.w	r8, r5
 8000446:	fb0e 3317 	mls	r3, lr, r7, r3
 800044a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044e:	fb07 f308 	mul.w	r3, r7, r8
 8000452:	428b      	cmp	r3, r1
 8000454:	fa04 f402 	lsl.w	r4, r4, r2
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x256>
 800045a:	1869      	adds	r1, r5, r1
 800045c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000460:	d22f      	bcs.n	80004c2 <__udivmoddi4+0x2ae>
 8000462:	428b      	cmp	r3, r1
 8000464:	d92d      	bls.n	80004c2 <__udivmoddi4+0x2ae>
 8000466:	3f02      	subs	r7, #2
 8000468:	4429      	add	r1, r5
 800046a:	1acb      	subs	r3, r1, r3
 800046c:	b281      	uxth	r1, r0
 800046e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000472:	fb0e 3310 	mls	r3, lr, r0, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb00 f308 	mul.w	r3, r0, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x27e>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f100 3cff 	add.w	ip, r0, #4294967295
 8000488:	d217      	bcs.n	80004ba <__udivmoddi4+0x2a6>
 800048a:	428b      	cmp	r3, r1
 800048c:	d915      	bls.n	80004ba <__udivmoddi4+0x2a6>
 800048e:	3802      	subs	r0, #2
 8000490:	4429      	add	r1, r5
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000498:	e73b      	b.n	8000312 <__udivmoddi4+0xfe>
 800049a:	4637      	mov	r7, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e709      	b.n	80002b4 <__udivmoddi4+0xa0>
 80004a0:	4607      	mov	r7, r0
 80004a2:	e6e7      	b.n	8000274 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a8:	4541      	cmp	r1, r8
 80004aa:	d2ab      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004ac:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b0:	eb69 020e 	sbc.w	r2, r9, lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4613      	mov	r3, r2
 80004b8:	e7a4      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004ba:	4660      	mov	r0, ip
 80004bc:	e7e9      	b.n	8000492 <__udivmoddi4+0x27e>
 80004be:	4618      	mov	r0, r3
 80004c0:	e795      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c2:	4667      	mov	r7, ip
 80004c4:	e7d1      	b.n	800046a <__udivmoddi4+0x256>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e77c      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004ca:	3802      	subs	r0, #2
 80004cc:	442c      	add	r4, r5
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0x14c>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	442b      	add	r3, r5
 80004d6:	e72f      	b.n	8000338 <__udivmoddi4+0x124>
 80004d8:	4638      	mov	r0, r7
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xda>
 80004dc:	4637      	mov	r7, r6
 80004de:	e6e9      	b.n	80002b4 <__udivmoddi4+0xa0>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80004e4:	b5b0      	push	{r4, r5, r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
 80004f0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80004f2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80004f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80004fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80004fe:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000502:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000504:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000506:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	613b      	str	r3, [r7, #16]

	Lcd_mode_select(&lcd);
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	4618      	mov	r0, r3
 800051a:	f000 f80e 	bl	800053a <Lcd_mode_select>

	return lcd;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	461d      	mov	r5, r3
 8000522:	f107 0410 	add.w	r4, r7, #16
 8000526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800052a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800052e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000532:	68f8      	ldr	r0, [r7, #12]
 8000534:	3728      	adds	r7, #40	; 0x28
 8000536:	46bd      	mov	sp, r7
 8000538:	bdb0      	pop	{r4, r5, r7, pc}

0800053a <Lcd_mode_select>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_mode_select(Lcd_HandleTypeDef * lcd)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	7d9b      	ldrb	r3, [r3, #22]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d10c      	bne.n	8000564 <Lcd_mode_select+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800054a:	2133      	movs	r1, #51	; 0x33
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 f83b 	bl	80005c8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000552:	2132      	movs	r1, #50	; 0x32
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 f837 	bl	80005c8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800055a:	2128      	movs	r1, #40	; 0x28
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f000 f833 	bl	80005c8 <lcd_write_command>
 8000562:	e003      	b.n	800056c <Lcd_mode_select+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000564:	2138      	movs	r1, #56	; 0x38
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f82e 	bl	80005c8 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800056c:	2101      	movs	r1, #1
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f000 f82a 	bl	80005c8 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000574:	210c      	movs	r1, #12
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 f826 	bl	80005c8 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800057c:	2106      	movs	r1, #6
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f822 	bl	80005c8 <lcd_write_command>

}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000596:	2300      	movs	r3, #0
 8000598:	73fb      	strb	r3, [r7, #15]
 800059a:	e00a      	b.n	80005b2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	4413      	add	r3, r2
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f83c 	bl	8000624 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	3301      	adds	r3, #1
 80005b0:	73fb      	strb	r3, [r7, #15]
 80005b2:	7bfc      	ldrb	r4, [r7, #15]
 80005b4:	6838      	ldr	r0, [r7, #0]
 80005b6:	f7ff fe0d 	bl	80001d4 <strlen>
 80005ba:	4603      	mov	r3, r0
 80005bc:	429c      	cmp	r4, r3
 80005be:	d3ed      	bcc.n	800059c <Lcd_string+0x10>
	}
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd90      	pop	{r4, r7, pc}

080005c8 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6898      	ldr	r0, [r3, #8]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	899b      	ldrh	r3, [r3, #12]
 80005dc:	2200      	movs	r2, #0
 80005de:	4619      	mov	r1, r3
 80005e0:	f001 f8ac 	bl	800173c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7d9b      	ldrb	r3, [r3, #22]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d111      	bne.n	8000610 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	091b      	lsrs	r3, r3, #4
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2204      	movs	r2, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 f842 	bl	8000680 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	f003 030f 	and.w	r3, r3, #15
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2204      	movs	r2, #4
 8000606:	4619      	mov	r1, r3
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f839 	bl	8000680 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800060e:	e005      	b.n	800061c <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	2208      	movs	r2, #8
 8000614:	4619      	mov	r1, r3
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f832 	bl	8000680 <lcd_write>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6898      	ldr	r0, [r3, #8]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	899b      	ldrh	r3, [r3, #12]
 8000638:	2201      	movs	r2, #1
 800063a:	4619      	mov	r1, r3
 800063c:	f001 f87e 	bl	800173c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	7d9b      	ldrb	r3, [r3, #22]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d111      	bne.n	800066c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	091b      	lsrs	r3, r3, #4
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2204      	movs	r2, #4
 8000650:	4619      	mov	r1, r3
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 f814 	bl	8000680 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	f003 030f 	and.w	r3, r3, #15
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2204      	movs	r2, #4
 8000662:	4619      	mov	r1, r3
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 f80b 	bl	8000680 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800066a:	e005      	b.n	8000678 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	2208      	movs	r2, #8
 8000670:	4619      	mov	r1, r3
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f804 	bl	8000680 <lcd_write>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
 800068c:	4613      	mov	r3, r2
 800068e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
 8000694:	e019      	b.n	80006ca <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	6818      	ldr	r0, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	8819      	ldrh	r1, [r3, #0]
 80006ae:	78fa      	ldrb	r2, [r7, #3]
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	fa42 f303 	asr.w	r3, r2, r3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	461a      	mov	r2, r3
 80006c0:	f001 f83c 	bl	800173c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	3301      	adds	r3, #1
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	7bfa      	ldrb	r2, [r7, #15]
 80006cc:	78bb      	ldrb	r3, [r7, #2]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d3e1      	bcc.n	8000696 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6918      	ldr	r0, [r3, #16]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	8a9b      	ldrh	r3, [r3, #20]
 80006da:	2201      	movs	r2, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	f001 f82d 	bl	800173c <HAL_GPIO_WritePin>
	DELAY(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 fda4 	bl	8001230 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6918      	ldr	r0, [r3, #16]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	8a9b      	ldrh	r3, [r3, #20]
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	f001 f822 	bl	800173c <HAL_GPIO_WritePin>
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b5b0      	push	{r4, r5, r7, lr}
 8000702:	b096      	sub	sp, #88	; 0x58
 8000704:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000706:	f000 fd51 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070a:	f000 f84f 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070e:	f000 f965 	bl	80009dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000712:	f000 f8ab 	bl	800086c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000716:	f000 f90d 	bl	8000934 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800071a:	f000 f935 	bl	8000988 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 800071e:	f000 f8d3 	bl	80008c8 <MX_SPI1_Init>
  RetargetInit(&huart2);
 8000722:	481b      	ldr	r0, [pc, #108]	; (8000790 <main+0x90>)
 8000724:	f000 fa00 	bl	8000b28 <RetargetInit>
  /* USER CODE BEGIN 2 */
  //Lcd_HandleTypeDef lcd = Lcd_init();
  Lcd_HandleTypeDef lcd;
  Lcd_PortType ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <main+0x94>)
 800072a:	f107 0420 	add.w	r4, r7, #32
 800072e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8000734:	4a18      	ldr	r2, [pc, #96]	; (8000798 <main+0x98>)
 8000736:	f107 0318 	add.w	r3, r7, #24
 800073a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800073e:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2140      	movs	r1, #64	; 0x40
 8000746:	4815      	ldr	r0, [pc, #84]	; (800079c <main+0x9c>)
 8000748:	f000 fff8 	bl	800173c <HAL_GPIO_WritePin>
  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 800074c:	4638      	mov	r0, r7
 800074e:	f107 0218 	add.w	r2, r7, #24
 8000752:	f107 0120 	add.w	r1, r7, #32
 8000756:	2300      	movs	r3, #0
 8000758:	9303      	str	r3, [sp, #12]
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	9302      	str	r3, [sp, #8]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <main+0xa0>)
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <main+0xa4>)
 800076a:	f7ff febb 	bl	80004e4 <Lcd_create>
 800076e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000772:	463d      	mov	r5, r7
 8000774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000778:	e895 0003 	ldmia.w	r5, {r0, r1}
 800077c:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_string(&lcd, "Initialising");
 8000780:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000784:	4908      	ldr	r1, [pc, #32]	; (80007a8 <main+0xa8>)
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff00 	bl	800058c <Lcd_string>
  //Lcd_cursor(&lcd, 1,6);
  //Lcd_int(&lcd, -500);
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078c:	e7fe      	b.n	800078c <main+0x8c>
 800078e:	bf00      	nop
 8000790:	20000180 	.word	0x20000180
 8000794:	080036dc 	.word	0x080036dc
 8000798:	080036ec 	.word	0x080036ec
 800079c:	40020400 	.word	0x40020400
 80007a0:	40020800 	.word	0x40020800
 80007a4:	40020000 	.word	0x40020000
 80007a8:	080036cc 	.word	0x080036cc

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fbc8 	bl	8002f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <SystemClock_Config+0xb8>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a22      	ldr	r2, [pc, #136]	; (8000864 <SystemClock_Config+0xb8>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <SystemClock_Config+0xb8>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <SystemClock_Config+0xbc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <SystemClock_Config+0xbc>)
 80007fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <SystemClock_Config+0xbc>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	2301      	movs	r3, #1
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000814:	2310      	movs	r3, #16
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000818:	2300      	movs	r3, #0
 800081a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f001 f8cd 	bl	80019c0 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800082c:	f000 f974 	bl	8000b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f001 fafa 	bl	8001e44 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000856:	f000 f95f 	bl	8000b18 <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3750      	adds	r7, #80	; 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_I2C1_Init+0x50>)
 8000872:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <MX_I2C1_Init+0x54>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_I2C1_Init+0x50>)
 8000878:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_I2C1_Init+0x58>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_I2C1_Init+0x50>)
 800088a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800088e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_I2C1_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_I2C1_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_I2C1_Init+0x50>)
 80008aa:	f000 ff61 	bl	8001770 <HAL_I2C_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b4:	f000 f930 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000094 	.word	0x20000094
 80008c0:	40005400 	.word	0x40005400
 80008c4:	000186a0 	.word	0x000186a0

080008c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_SPI1_Init+0x64>)
 80008ce:	4a18      	ldr	r2, [pc, #96]	; (8000930 <MX_SPI1_Init+0x68>)
 80008d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_SPI1_Init+0x64>)
 80008d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_SPI1_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_SPI1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_SPI1_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_SPI1_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_SPI1_Init+0x64>)
 80008f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_SPI1_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_SPI1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_SPI1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_SPI1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_SPI1_Init+0x64>)
 8000914:	220a      	movs	r2, #10
 8000916:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_SPI1_Init+0x64>)
 800091a:	f001 fc8d 	bl	8002238 <HAL_SPI_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000924:	f000 f8f8 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000128 	.word	0x20000128
 8000930:	40013000 	.word	0x40013000

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <MX_USART2_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800096c:	f001 fee6 	bl	800273c <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000976:	f000 f8cf 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000180 	.word	0x20000180
 8000984:	40004400 	.word	0x40004400

08000988 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART6_UART_Init+0x4c>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_USART6_UART_Init+0x50>)
 8000990:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_USART6_UART_Init+0x4c>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART6_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART6_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART6_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART6_UART_Init+0x4c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART6_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART6_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART6_UART_Init+0x4c>)
 80009c0:	f001 febc 	bl	800273c <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80009ca:	f000 f8a5 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000e8 	.word	0x200000e8
 80009d8:	40011400 	.word	0x40011400

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <MX_GPIO_Init+0x108>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a3a      	ldr	r2, [pc, #232]	; (8000ae4 <MX_GPIO_Init+0x108>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <MX_GPIO_Init+0x108>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <MX_GPIO_Init+0x108>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a33      	ldr	r2, [pc, #204]	; (8000ae4 <MX_GPIO_Init+0x108>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <MX_GPIO_Init+0x108>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <MX_GPIO_Init+0x108>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a2c      	ldr	r2, [pc, #176]	; (8000ae4 <MX_GPIO_Init+0x108>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <MX_GPIO_Init+0x108>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_GPIO_Init+0x108>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a25      	ldr	r2, [pc, #148]	; (8000ae4 <MX_GPIO_Init+0x108>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_GPIO_Init+0x108>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f240 3121 	movw	r1, #801	; 0x321
 8000a68:	481f      	ldr	r0, [pc, #124]	; (8000ae8 <MX_GPIO_Init+0x10c>)
 8000a6a:	f000 fe67 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8000a74:	481d      	ldr	r0, [pc, #116]	; (8000aec <MX_GPIO_Init+0x110>)
 8000a76:	f000 fe61 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	481c      	ldr	r0, [pc, #112]	; (8000af0 <MX_GPIO_Init+0x114>)
 8000a80:	f000 fe5c 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8000a84:	f240 3321 	movw	r3, #801	; 0x321
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <MX_GPIO_Init+0x10c>)
 8000a9e:	f000 fccb 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000aa2:	f44f 638e 	mov.w	r3, #1136	; 0x470
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <MX_GPIO_Init+0x110>)
 8000abc:	f000 fcbc 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_GPIO_Init+0x114>)
 8000ad8:	f000 fcae 	bl	8001438 <HAL_GPIO_Init>

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40020800 	.word	0x40020800

08000af4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d101      	bne.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b06:	f000 fb73 	bl	80011f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40000c00 	.word	0x40000c00

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <RetargetInit+0x28>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <RetargetInit+0x2c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6898      	ldr	r0, [r3, #8]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2202      	movs	r2, #2
 8000b40:	2100      	movs	r1, #0
 8000b42:	f002 fa0d 	bl	8002f60 <setvbuf>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001c0 	.word	0x200001c0
 8000b54:	20000008 	.word	0x20000008

08000b58 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d002      	beq.n	8000b70 <_write+0x18>
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d111      	bne.n	8000b94 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <_write+0x54>)
 8000b72:	6818      	ldr	r0, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	f001 fe2a 	bl	80027d6 <HAL_UART_Transmit>
 8000b82:	4603      	mov	r3, r0
 8000b84:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b86:	7dfb      	ldrb	r3, [r7, #23]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d101      	bne.n	8000b90 <_write+0x38>
      return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	e008      	b.n	8000ba2 <_write+0x4a>
    else
      return EIO;
 8000b90:	2305      	movs	r3, #5
 8000b92:	e006      	b.n	8000ba2 <_write+0x4a>
  }
  errno = EBADF;
 8000b94:	f002 f9b2 	bl	8002efc <__errno>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	2309      	movs	r3, #9
 8000b9c:	6013      	str	r3, [r2, #0]
  return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200001c0 	.word	0x200001c0

08000bb0 <_close>:

int _close(int fd) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db04      	blt.n	8000bc8 <_close+0x18>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	dc01      	bgt.n	8000bc8 <_close+0x18>
    return 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e006      	b.n	8000bd6 <_close+0x26>

  errno = EBADF;
 8000bc8:	f002 f998 	bl	8002efc <__errno>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	2309      	movs	r3, #9
 8000bd0:	6013      	str	r3, [r2, #0]
  return -1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b084      	sub	sp, #16
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	60f8      	str	r0, [r7, #12]
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000bea:	f002 f987 	bl	8002efc <__errno>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	2309      	movs	r3, #9
 8000bf2:	6013      	str	r3, [r2, #0]
  return -1;
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_read>:

int _read(int fd, char* ptr, int len) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d110      	bne.n	8000c34 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <_read+0x4c>)
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	f001 fe73 	bl	8002908 <HAL_UART_Receive>
 8000c22:	4603      	mov	r3, r0
 8000c24:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c26:	7dfb      	ldrb	r3, [r7, #23]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d101      	bne.n	8000c30 <_read+0x30>
      return 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e008      	b.n	8000c42 <_read+0x42>
    else
      return EIO;
 8000c30:	2305      	movs	r3, #5
 8000c32:	e006      	b.n	8000c42 <_read+0x42>
  }
  errno = EBADF;
 8000c34:	f002 f962 	bl	8002efc <__errno>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	2309      	movs	r3, #9
 8000c3c:	6013      	str	r3, [r2, #0]
  return -1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200001c0 	.word	0x200001c0

08000c50 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db08      	blt.n	8000c72 <_fstat+0x22>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	dc05      	bgt.n	8000c72 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c6c:	605a      	str	r2, [r3, #4]
    return 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e005      	b.n	8000c7e <_fstat+0x2e>
  }

  errno = EBADF;
 8000c72:	f002 f943 	bl	8002efc <__errno>
 8000c76:	4602      	mov	r2, r0
 8000c78:	2309      	movs	r3, #9
 8000c7a:	6013      	str	r3, [r2, #0]
  return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <HAL_I2C_MspInit+0x84>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d12c      	bne.n	8000d54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d16:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1c:	2312      	movs	r3, #18
 8000d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	480c      	ldr	r0, [pc, #48]	; (8000d64 <HAL_I2C_MspInit+0x8c>)
 8000d34:	f000 fb80 	bl	8001438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020400 	.word	0x40020400

08000d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <HAL_SPI_MspInit+0xc0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d149      	bne.n	8000e1e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dde:	23c0      	movs	r3, #192	; 0xc0
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dee:	2305      	movs	r3, #5
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <HAL_SPI_MspInit+0xc8>)
 8000dfa:	f000 fb1d 	bl	8001438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e0e:	2305      	movs	r3, #5
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4806      	ldr	r0, [pc, #24]	; (8000e34 <HAL_SPI_MspInit+0xcc>)
 8000e1a:	f000 fb0d 	bl	8001438 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40013000 	.word	0x40013000
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020400 	.word	0x40020400

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a41      	ldr	r2, [pc, #260]	; (8000f5c <HAL_UART_MspInit+0x124>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d12c      	bne.n	8000eb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
 8000e5e:	4b40      	ldr	r3, [pc, #256]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a3f      	ldr	r2, [pc, #252]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	4b39      	ldr	r3, [pc, #228]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a38      	ldr	r2, [pc, #224]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b36      	ldr	r3, [pc, #216]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e92:	230c      	movs	r3, #12
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	482d      	ldr	r0, [pc, #180]	; (8000f64 <HAL_UART_MspInit+0x12c>)
 8000eae:	f000 fac3 	bl	8001438 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000eb2:	e04f      	b.n	8000f54 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART6)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a2b      	ldr	r2, [pc, #172]	; (8000f68 <HAL_UART_MspInit+0x130>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d14a      	bne.n	8000f54 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a26      	ldr	r2, [pc, #152]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000ec8:	f043 0320 	orr.w	r3, r3, #32
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f003 0320 	and.w	r3, r3, #32
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_UART_MspInit+0x128>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f12:	2340      	movs	r3, #64	; 0x40
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f22:	2308      	movs	r3, #8
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480f      	ldr	r0, [pc, #60]	; (8000f6c <HAL_UART_MspInit+0x134>)
 8000f2e:	f000 fa83 	bl	8001438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f44:	2308      	movs	r3, #8
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_UART_MspInit+0x12c>)
 8000f50:	f000 fa72 	bl	8001438 <HAL_GPIO_Init>
}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	; 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40011400 	.word	0x40011400
 8000f6c:	40020800 	.word	0x40020800

08000f70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	2032      	movs	r0, #50	; 0x32
 8000f86:	f000 fa2d 	bl	80013e4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000f8a:	2032      	movs	r0, #50	; 0x32
 8000f8c:	f000 fa46 	bl	800141c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <HAL_InitTick+0xa0>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <HAL_InitTick+0xa0>)
 8000f9a:	f043 0308 	orr.w	r3, r3, #8
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_InitTick+0xa0>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fac:	f107 0210 	add.w	r2, r7, #16
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 f90c 	bl	80021d4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fbc:	f001 f8e2 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8000fc0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc4:	4a13      	ldr	r2, [pc, #76]	; (8001014 <HAL_InitTick+0xa4>)
 8000fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fca:	0c9b      	lsrs	r3, r3, #18
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_InitTick+0xa8>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <HAL_InitTick+0xac>)
 8000fd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_InitTick+0xa8>)
 8000fd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fdc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_InitTick+0xa8>)
 8000fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_InitTick+0xa8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_InitTick+0xa8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000ff0:	4809      	ldr	r0, [pc, #36]	; (8001018 <HAL_InitTick+0xa8>)
 8000ff2:	f001 f985 	bl	8002300 <HAL_TIM_Base_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000ffc:	4806      	ldr	r0, [pc, #24]	; (8001018 <HAL_InitTick+0xa8>)
 8000ffe:	f001 f9b4 	bl	800236a <HAL_TIM_Base_Start_IT>
 8001002:	4603      	mov	r3, r0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3730      	adds	r7, #48	; 0x30
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	431bde83 	.word	0x431bde83
 8001018:	200001c4 	.word	0x200001c4
 800101c:	40000c00 	.word	0x40000c00

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <TIM5_IRQHandler+0x10>)
 8001086:	f001 f994 	bl	80023b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200001c4 	.word	0x200001c4

08001094 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <_sbrk+0x50>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <_sbrk+0x16>
		heap_end = &end;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <_sbrk+0x50>)
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <_sbrk+0x54>)
 80010a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <_sbrk+0x50>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <_sbrk+0x50>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	466a      	mov	r2, sp
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d907      	bls.n	80010ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010be:	f001 ff1d 	bl	8002efc <__errno>
 80010c2:	4602      	mov	r2, r0
 80010c4:	230c      	movs	r3, #12
 80010c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	e006      	b.n	80010dc <_sbrk+0x48>
	}

	heap_end += incr;
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <_sbrk+0x50>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <_sbrk+0x50>)
 80010d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000088 	.word	0x20000088
 80010e8:	20000210 	.word	0x20000210

080010ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <SystemInit+0x60>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a15      	ldr	r2, [pc, #84]	; (800114c <SystemInit+0x60>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <SystemInit+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a12      	ldr	r2, [pc, #72]	; (8001150 <SystemInit+0x64>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <SystemInit+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <SystemInit+0x64>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <SystemInit+0x64>)
 8001118:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800111c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001120:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <SystemInit+0x64>)
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <SystemInit+0x68>)
 8001126:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <SystemInit+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a08      	ldr	r2, [pc, #32]	; (8001150 <SystemInit+0x64>)
 800112e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001132:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <SystemInit+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SystemInit+0x60>)
 800113c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001140:	609a      	str	r2, [r3, #8]
#endif
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00
 8001150:	40023800 	.word	0x40023800
 8001154:	24003010 	.word	0x24003010

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001190 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800115c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800115e:	e003      	b.n	8001168 <LoopCopyDataInit>

08001160 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001162:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001164:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001166:	3104      	adds	r1, #4

08001168 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800116c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800116e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001170:	d3f6      	bcc.n	8001160 <CopyDataInit>
  ldr  r2, =_sbss
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001174:	e002      	b.n	800117c <LoopFillZerobss>

08001176 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001176:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001178:	f842 3b04 	str.w	r3, [r2], #4

0800117c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800117e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001180:	d3f9      	bcc.n	8001176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001182:	f7ff ffb3 	bl	80010ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001186:	f001 febf 	bl	8002f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff fab9 	bl	8000700 <main>
  bx  lr    
 800118e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001190:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001194:	08003780 	.word	0x08003780
  ldr  r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800119c:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 80011a0:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 80011a4:	2000020c 	.word	0x2000020c

080011a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC_IRQHandler>
	...

080011ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <HAL_Init+0x40>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_Init+0x40>)
 80011c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_Init+0x40>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f8fa 	bl	80013ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fec8 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff fd52 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000004 	.word	0x20000004
 8001214:	20000204 	.word	0x20000204

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000204 	.word	0x20000204

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff ffee 	bl	8001218 <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001248:	d005      	beq.n	8001256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_Delay+0x40>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001256:	bf00      	nop
 8001258:	f7ff ffde 	bl	8001218 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8f7      	bhi.n	8001258 <HAL_Delay+0x28>
  {
  }
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000004 	.word	0x20000004

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db0b      	blt.n	8001302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 021f 	and.w	r2, r3, #31
 80012f0:	4907      	ldr	r1, [pc, #28]	; (8001310 <__NVIC_EnableIRQ+0x38>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ff4c 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f6:	f7ff ff61 	bl	80012bc <__NVIC_GetPriorityGrouping>
 80013fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	6978      	ldr	r0, [r7, #20]
 8001402:	f7ff ffb1 	bl	8001368 <NVIC_EncodePriority>
 8001406:	4602      	mov	r2, r0
 8001408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff80 	bl	8001314 <__NVIC_SetPriority>
}
 8001414:	bf00      	nop
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff54 	bl	80012d8 <__NVIC_EnableIRQ>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	e159      	b.n	8001708 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	429a      	cmp	r2, r3
 800146e:	f040 8148 	bne.w	8001702 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x4a>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b12      	cmp	r3, #18
 8001480:	d123      	bne.n	80014ca <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	69b9      	ldr	r1, [r7, #24]
 80014c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0203 	and.w	r2, r3, #3
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d00b      	beq.n	800151e <HAL_GPIO_Init+0xe6>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d007      	beq.n	800151e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001512:	2b11      	cmp	r3, #17
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d130      	bne.n	8001580 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001554:	2201      	movs	r2, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 0201 	and.w	r2, r3, #1
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80a2 	beq.w	8001702 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b56      	ldr	r3, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e4>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	4a55      	ldr	r2, [pc, #340]	; (800171c <HAL_GPIO_Init+0x2e4>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015cc:	6453      	str	r3, [r2, #68]	; 0x44
 80015ce:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_GPIO_Init+0x2e4>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015da:	4a51      	ldr	r2, [pc, #324]	; (8001720 <HAL_GPIO_Init+0x2e8>)
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a48      	ldr	r2, [pc, #288]	; (8001724 <HAL_GPIO_Init+0x2ec>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d019      	beq.n	800163a <HAL_GPIO_Init+0x202>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a47      	ldr	r2, [pc, #284]	; (8001728 <HAL_GPIO_Init+0x2f0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_GPIO_Init+0x1fe>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a46      	ldr	r2, [pc, #280]	; (800172c <HAL_GPIO_Init+0x2f4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00d      	beq.n	8001632 <HAL_GPIO_Init+0x1fa>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a45      	ldr	r2, [pc, #276]	; (8001730 <HAL_GPIO_Init+0x2f8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d007      	beq.n	800162e <HAL_GPIO_Init+0x1f6>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a44      	ldr	r2, [pc, #272]	; (8001734 <HAL_GPIO_Init+0x2fc>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d101      	bne.n	800162a <HAL_GPIO_Init+0x1f2>
 8001626:	2304      	movs	r3, #4
 8001628:	e008      	b.n	800163c <HAL_GPIO_Init+0x204>
 800162a:	2307      	movs	r3, #7
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x204>
 800162e:	2303      	movs	r3, #3
 8001630:	e004      	b.n	800163c <HAL_GPIO_Init+0x204>
 8001632:	2302      	movs	r3, #2
 8001634:	e002      	b.n	800163c <HAL_GPIO_Init+0x204>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x204>
 800163a:	2300      	movs	r3, #0
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	f002 0203 	and.w	r2, r2, #3
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	4093      	lsls	r3, r2
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800164c:	4934      	ldr	r1, [pc, #208]	; (8001720 <HAL_GPIO_Init+0x2e8>)
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800165a:	4b37      	ldr	r3, [pc, #220]	; (8001738 <HAL_GPIO_Init+0x300>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800167e:	4a2e      	ldr	r2, [pc, #184]	; (8001738 <HAL_GPIO_Init+0x300>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001684:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <HAL_GPIO_Init+0x300>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016a8:	4a23      	ldr	r2, [pc, #140]	; (8001738 <HAL_GPIO_Init+0x300>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ae:	4b22      	ldr	r3, [pc, #136]	; (8001738 <HAL_GPIO_Init+0x300>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016d2:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_GPIO_Init+0x300>)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_GPIO_Init+0x300>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_GPIO_Init+0x300>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3301      	adds	r3, #1
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	2b0f      	cmp	r3, #15
 800170c:	f67f aea2 	bls.w	8001454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001710:	bf00      	nop
 8001712:	3724      	adds	r7, #36	; 0x24
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40023800 	.word	0x40023800
 8001720:	40013800 	.word	0x40013800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40020800 	.word	0x40020800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40013c00 	.word	0x40013c00

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001758:	e003      	b.n	8001762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	041a      	lsls	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	619a      	str	r2, [r3, #24]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e10f      	b.n	80019a2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d106      	bne.n	800179c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fa9e 	bl	8000cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2224      	movs	r2, #36	; 0x24
 80017a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017b4:	f000 fce6 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 80017b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4a7b      	ldr	r2, [pc, #492]	; (80019ac <HAL_I2C_Init+0x23c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d807      	bhi.n	80017d4 <HAL_I2C_Init+0x64>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4a7a      	ldr	r2, [pc, #488]	; (80019b0 <HAL_I2C_Init+0x240>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	bf94      	ite	ls
 80017cc:	2301      	movls	r3, #1
 80017ce:	2300      	movhi	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	e006      	b.n	80017e2 <HAL_I2C_Init+0x72>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4a77      	ldr	r2, [pc, #476]	; (80019b4 <HAL_I2C_Init+0x244>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	bf94      	ite	ls
 80017dc:	2301      	movls	r3, #1
 80017de:	2300      	movhi	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e0db      	b.n	80019a2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4a72      	ldr	r2, [pc, #456]	; (80019b8 <HAL_I2C_Init+0x248>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	0c9b      	lsrs	r3, r3, #18
 80017f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	430a      	orrs	r2, r1
 8001808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	4a64      	ldr	r2, [pc, #400]	; (80019ac <HAL_I2C_Init+0x23c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d802      	bhi.n	8001824 <HAL_I2C_Init+0xb4>
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3301      	adds	r3, #1
 8001822:	e009      	b.n	8001838 <HAL_I2C_Init+0xc8>
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	4a63      	ldr	r2, [pc, #396]	; (80019bc <HAL_I2C_Init+0x24c>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	099b      	lsrs	r3, r3, #6
 8001836:	3301      	adds	r3, #1
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	430b      	orrs	r3, r1
 800183e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800184a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4956      	ldr	r1, [pc, #344]	; (80019ac <HAL_I2C_Init+0x23c>)
 8001854:	428b      	cmp	r3, r1
 8001856:	d80d      	bhi.n	8001874 <HAL_I2C_Init+0x104>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1e59      	subs	r1, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	fbb1 f3f3 	udiv	r3, r1, r3
 8001866:	3301      	adds	r3, #1
 8001868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186c:	2b04      	cmp	r3, #4
 800186e:	bf38      	it	cc
 8001870:	2304      	movcc	r3, #4
 8001872:	e04f      	b.n	8001914 <HAL_I2C_Init+0x1a4>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d111      	bne.n	80018a0 <HAL_I2C_Init+0x130>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1e58      	subs	r0, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6859      	ldr	r1, [r3, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	440b      	add	r3, r1
 800188a:	fbb0 f3f3 	udiv	r3, r0, r3
 800188e:	3301      	adds	r3, #1
 8001890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf0c      	ite	eq
 8001898:	2301      	moveq	r3, #1
 800189a:	2300      	movne	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	e012      	b.n	80018c6 <HAL_I2C_Init+0x156>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1e58      	subs	r0, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	0099      	lsls	r1, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf0c      	ite	eq
 80018c0:	2301      	moveq	r3, #1
 80018c2:	2300      	movne	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_I2C_Init+0x15e>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e022      	b.n	8001914 <HAL_I2C_Init+0x1a4>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10e      	bne.n	80018f4 <HAL_I2C_Init+0x184>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1e58      	subs	r0, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6859      	ldr	r1, [r3, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	440b      	add	r3, r1
 80018e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f2:	e00f      	b.n	8001914 <HAL_I2C_Init+0x1a4>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1e58      	subs	r0, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	0099      	lsls	r1, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	fbb0 f3f3 	udiv	r3, r0, r3
 800190a:	3301      	adds	r3, #1
 800190c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	6809      	ldr	r1, [r1, #0]
 8001918:	4313      	orrs	r3, r2
 800191a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001942:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6911      	ldr	r1, [r2, #16]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	68d2      	ldr	r2, [r2, #12]
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	430b      	orrs	r3, r1
 8001956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2220      	movs	r2, #32
 800198e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	000186a0 	.word	0x000186a0
 80019b0:	001e847f 	.word	0x001e847f
 80019b4:	003d08ff 	.word	0x003d08ff
 80019b8:	431bde83 	.word	0x431bde83
 80019bc:	10624dd3 	.word	0x10624dd3

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e22d      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d075      	beq.n	8001aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019de:	4ba3      	ldr	r3, [pc, #652]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d00c      	beq.n	8001a04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ea:	4ba0      	ldr	r3, [pc, #640]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d112      	bne.n	8001a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f6:	4b9d      	ldr	r3, [pc, #628]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a02:	d10b      	bne.n	8001a1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a04:	4b99      	ldr	r3, [pc, #612]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d05b      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x108>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d157      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e208      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a24:	d106      	bne.n	8001a34 <HAL_RCC_OscConfig+0x74>
 8001a26:	4b91      	ldr	r3, [pc, #580]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a90      	ldr	r2, [pc, #576]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e01d      	b.n	8001a70 <HAL_RCC_OscConfig+0xb0>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x98>
 8001a3e:	4b8b      	ldr	r3, [pc, #556]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a8a      	ldr	r2, [pc, #552]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b88      	ldr	r3, [pc, #544]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a87      	ldr	r2, [pc, #540]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0xb0>
 8001a58:	4b84      	ldr	r3, [pc, #528]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a83      	ldr	r2, [pc, #524]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b81      	ldr	r3, [pc, #516]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a80      	ldr	r2, [pc, #512]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fbce 	bl	8001218 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fbca 	bl	8001218 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1cd      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b76      	ldr	r3, [pc, #472]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0xc0>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fbba 	bl	8001218 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fbb6 	bl	8001218 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e1b9      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	4b6c      	ldr	r3, [pc, #432]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0xe8>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d063      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ad6:	4b65      	ldr	r3, [pc, #404]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae2:	4b62      	ldr	r3, [pc, #392]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d11c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aee:	4b5f      	ldr	r3, [pc, #380]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	4b5c      	ldr	r3, [pc, #368]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x152>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e18d      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b56      	ldr	r3, [pc, #344]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4952      	ldr	r1, [pc, #328]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	e03a      	b.n	8001b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b30:	4b4f      	ldr	r3, [pc, #316]	; (8001c70 <HAL_RCC_OscConfig+0x2b0>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff fb6f 	bl	8001218 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fb6b 	bl	8001218 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e16e      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4940      	ldr	r1, [pc, #256]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
 8001b70:	e015      	b.n	8001b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b72:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <HAL_RCC_OscConfig+0x2b0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff fb4e 	bl	8001218 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b80:	f7ff fb4a 	bl	8001218 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e14d      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d030      	beq.n	8001c0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d016      	beq.n	8001be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb2:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <HAL_RCC_OscConfig+0x2b4>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fb2e 	bl	8001218 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fb2a 	bl	8001218 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e12d      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x200>
 8001bde:	e015      	b.n	8001c0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be0:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <HAL_RCC_OscConfig+0x2b4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7ff fb17 	bl	8001218 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bee:	f7ff fb13 	bl	8001218 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e116      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f0      	bne.n	8001bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a0 	beq.w	8001d5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_OscConfig+0x2b8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d121      	bne.n	8001c9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_RCC_OscConfig+0x2b8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <HAL_RCC_OscConfig+0x2b8>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fad9 	bl	8001218 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	e011      	b.n	8001c8e <HAL_RCC_OscConfig+0x2ce>
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	42470000 	.word	0x42470000
 8001c74:	42470e80 	.word	0x42470e80
 8001c78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7c:	f7ff facc 	bl	8001218 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0cf      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8e:	4b6a      	ldr	r3, [pc, #424]	; (8001e38 <HAL_RCC_OscConfig+0x478>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2f0>
 8001ca2:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	4a65      	ldr	r2, [pc, #404]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70
 8001cae:	e01c      	b.n	8001cea <HAL_RCC_OscConfig+0x32a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x312>
 8001cb8:	4b60      	ldr	r3, [pc, #384]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a5f      	ldr	r2, [pc, #380]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	4b5d      	ldr	r3, [pc, #372]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	4a5c      	ldr	r2, [pc, #368]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd0:	e00b      	b.n	8001cea <HAL_RCC_OscConfig+0x32a>
 8001cd2:	4b5a      	ldr	r3, [pc, #360]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	4a59      	ldr	r2, [pc, #356]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cde:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	4a56      	ldr	r2, [pc, #344]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d015      	beq.n	8001d1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fa91 	bl	8001218 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff fa8d 	bl	8001218 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e08e      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ee      	beq.n	8001cfa <HAL_RCC_OscConfig+0x33a>
 8001d1c:	e014      	b.n	8001d48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fa7b 	bl	8001218 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7ff fa77 	bl	8001218 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e078      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1ee      	bne.n	8001d26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d105      	bne.n	8001d5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a3a      	ldr	r2, [pc, #232]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d064      	beq.n	8001e2c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d62:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d05c      	beq.n	8001e28 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d141      	bne.n	8001dfa <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <HAL_RCC_OscConfig+0x480>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fa4c 	bl	8001218 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff fa48 	bl	8001218 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e04b      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	041b      	lsls	r3, r3, #16
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	491d      	ldr	r1, [pc, #116]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_RCC_OscConfig+0x480>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7ff fa21 	bl	8001218 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dda:	f7ff fa1d 	bl	8001218 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e020      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x41a>
 8001df8:	e018      	b.n	8001e2c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_RCC_OscConfig+0x480>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff fa0a 	bl	8001218 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff fa06 	bl	8001218 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <HAL_RCC_OscConfig+0x47c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x448>
 8001e26:	e001      	b.n	8001e2c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	42470060 	.word	0x42470060

08001e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0ca      	b.n	8001fee <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d90c      	bls.n	8001e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b64      	ldr	r3, [pc, #400]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0b6      	b.n	8001fee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d020      	beq.n	8001ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e98:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4a57      	ldr	r2, [pc, #348]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb0:	4b52      	ldr	r3, [pc, #328]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4a51      	ldr	r2, [pc, #324]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	494c      	ldr	r1, [pc, #304]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d044      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d119      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e07d      	b.n	8001fee <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	4b3e      	ldr	r3, [pc, #248]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e06d      	b.n	8001fee <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e065      	b.n	8001fee <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f22:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f023 0203 	bic.w	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4933      	ldr	r1, [pc, #204]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f34:	f7ff f970 	bl	8001218 <HAL_GetTick>
 8001f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3c:	f7ff f96c 	bl	8001218 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e04d      	b.n	8001fee <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 020c 	and.w	r2, r3, #12
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d1eb      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d20c      	bcs.n	8001f8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e030      	b.n	8001fee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4915      	ldr	r1, [pc, #84]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	490d      	ldr	r1, [pc, #52]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fca:	f000 f81d 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001fce:	4601      	mov	r1, r0
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	fa21 f303 	lsr.w	r3, r1, r3
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7fe ffc2 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023c00 	.word	0x40023c00
 8001ffc:	40023800 	.word	0x40023800
 8002000:	080036f4 	.word	0x080036f4
 8002004:	20000000 	.word	0x20000000

08002008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	2300      	movs	r3, #0
 8002018:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800201e:	4b50      	ldr	r3, [pc, #320]	; (8002160 <HAL_RCC_GetSysClockFreq+0x158>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d007      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x32>
 800202a:	2b08      	cmp	r3, #8
 800202c:	d008      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x38>
 800202e:	2b00      	cmp	r3, #0
 8002030:	f040 808d 	bne.w	800214e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002034:	4b4b      	ldr	r3, [pc, #300]	; (8002164 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002036:	60bb      	str	r3, [r7, #8]
       break;
 8002038:	e08c      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800203a:	4b4b      	ldr	r3, [pc, #300]	; (8002168 <HAL_RCC_GetSysClockFreq+0x160>)
 800203c:	60bb      	str	r3, [r7, #8]
      break;
 800203e:	e089      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002040:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_GetSysClockFreq+0x158>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002048:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800204a:	4b45      	ldr	r3, [pc, #276]	; (8002160 <HAL_RCC_GetSysClockFreq+0x158>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d023      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002056:	4b42      	ldr	r3, [pc, #264]	; (8002160 <HAL_RCC_GetSysClockFreq+0x158>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	099b      	lsrs	r3, r3, #6
 800205c:	f04f 0400 	mov.w	r4, #0
 8002060:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	ea03 0501 	and.w	r5, r3, r1
 800206c:	ea04 0602 	and.w	r6, r4, r2
 8002070:	4a3d      	ldr	r2, [pc, #244]	; (8002168 <HAL_RCC_GetSysClockFreq+0x160>)
 8002072:	fb02 f106 	mul.w	r1, r2, r6
 8002076:	2200      	movs	r2, #0
 8002078:	fb02 f205 	mul.w	r2, r2, r5
 800207c:	440a      	add	r2, r1
 800207e:	493a      	ldr	r1, [pc, #232]	; (8002168 <HAL_RCC_GetSysClockFreq+0x160>)
 8002080:	fba5 0101 	umull	r0, r1, r5, r1
 8002084:	1853      	adds	r3, r2, r1
 8002086:	4619      	mov	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f04f 0400 	mov.w	r4, #0
 800208e:	461a      	mov	r2, r3
 8002090:	4623      	mov	r3, r4
 8002092:	f7fe f8a7 	bl	80001e4 <__aeabi_uldivmod>
 8002096:	4603      	mov	r3, r0
 8002098:	460c      	mov	r4, r1
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	e049      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_RCC_GetSysClockFreq+0x158>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	f04f 0400 	mov.w	r4, #0
 80020a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	ea03 0501 	and.w	r5, r3, r1
 80020b4:	ea04 0602 	and.w	r6, r4, r2
 80020b8:	4629      	mov	r1, r5
 80020ba:	4632      	mov	r2, r6
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	f04f 0400 	mov.w	r4, #0
 80020c4:	0154      	lsls	r4, r2, #5
 80020c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020ca:	014b      	lsls	r3, r1, #5
 80020cc:	4619      	mov	r1, r3
 80020ce:	4622      	mov	r2, r4
 80020d0:	1b49      	subs	r1, r1, r5
 80020d2:	eb62 0206 	sbc.w	r2, r2, r6
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	f04f 0400 	mov.w	r4, #0
 80020de:	0194      	lsls	r4, r2, #6
 80020e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020e4:	018b      	lsls	r3, r1, #6
 80020e6:	1a5b      	subs	r3, r3, r1
 80020e8:	eb64 0402 	sbc.w	r4, r4, r2
 80020ec:	f04f 0100 	mov.w	r1, #0
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	00e2      	lsls	r2, r4, #3
 80020f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020fa:	00d9      	lsls	r1, r3, #3
 80020fc:	460b      	mov	r3, r1
 80020fe:	4614      	mov	r4, r2
 8002100:	195b      	adds	r3, r3, r5
 8002102:	eb44 0406 	adc.w	r4, r4, r6
 8002106:	f04f 0100 	mov.w	r1, #0
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	02a2      	lsls	r2, r4, #10
 8002110:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002114:	0299      	lsls	r1, r3, #10
 8002116:	460b      	mov	r3, r1
 8002118:	4614      	mov	r4, r2
 800211a:	4618      	mov	r0, r3
 800211c:	4621      	mov	r1, r4
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f04f 0400 	mov.w	r4, #0
 8002124:	461a      	mov	r2, r3
 8002126:	4623      	mov	r3, r4
 8002128:	f7fe f85c 	bl	80001e4 <__aeabi_uldivmod>
 800212c:	4603      	mov	r3, r0
 800212e:	460c      	mov	r4, r1
 8002130:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_GetSysClockFreq+0x158>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	0c1b      	lsrs	r3, r3, #16
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	3301      	adds	r3, #1
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	fbb2 f3f3 	udiv	r3, r2, r3
 800214a:	60bb      	str	r3, [r7, #8]
      break;
 800214c:	e002      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002150:	60bb      	str	r3, [r7, #8]
      break;
 8002152:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002154:	68bb      	ldr	r3, [r7, #8]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	00f42400 	.word	0x00f42400
 8002168:	017d7840 	.word	0x017d7840

0800216c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_RCC_GetHCLKFreq+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000000 	.word	0x20000000

08002184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002188:	f7ff fff0 	bl	800216c <HAL_RCC_GetHCLKFreq>
 800218c:	4601      	mov	r1, r0
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0a9b      	lsrs	r3, r3, #10
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800
 80021a8:	08003704 	.word	0x08003704

080021ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021b0:	f7ff ffdc 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80021b4:	4601      	mov	r1, r0
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	0b5b      	lsrs	r3, r3, #13
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40023800 	.word	0x40023800
 80021d0:	08003704 	.word	0x08003704

080021d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	220f      	movs	r2, #15
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	08db      	lsrs	r3, r3, #3
 800220e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <HAL_RCC_GetClockConfig+0x60>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 020f 	and.w	r2, r3, #15
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	40023c00 	.word	0x40023c00

08002238 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e056      	b.n	80022f8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d106      	bne.n	800226a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7fe fd7f 	bl	8000d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2202      	movs	r2, #2
 800226e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002280:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	ea42 0103 	orr.w	r1, r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	0c1b      	lsrs	r3, r3, #16
 80022c8:	f003 0104 	and.w	r1, r3, #4
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e01d      	b.n	800234e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f815 	bl	8002356 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3304      	adds	r3, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f000 f968 	bl	8002614 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b06      	cmp	r3, #6
 8002392:	d007      	beq.n	80023a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d122      	bne.n	800240e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d11b      	bne.n	800240e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f06f 0202 	mvn.w	r2, #2
 80023de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f8ee 	bl	80025d6 <HAL_TIM_IC_CaptureCallback>
 80023fa:	e005      	b.n	8002408 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f8e0 	bl	80025c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f8f1 	bl	80025ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b04      	cmp	r3, #4
 800241a:	d122      	bne.n	8002462 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b04      	cmp	r3, #4
 8002428:	d11b      	bne.n	8002462 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f06f 0204 	mvn.w	r2, #4
 8002432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f8c4 	bl	80025d6 <HAL_TIM_IC_CaptureCallback>
 800244e:	e005      	b.n	800245c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8b6 	bl	80025c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f8c7 	bl	80025ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b08      	cmp	r3, #8
 800246e:	d122      	bne.n	80024b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b08      	cmp	r3, #8
 800247c:	d11b      	bne.n	80024b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f06f 0208 	mvn.w	r2, #8
 8002486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2204      	movs	r2, #4
 800248c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f89a 	bl	80025d6 <HAL_TIM_IC_CaptureCallback>
 80024a2:	e005      	b.n	80024b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f88c 	bl	80025c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f89d 	bl	80025ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d122      	bne.n	800250a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d11b      	bne.n	800250a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f06f 0210 	mvn.w	r2, #16
 80024da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2208      	movs	r2, #8
 80024e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f870 	bl	80025d6 <HAL_TIM_IC_CaptureCallback>
 80024f6:	e005      	b.n	8002504 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f862 	bl	80025c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f873 	bl	80025ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10e      	bne.n	8002536 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d107      	bne.n	8002536 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f06f 0201 	mvn.w	r2, #1
 800252e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7fe fadf 	bl	8000af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002540:	2b80      	cmp	r3, #128	; 0x80
 8002542:	d10e      	bne.n	8002562 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254e:	2b80      	cmp	r3, #128	; 0x80
 8002550:	d107      	bne.n	8002562 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800255a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f8e3 	bl	8002728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b40      	cmp	r3, #64	; 0x40
 800256e:	d10e      	bne.n	800258e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b40      	cmp	r3, #64	; 0x40
 800257c:	d107      	bne.n	800258e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f838 	bl	80025fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b20      	cmp	r3, #32
 800259a:	d10e      	bne.n	80025ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d107      	bne.n	80025ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f06f 0220 	mvn.w	r2, #32
 80025b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f8ad 	bl	8002714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a34      	ldr	r2, [pc, #208]	; (80026f8 <TIM_Base_SetConfig+0xe4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00f      	beq.n	800264c <TIM_Base_SetConfig+0x38>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002632:	d00b      	beq.n	800264c <TIM_Base_SetConfig+0x38>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a31      	ldr	r2, [pc, #196]	; (80026fc <TIM_Base_SetConfig+0xe8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d007      	beq.n	800264c <TIM_Base_SetConfig+0x38>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a30      	ldr	r2, [pc, #192]	; (8002700 <TIM_Base_SetConfig+0xec>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d003      	beq.n	800264c <TIM_Base_SetConfig+0x38>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a2f      	ldr	r2, [pc, #188]	; (8002704 <TIM_Base_SetConfig+0xf0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d108      	bne.n	800265e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a25      	ldr	r2, [pc, #148]	; (80026f8 <TIM_Base_SetConfig+0xe4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01b      	beq.n	800269e <TIM_Base_SetConfig+0x8a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d017      	beq.n	800269e <TIM_Base_SetConfig+0x8a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <TIM_Base_SetConfig+0xe8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <TIM_Base_SetConfig+0x8a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a21      	ldr	r2, [pc, #132]	; (8002700 <TIM_Base_SetConfig+0xec>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00f      	beq.n	800269e <TIM_Base_SetConfig+0x8a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a20      	ldr	r2, [pc, #128]	; (8002704 <TIM_Base_SetConfig+0xf0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00b      	beq.n	800269e <TIM_Base_SetConfig+0x8a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <TIM_Base_SetConfig+0xf4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <TIM_Base_SetConfig+0x8a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1e      	ldr	r2, [pc, #120]	; (800270c <TIM_Base_SetConfig+0xf8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d003      	beq.n	800269e <TIM_Base_SetConfig+0x8a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <TIM_Base_SetConfig+0xfc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d108      	bne.n	80026b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <TIM_Base_SetConfig+0xe4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d103      	bne.n	80026e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	615a      	str	r2, [r3, #20]
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40010000 	.word	0x40010000
 80026fc:	40000400 	.word	0x40000400
 8002700:	40000800 	.word	0x40000800
 8002704:	40000c00 	.word	0x40000c00
 8002708:	40014000 	.word	0x40014000
 800270c:	40014400 	.word	0x40014400
 8002710:	40014800 	.word	0x40014800

08002714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e03f      	b.n	80027ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fb68 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800277e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f9b1 	bl	8002ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b088      	sub	sp, #32
 80027da:	af02      	add	r7, sp, #8
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	f040 8083 	bne.w	80028fe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_UART_Transmit+0x2e>
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e07b      	b.n	8002900 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_UART_Transmit+0x40>
 8002812:	2302      	movs	r3, #2
 8002814:	e074      	b.n	8002900 <HAL_UART_Transmit+0x12a>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2221      	movs	r2, #33	; 0x21
 8002828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800282c:	f7fe fcf4 	bl	8001218 <HAL_GetTick>
 8002830:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	88fa      	ldrh	r2, [r7, #6]
 8002836:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	88fa      	ldrh	r2, [r7, #6]
 800283c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800283e:	e042      	b.n	80028c6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002856:	d122      	bne.n	800289e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2200      	movs	r2, #0
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f8f6 	bl	8002a54 <UART_WaitOnFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e046      	b.n	8002900 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002884:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d103      	bne.n	8002896 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3302      	adds	r3, #2
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	e017      	b.n	80028c6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	3301      	adds	r3, #1
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	e013      	b.n	80028c6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2200      	movs	r2, #0
 80028a6:	2180      	movs	r1, #128	; 0x80
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f8d3 	bl	8002a54 <UART_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e023      	b.n	8002900 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	60ba      	str	r2, [r7, #8]
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1b7      	bne.n	8002840 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2200      	movs	r2, #0
 80028d8:	2140      	movs	r1, #64	; 0x40
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f8ba 	bl	8002a54 <UART_WaitOnFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e00a      	b.n	8002900 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e000      	b.n	8002900 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80028fe:	2302      	movs	r3, #2
  }
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b20      	cmp	r3, #32
 8002926:	f040 8090 	bne.w	8002a4a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_UART_Receive+0x2e>
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e088      	b.n	8002a4c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_UART_Receive+0x40>
 8002944:	2302      	movs	r3, #2
 8002946:	e081      	b.n	8002a4c <HAL_UART_Receive+0x144>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2222      	movs	r2, #34	; 0x22
 800295a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800295e:	f7fe fc5b 	bl	8001218 <HAL_GetTick>
 8002962:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	88fa      	ldrh	r2, [r7, #6]
 8002968:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002970:	e05c      	b.n	8002a2c <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002988:	d12b      	bne.n	80029e2 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	2120      	movs	r1, #32
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f85d 	bl	8002a54 <UART_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e053      	b.n	8002a4c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10c      	bne.n	80029ca <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029bc:	b29a      	uxth	r2, r3
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3302      	adds	r3, #2
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	e030      	b.n	8002a2c <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	3301      	adds	r3, #1
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	e024      	b.n	8002a2c <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2200      	movs	r2, #0
 80029ea:	2120      	movs	r1, #32
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f831 	bl	8002a54 <UART_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e027      	b.n	8002a4c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d108      	bne.n	8002a16 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	60ba      	str	r2, [r7, #8]
 8002a10:	b2ca      	uxtb	r2, r1
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e00a      	b.n	8002a2c <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1c59      	adds	r1, r3, #1
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d19d      	bne.n	8002972 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
  }
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a64:	e02c      	b.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d028      	beq.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a74:	f7fe fbd0 	bl	8001218 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d21d      	bcs.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a92:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e00f      	b.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d0c3      	beq.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae8:	b5b0      	push	{r4, r5, r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b28:	f023 030c 	bic.w	r3, r3, #12
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	68f9      	ldr	r1, [r7, #12]
 8002b32:	430b      	orrs	r3, r1
 8002b34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b54:	f040 80e4 	bne.w	8002d20 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4aab      	ldr	r2, [pc, #684]	; (8002e0c <UART_SetConfig+0x324>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d004      	beq.n	8002b6c <UART_SetConfig+0x84>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4aaa      	ldr	r2, [pc, #680]	; (8002e10 <UART_SetConfig+0x328>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d16c      	bne.n	8002c46 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002b6c:	f7ff fb1e 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	009a      	lsls	r2, r3, #2
 8002b7a:	441a      	add	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	4aa3      	ldr	r2, [pc, #652]	; (8002e14 <UART_SetConfig+0x32c>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	011c      	lsls	r4, r3, #4
 8002b90:	f7ff fb0c 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009a      	lsls	r2, r3, #2
 8002b9e:	441a      	add	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	fbb2 f5f3 	udiv	r5, r2, r3
 8002baa:	f7ff faff 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009a      	lsls	r2, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	4a93      	ldr	r2, [pc, #588]	; (8002e14 <UART_SetConfig+0x32c>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2264      	movs	r2, #100	; 0x64
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	1aeb      	subs	r3, r5, r3
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	3332      	adds	r3, #50	; 0x32
 8002bd8:	4a8e      	ldr	r2, [pc, #568]	; (8002e14 <UART_SetConfig+0x32c>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002be6:	441c      	add	r4, r3
 8002be8:	f7ff fae0 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009a      	lsls	r2, r3, #2
 8002bf6:	441a      	add	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c02:	f7ff fad3 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009a      	lsls	r2, r3, #2
 8002c10:	441a      	add	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1c:	4a7d      	ldr	r2, [pc, #500]	; (8002e14 <UART_SetConfig+0x32c>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2264      	movs	r2, #100	; 0x64
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	1aeb      	subs	r3, r5, r3
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	3332      	adds	r3, #50	; 0x32
 8002c30:	4a78      	ldr	r2, [pc, #480]	; (8002e14 <UART_SetConfig+0x32c>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	f003 0207 	and.w	r2, r3, #7
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4422      	add	r2, r4
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	e154      	b.n	8002ef0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002c46:	f7ff fa9d 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	009a      	lsls	r2, r3, #2
 8002c54:	441a      	add	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	4a6c      	ldr	r2, [pc, #432]	; (8002e14 <UART_SetConfig+0x32c>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	011c      	lsls	r4, r3, #4
 8002c6a:	f7ff fa8b 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009a      	lsls	r2, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c84:	f7ff fa7e 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009a      	lsls	r2, r3, #2
 8002c92:	441a      	add	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9e:	4a5d      	ldr	r2, [pc, #372]	; (8002e14 <UART_SetConfig+0x32c>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	2264      	movs	r2, #100	; 0x64
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	1aeb      	subs	r3, r5, r3
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	3332      	adds	r3, #50	; 0x32
 8002cb2:	4a58      	ldr	r2, [pc, #352]	; (8002e14 <UART_SetConfig+0x32c>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cc0:	441c      	add	r4, r3
 8002cc2:	f7ff fa5f 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009a      	lsls	r2, r3, #2
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fbb2 f5f3 	udiv	r5, r2, r3
 8002cdc:	f7ff fa52 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009a      	lsls	r2, r3, #2
 8002cea:	441a      	add	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf6:	4a47      	ldr	r2, [pc, #284]	; (8002e14 <UART_SetConfig+0x32c>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	2264      	movs	r2, #100	; 0x64
 8002d00:	fb02 f303 	mul.w	r3, r2, r3
 8002d04:	1aeb      	subs	r3, r5, r3
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	3332      	adds	r3, #50	; 0x32
 8002d0a:	4a42      	ldr	r2, [pc, #264]	; (8002e14 <UART_SetConfig+0x32c>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	f003 0207 	and.w	r2, r3, #7
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4422      	add	r2, r4
 8002d1c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002d1e:	e0e7      	b.n	8002ef0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a39      	ldr	r2, [pc, #228]	; (8002e0c <UART_SetConfig+0x324>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <UART_SetConfig+0x24c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a38      	ldr	r2, [pc, #224]	; (8002e10 <UART_SetConfig+0x328>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d171      	bne.n	8002e18 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002d34:	f7ff fa3a 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	009a      	lsls	r2, r3, #2
 8002d42:	441a      	add	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	4a31      	ldr	r2, [pc, #196]	; (8002e14 <UART_SetConfig+0x32c>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	011c      	lsls	r4, r3, #4
 8002d58:	f7ff fa28 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	009a      	lsls	r2, r3, #2
 8002d66:	441a      	add	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d72:	f7ff fa1b 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009a      	lsls	r2, r3, #2
 8002d80:	441a      	add	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	4a21      	ldr	r2, [pc, #132]	; (8002e14 <UART_SetConfig+0x32c>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2264      	movs	r2, #100	; 0x64
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	1aeb      	subs	r3, r5, r3
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	3332      	adds	r3, #50	; 0x32
 8002da0:	4a1c      	ldr	r2, [pc, #112]	; (8002e14 <UART_SetConfig+0x32c>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dac:	441c      	add	r4, r3
 8002dae:	f7ff f9fd 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8002db2:	4602      	mov	r2, r0
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009a      	lsls	r2, r3, #2
 8002dbc:	441a      	add	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	fbb2 f5f3 	udiv	r5, r2, r3
 8002dc8:	f7ff f9f0 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009a      	lsls	r2, r3, #2
 8002dd6:	441a      	add	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <UART_SetConfig+0x32c>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	2264      	movs	r2, #100	; 0x64
 8002dec:	fb02 f303 	mul.w	r3, r2, r3
 8002df0:	1aeb      	subs	r3, r5, r3
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	3332      	adds	r3, #50	; 0x32
 8002df6:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <UART_SetConfig+0x32c>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	f003 020f 	and.w	r2, r3, #15
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4422      	add	r2, r4
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	e071      	b.n	8002ef0 <UART_SetConfig+0x408>
 8002e0c:	40011000 	.word	0x40011000
 8002e10:	40011400 	.word	0x40011400
 8002e14:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002e18:	f7ff f9b4 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	009a      	lsls	r2, r3, #2
 8002e26:	441a      	add	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	4a31      	ldr	r2, [pc, #196]	; (8002ef8 <UART_SetConfig+0x410>)
 8002e34:	fba2 2303 	umull	r2, r3, r2, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	011c      	lsls	r4, r3, #4
 8002e3c:	f7ff f9a2 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	009a      	lsls	r2, r3, #2
 8002e4a:	441a      	add	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e56:	f7ff f995 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009a      	lsls	r2, r3, #2
 8002e64:	441a      	add	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	4a21      	ldr	r2, [pc, #132]	; (8002ef8 <UART_SetConfig+0x410>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2264      	movs	r2, #100	; 0x64
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
 8002e7e:	1aeb      	subs	r3, r5, r3
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	3332      	adds	r3, #50	; 0x32
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <UART_SetConfig+0x410>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e90:	441c      	add	r4, r3
 8002e92:	f7ff f977 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002e96:	4602      	mov	r2, r0
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009a      	lsls	r2, r3, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	fbb2 f5f3 	udiv	r5, r2, r3
 8002eac:	f7ff f96a 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009a      	lsls	r2, r3, #2
 8002eba:	441a      	add	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <UART_SetConfig+0x410>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	2264      	movs	r2, #100	; 0x64
 8002ed0:	fb02 f303 	mul.w	r3, r2, r3
 8002ed4:	1aeb      	subs	r3, r5, r3
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	3332      	adds	r3, #50	; 0x32
 8002eda:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <UART_SetConfig+0x410>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	f003 020f 	and.w	r2, r3, #15
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4422      	add	r2, r4
 8002eec:	609a      	str	r2, [r3, #8]
}
 8002eee:	e7ff      	b.n	8002ef0 <UART_SetConfig+0x408>
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ef8:	51eb851f 	.word	0x51eb851f

08002efc <__errno>:
 8002efc:	4b01      	ldr	r3, [pc, #4]	; (8002f04 <__errno+0x8>)
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000008 	.word	0x20000008

08002f08 <__libc_init_array>:
 8002f08:	b570      	push	{r4, r5, r6, lr}
 8002f0a:	4e0d      	ldr	r6, [pc, #52]	; (8002f40 <__libc_init_array+0x38>)
 8002f0c:	4c0d      	ldr	r4, [pc, #52]	; (8002f44 <__libc_init_array+0x3c>)
 8002f0e:	1ba4      	subs	r4, r4, r6
 8002f10:	10a4      	asrs	r4, r4, #2
 8002f12:	2500      	movs	r5, #0
 8002f14:	42a5      	cmp	r5, r4
 8002f16:	d109      	bne.n	8002f2c <__libc_init_array+0x24>
 8002f18:	4e0b      	ldr	r6, [pc, #44]	; (8002f48 <__libc_init_array+0x40>)
 8002f1a:	4c0c      	ldr	r4, [pc, #48]	; (8002f4c <__libc_init_array+0x44>)
 8002f1c:	f000 fbca 	bl	80036b4 <_init>
 8002f20:	1ba4      	subs	r4, r4, r6
 8002f22:	10a4      	asrs	r4, r4, #2
 8002f24:	2500      	movs	r5, #0
 8002f26:	42a5      	cmp	r5, r4
 8002f28:	d105      	bne.n	8002f36 <__libc_init_array+0x2e>
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
 8002f2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f30:	4798      	blx	r3
 8002f32:	3501      	adds	r5, #1
 8002f34:	e7ee      	b.n	8002f14 <__libc_init_array+0xc>
 8002f36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f3a:	4798      	blx	r3
 8002f3c:	3501      	adds	r5, #1
 8002f3e:	e7f2      	b.n	8002f26 <__libc_init_array+0x1e>
 8002f40:	08003778 	.word	0x08003778
 8002f44:	08003778 	.word	0x08003778
 8002f48:	08003778 	.word	0x08003778
 8002f4c:	0800377c 	.word	0x0800377c

08002f50 <memset>:
 8002f50:	4402      	add	r2, r0
 8002f52:	4603      	mov	r3, r0
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d100      	bne.n	8002f5a <memset+0xa>
 8002f58:	4770      	bx	lr
 8002f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f5e:	e7f9      	b.n	8002f54 <memset+0x4>

08002f60 <setvbuf>:
 8002f60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002f64:	461d      	mov	r5, r3
 8002f66:	4b51      	ldr	r3, [pc, #324]	; (80030ac <setvbuf+0x14c>)
 8002f68:	681e      	ldr	r6, [r3, #0]
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	460f      	mov	r7, r1
 8002f6e:	4690      	mov	r8, r2
 8002f70:	b126      	cbz	r6, 8002f7c <setvbuf+0x1c>
 8002f72:	69b3      	ldr	r3, [r6, #24]
 8002f74:	b913      	cbnz	r3, 8002f7c <setvbuf+0x1c>
 8002f76:	4630      	mov	r0, r6
 8002f78:	f000 f990 	bl	800329c <__sinit>
 8002f7c:	4b4c      	ldr	r3, [pc, #304]	; (80030b0 <setvbuf+0x150>)
 8002f7e:	429c      	cmp	r4, r3
 8002f80:	d152      	bne.n	8003028 <setvbuf+0xc8>
 8002f82:	6874      	ldr	r4, [r6, #4]
 8002f84:	f1b8 0f02 	cmp.w	r8, #2
 8002f88:	d006      	beq.n	8002f98 <setvbuf+0x38>
 8002f8a:	f1b8 0f01 	cmp.w	r8, #1
 8002f8e:	f200 8089 	bhi.w	80030a4 <setvbuf+0x144>
 8002f92:	2d00      	cmp	r5, #0
 8002f94:	f2c0 8086 	blt.w	80030a4 <setvbuf+0x144>
 8002f98:	4621      	mov	r1, r4
 8002f9a:	4630      	mov	r0, r6
 8002f9c:	f000 f914 	bl	80031c8 <_fflush_r>
 8002fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fa2:	b141      	cbz	r1, 8002fb6 <setvbuf+0x56>
 8002fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fa8:	4299      	cmp	r1, r3
 8002faa:	d002      	beq.n	8002fb2 <setvbuf+0x52>
 8002fac:	4630      	mov	r0, r6
 8002fae:	f000 fa2b 	bl	8003408 <_free_r>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61a3      	str	r3, [r4, #24]
 8002fba:	6063      	str	r3, [r4, #4]
 8002fbc:	89a3      	ldrh	r3, [r4, #12]
 8002fbe:	061b      	lsls	r3, r3, #24
 8002fc0:	d503      	bpl.n	8002fca <setvbuf+0x6a>
 8002fc2:	6921      	ldr	r1, [r4, #16]
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	f000 fa1f 	bl	8003408 <_free_r>
 8002fca:	89a3      	ldrh	r3, [r4, #12]
 8002fcc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002fd0:	f023 0303 	bic.w	r3, r3, #3
 8002fd4:	f1b8 0f02 	cmp.w	r8, #2
 8002fd8:	81a3      	strh	r3, [r4, #12]
 8002fda:	d05d      	beq.n	8003098 <setvbuf+0x138>
 8002fdc:	ab01      	add	r3, sp, #4
 8002fde:	466a      	mov	r2, sp
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	f000 f9e4 	bl	80033b0 <__swhatbuf_r>
 8002fe8:	89a3      	ldrh	r3, [r4, #12]
 8002fea:	4318      	orrs	r0, r3
 8002fec:	81a0      	strh	r0, [r4, #12]
 8002fee:	bb2d      	cbnz	r5, 800303c <setvbuf+0xdc>
 8002ff0:	9d00      	ldr	r5, [sp, #0]
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	f000 fa00 	bl	80033f8 <malloc>
 8002ff8:	4607      	mov	r7, r0
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	d14e      	bne.n	800309c <setvbuf+0x13c>
 8002ffe:	f8dd 9000 	ldr.w	r9, [sp]
 8003002:	45a9      	cmp	r9, r5
 8003004:	d13c      	bne.n	8003080 <setvbuf+0x120>
 8003006:	f04f 30ff 	mov.w	r0, #4294967295
 800300a:	89a3      	ldrh	r3, [r4, #12]
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	81a3      	strh	r3, [r4, #12]
 8003012:	2300      	movs	r3, #0
 8003014:	60a3      	str	r3, [r4, #8]
 8003016:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800301a:	6023      	str	r3, [r4, #0]
 800301c:	6123      	str	r3, [r4, #16]
 800301e:	2301      	movs	r3, #1
 8003020:	6163      	str	r3, [r4, #20]
 8003022:	b003      	add	sp, #12
 8003024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003028:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <setvbuf+0x154>)
 800302a:	429c      	cmp	r4, r3
 800302c:	d101      	bne.n	8003032 <setvbuf+0xd2>
 800302e:	68b4      	ldr	r4, [r6, #8]
 8003030:	e7a8      	b.n	8002f84 <setvbuf+0x24>
 8003032:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <setvbuf+0x158>)
 8003034:	429c      	cmp	r4, r3
 8003036:	bf08      	it	eq
 8003038:	68f4      	ldreq	r4, [r6, #12]
 800303a:	e7a3      	b.n	8002f84 <setvbuf+0x24>
 800303c:	2f00      	cmp	r7, #0
 800303e:	d0d8      	beq.n	8002ff2 <setvbuf+0x92>
 8003040:	69b3      	ldr	r3, [r6, #24]
 8003042:	b913      	cbnz	r3, 800304a <setvbuf+0xea>
 8003044:	4630      	mov	r0, r6
 8003046:	f000 f929 	bl	800329c <__sinit>
 800304a:	f1b8 0f01 	cmp.w	r8, #1
 800304e:	bf08      	it	eq
 8003050:	89a3      	ldrheq	r3, [r4, #12]
 8003052:	6027      	str	r7, [r4, #0]
 8003054:	bf04      	itt	eq
 8003056:	f043 0301 	orreq.w	r3, r3, #1
 800305a:	81a3      	strheq	r3, [r4, #12]
 800305c:	89a3      	ldrh	r3, [r4, #12]
 800305e:	f013 0008 	ands.w	r0, r3, #8
 8003062:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8003066:	d01b      	beq.n	80030a0 <setvbuf+0x140>
 8003068:	f013 0001 	ands.w	r0, r3, #1
 800306c:	bf18      	it	ne
 800306e:	426d      	negne	r5, r5
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	bf1d      	ittte	ne
 8003076:	60a3      	strne	r3, [r4, #8]
 8003078:	61a5      	strne	r5, [r4, #24]
 800307a:	4618      	movne	r0, r3
 800307c:	60a5      	streq	r5, [r4, #8]
 800307e:	e7d0      	b.n	8003022 <setvbuf+0xc2>
 8003080:	4648      	mov	r0, r9
 8003082:	f000 f9b9 	bl	80033f8 <malloc>
 8003086:	4607      	mov	r7, r0
 8003088:	2800      	cmp	r0, #0
 800308a:	d0bc      	beq.n	8003006 <setvbuf+0xa6>
 800308c:	89a3      	ldrh	r3, [r4, #12]
 800308e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003092:	81a3      	strh	r3, [r4, #12]
 8003094:	464d      	mov	r5, r9
 8003096:	e7d3      	b.n	8003040 <setvbuf+0xe0>
 8003098:	2000      	movs	r0, #0
 800309a:	e7b6      	b.n	800300a <setvbuf+0xaa>
 800309c:	46a9      	mov	r9, r5
 800309e:	e7f5      	b.n	800308c <setvbuf+0x12c>
 80030a0:	60a0      	str	r0, [r4, #8]
 80030a2:	e7be      	b.n	8003022 <setvbuf+0xc2>
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	e7bb      	b.n	8003022 <setvbuf+0xc2>
 80030aa:	bf00      	nop
 80030ac:	20000008 	.word	0x20000008
 80030b0:	08003730 	.word	0x08003730
 80030b4:	08003750 	.word	0x08003750
 80030b8:	08003710 	.word	0x08003710

080030bc <__sflush_r>:
 80030bc:	898a      	ldrh	r2, [r1, #12]
 80030be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030c2:	4605      	mov	r5, r0
 80030c4:	0710      	lsls	r0, r2, #28
 80030c6:	460c      	mov	r4, r1
 80030c8:	d458      	bmi.n	800317c <__sflush_r+0xc0>
 80030ca:	684b      	ldr	r3, [r1, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	dc05      	bgt.n	80030dc <__sflush_r+0x20>
 80030d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	dc02      	bgt.n	80030dc <__sflush_r+0x20>
 80030d6:	2000      	movs	r0, #0
 80030d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030de:	2e00      	cmp	r6, #0
 80030e0:	d0f9      	beq.n	80030d6 <__sflush_r+0x1a>
 80030e2:	2300      	movs	r3, #0
 80030e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030e8:	682f      	ldr	r7, [r5, #0]
 80030ea:	6a21      	ldr	r1, [r4, #32]
 80030ec:	602b      	str	r3, [r5, #0]
 80030ee:	d032      	beq.n	8003156 <__sflush_r+0x9a>
 80030f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030f2:	89a3      	ldrh	r3, [r4, #12]
 80030f4:	075a      	lsls	r2, r3, #29
 80030f6:	d505      	bpl.n	8003104 <__sflush_r+0x48>
 80030f8:	6863      	ldr	r3, [r4, #4]
 80030fa:	1ac0      	subs	r0, r0, r3
 80030fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030fe:	b10b      	cbz	r3, 8003104 <__sflush_r+0x48>
 8003100:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003102:	1ac0      	subs	r0, r0, r3
 8003104:	2300      	movs	r3, #0
 8003106:	4602      	mov	r2, r0
 8003108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800310a:	6a21      	ldr	r1, [r4, #32]
 800310c:	4628      	mov	r0, r5
 800310e:	47b0      	blx	r6
 8003110:	1c43      	adds	r3, r0, #1
 8003112:	89a3      	ldrh	r3, [r4, #12]
 8003114:	d106      	bne.n	8003124 <__sflush_r+0x68>
 8003116:	6829      	ldr	r1, [r5, #0]
 8003118:	291d      	cmp	r1, #29
 800311a:	d848      	bhi.n	80031ae <__sflush_r+0xf2>
 800311c:	4a29      	ldr	r2, [pc, #164]	; (80031c4 <__sflush_r+0x108>)
 800311e:	40ca      	lsrs	r2, r1
 8003120:	07d6      	lsls	r6, r2, #31
 8003122:	d544      	bpl.n	80031ae <__sflush_r+0xf2>
 8003124:	2200      	movs	r2, #0
 8003126:	6062      	str	r2, [r4, #4]
 8003128:	04d9      	lsls	r1, r3, #19
 800312a:	6922      	ldr	r2, [r4, #16]
 800312c:	6022      	str	r2, [r4, #0]
 800312e:	d504      	bpl.n	800313a <__sflush_r+0x7e>
 8003130:	1c42      	adds	r2, r0, #1
 8003132:	d101      	bne.n	8003138 <__sflush_r+0x7c>
 8003134:	682b      	ldr	r3, [r5, #0]
 8003136:	b903      	cbnz	r3, 800313a <__sflush_r+0x7e>
 8003138:	6560      	str	r0, [r4, #84]	; 0x54
 800313a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800313c:	602f      	str	r7, [r5, #0]
 800313e:	2900      	cmp	r1, #0
 8003140:	d0c9      	beq.n	80030d6 <__sflush_r+0x1a>
 8003142:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003146:	4299      	cmp	r1, r3
 8003148:	d002      	beq.n	8003150 <__sflush_r+0x94>
 800314a:	4628      	mov	r0, r5
 800314c:	f000 f95c 	bl	8003408 <_free_r>
 8003150:	2000      	movs	r0, #0
 8003152:	6360      	str	r0, [r4, #52]	; 0x34
 8003154:	e7c0      	b.n	80030d8 <__sflush_r+0x1c>
 8003156:	2301      	movs	r3, #1
 8003158:	4628      	mov	r0, r5
 800315a:	47b0      	blx	r6
 800315c:	1c41      	adds	r1, r0, #1
 800315e:	d1c8      	bne.n	80030f2 <__sflush_r+0x36>
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0c5      	beq.n	80030f2 <__sflush_r+0x36>
 8003166:	2b1d      	cmp	r3, #29
 8003168:	d001      	beq.n	800316e <__sflush_r+0xb2>
 800316a:	2b16      	cmp	r3, #22
 800316c:	d101      	bne.n	8003172 <__sflush_r+0xb6>
 800316e:	602f      	str	r7, [r5, #0]
 8003170:	e7b1      	b.n	80030d6 <__sflush_r+0x1a>
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003178:	81a3      	strh	r3, [r4, #12]
 800317a:	e7ad      	b.n	80030d8 <__sflush_r+0x1c>
 800317c:	690f      	ldr	r7, [r1, #16]
 800317e:	2f00      	cmp	r7, #0
 8003180:	d0a9      	beq.n	80030d6 <__sflush_r+0x1a>
 8003182:	0793      	lsls	r3, r2, #30
 8003184:	680e      	ldr	r6, [r1, #0]
 8003186:	bf08      	it	eq
 8003188:	694b      	ldreq	r3, [r1, #20]
 800318a:	600f      	str	r7, [r1, #0]
 800318c:	bf18      	it	ne
 800318e:	2300      	movne	r3, #0
 8003190:	eba6 0807 	sub.w	r8, r6, r7
 8003194:	608b      	str	r3, [r1, #8]
 8003196:	f1b8 0f00 	cmp.w	r8, #0
 800319a:	dd9c      	ble.n	80030d6 <__sflush_r+0x1a>
 800319c:	4643      	mov	r3, r8
 800319e:	463a      	mov	r2, r7
 80031a0:	6a21      	ldr	r1, [r4, #32]
 80031a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031a4:	4628      	mov	r0, r5
 80031a6:	47b0      	blx	r6
 80031a8:	2800      	cmp	r0, #0
 80031aa:	dc06      	bgt.n	80031ba <__sflush_r+0xfe>
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031b2:	81a3      	strh	r3, [r4, #12]
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	e78e      	b.n	80030d8 <__sflush_r+0x1c>
 80031ba:	4407      	add	r7, r0
 80031bc:	eba8 0800 	sub.w	r8, r8, r0
 80031c0:	e7e9      	b.n	8003196 <__sflush_r+0xda>
 80031c2:	bf00      	nop
 80031c4:	20400001 	.word	0x20400001

080031c8 <_fflush_r>:
 80031c8:	b538      	push	{r3, r4, r5, lr}
 80031ca:	690b      	ldr	r3, [r1, #16]
 80031cc:	4605      	mov	r5, r0
 80031ce:	460c      	mov	r4, r1
 80031d0:	b1db      	cbz	r3, 800320a <_fflush_r+0x42>
 80031d2:	b118      	cbz	r0, 80031dc <_fflush_r+0x14>
 80031d4:	6983      	ldr	r3, [r0, #24]
 80031d6:	b90b      	cbnz	r3, 80031dc <_fflush_r+0x14>
 80031d8:	f000 f860 	bl	800329c <__sinit>
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <_fflush_r+0x48>)
 80031de:	429c      	cmp	r4, r3
 80031e0:	d109      	bne.n	80031f6 <_fflush_r+0x2e>
 80031e2:	686c      	ldr	r4, [r5, #4]
 80031e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031e8:	b17b      	cbz	r3, 800320a <_fflush_r+0x42>
 80031ea:	4621      	mov	r1, r4
 80031ec:	4628      	mov	r0, r5
 80031ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031f2:	f7ff bf63 	b.w	80030bc <__sflush_r>
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <_fflush_r+0x4c>)
 80031f8:	429c      	cmp	r4, r3
 80031fa:	d101      	bne.n	8003200 <_fflush_r+0x38>
 80031fc:	68ac      	ldr	r4, [r5, #8]
 80031fe:	e7f1      	b.n	80031e4 <_fflush_r+0x1c>
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <_fflush_r+0x50>)
 8003202:	429c      	cmp	r4, r3
 8003204:	bf08      	it	eq
 8003206:	68ec      	ldreq	r4, [r5, #12]
 8003208:	e7ec      	b.n	80031e4 <_fflush_r+0x1c>
 800320a:	2000      	movs	r0, #0
 800320c:	bd38      	pop	{r3, r4, r5, pc}
 800320e:	bf00      	nop
 8003210:	08003730 	.word	0x08003730
 8003214:	08003750 	.word	0x08003750
 8003218:	08003710 	.word	0x08003710

0800321c <std>:
 800321c:	2300      	movs	r3, #0
 800321e:	b510      	push	{r4, lr}
 8003220:	4604      	mov	r4, r0
 8003222:	e9c0 3300 	strd	r3, r3, [r0]
 8003226:	6083      	str	r3, [r0, #8]
 8003228:	8181      	strh	r1, [r0, #12]
 800322a:	6643      	str	r3, [r0, #100]	; 0x64
 800322c:	81c2      	strh	r2, [r0, #14]
 800322e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003232:	6183      	str	r3, [r0, #24]
 8003234:	4619      	mov	r1, r3
 8003236:	2208      	movs	r2, #8
 8003238:	305c      	adds	r0, #92	; 0x5c
 800323a:	f7ff fe89 	bl	8002f50 <memset>
 800323e:	4b05      	ldr	r3, [pc, #20]	; (8003254 <std+0x38>)
 8003240:	6263      	str	r3, [r4, #36]	; 0x24
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <std+0x3c>)
 8003244:	62a3      	str	r3, [r4, #40]	; 0x28
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <std+0x40>)
 8003248:	62e3      	str	r3, [r4, #44]	; 0x2c
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <std+0x44>)
 800324c:	6224      	str	r4, [r4, #32]
 800324e:	6323      	str	r3, [r4, #48]	; 0x30
 8003250:	bd10      	pop	{r4, pc}
 8003252:	bf00      	nop
 8003254:	08003579 	.word	0x08003579
 8003258:	0800359b 	.word	0x0800359b
 800325c:	080035d3 	.word	0x080035d3
 8003260:	080035f7 	.word	0x080035f7

08003264 <_cleanup_r>:
 8003264:	4901      	ldr	r1, [pc, #4]	; (800326c <_cleanup_r+0x8>)
 8003266:	f000 b885 	b.w	8003374 <_fwalk_reent>
 800326a:	bf00      	nop
 800326c:	080031c9 	.word	0x080031c9

08003270 <__sfmoreglue>:
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	1e4a      	subs	r2, r1, #1
 8003274:	2568      	movs	r5, #104	; 0x68
 8003276:	4355      	muls	r5, r2
 8003278:	460e      	mov	r6, r1
 800327a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800327e:	f000 f911 	bl	80034a4 <_malloc_r>
 8003282:	4604      	mov	r4, r0
 8003284:	b140      	cbz	r0, 8003298 <__sfmoreglue+0x28>
 8003286:	2100      	movs	r1, #0
 8003288:	e9c0 1600 	strd	r1, r6, [r0]
 800328c:	300c      	adds	r0, #12
 800328e:	60a0      	str	r0, [r4, #8]
 8003290:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003294:	f7ff fe5c 	bl	8002f50 <memset>
 8003298:	4620      	mov	r0, r4
 800329a:	bd70      	pop	{r4, r5, r6, pc}

0800329c <__sinit>:
 800329c:	6983      	ldr	r3, [r0, #24]
 800329e:	b510      	push	{r4, lr}
 80032a0:	4604      	mov	r4, r0
 80032a2:	bb33      	cbnz	r3, 80032f2 <__sinit+0x56>
 80032a4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80032a8:	6503      	str	r3, [r0, #80]	; 0x50
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <__sinit+0x58>)
 80032ac:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <__sinit+0x5c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6282      	str	r2, [r0, #40]	; 0x28
 80032b2:	4298      	cmp	r0, r3
 80032b4:	bf04      	itt	eq
 80032b6:	2301      	moveq	r3, #1
 80032b8:	6183      	streq	r3, [r0, #24]
 80032ba:	f000 f81f 	bl	80032fc <__sfp>
 80032be:	6060      	str	r0, [r4, #4]
 80032c0:	4620      	mov	r0, r4
 80032c2:	f000 f81b 	bl	80032fc <__sfp>
 80032c6:	60a0      	str	r0, [r4, #8]
 80032c8:	4620      	mov	r0, r4
 80032ca:	f000 f817 	bl	80032fc <__sfp>
 80032ce:	2200      	movs	r2, #0
 80032d0:	60e0      	str	r0, [r4, #12]
 80032d2:	2104      	movs	r1, #4
 80032d4:	6860      	ldr	r0, [r4, #4]
 80032d6:	f7ff ffa1 	bl	800321c <std>
 80032da:	2201      	movs	r2, #1
 80032dc:	2109      	movs	r1, #9
 80032de:	68a0      	ldr	r0, [r4, #8]
 80032e0:	f7ff ff9c 	bl	800321c <std>
 80032e4:	2202      	movs	r2, #2
 80032e6:	2112      	movs	r1, #18
 80032e8:	68e0      	ldr	r0, [r4, #12]
 80032ea:	f7ff ff97 	bl	800321c <std>
 80032ee:	2301      	movs	r3, #1
 80032f0:	61a3      	str	r3, [r4, #24]
 80032f2:	bd10      	pop	{r4, pc}
 80032f4:	0800370c 	.word	0x0800370c
 80032f8:	08003265 	.word	0x08003265

080032fc <__sfp>:
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fe:	4b1b      	ldr	r3, [pc, #108]	; (800336c <__sfp+0x70>)
 8003300:	681e      	ldr	r6, [r3, #0]
 8003302:	69b3      	ldr	r3, [r6, #24]
 8003304:	4607      	mov	r7, r0
 8003306:	b913      	cbnz	r3, 800330e <__sfp+0x12>
 8003308:	4630      	mov	r0, r6
 800330a:	f7ff ffc7 	bl	800329c <__sinit>
 800330e:	3648      	adds	r6, #72	; 0x48
 8003310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003314:	3b01      	subs	r3, #1
 8003316:	d503      	bpl.n	8003320 <__sfp+0x24>
 8003318:	6833      	ldr	r3, [r6, #0]
 800331a:	b133      	cbz	r3, 800332a <__sfp+0x2e>
 800331c:	6836      	ldr	r6, [r6, #0]
 800331e:	e7f7      	b.n	8003310 <__sfp+0x14>
 8003320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003324:	b16d      	cbz	r5, 8003342 <__sfp+0x46>
 8003326:	3468      	adds	r4, #104	; 0x68
 8003328:	e7f4      	b.n	8003314 <__sfp+0x18>
 800332a:	2104      	movs	r1, #4
 800332c:	4638      	mov	r0, r7
 800332e:	f7ff ff9f 	bl	8003270 <__sfmoreglue>
 8003332:	6030      	str	r0, [r6, #0]
 8003334:	2800      	cmp	r0, #0
 8003336:	d1f1      	bne.n	800331c <__sfp+0x20>
 8003338:	230c      	movs	r3, #12
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	4604      	mov	r4, r0
 800333e:	4620      	mov	r0, r4
 8003340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <__sfp+0x74>)
 8003344:	6665      	str	r5, [r4, #100]	; 0x64
 8003346:	e9c4 5500 	strd	r5, r5, [r4]
 800334a:	60a5      	str	r5, [r4, #8]
 800334c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003350:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003354:	2208      	movs	r2, #8
 8003356:	4629      	mov	r1, r5
 8003358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800335c:	f7ff fdf8 	bl	8002f50 <memset>
 8003360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003368:	e7e9      	b.n	800333e <__sfp+0x42>
 800336a:	bf00      	nop
 800336c:	0800370c 	.word	0x0800370c
 8003370:	ffff0001 	.word	0xffff0001

08003374 <_fwalk_reent>:
 8003374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003378:	4680      	mov	r8, r0
 800337a:	4689      	mov	r9, r1
 800337c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003380:	2600      	movs	r6, #0
 8003382:	b914      	cbnz	r4, 800338a <_fwalk_reent+0x16>
 8003384:	4630      	mov	r0, r6
 8003386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800338a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800338e:	3f01      	subs	r7, #1
 8003390:	d501      	bpl.n	8003396 <_fwalk_reent+0x22>
 8003392:	6824      	ldr	r4, [r4, #0]
 8003394:	e7f5      	b.n	8003382 <_fwalk_reent+0xe>
 8003396:	89ab      	ldrh	r3, [r5, #12]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d907      	bls.n	80033ac <_fwalk_reent+0x38>
 800339c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033a0:	3301      	adds	r3, #1
 80033a2:	d003      	beq.n	80033ac <_fwalk_reent+0x38>
 80033a4:	4629      	mov	r1, r5
 80033a6:	4640      	mov	r0, r8
 80033a8:	47c8      	blx	r9
 80033aa:	4306      	orrs	r6, r0
 80033ac:	3568      	adds	r5, #104	; 0x68
 80033ae:	e7ee      	b.n	800338e <_fwalk_reent+0x1a>

080033b0 <__swhatbuf_r>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	460e      	mov	r6, r1
 80033b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033b8:	2900      	cmp	r1, #0
 80033ba:	b096      	sub	sp, #88	; 0x58
 80033bc:	4614      	mov	r4, r2
 80033be:	461d      	mov	r5, r3
 80033c0:	da07      	bge.n	80033d2 <__swhatbuf_r+0x22>
 80033c2:	2300      	movs	r3, #0
 80033c4:	602b      	str	r3, [r5, #0]
 80033c6:	89b3      	ldrh	r3, [r6, #12]
 80033c8:	061a      	lsls	r2, r3, #24
 80033ca:	d410      	bmi.n	80033ee <__swhatbuf_r+0x3e>
 80033cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033d0:	e00e      	b.n	80033f0 <__swhatbuf_r+0x40>
 80033d2:	466a      	mov	r2, sp
 80033d4:	f000 f936 	bl	8003644 <_fstat_r>
 80033d8:	2800      	cmp	r0, #0
 80033da:	dbf2      	blt.n	80033c2 <__swhatbuf_r+0x12>
 80033dc:	9a01      	ldr	r2, [sp, #4]
 80033de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033e6:	425a      	negs	r2, r3
 80033e8:	415a      	adcs	r2, r3
 80033ea:	602a      	str	r2, [r5, #0]
 80033ec:	e7ee      	b.n	80033cc <__swhatbuf_r+0x1c>
 80033ee:	2340      	movs	r3, #64	; 0x40
 80033f0:	2000      	movs	r0, #0
 80033f2:	6023      	str	r3, [r4, #0]
 80033f4:	b016      	add	sp, #88	; 0x58
 80033f6:	bd70      	pop	{r4, r5, r6, pc}

080033f8 <malloc>:
 80033f8:	4b02      	ldr	r3, [pc, #8]	; (8003404 <malloc+0xc>)
 80033fa:	4601      	mov	r1, r0
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	f000 b851 	b.w	80034a4 <_malloc_r>
 8003402:	bf00      	nop
 8003404:	20000008 	.word	0x20000008

08003408 <_free_r>:
 8003408:	b538      	push	{r3, r4, r5, lr}
 800340a:	4605      	mov	r5, r0
 800340c:	2900      	cmp	r1, #0
 800340e:	d045      	beq.n	800349c <_free_r+0x94>
 8003410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003414:	1f0c      	subs	r4, r1, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	bfb8      	it	lt
 800341a:	18e4      	addlt	r4, r4, r3
 800341c:	f000 f936 	bl	800368c <__malloc_lock>
 8003420:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <_free_r+0x98>)
 8003422:	6813      	ldr	r3, [r2, #0]
 8003424:	4610      	mov	r0, r2
 8003426:	b933      	cbnz	r3, 8003436 <_free_r+0x2e>
 8003428:	6063      	str	r3, [r4, #4]
 800342a:	6014      	str	r4, [r2, #0]
 800342c:	4628      	mov	r0, r5
 800342e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003432:	f000 b92c 	b.w	800368e <__malloc_unlock>
 8003436:	42a3      	cmp	r3, r4
 8003438:	d90c      	bls.n	8003454 <_free_r+0x4c>
 800343a:	6821      	ldr	r1, [r4, #0]
 800343c:	1862      	adds	r2, r4, r1
 800343e:	4293      	cmp	r3, r2
 8003440:	bf04      	itt	eq
 8003442:	681a      	ldreq	r2, [r3, #0]
 8003444:	685b      	ldreq	r3, [r3, #4]
 8003446:	6063      	str	r3, [r4, #4]
 8003448:	bf04      	itt	eq
 800344a:	1852      	addeq	r2, r2, r1
 800344c:	6022      	streq	r2, [r4, #0]
 800344e:	6004      	str	r4, [r0, #0]
 8003450:	e7ec      	b.n	800342c <_free_r+0x24>
 8003452:	4613      	mov	r3, r2
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	b10a      	cbz	r2, 800345c <_free_r+0x54>
 8003458:	42a2      	cmp	r2, r4
 800345a:	d9fa      	bls.n	8003452 <_free_r+0x4a>
 800345c:	6819      	ldr	r1, [r3, #0]
 800345e:	1858      	adds	r0, r3, r1
 8003460:	42a0      	cmp	r0, r4
 8003462:	d10b      	bne.n	800347c <_free_r+0x74>
 8003464:	6820      	ldr	r0, [r4, #0]
 8003466:	4401      	add	r1, r0
 8003468:	1858      	adds	r0, r3, r1
 800346a:	4282      	cmp	r2, r0
 800346c:	6019      	str	r1, [r3, #0]
 800346e:	d1dd      	bne.n	800342c <_free_r+0x24>
 8003470:	6810      	ldr	r0, [r2, #0]
 8003472:	6852      	ldr	r2, [r2, #4]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	4401      	add	r1, r0
 8003478:	6019      	str	r1, [r3, #0]
 800347a:	e7d7      	b.n	800342c <_free_r+0x24>
 800347c:	d902      	bls.n	8003484 <_free_r+0x7c>
 800347e:	230c      	movs	r3, #12
 8003480:	602b      	str	r3, [r5, #0]
 8003482:	e7d3      	b.n	800342c <_free_r+0x24>
 8003484:	6820      	ldr	r0, [r4, #0]
 8003486:	1821      	adds	r1, r4, r0
 8003488:	428a      	cmp	r2, r1
 800348a:	bf04      	itt	eq
 800348c:	6811      	ldreq	r1, [r2, #0]
 800348e:	6852      	ldreq	r2, [r2, #4]
 8003490:	6062      	str	r2, [r4, #4]
 8003492:	bf04      	itt	eq
 8003494:	1809      	addeq	r1, r1, r0
 8003496:	6021      	streq	r1, [r4, #0]
 8003498:	605c      	str	r4, [r3, #4]
 800349a:	e7c7      	b.n	800342c <_free_r+0x24>
 800349c:	bd38      	pop	{r3, r4, r5, pc}
 800349e:	bf00      	nop
 80034a0:	2000008c 	.word	0x2000008c

080034a4 <_malloc_r>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	1ccd      	adds	r5, r1, #3
 80034a8:	f025 0503 	bic.w	r5, r5, #3
 80034ac:	3508      	adds	r5, #8
 80034ae:	2d0c      	cmp	r5, #12
 80034b0:	bf38      	it	cc
 80034b2:	250c      	movcc	r5, #12
 80034b4:	2d00      	cmp	r5, #0
 80034b6:	4606      	mov	r6, r0
 80034b8:	db01      	blt.n	80034be <_malloc_r+0x1a>
 80034ba:	42a9      	cmp	r1, r5
 80034bc:	d903      	bls.n	80034c6 <_malloc_r+0x22>
 80034be:	230c      	movs	r3, #12
 80034c0:	6033      	str	r3, [r6, #0]
 80034c2:	2000      	movs	r0, #0
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
 80034c6:	f000 f8e1 	bl	800368c <__malloc_lock>
 80034ca:	4a21      	ldr	r2, [pc, #132]	; (8003550 <_malloc_r+0xac>)
 80034cc:	6814      	ldr	r4, [r2, #0]
 80034ce:	4621      	mov	r1, r4
 80034d0:	b991      	cbnz	r1, 80034f8 <_malloc_r+0x54>
 80034d2:	4c20      	ldr	r4, [pc, #128]	; (8003554 <_malloc_r+0xb0>)
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	b91b      	cbnz	r3, 80034e0 <_malloc_r+0x3c>
 80034d8:	4630      	mov	r0, r6
 80034da:	f000 f83d 	bl	8003558 <_sbrk_r>
 80034de:	6020      	str	r0, [r4, #0]
 80034e0:	4629      	mov	r1, r5
 80034e2:	4630      	mov	r0, r6
 80034e4:	f000 f838 	bl	8003558 <_sbrk_r>
 80034e8:	1c43      	adds	r3, r0, #1
 80034ea:	d124      	bne.n	8003536 <_malloc_r+0x92>
 80034ec:	230c      	movs	r3, #12
 80034ee:	6033      	str	r3, [r6, #0]
 80034f0:	4630      	mov	r0, r6
 80034f2:	f000 f8cc 	bl	800368e <__malloc_unlock>
 80034f6:	e7e4      	b.n	80034c2 <_malloc_r+0x1e>
 80034f8:	680b      	ldr	r3, [r1, #0]
 80034fa:	1b5b      	subs	r3, r3, r5
 80034fc:	d418      	bmi.n	8003530 <_malloc_r+0x8c>
 80034fe:	2b0b      	cmp	r3, #11
 8003500:	d90f      	bls.n	8003522 <_malloc_r+0x7e>
 8003502:	600b      	str	r3, [r1, #0]
 8003504:	50cd      	str	r5, [r1, r3]
 8003506:	18cc      	adds	r4, r1, r3
 8003508:	4630      	mov	r0, r6
 800350a:	f000 f8c0 	bl	800368e <__malloc_unlock>
 800350e:	f104 000b 	add.w	r0, r4, #11
 8003512:	1d23      	adds	r3, r4, #4
 8003514:	f020 0007 	bic.w	r0, r0, #7
 8003518:	1ac3      	subs	r3, r0, r3
 800351a:	d0d3      	beq.n	80034c4 <_malloc_r+0x20>
 800351c:	425a      	negs	r2, r3
 800351e:	50e2      	str	r2, [r4, r3]
 8003520:	e7d0      	b.n	80034c4 <_malloc_r+0x20>
 8003522:	428c      	cmp	r4, r1
 8003524:	684b      	ldr	r3, [r1, #4]
 8003526:	bf16      	itet	ne
 8003528:	6063      	strne	r3, [r4, #4]
 800352a:	6013      	streq	r3, [r2, #0]
 800352c:	460c      	movne	r4, r1
 800352e:	e7eb      	b.n	8003508 <_malloc_r+0x64>
 8003530:	460c      	mov	r4, r1
 8003532:	6849      	ldr	r1, [r1, #4]
 8003534:	e7cc      	b.n	80034d0 <_malloc_r+0x2c>
 8003536:	1cc4      	adds	r4, r0, #3
 8003538:	f024 0403 	bic.w	r4, r4, #3
 800353c:	42a0      	cmp	r0, r4
 800353e:	d005      	beq.n	800354c <_malloc_r+0xa8>
 8003540:	1a21      	subs	r1, r4, r0
 8003542:	4630      	mov	r0, r6
 8003544:	f000 f808 	bl	8003558 <_sbrk_r>
 8003548:	3001      	adds	r0, #1
 800354a:	d0cf      	beq.n	80034ec <_malloc_r+0x48>
 800354c:	6025      	str	r5, [r4, #0]
 800354e:	e7db      	b.n	8003508 <_malloc_r+0x64>
 8003550:	2000008c 	.word	0x2000008c
 8003554:	20000090 	.word	0x20000090

08003558 <_sbrk_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	4c06      	ldr	r4, [pc, #24]	; (8003574 <_sbrk_r+0x1c>)
 800355c:	2300      	movs	r3, #0
 800355e:	4605      	mov	r5, r0
 8003560:	4608      	mov	r0, r1
 8003562:	6023      	str	r3, [r4, #0]
 8003564:	f7fd fd96 	bl	8001094 <_sbrk>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d102      	bne.n	8003572 <_sbrk_r+0x1a>
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	b103      	cbz	r3, 8003572 <_sbrk_r+0x1a>
 8003570:	602b      	str	r3, [r5, #0]
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	20000208 	.word	0x20000208

08003578 <__sread>:
 8003578:	b510      	push	{r4, lr}
 800357a:	460c      	mov	r4, r1
 800357c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003580:	f000 f886 	bl	8003690 <_read_r>
 8003584:	2800      	cmp	r0, #0
 8003586:	bfab      	itete	ge
 8003588:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800358a:	89a3      	ldrhlt	r3, [r4, #12]
 800358c:	181b      	addge	r3, r3, r0
 800358e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003592:	bfac      	ite	ge
 8003594:	6563      	strge	r3, [r4, #84]	; 0x54
 8003596:	81a3      	strhlt	r3, [r4, #12]
 8003598:	bd10      	pop	{r4, pc}

0800359a <__swrite>:
 800359a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800359e:	461f      	mov	r7, r3
 80035a0:	898b      	ldrh	r3, [r1, #12]
 80035a2:	05db      	lsls	r3, r3, #23
 80035a4:	4605      	mov	r5, r0
 80035a6:	460c      	mov	r4, r1
 80035a8:	4616      	mov	r6, r2
 80035aa:	d505      	bpl.n	80035b8 <__swrite+0x1e>
 80035ac:	2302      	movs	r3, #2
 80035ae:	2200      	movs	r2, #0
 80035b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b4:	f000 f858 	bl	8003668 <_lseek_r>
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035c2:	81a3      	strh	r3, [r4, #12]
 80035c4:	4632      	mov	r2, r6
 80035c6:	463b      	mov	r3, r7
 80035c8:	4628      	mov	r0, r5
 80035ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035ce:	f000 b817 	b.w	8003600 <_write_r>

080035d2 <__sseek>:
 80035d2:	b510      	push	{r4, lr}
 80035d4:	460c      	mov	r4, r1
 80035d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035da:	f000 f845 	bl	8003668 <_lseek_r>
 80035de:	1c43      	adds	r3, r0, #1
 80035e0:	89a3      	ldrh	r3, [r4, #12]
 80035e2:	bf15      	itete	ne
 80035e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80035e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035ee:	81a3      	strheq	r3, [r4, #12]
 80035f0:	bf18      	it	ne
 80035f2:	81a3      	strhne	r3, [r4, #12]
 80035f4:	bd10      	pop	{r4, pc}

080035f6 <__sclose>:
 80035f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035fa:	f000 b813 	b.w	8003624 <_close_r>
	...

08003600 <_write_r>:
 8003600:	b538      	push	{r3, r4, r5, lr}
 8003602:	4c07      	ldr	r4, [pc, #28]	; (8003620 <_write_r+0x20>)
 8003604:	4605      	mov	r5, r0
 8003606:	4608      	mov	r0, r1
 8003608:	4611      	mov	r1, r2
 800360a:	2200      	movs	r2, #0
 800360c:	6022      	str	r2, [r4, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	f7fd faa2 	bl	8000b58 <_write>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d102      	bne.n	800361e <_write_r+0x1e>
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	b103      	cbz	r3, 800361e <_write_r+0x1e>
 800361c:	602b      	str	r3, [r5, #0]
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	20000208 	.word	0x20000208

08003624 <_close_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	4c06      	ldr	r4, [pc, #24]	; (8003640 <_close_r+0x1c>)
 8003628:	2300      	movs	r3, #0
 800362a:	4605      	mov	r5, r0
 800362c:	4608      	mov	r0, r1
 800362e:	6023      	str	r3, [r4, #0]
 8003630:	f7fd fabe 	bl	8000bb0 <_close>
 8003634:	1c43      	adds	r3, r0, #1
 8003636:	d102      	bne.n	800363e <_close_r+0x1a>
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	b103      	cbz	r3, 800363e <_close_r+0x1a>
 800363c:	602b      	str	r3, [r5, #0]
 800363e:	bd38      	pop	{r3, r4, r5, pc}
 8003640:	20000208 	.word	0x20000208

08003644 <_fstat_r>:
 8003644:	b538      	push	{r3, r4, r5, lr}
 8003646:	4c07      	ldr	r4, [pc, #28]	; (8003664 <_fstat_r+0x20>)
 8003648:	2300      	movs	r3, #0
 800364a:	4605      	mov	r5, r0
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	6023      	str	r3, [r4, #0]
 8003652:	f7fd fafd 	bl	8000c50 <_fstat>
 8003656:	1c43      	adds	r3, r0, #1
 8003658:	d102      	bne.n	8003660 <_fstat_r+0x1c>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	b103      	cbz	r3, 8003660 <_fstat_r+0x1c>
 800365e:	602b      	str	r3, [r5, #0]
 8003660:	bd38      	pop	{r3, r4, r5, pc}
 8003662:	bf00      	nop
 8003664:	20000208 	.word	0x20000208

08003668 <_lseek_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4c07      	ldr	r4, [pc, #28]	; (8003688 <_lseek_r+0x20>)
 800366c:	4605      	mov	r5, r0
 800366e:	4608      	mov	r0, r1
 8003670:	4611      	mov	r1, r2
 8003672:	2200      	movs	r2, #0
 8003674:	6022      	str	r2, [r4, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	f7fd fab1 	bl	8000bde <_lseek>
 800367c:	1c43      	adds	r3, r0, #1
 800367e:	d102      	bne.n	8003686 <_lseek_r+0x1e>
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	b103      	cbz	r3, 8003686 <_lseek_r+0x1e>
 8003684:	602b      	str	r3, [r5, #0]
 8003686:	bd38      	pop	{r3, r4, r5, pc}
 8003688:	20000208 	.word	0x20000208

0800368c <__malloc_lock>:
 800368c:	4770      	bx	lr

0800368e <__malloc_unlock>:
 800368e:	4770      	bx	lr

08003690 <_read_r>:
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	4c07      	ldr	r4, [pc, #28]	; (80036b0 <_read_r+0x20>)
 8003694:	4605      	mov	r5, r0
 8003696:	4608      	mov	r0, r1
 8003698:	4611      	mov	r1, r2
 800369a:	2200      	movs	r2, #0
 800369c:	6022      	str	r2, [r4, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	f7fd faae 	bl	8000c00 <_read>
 80036a4:	1c43      	adds	r3, r0, #1
 80036a6:	d102      	bne.n	80036ae <_read_r+0x1e>
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	b103      	cbz	r3, 80036ae <_read_r+0x1e>
 80036ac:	602b      	str	r3, [r5, #0]
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	20000208 	.word	0x20000208

080036b4 <_init>:
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b6:	bf00      	nop
 80036b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ba:	bc08      	pop	{r3}
 80036bc:	469e      	mov	lr, r3
 80036be:	4770      	bx	lr

080036c0 <_fini>:
 80036c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c2:	bf00      	nop
 80036c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c6:	bc08      	pop	{r3}
 80036c8:	469e      	mov	lr, r3
 80036ca:	4770      	bx	lr
